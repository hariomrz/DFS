[{"/var/www/html/framework/frontend/src/index.js":"1","/var/www/html/framework/frontend/src/i18n.js":"2","/var/www/html/framework/frontend/src/serviceWorker.js":"3","/var/www/html/framework/frontend/src/App.jsx":"4","/var/www/html/framework/frontend/src/helper/Constants.js":"5","/var/www/html/framework/frontend/src/store.jsx":"6","/var/www/html/framework/frontend/src/InitialSetup/MyProvider.jsx":"7","/var/www/html/framework/frontend/src/views/NoNetwork/NoNetwork.jsx":"8","/var/www/html/framework/frontend/src/helper/AppLabels.jsx":"9","/var/www/html/framework/frontend/src/Utilities/Utilities.jsx":"10","/var/www/html/framework/frontend/src/redux/reducers/myReducer.js":"11","/var/www/html/framework/frontend/src/redux/actions/place.js":"12","/var/www/html/framework/frontend/src/helper/CustomLoader.jsx":"13","/var/www/html/framework/frontend/src/InitialSetup/Routing.jsx":"14","/var/www/html/framework/frontend/src/JsonFiles/Sports.jsx":"15","/var/www/html/framework/frontend/src/JsonFiles/index.js":"16","/var/www/html/framework/frontend/src/WSHelper/WSManager.jsx":"17","/var/www/html/framework/frontend/src/WSHelper/WSCallings.jsx":"18","/var/www/html/framework/frontend/src/components/images.jsx":"19","/var/www/html/framework/frontend/src/Component/CustomComponent/index.js":"20","/var/www/html/framework/frontend/src/InitialSetup/AppConfig.jsx":"21","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemShare.jsx":"22","/var/www/html/framework/frontend/src/WSHelper/WSConstants.jsx":"23","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPParticipants.jsx":"24","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ShareFPPOpenPredictor.jsx":"25","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorParticipants.jsx":"26","/var/www/html/framework/frontend/src/Component/CustomComponent/AdSenseComponent.jsx":"27","/var/www/html/framework/frontend/src/Component/CustomComponent/CircularProgressBar.jsx":"28","/var/www/html/framework/frontend/src/Component/CustomComponent/Toast.jsx":"29","/var/www/html/framework/frontend/src/Component/CustomComponent/TransactionList.jsx":"30","/var/www/html/framework/frontend/src/Component/CustomComponent/ShareReferal.jsx":"31","/var/www/html/framework/frontend/src/Component/CustomComponent/UserProfileHeader.jsx":"32","/var/www/html/framework/frontend/src/Component/CustomComponent/CustomComponents.jsx":"33","/var/www/html/framework/frontend/src/Component/CustomComponent/NoDataView.jsx":"34","/var/www/html/framework/frontend/src/Component/CustomComponent/YouRInQueue.jsx":"35","/var/www/html/framework/frontend/src/Component/CustomComponent/MatchInfo.jsx":"36","/var/www/html/framework/frontend/src/Component/CustomComponent/MatchCard.jsx":"37","/var/www/html/framework/frontend/src/Component/CustomComponent/SelectLanguage.jsx":"38","/var/www/html/framework/frontend/src/Component/CustomComponent/CustomPhoneInput.jsx":"39","/var/www/html/framework/frontend/src/views/CountDownTimer.jsx":"40","/var/www/html/framework/frontend/src/components/CustomHeader.jsx":"41","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ConfirmFPPOpenPredictor.jsx":"42","/var/www/html/framework/frontend/src/helper/MetaData.jsx":"43","/var/www/html/framework/frontend/src/views/Dashboard.jsx":"44","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemHTPModal.jsx":"45","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemConfirmModal.jsx":"46","/var/www/html/framework/frontend/src/Modals/LanguagePopup.jsx":"47","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ShareOpenPredictor.jsx":"48","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionParticipants.jsx":"49","/var/www/html/framework/frontend/src/Component/PredictionModule/SharePrediction.jsx":"50","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionContestList.jsx":"51","/var/www/html/framework/frontend/src/Component/CoinsModule/WhatIsNew.jsx":"52","/var/www/html/framework/frontend/src/Component/CoinsModule/EarnCoins.jsx":"53","/var/www/html/framework/frontend/src/Component/CoinsModule/FeedbackQA.jsx":"54","/var/www/html/framework/frontend/src/Component/CoinsModule/RedeemCoins.jsx":"55","/var/www/html/framework/frontend/src/views/SidePage.jsx":"56","/var/www/html/framework/frontend/src/components/DownloadAppScreen.jsx":"57","/var/www/html/framework/frontend/src/views/OrderHistory.jsx":"58","/var/www/html/framework/frontend/src/views/Partners.jsx":"59","/var/www/html/framework/frontend/src/views/ItemDetail.jsx":"60","/var/www/html/framework/frontend/src/views/Checkout.jsx":"61","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenSourceUrl.jsx":"62","/var/www/html/framework/frontend/src/helper/input-style.jsx":"63","/var/www/html/framework/frontend/src/Modals/MyAlert.jsx":"64","/var/www/html/framework/frontend/src/meta.jsx":"65","/var/www/html/framework/frontend/src/Component/SportsHub/SportsHub.jsx":"66","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemLeaderboard.jsx":"67","/var/www/html/framework/frontend/src/Component/BecomeAffiliate/index.js":"68","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/MyFPPOpenPredictors.jsx":"69","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictionFPPLeaderboard.jsx":"70","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPLobby.jsx":"71","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeaguaNavLeaderBoard.jsx":"72","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictionLeaderboard.jsx":"73","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorLobby.jsx":"74","/var/www/html/framework/frontend/src/Component/PredictionModule/MyPredictions.jsx":"75","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/MyOpenPredictors.jsx":"76","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionLobby.jsx":"77","/var/www/html/framework/frontend/src/views/ReferFriend.jsx":"78","/var/www/html/framework/frontend/src/views/Notification.jsx":"79","/var/www/html/framework/frontend/src/views/Lobby.jsx":"80","/var/www/html/framework/frontend/src/Component/Finance/MyWallet.jsx":"81","/var/www/html/framework/frontend/src/Component/Profile/MyProfile.jsx":"82","/var/www/html/framework/frontend/src/Modals/index.js":"83","/var/www/html/framework/frontend/src/Component/CoinsModule/index.js":"84","/var/www/html/framework/frontend/src/Component/SportsHub/index.js":"85","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/index.js":"86","/var/www/html/framework/frontend/src/Component/MultiGameModule/index.js":"87","/var/www/html/framework/frontend/src/views/More/index.js":"88","/var/www/html/framework/frontend/src/Component/MyContest/index.js":"89","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ConfirmOpenPredictor.jsx":"90","/var/www/html/framework/frontend/src/Component/PredictionModule/index.js":"91","/var/www/html/framework/frontend/src/Component/PredictionModule/SharePModal.jsx":"92","/var/www/html/framework/frontend/src/Component/PredictionModule/ConfirmPrediction.jsx":"93","/var/www/html/framework/frontend/src/Modals/DownloadAppModal.jsx":"94","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionCard.jsx":"95","/var/www/html/framework/frontend/src/components/filter.jsx":"96","/var/www/html/framework/frontend/src/Component/BecomeAffiliate/AffiliateProgram.jsx":"97","/var/www/html/framework/frontend/src/Component/BecomeAffiliate/BecomeAffiliateModal.jsx":"98","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPFixture.jsx":"99","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorFixture.jsx":"100","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionFixture.jsx":"101","/var/www/html/framework/frontend/src/views/FixtureContest.jsx":"102","/var/www/html/framework/frontend/src/Modals/DownloadAppBuyCoin.jsx":"103","/var/www/html/framework/frontend/src/Component/CoinsModule/RedeemSuccess.jsx":"104","/var/www/html/framework/frontend/src/Component/SportsHub/SHCoachMarks.jsx":"105","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LandingFreeToPlay.jsx":"106","/var/www/html/framework/frontend/src/Component/MultiGameModule/MultiGameFixtureContest.jsx":"107","/var/www/html/framework/frontend/src/Component/MultiGameModule/MultiGameContest.jsx":"108","/var/www/html/framework/frontend/src/Component/MultiGameModule/MultiGameLobby.jsx":"109","/var/www/html/framework/frontend/src/Component/MyContest/MyContest.jsx":"110","/var/www/html/framework/frontend/src/Component/MyContest/UpcomingContest.jsx":"111","/var/www/html/framework/frontend/src/Component/MyContest/LiveContest.jsx":"112","/var/www/html/framework/frontend/src/Component/MyContest/CompletedContest.jsx":"113","/var/www/html/framework/frontend/src/views/More/More.jsx":"114","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionLearnMore.jsx":"115","/var/www/html/framework/frontend/src/Component/PredictionModule/CompletedPredictions.jsx":"116","/var/www/html/framework/frontend/src/Component/PredictionModule/LivePredictions.jsx":"117","/var/www/html/framework/frontend/src/Component/PredictionModule/UpcomingPredictions.jsx":"118","/var/www/html/framework/frontend/src/Component/CustomComponent/Particles.jsx":"119","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/HowToPlayModal.jsx":"120","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/FreeToPlayLobby.jsx":"121","/var/www/html/framework/frontend/src/Modals/ContestDetail.jsx":"122","/var/www/html/framework/frontend/src/Modals/CollectionInfo.jsx":"123","/var/www/html/framework/frontend/src/views/FieldViewRight.jsx":"124","/var/www/html/framework/frontend/src/views/CollectionSlider.jsx":"125","/var/www/html/framework/frontend/src/Modals/Thankyou.jsx":"126","/var/www/html/framework/frontend/src/Modals/ConfirmationPopup.jsx":"127","/var/www/html/framework/frontend/src/Modals/SwitchTeamModal.jsx":"128","/var/www/html/framework/frontend/src/Modals/ShareContestModal.jsx":"129","/var/www/html/framework/frontend/src/Modals/MyContestTeamView.jsx":"130","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/FreeToPlayFixtureContest.jsx":"131","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/HallofFameModal.jsx":"132","/var/www/html/framework/frontend/src/views/FieldView.jsx":"133","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/AllLeagueList.jsx":"134","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/MiniLeagueCard.jsx":"135","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/UserLeaguePoints.jsx":"136","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeagueDetails.jsx":"137","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeaderBoardFreeToPlay.jsx":"138","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/PrizeSection.jsx":"139","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/CompletedLeagueList.jsx":"140","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/AllPrizes.jsx":"141","/var/www/html/framework/frontend/src/Modals/SpeenWheelModal.jsx":"142","/var/www/html/framework/frontend/src/Component/CoinsModule/ReedemCoachMarks.jsx":"143","/var/www/html/framework/frontend/src/Component/CoinsModule/CoinCoachMarks.jsx":"144","/var/www/html/framework/frontend/src/Modals/ProfileUpdateConfirmation.jsx":"145","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/FreeToPlayList.jsx":"146","/var/www/html/framework/frontend/src/Component/CoinsModule/DailyCheckinBonus.jsx":"147","/var/www/html/framework/frontend/src/Modals/ReferralSystem.jsx":"148","/var/www/html/framework/frontend/src/Modals/ProfileQuickView.jsx":"149","/var/www/html/framework/frontend/src/Modals/WithdrawConfirmationModal.jsx":"150","/var/www/html/framework/frontend/src/Modals/DeleteConfirmationModal.jsx":"151","/var/www/html/framework/frontend/src/Modals/EmailVerificationModal.jsx":"152","/var/www/html/framework/frontend/src/Modals/EditEmailModal.jsx":"153","/var/www/html/framework/frontend/src/Modals/BonusCaseModal.jsx":"154","/var/www/html/framework/frontend/src/Modals/RefferCoachMark.jsx":"155","/var/www/html/framework/frontend/src/Modals/EditMobileModal.jsx":"156","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/index.js":"157","/var/www/html/framework/frontend/src/Modals/ApplyPromoCode.jsx":"158","/var/www/html/framework/frontend/src/Modals/EditUsernamModal.jsx":"159","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/SponserBy.jsx":"160","/var/www/html/framework/frontend/src/helper/Validation.jsx":"161","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/index.js":"162","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ShareOpenPredictorModal.jsx":"163","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorLearnMore.jsx":"164","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/CompletedOpenPredictors.jsx":"165","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/LiveOpenPredictors.jsx":"166","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorContestList.jsx":"167","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorCard.jsx":"168","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/UpcomingOpenPredictors.jsx":"169","/var/www/html/framework/frontend/src/views/AppInstallNotification.jsx":"170","/var/www/html/framework/frontend/src/views/EditReferralCode.jsx":"171","/var/www/html/framework/frontend/src/views/Store.jsx":"172","/var/www/html/framework/frontend/src/Modals/Banner.jsx":"173","/var/www/html/framework/frontend/src/views/ReferalLeaderBoard.jsx":"174","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemParticipants.jsx":"175","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenFPPSourceUrl.jsx":"176","/var/www/html/framework/frontend/src/views/Leaderboard/TeamComparison.jsx":"177","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ShareFPPOpenPredictorModal.jsx":"178","/var/www/html/framework/frontend/src/Component/Pickem/index.js":"179","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ViewProofModal.jsx":"180","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPLearnMore.jsx":"181","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/CompletedFPPOpenPredictors.jsx":"182","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/LiveFPPOpenPredictors.jsx":"183","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/UpcomingFPPOpenPredictors.jsx":"184","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPCard.jsx":"185","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeagueSheduledFixture.jsx":"186","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPContestList.jsx":"187","/var/www/html/framework/frontend/src/views/HaveALeagueCodeClass.jsx":"188","/var/www/html/framework/frontend/src/views/ReferralSystem.jsx":"189","/var/www/html/framework/frontend/src/views/CreateContest.jsx":"190","/var/www/html/framework/frontend/src/views/Roster.jsx":"191","/var/www/html/framework/frontend/src/views/SelectCaptainList.jsx":"192","/var/www/html/framework/frontend/src/views/ContestListing.jsx":"193","/var/www/html/framework/frontend/src/views/Contest.jsx":"194","/var/www/html/framework/frontend/src/views/MyTeams.jsx":"195","/var/www/html/framework/frontend/src/views/PageNotFound/PageNoFound.jsx":"196","/var/www/html/framework/frontend/src/Modals/ReferalPrizesModal.jsx":"197","/var/www/html/framework/frontend/src/views/Leaderboard/index.js":"198","/var/www/html/framework/frontend/src/Component/Profile/index.js":"199","/var/www/html/framework/frontend/src/Component/Finance/index.js":"200","/var/www/html/framework/frontend/src/Component/StaticPages/index.js":"201","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/index.js":"202","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/index.js":"203","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemCompleted.jsx":"204","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemMyContest.jsx":"205","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemLive.jsx":"206","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemUpcoming.jsx":"207","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemPredictionCard.jsx":"208","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemLobby.jsx":"209","/var/www/html/framework/frontend/src/Component/Pickem/PickemStatsUser.jsx":"210","/var/www/html/framework/frontend/src/Component/Pickem/PickemYourStats.jsx":"211","/var/www/html/framework/frontend/src/Component/Pickem/PickemLeaderboard.jsx":"212","/var/www/html/framework/frontend/src/Component/Pickem/DeletePickConfirmation.jsx":"213","/var/www/html/framework/frontend/src/Component/Pickem/PickemMycontest.jsx":"214","/var/www/html/framework/frontend/src/Component/Pickem/PickemFixtureCard.jsx":"215","/var/www/html/framework/frontend/src/Component/Pickem/PickemLobby.jsx":"216","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ViewProofFPPModal.jsx":"217","/var/www/html/framework/frontend/src/components/filterByteam.jsx":"218","/var/www/html/framework/frontend/src/Modals/PlayerCard.jsx":"219","/var/www/html/framework/frontend/src/Modals/MyTeamViewAllModal/MyTeamViewAllModal.jsx":"220","/var/www/html/framework/frontend/src/views/Leaderboard/Leaderboard.jsx":"221","/var/www/html/framework/frontend/src/Component/Profile/VerifyAccount.jsx":"222","/var/www/html/framework/frontend/src/Component/Finance/BuyCoins.jsx":"223","/var/www/html/framework/frontend/src/Component/Finance/PaymentMethod.jsx":"224","/var/www/html/framework/frontend/src/Component/Finance/Withdraw.jsx":"225","/var/www/html/framework/frontend/src/Component/StaticPages/Footer.jsx":"226","/var/www/html/framework/frontend/src/Component/StaticPages/HowItWorks.jsx":"227","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/PickMobileNo.jsx":"228","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/ReferralCode.jsx":"229","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/VerifyMobile.jsx":"230","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/PickUsername.jsx":"231","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/MobileLogin.jsx":"232","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/UpdateMobileNo.jsx":"233","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/PickEmail.jsx":"234","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/EnterPassword.jsx":"235","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/VerifyEmail.jsx":"236","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/SetPassword.jsx":"237","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemShareModal.jsx":"238","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/EmailLogin.jsx":"239","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/ChangePassword.jsx":"240","/var/www/html/framework/frontend/src/Component/Pickem/PickemLeaderboardItem.jsx":"241","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/ForgotEmailPassword.jsx":"242","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/ResetPassword.jsx":"243","/var/www/html/framework/frontend/src/Component/StaticPages/Offers.jsx":"244","/var/www/html/framework/frontend/src/Component/StaticPages/Legality.jsx":"245","/var/www/html/framework/frontend/src/Component/StaticPages/TermsCondition.jsx":"246","/var/www/html/framework/frontend/src/Component/StaticPages/RulesScoring.jsx":"247","/var/www/html/framework/frontend/src/Component/StaticPages/LandingScreen.jsx":"248","/var/www/html/framework/frontend/src/Component/StaticPages/HowToPlay.jsx":"249","/var/www/html/framework/frontend/src/Component/StaticPages/ContactUs.jsx":"250","/var/www/html/framework/frontend/src/Component/StaticPages/FAQ.jsx":"251","/var/www/html/framework/frontend/src/Component/StaticPages/PrivacyPolicy.jsx":"252","/var/www/html/framework/frontend/src/Component/Finance/Transaction.jsx":"253","/var/www/html/framework/frontend/src/Component/Finance/AddFunds.jsx":"254","/var/www/html/framework/frontend/src/Component/Profile/BankVerification.jsx":"255","/var/www/html/framework/frontend/src/Component/Profile/ProfileEdit.jsx":"256","/var/www/html/framework/frontend/src/Component/Profile/PanCardVerification.jsx":"257","/var/www/html/framework/frontend/src/Component/StaticPages/AboutUs.jsx":"258","/var/www/html/framework/frontend/src/views/Leaderboard/MyLeaderboardItem.jsx":"259","/var/www/html/framework/frontend/src/Component/Finance/BuyConfirmModal.jsx":"260","/var/www/html/framework/frontend/src/Modals/EditStateAndCityModal.jsx":"261","/var/www/html/framework/frontend/src/Modals/SuccessModal.jsx":"262","/var/www/html/framework/frontend/src/redux/actions/types.js":"263"},{"size":599,"mtime":1612174556597,"results":"264","hashOfConfig":"265"},{"size":2238,"mtime":1612174556597,"results":"266","hashOfConfig":"265"},{"size":4948,"mtime":1611205565149,"results":"267","hashOfConfig":"265"},{"size":1186,"mtime":1612174556381,"results":"268","hashOfConfig":"265"},{"size":5663,"mtime":1612174556597,"results":"269","hashOfConfig":"265"},{"size":188,"mtime":1612174556597,"results":"270","hashOfConfig":"265"},{"size":12402,"mtime":1612174556465,"results":"271","hashOfConfig":"265"},{"size":839,"mtime":1611205565153,"results":"272","hashOfConfig":"265"},{"size":77575,"mtime":1612174556597,"results":"273","hashOfConfig":"265"},{"size":18789,"mtime":1612174556473,"results":"274","hashOfConfig":"265"},{"size":896,"mtime":1612174556597,"results":"275","hashOfConfig":"265"},{"size":1775,"mtime":1612174556597,"results":"276","hashOfConfig":"265"},{"size":314,"mtime":1612174556597,"results":"277","hashOfConfig":"265"},{"size":28635,"mtime":1612174556465,"results":"278","hashOfConfig":"265"},{"size":346,"mtime":1611205565105,"results":"279","hashOfConfig":"265"},{"size":153,"mtime":1611205565105,"results":"280","hashOfConfig":"265"},{"size":18744,"mtime":1612174556477,"results":"281","hashOfConfig":"265"},{"size":33106,"mtime":1612174556477,"results":"282","hashOfConfig":"265"},{"size":12127,"mtime":1612178449994,"results":"283","hashOfConfig":"265"},{"size":1290,"mtime":1612174556393,"results":"284","hashOfConfig":"265"},{"size":1416,"mtime":1612171021779,"results":"285","hashOfConfig":"265"},{"size":15040,"mtime":1612174556437,"results":"286","hashOfConfig":"265"},{"size":18367,"mtime":1612173531901,"results":"287","hashOfConfig":"265"},{"size":6500,"mtime":1612174556425,"results":"288","hashOfConfig":"265"},{"size":12810,"mtime":1612174556425,"results":"289","hashOfConfig":"265"},{"size":6488,"mtime":1612174556425,"results":"290","hashOfConfig":"265"},{"size":588,"mtime":1611205565089,"results":"291","hashOfConfig":"265"},{"size":955,"mtime":1612171021755,"results":"292","hashOfConfig":"265"},{"size":2330,"mtime":1612174556389,"results":"293","hashOfConfig":"265"},{"size":25593,"mtime":1612174556393,"results":"294","hashOfConfig":"265"},{"size":11374,"mtime":1612174556389,"results":"295","hashOfConfig":"265"},{"size":6418,"mtime":1612174556393,"results":"296","hashOfConfig":"265"},{"size":15720,"mtime":1612174556381,"results":"297","hashOfConfig":"265"},{"size":1366,"mtime":1611205565093,"results":"298","hashOfConfig":"265"},{"size":2055,"mtime":1611205565093,"results":"299","hashOfConfig":"265"},{"size":3824,"mtime":1612174556385,"results":"300","hashOfConfig":"265"},{"size":6099,"mtime":1612174556385,"results":"301","hashOfConfig":"265"},{"size":4058,"mtime":1612174556389,"results":"302","hashOfConfig":"265"},{"size":3091,"mtime":1612174556381,"results":"303","hashOfConfig":"265"},{"size":3543,"mtime":1612174556605,"results":"304","hashOfConfig":"265"},{"size":31658,"mtime":1612174556589,"results":"305","hashOfConfig":"265"},{"size":5832,"mtime":1612174556421,"results":"306","hashOfConfig":"265"},{"size":7777,"mtime":1612171021831,"results":"307","hashOfConfig":"265"},{"size":27376,"mtime":1612174556609,"results":"308","hashOfConfig":"265"},{"size":5046,"mtime":1612171021771,"results":"309","hashOfConfig":"265"},{"size":9955,"mtime":1612174556437,"results":"310","hashOfConfig":"265"},{"size":4626,"mtime":1612174556473,"results":"311","hashOfConfig":"265"},{"size":13677,"mtime":1612174556425,"results":"312","hashOfConfig":"265"},{"size":6474,"mtime":1612174556449,"results":"313","hashOfConfig":"265"},{"size":10440,"mtime":1612174556449,"results":"314","hashOfConfig":"265"},{"size":16232,"mtime":1612174556449,"results":"315","hashOfConfig":"265"},{"size":7995,"mtime":1612174556381,"results":"316","hashOfConfig":"265"},{"size":11079,"mtime":1612174556381,"results":"317","hashOfConfig":"265"},{"size":6647,"mtime":1612171021755,"results":"318","hashOfConfig":"265"},{"size":7093,"mtime":1612171021755,"results":"319","hashOfConfig":"265"},{"size":2080,"mtime":1612174556621,"results":"320","hashOfConfig":"265"},{"size":4714,"mtime":1612174556589,"results":"321","hashOfConfig":"265"},{"size":3656,"mtime":1612174556621,"results":"322","hashOfConfig":"265"},{"size":2399,"mtime":1612174556621,"results":"323","hashOfConfig":"265"},{"size":4358,"mtime":1612174556609,"results":"324","hashOfConfig":"265"},{"size":15312,"mtime":1612174556601,"results":"325","hashOfConfig":"265"},{"size":1748,"mtime":1611205565097,"results":"326","hashOfConfig":"265"},{"size":2807,"mtime":1612171021831,"results":"327","hashOfConfig":"265"},{"size":1981,"mtime":1611205565105,"results":"328","hashOfConfig":"265"},{"size":37,"mtime":1612171021831,"results":"329","hashOfConfig":"265"},{"size":26855,"mtime":1612174556453,"results":"330","hashOfConfig":"265"},{"size":22401,"mtime":1612174556437,"results":"331","hashOfConfig":"265"},{"size":160,"mtime":1612169423833,"results":"332","hashOfConfig":"265"},{"size":19159,"mtime":1612174556421,"results":"333","hashOfConfig":"265"},{"size":38170,"mtime":1612174556421,"results":"334","hashOfConfig":"265"},{"size":17142,"mtime":1612174556425,"results":"335","hashOfConfig":"265"},{"size":7524,"mtime":1612174556405,"results":"336","hashOfConfig":"265"},{"size":10609,"mtime":1612174556425,"results":"337","hashOfConfig":"265"},{"size":17079,"mtime":1612174556425,"results":"338","hashOfConfig":"265"},{"size":15678,"mtime":1612174556449,"results":"339","hashOfConfig":"265"},{"size":19123,"mtime":1612174556425,"results":"340","hashOfConfig":"265"},{"size":23347,"mtime":1612174556449,"results":"341","hashOfConfig":"265"},{"size":48260,"mtime":1612174556621,"results":"342","hashOfConfig":"265"},{"size":15643,"mtime":1612174556621,"results":"343","hashOfConfig":"265"},{"size":30738,"mtime":1612174556621,"results":"344","hashOfConfig":"265"},{"size":17808,"mtime":1612174556397,"results":"345","hashOfConfig":"265"},{"size":18939,"mtime":1612174556453,"results":"346","hashOfConfig":"265"},{"size":1197,"mtime":1612174556473,"results":"347","hashOfConfig":"265"},{"size":476,"mtime":1611205565089,"results":"348","hashOfConfig":"265"},{"size":116,"mtime":1611205565101,"results":"349","hashOfConfig":"265"},{"size":862,"mtime":1612174556413,"results":"350","hashOfConfig":"265"},{"size":247,"mtime":1612171021763,"results":"351","hashOfConfig":"265"},{"size":31,"mtime":1611205565153,"results":"352","hashOfConfig":"265"},{"size":246,"mtime":1611205565097,"results":"353","hashOfConfig":"265"},{"size":9839,"mtime":1612174556425,"results":"354","hashOfConfig":"265"},{"size":896,"mtime":1611205565101,"results":"355","hashOfConfig":"265"},{"size":6062,"mtime":1612174556449,"results":"356","hashOfConfig":"265"},{"size":7802,"mtime":1612174556449,"results":"357","hashOfConfig":"265"},{"size":4499,"mtime":1612174556473,"results":"358","hashOfConfig":"265"},{"size":8997,"mtime":1612171021775,"results":"359","hashOfConfig":"265"},{"size":38530,"mtime":1612174556589,"results":"360","hashOfConfig":"265"},{"size":9589,"mtime":1612174556381,"results":"361","hashOfConfig":"265"},{"size":4119,"mtime":1612169423833,"results":"362","hashOfConfig":"265"},{"size":2155,"mtime":1612174556425,"results":"363","hashOfConfig":"265"},{"size":2149,"mtime":1612174556425,"results":"364","hashOfConfig":"265"},{"size":4837,"mtime":1612174556449,"results":"365","hashOfConfig":"265"},{"size":5162,"mtime":1612174556609,"results":"366","hashOfConfig":"265"},{"size":2447,"mtime":1611205565105,"results":"367","hashOfConfig":"265"},{"size":2993,"mtime":1612171021755,"results":"368","hashOfConfig":"265"},{"size":3321,"mtime":1612171021775,"results":"369","hashOfConfig":"265"},{"size":35124,"mtime":1612174556405,"results":"370","hashOfConfig":"265"},{"size":13122,"mtime":1612174556413,"results":"371","hashOfConfig":"265"},{"size":25866,"mtime":1612174556413,"results":"372","hashOfConfig":"265"},{"size":36660,"mtime":1612174556413,"results":"373","hashOfConfig":"265"},{"size":42298,"mtime":1612174556413,"results":"374","hashOfConfig":"265"},{"size":27333,"mtime":1612174556413,"results":"375","hashOfConfig":"265"},{"size":30907,"mtime":1612174556413,"results":"376","hashOfConfig":"265"},{"size":36619,"mtime":1612174556413,"results":"377","hashOfConfig":"265"},{"size":19514,"mtime":1612174556621,"results":"378","hashOfConfig":"265"},{"size":2799,"mtime":1611205565101,"results":"379","hashOfConfig":"265"},{"size":12365,"mtime":1612174556449,"results":"380","hashOfConfig":"265"},{"size":12164,"mtime":1612174556449,"results":"381","hashOfConfig":"265"},{"size":8415,"mtime":1612174556449,"results":"382","hashOfConfig":"265"},{"size":4227,"mtime":1611205565093,"results":"383","hashOfConfig":"265"},{"size":4899,"mtime":1611205565093,"results":"384","hashOfConfig":"265"},{"size":32153,"mtime":1612174556405,"results":"385","hashOfConfig":"265"},{"size":138758,"mtime":1612174556473,"results":"386","hashOfConfig":"265"},{"size":2678,"mtime":1612171021783,"results":"387","hashOfConfig":"265"},{"size":3047,"mtime":1612174556609,"results":"388","hashOfConfig":"265"},{"size":11914,"mtime":1612174556601,"results":"389","hashOfConfig":"265"},{"size":2325,"mtime":1611205565105,"results":"390","hashOfConfig":"265"},{"size":32086,"mtime":1612174556469,"results":"391","hashOfConfig":"265"},{"size":9398,"mtime":1612174556473,"results":"392","hashOfConfig":"265"},{"size":15850,"mtime":1612174556473,"results":"393","hashOfConfig":"265"},{"size":3908,"mtime":1611205565105,"results":"394","hashOfConfig":"265"},{"size":6402,"mtime":1612174556405,"results":"395","hashOfConfig":"265"},{"size":5184,"mtime":1611205565093,"results":"396","hashOfConfig":"265"},{"size":30175,"mtime":1612174556609,"results":"397","hashOfConfig":"265"},{"size":8320,"mtime":1612174556401,"results":"398","hashOfConfig":"265"},{"size":3213,"mtime":1612174556409,"results":"399","hashOfConfig":"265"},{"size":6787,"mtime":1612174556413,"results":"400","hashOfConfig":"265"},{"size":16601,"mtime":1612174556405,"results":"401","hashOfConfig":"265"},{"size":38760,"mtime":1612174556405,"results":"402","hashOfConfig":"265"},{"size":3490,"mtime":1612174556409,"results":"403","hashOfConfig":"265"},{"size":5711,"mtime":1612174556401,"results":"404","hashOfConfig":"265"},{"size":12898,"mtime":1612174556401,"results":"405","hashOfConfig":"265"},{"size":3864,"mtime":1612174556473,"results":"406","hashOfConfig":"265"},{"size":4227,"mtime":1612171021755,"results":"407","hashOfConfig":"265"},{"size":2890,"mtime":1612171021755,"results":"408","hashOfConfig":"265"},{"size":1863,"mtime":1611205565105,"results":"409","hashOfConfig":"265"},{"size":49443,"mtime":1612174556405,"results":"410","hashOfConfig":"265"},{"size":6332,"mtime":1612171021755,"results":"411","hashOfConfig":"265"},{"size":20918,"mtime":1612174556473,"results":"412","hashOfConfig":"265"},{"size":3907,"mtime":1612174556473,"results":"413","hashOfConfig":"265"},{"size":1810,"mtime":1611205565105,"results":"414","hashOfConfig":"265"},{"size":1800,"mtime":1611205565105,"results":"415","hashOfConfig":"265"},{"size":1693,"mtime":1612174556473,"results":"416","hashOfConfig":"265"},{"size":11221,"mtime":1612174556473,"results":"417","hashOfConfig":"265"},{"size":6969,"mtime":1612174556469,"results":"418","hashOfConfig":"265"},{"size":4889,"mtime":1612171021783,"results":"419","hashOfConfig":"265"},{"size":10445,"mtime":1612174556473,"results":"420","hashOfConfig":"265"},{"size":1191,"mtime":1611205565097,"results":"421","hashOfConfig":"265"},{"size":6089,"mtime":1612171021783,"results":"422","hashOfConfig":"265"},{"size":7078,"mtime":1612171021783,"results":"423","hashOfConfig":"265"},{"size":1868,"mtime":1612174556409,"results":"424","hashOfConfig":"265"},{"size":3237,"mtime":1612174556597,"results":"425","hashOfConfig":"265"},{"size":1317,"mtime":1611205565097,"results":"426","hashOfConfig":"265"},{"size":6077,"mtime":1612174556425,"results":"427","hashOfConfig":"265"},{"size":2847,"mtime":1611205565097,"results":"428","hashOfConfig":"265"},{"size":6030,"mtime":1611205565097,"results":"429","hashOfConfig":"265"},{"size":4748,"mtime":1611205565097,"results":"430","hashOfConfig":"265"},{"size":17973,"mtime":1612174556425,"results":"431","hashOfConfig":"265"},{"size":15220,"mtime":1612174556425,"results":"432","hashOfConfig":"265"},{"size":5217,"mtime":1611205565097,"results":"433","hashOfConfig":"265"},{"size":2489,"mtime":1612174556597,"results":"434","hashOfConfig":"265"},{"size":8555,"mtime":1612174556609,"results":"435","hashOfConfig":"265"},{"size":6189,"mtime":1612174556625,"results":"436","hashOfConfig":"265"},{"size":1825,"mtime":1611205565105,"results":"437","hashOfConfig":"265"},{"size":48735,"mtime":1612171021839,"results":"438","hashOfConfig":"265"},{"size":8154,"mtime":1612174556437,"results":"439","hashOfConfig":"265"},{"size":1753,"mtime":1611205565097,"results":"440","hashOfConfig":"265"},{"size":26308,"mtime":1612174556621,"results":"441","hashOfConfig":"265"},{"size":6062,"mtime":1612174556425,"results":"442","hashOfConfig":"265"},{"size":1078,"mtime":1612174556445,"results":"443","hashOfConfig":"265"},{"size":2209,"mtime":1612174556425,"results":"444","hashOfConfig":"265"},{"size":2868,"mtime":1611205565097,"results":"445","hashOfConfig":"265"},{"size":6060,"mtime":1612171021767,"results":"446","hashOfConfig":"265"},{"size":4769,"mtime":1611205565097,"results":"447","hashOfConfig":"265"},{"size":5238,"mtime":1611205565097,"results":"448","hashOfConfig":"265"},{"size":10876,"mtime":1612174556425,"results":"449","hashOfConfig":"265"},{"size":5242,"mtime":1612174556405,"results":"450","hashOfConfig":"265"},{"size":18029,"mtime":1612174556425,"results":"451","hashOfConfig":"265"},{"size":15991,"mtime":1612174556609,"results":"452","hashOfConfig":"265"},{"size":17991,"mtime":1612174556621,"results":"453","hashOfConfig":"265"},{"size":52500,"mtime":1612174556605,"results":"454","hashOfConfig":"265"},{"size":51261,"mtime":1612174556621,"results":"455","hashOfConfig":"265"},{"size":44372,"mtime":1612174556621,"results":"456","hashOfConfig":"265"},{"size":61414,"mtime":1612174556601,"results":"457","hashOfConfig":"265"},{"size":29368,"mtime":1612174556601,"results":"458","hashOfConfig":"265"},{"size":30835,"mtime":1612174556621,"results":"459","hashOfConfig":"265"},{"size":1268,"mtime":1611205565153,"results":"460","hashOfConfig":"265"},{"size":10554,"mtime":1612171021783,"results":"461","hashOfConfig":"265"},{"size":38,"mtime":1611205565153,"results":"462","hashOfConfig":"265"},{"size":330,"mtime":1611205565101,"results":"463","hashOfConfig":"265"},{"size":335,"mtime":1612169423837,"results":"464","hashOfConfig":"265"},{"size":617,"mtime":1612174556461,"results":"465","hashOfConfig":"265"},{"size":510,"mtime":1611205565097,"results":"466","hashOfConfig":"265"},{"size":365,"mtime":1611205565097,"results":"467","hashOfConfig":"265"},{"size":7781,"mtime":1612174556437,"results":"468","hashOfConfig":"265"},{"size":11438,"mtime":1612174556437,"results":"469","hashOfConfig":"265"},{"size":7152,"mtime":1612171021771,"results":"470","hashOfConfig":"265"},{"size":7903,"mtime":1612171021771,"results":"471","hashOfConfig":"265"},{"size":21563,"mtime":1612171021771,"results":"472","hashOfConfig":"265"},{"size":21756,"mtime":1612174556437,"results":"473","hashOfConfig":"265"},{"size":2786,"mtime":1612174556441,"results":"474","hashOfConfig":"265"},{"size":22551,"mtime":1612174556441,"results":"475","hashOfConfig":"265"},{"size":16723,"mtime":1612174556441,"results":"476","hashOfConfig":"265"},{"size":1768,"mtime":1612174556437,"results":"477","hashOfConfig":"265"},{"size":17416,"mtime":1612174556441,"results":"478","hashOfConfig":"265"},{"size":9441,"mtime":1612174556437,"results":"479","hashOfConfig":"265"},{"size":24535,"mtime":1612174556441,"results":"480","hashOfConfig":"265"},{"size":2215,"mtime":1611205565097,"results":"481","hashOfConfig":"265"},{"size":3860,"mtime":1612174556593,"results":"482","hashOfConfig":"265"},{"size":21617,"mtime":1612171021783,"results":"483","hashOfConfig":"265"},{"size":8209,"mtime":1611205565105,"results":"484","hashOfConfig":"265"},{"size":37575,"mtime":1612174556617,"results":"485","hashOfConfig":"265"},{"size":12473,"mtime":1612174556453,"results":"486","hashOfConfig":"265"},{"size":11399,"mtime":1612174556393,"results":"487","hashOfConfig":"265"},{"size":63150,"mtime":1612174556397,"results":"488","hashOfConfig":"265"},{"size":12275,"mtime":1612174556401,"results":"489","hashOfConfig":"265"},{"size":4247,"mtime":1612174556457,"results":"490","hashOfConfig":"265"},{"size":2471,"mtime":1612173531897,"results":"491","hashOfConfig":"265"},{"size":7749,"mtime":1612174556421,"results":"492","hashOfConfig":"265"},{"size":17114,"mtime":1612174556421,"results":"493","hashOfConfig":"265"},{"size":15020,"mtime":1612174556421,"results":"494","hashOfConfig":"265"},{"size":9083,"mtime":1612171021767,"results":"495","hashOfConfig":"265"},{"size":18980,"mtime":1612174556421,"results":"496","hashOfConfig":"265"},{"size":6838,"mtime":1612174556421,"results":"497","hashOfConfig":"265"},{"size":7737,"mtime":1612171021767,"results":"498","hashOfConfig":"265"},{"size":10048,"mtime":1611205565097,"results":"499","hashOfConfig":"265"},{"size":15009,"mtime":1612174556421,"results":"500","hashOfConfig":"265"},{"size":9638,"mtime":1612174556417,"results":"501","hashOfConfig":"265"},{"size":6930,"mtime":1612174556437,"results":"502","hashOfConfig":"265"},{"size":20305,"mtime":1612174556417,"results":"503","hashOfConfig":"265"},{"size":8973,"mtime":1612174556413,"results":"504","hashOfConfig":"265"},{"size":3960,"mtime":1611205565101,"results":"505","hashOfConfig":"265"},{"size":8492,"mtime":1612174556417,"results":"506","hashOfConfig":"265"},{"size":10502,"mtime":1612174556417,"results":"507","hashOfConfig":"265"},{"size":2433,"mtime":1612174556457,"results":"508","hashOfConfig":"265"},{"size":2457,"mtime":1612173531901,"results":"509","hashOfConfig":"265"},{"size":2429,"mtime":1612171021779,"results":"510","hashOfConfig":"265"},{"size":14650,"mtime":1612174556461,"results":"511","hashOfConfig":"265"},{"size":3553,"mtime":1612174556457,"results":"512","hashOfConfig":"265"},{"size":2245,"mtime":1612174556457,"results":"513","hashOfConfig":"265"},{"size":2382,"mtime":1612171021779,"results":"514","hashOfConfig":"265"},{"size":2356,"mtime":1612171021779,"results":"515","hashOfConfig":"265"},{"size":2274,"mtime":1612171021779,"results":"516","hashOfConfig":"265"},{"size":9911,"mtime":1612174556401,"results":"517","hashOfConfig":"265"},{"size":13563,"mtime":1612174556393,"results":"518","hashOfConfig":"265"},{"size":28932,"mtime":1612174556453,"results":"519","hashOfConfig":"265"},{"size":36909,"mtime":1612174556453,"results":"520","hashOfConfig":"265"},{"size":25678,"mtime":1612174556453,"results":"521","hashOfConfig":"265"},{"size":2254,"mtime":1612171021779,"results":"522","hashOfConfig":"265"},{"size":6130,"mtime":1612174556617,"results":"523","hashOfConfig":"265"},{"size":2238,"mtime":1612174556393,"results":"524","hashOfConfig":"265"},{"size":9735,"mtime":1612174556473,"results":"525","hashOfConfig":"265"},{"size":2337,"mtime":1611205565105,"results":"526","hashOfConfig":"265"},{"size":308,"mtime":1612174556597,"results":"527","hashOfConfig":"265"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},"p83ys8",{"filePath":"531","messages":"532","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"530"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"530"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"530"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"530"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"530"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"530"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"530"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"530"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"530"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"530"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"530"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"530"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"530"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"530"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"530"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"530"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"530"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"530"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"530"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"530"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"530"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"530"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"530"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"530"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"530"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":50,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"530"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"530"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"530"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"530"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"530"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663","usedDeprecatedRules":"530"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"530"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"530"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"530"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"530"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"530"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"530"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"530"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"530"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"530"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"530"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"530"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"530"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"530"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"530"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"530"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"530"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"530"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"530"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"530"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"530"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":93,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"530"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739","usedDeprecatedRules":"530"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":55,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742","usedDeprecatedRules":"530"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"530"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"530"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757","usedDeprecatedRules":"530"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"530"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"771","usedDeprecatedRules":"530"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"776","usedDeprecatedRules":"530"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779","usedDeprecatedRules":"530"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"782","usedDeprecatedRules":"530"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"530"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"530"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791","usedDeprecatedRules":"530"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794","usedDeprecatedRules":"530"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"530"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"530"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"530"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"808","messages":"809","errorCount":0,"warningCount":69,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810","usedDeprecatedRules":"530"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813","usedDeprecatedRules":"530"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816","usedDeprecatedRules":"530"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":72,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819","usedDeprecatedRules":"530"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"822","usedDeprecatedRules":"530"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"825","usedDeprecatedRules":"530"},{"filePath":"826","messages":"827","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"828","usedDeprecatedRules":"530"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"831","usedDeprecatedRules":"530"},{"filePath":"832","messages":"833","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"834","usedDeprecatedRules":"530"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"837","messages":"838","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"839","usedDeprecatedRules":"530"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"530"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845","usedDeprecatedRules":"530"},{"filePath":"846","messages":"847","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"848","usedDeprecatedRules":"530"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"851","usedDeprecatedRules":"530"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":55,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854","usedDeprecatedRules":"530"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":161,"fixableErrorCount":0,"fixableWarningCount":0,"source":"857","usedDeprecatedRules":"530"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"860","messages":"861","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"862","usedDeprecatedRules":"530"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865","usedDeprecatedRules":"530"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868","usedDeprecatedRules":"530"},{"filePath":"869","messages":"870","errorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"871","usedDeprecatedRules":"530"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"874","usedDeprecatedRules":"530"},{"filePath":"875","messages":"876","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"877","usedDeprecatedRules":"530"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880","usedDeprecatedRules":"530"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883","usedDeprecatedRules":"530"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"886","usedDeprecatedRules":"530"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":89,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"530"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"892","usedDeprecatedRules":"530"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"895","usedDeprecatedRules":"530"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"898","usedDeprecatedRules":"530"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"530"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"530"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"907","usedDeprecatedRules":"530"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"910","usedDeprecatedRules":"530"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"913","usedDeprecatedRules":"530"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"916","usedDeprecatedRules":"530"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"919","messages":"920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":67,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925","usedDeprecatedRules":"530"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928","usedDeprecatedRules":"530"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"931","usedDeprecatedRules":"530"},{"filePath":"932","messages":"933","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"934","usedDeprecatedRules":"530"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"937","usedDeprecatedRules":"530"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"944","usedDeprecatedRules":"530"},{"filePath":"945","messages":"946","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"947","usedDeprecatedRules":"530"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"950","usedDeprecatedRules":"530"},{"filePath":"951","messages":"952","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"953","usedDeprecatedRules":"530"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"958","usedDeprecatedRules":"530"},{"filePath":"959","messages":"960","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961","usedDeprecatedRules":"530"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"964","usedDeprecatedRules":"530"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971","usedDeprecatedRules":"530"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"530"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"530"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"982","usedDeprecatedRules":"530"},{"filePath":"983","messages":"984","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"985","usedDeprecatedRules":"530"},{"filePath":"986","messages":"987","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"988","usedDeprecatedRules":"530"},{"filePath":"989","messages":"990","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"991","messages":"992","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"993","usedDeprecatedRules":"530"},{"filePath":"994","messages":"995","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996","usedDeprecatedRules":"530"},{"filePath":"997","messages":"998","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"999","usedDeprecatedRules":"530"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":73,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1002","usedDeprecatedRules":"530"},{"filePath":"1003","messages":"1004","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1005","usedDeprecatedRules":"530"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010","usedDeprecatedRules":"530"},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1013","usedDeprecatedRules":"530"},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1018","usedDeprecatedRules":"530"},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1023","usedDeprecatedRules":"530"},{"filePath":"1024","messages":"1025","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1026","usedDeprecatedRules":"530"},{"filePath":"1027","messages":"1028","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1029","usedDeprecatedRules":"530"},{"filePath":"1030","messages":"1031","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1032","usedDeprecatedRules":"530"},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1035","usedDeprecatedRules":"530"},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1038","usedDeprecatedRules":"530"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1041","usedDeprecatedRules":"530"},{"filePath":"1042","messages":"1043","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1044","usedDeprecatedRules":"530"},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1047","usedDeprecatedRules":"530"},{"filePath":"1048","messages":"1049","errorCount":0,"warningCount":106,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1050","usedDeprecatedRules":"530"},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":60,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1053","usedDeprecatedRules":"530"},{"filePath":"1054","messages":"1055","errorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1056","usedDeprecatedRules":"530"},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1059","usedDeprecatedRules":"530"},{"filePath":"1060","messages":"1061","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1062","usedDeprecatedRules":"530"},{"filePath":"1063","messages":"1064","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1065","usedDeprecatedRules":"530"},{"filePath":"1066","messages":"1067","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1068","usedDeprecatedRules":"530"},{"filePath":"1069","messages":"1070","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1071","messages":"1072","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1077","messages":"1078","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1083","usedDeprecatedRules":"530"},{"filePath":"1084","messages":"1085","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1086","usedDeprecatedRules":"530"},{"filePath":"1087","messages":"1088","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1089","usedDeprecatedRules":"530"},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1092","usedDeprecatedRules":"530"},{"filePath":"1093","messages":"1094","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1095","usedDeprecatedRules":"530"},{"filePath":"1096","messages":"1097","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1098","usedDeprecatedRules":"530"},{"filePath":"1099","messages":"1100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1101","usedDeprecatedRules":"530"},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1104","usedDeprecatedRules":"530"},{"filePath":"1105","messages":"1106","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1107","usedDeprecatedRules":"530"},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1110","messages":"1111","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1112","usedDeprecatedRules":"530"},{"filePath":"1113","messages":"1114","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1115","usedDeprecatedRules":"530"},{"filePath":"1116","messages":"1117","errorCount":0,"warningCount":60,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1118","usedDeprecatedRules":"530"},{"filePath":"1119","messages":"1120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1121","usedDeprecatedRules":"530"},{"filePath":"1122","messages":"1123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1124","usedDeprecatedRules":"530"},{"filePath":"1125","messages":"1126","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1127","usedDeprecatedRules":"530"},{"filePath":"1128","messages":"1129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1130","usedDeprecatedRules":"530"},{"filePath":"1131","messages":"1132","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1133","usedDeprecatedRules":"530"},{"filePath":"1134","messages":"1135","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1136","usedDeprecatedRules":"530"},{"filePath":"1137","messages":"1138","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1139","usedDeprecatedRules":"530"},{"filePath":"1140","messages":"1141","errorCount":0,"warningCount":113,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1142","usedDeprecatedRules":"530"},{"filePath":"1143","messages":"1144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1145","usedDeprecatedRules":"530"},{"filePath":"1146","messages":"1147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1148","messages":"1149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1152","usedDeprecatedRules":"530"},{"filePath":"1153","messages":"1154","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1155","usedDeprecatedRules":"530"},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1158","messages":"1159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1160","usedDeprecatedRules":"530"},{"filePath":"1161","messages":"1162","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1163","usedDeprecatedRules":"530"},{"filePath":"1164","messages":"1165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1166","usedDeprecatedRules":"530"},{"filePath":"1167","messages":"1168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1169","usedDeprecatedRules":"530"},{"filePath":"1170","messages":"1171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1172","usedDeprecatedRules":"530"},{"filePath":"1173","messages":"1174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1175","messages":"1176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1177","usedDeprecatedRules":"530"},{"filePath":"1178","messages":"1179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1180","usedDeprecatedRules":"530"},{"filePath":"1181","messages":"1182","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1183","usedDeprecatedRules":"530"},{"filePath":"1184","messages":"1185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1186","usedDeprecatedRules":"530"},{"filePath":"1187","messages":"1188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1189","messages":"1190","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1191","usedDeprecatedRules":"530"},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1194","usedDeprecatedRules":"530"},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1197","messages":"1198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1199","messages":"1200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1201","usedDeprecatedRules":"530"},{"filePath":"1202","messages":"1203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1204","usedDeprecatedRules":"530"},{"filePath":"1205","messages":"1206","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1207","usedDeprecatedRules":"530"},{"filePath":"1208","messages":"1209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1210","messages":"1211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1212","messages":"1213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1214","messages":"1215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1216","messages":"1217","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1218","usedDeprecatedRules":"530"},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1221","usedDeprecatedRules":"530"},{"filePath":"1222","messages":"1223","errorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1224","usedDeprecatedRules":"530"},{"filePath":"1225","messages":"1226","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1227","usedDeprecatedRules":"530"},{"filePath":"1228","messages":"1229","errorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1230","usedDeprecatedRules":"530"},{"filePath":"1231","messages":"1232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"1233","messages":"1234","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1235","usedDeprecatedRules":"530"},{"filePath":"1236","messages":"1237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1238","usedDeprecatedRules":"530"},{"filePath":"1239","messages":"1240","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1241","usedDeprecatedRules":"530"},{"filePath":"1242","messages":"1243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1244","usedDeprecatedRules":"530"},{"filePath":"1245","messages":"1246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},"/var/www/html/framework/frontend/src/index.js",[],["1247","1248"],"/var/www/html/framework/frontend/src/i18n.js",["1249","1250","1251","1252","1253","1254","1255"],"import i18n from \"i18next\";\nimport Backend from \"i18next-xhr-backend\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport * as Constants from \"./helper/Constants\";\n\nimport translationEng from \"./assets/i18n/translations/en.json\";\nimport translationHi from \"./assets/i18n/translations/hi.json\";\nimport translationGuj from \"./assets/i18n/translations/guj.json\";\nimport translationFr from \"./assets/i18n/translations/fr.json\";\nimport translationBen from \"./assets/i18n/translations/ben.json\";\nimport translationPun from \"./assets/i18n/translations/pun.json\";\nimport translationTh from \"./assets/i18n/translations/th.json\";\n\ni18n\n  .use(LanguageDetector)\n  .use(Backend)\n  .use(initReactI18next)\n  .init({\n    debug: true,\n    // lng: \"en\",\n    fallbackLng: \"en\", // use en if detected lng is not available\n    resources: {\n      en: {\n        translations: process.env.REACT_APP_SERVE_LANG_LOCALLY == '1' ? translationEng : Constants.LANGUAGE_OBJ\n      },\n      hi: {\n        translations: process.env.REACT_APP_SERVE_LANG_LOCALLY == '1' ? translationHi : Constants.LANGUAGE_OBJ\n      },\n      guj: {\n        translations: process.env.REACT_APP_SERVE_LANG_LOCALLY == '1' ? translationGuj : Constants.LANGUAGE_OBJ\n      },\n      fr: {\n        translations: process.env.REACT_APP_SERVE_LANG_LOCALLY == '1' ? translationFr : Constants.LANGUAGE_OBJ\n      },\n      ben: {\n        translations: process.env.REACT_APP_SERVE_LANG_LOCALLY == '1' ? translationBen : Constants.LANGUAGE_OBJ\n      },\n      pun: {\n        translations: process.env.REACT_APP_SERVE_LANG_LOCALLY == '1' ? translationPun : Constants.LANGUAGE_OBJ\n      },\n      th: {\n        translations: process.env.REACT_APP_SERVE_LANG_LOCALLY == '1' ? translationTh : Constants.LANGUAGE_OBJ\n      }\n\n\n    },\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n    keySeparator: false,\n    returnObjects: true,\n    interpolation: {\n      escapeValue: false,\n      formatSeparator: \",\"\n    },\n    react: {\n      wait: true,\n      useSuspense: false,\n    }\n  });\n\nexport default i18n;\n","/var/www/html/framework/frontend/src/serviceWorker.js",[],"/var/www/html/framework/frontend/src/App.jsx",[],"/var/www/html/framework/frontend/src/helper/Constants.js",["1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267"],"import { Sports } from \"../JsonFiles\";\nimport { MALE, FEMALE } from \"./AppLabels\";\nimport ls from \"local-storage\";\nimport { _Map } from \"../Utilities/Utilities\";\n\nexport var OTPSIZE = 4;\n\nexport var IS_BRAND_ENABLE = process.env.REACT_APP_DEV_BY_VTECH == 1;\nexport var IS_SPORTS_HUB = false;\nexport var IS_PREDICTION = false;\nexport var IS_PICKEM = false;\nexport var IS_DFS = false;\nexport var IS_TOURNAMENT = false;\nexport var IS_MULTIGAME = false;\nexport var IS_OPEN_PREDICTOR = false;\nexport var IS_FPP_OPEN_PREDICTOR = false; // open predictor with fixed prize pool\nexport var SELECTED_GAMET = '';\nexport var TOAST = {};\nexport const CONTEST_UPCOMING = 0;\nexport const CONTEST_LIVE = 1;\nexport const CONTEST_COMPLETED = 2;\nexport const CONTESTS_LIST = -1;\nexport const BANNER_TYPE_FIXTURE = 1;\nexport const BANNER_TYPE_REFER_FRIEND = 2;\nexport const BANNER_TYPE_DEPOSITE = 3;\nexport const GAME_TYPE_FREE_TO_PLAY = 7;\nexport const DEFAULT_COUNTRY = process.env.REACT_APP_COUNTRY_ALPHA_CODE;\nexport const DEFAULT_COUNTRY_CODE = process.env.REACT_APP_COUNTRY_NUM_CODE;\nexport var AppSelectedSport = ls.get(\"selectedSports\");\nexport var APP_DOWNLOAD_LINK_ANDROID = \"\";\nexport var globalLineupData = {};\nexport var preTeamsList = {};\nexport var bannerData = {};\nexport var LOBBY_FILTER_ARRAY = [];\nexport var SignupTmpData = {};\nexport var ReferralData = {};\nexport var CountryList = [];\nexport var isBankDeleted = false;\nexport var OnlyCoinsFlow = process.env.REACT_APP_COIN_ONLY_TYPE;\nexport var EnableBuyCoin = process.env.REACT_APP_BUY_COINS_ENABLE == 1 ? true : false;\nexport var PlayStoreLink = process.env.REACT_APP_DOWNLOAD_LINK_ANDROID || '';\n\nexport const getGendersList = () => [\n  { value: \"male\", label: MALE },\n  { value: \"female\", label: FEMALE }\n];\n\nexport var ALLOW_LANG = [\n  { value: \"en\", label: \"English\" },\n  { value: \"hi\", label: \"हिंदी\" },\n  { value: \"guj\", label: \"ગુજરાતી\" }\n];\nexport var DASHBOARD_FOOTER = {\n  tabs: [\n    { tab_key: \"lobby\" },\n    { tab_key: \"my-contests\" },\n    { tab_key: \"earn-coins\" },\n    { tab_key: \"my-profile\" },\n    { tab_key: \"more\" }\n    // { tab_key: 'notification' },\n    // { tab_key: 'my-wallet' },\n    // { tab_key: 'refer-friend' }\n  ],\n  config: {\n    tab_path: {\n      \"/lobby\": \"lobby\",\n      \"/my-contests\": \"my-contests\",\n      \"/earn-coins\": \"earn-coins\",\n      \"/my-profile\": \"my-profile\",\n      \"/leaderboard\": \"leaderboard\",\n      \"/more\": \"more\",\n      \"/my-contests/0\": \"0\",\n      \"/my-contests/1\": \"1\",\n      \"/my-contests/2\": \"2\",\n      \"/notification\": \"notification\",\n      \"/my-wallet\": \"my-wallet\",\n      \"/refer-friend\": \"refer-friend\"\n    },\n    my_contest_tab: {\n      upcoming: \"my-contests/0\",\n      live: \"my-contests/1\",\n      completed: \"my-contests/2\"\n    }\n  }\n};\n\nexport var LANGUAGE_OBJ = {};\nexport var NOTIFICATION_DATA = {};\nexport var MATCH_TYPE = {\n  1: \"ODI\",\n  2: \"TEST\",\n  3: \"T20\",\n  4: \"T10\"\n};\nexport var PAYMENT_TYPE = {\n  UPI: \"upi\",\n  WALLET: \"wallet\",\n  NET_BANKING: \"net_banking\",\n  CREDIT_DEBIT_CARD: \"credit_debit_card\"\n};\nexport var GameType = {\n  OpenPredLead: \"allow_fixed_open_predictor\", //8\n  Pickem: \"allow_pickem\",// 4\n  OpenPred: \"allow_open_predictor\", // 6\n  Pred: \"allow_prediction\",// 3\n  MultiGame: \"allow_multigame\",// 5\n  DFS: \"allow_dfs\",// 2\n  Free2Play: \"allow_free2play\",// 7\n  Tournament: \"allow_tournament\", // 1 \n};\nexport var WindowScrollY = 0;\nexport var isFromConfirmModal = false;\n\nexport class SetScrollY {\n  static yScroll(yValue) {\n    WindowScrollY = yValue;\n  }\n}\nexport class setValue {\n  static setReferralData(obj) {\n    ReferralData = obj;\n  }\n  static setToastObject(obj) {\n    TOAST = obj;\n  }\n  static setOtpSize(value) {\n    OTPSIZE = value;\n  }\n  static setNotificationCount(data) {\n    NOTIFICATION_DATA = data;\n  }\n  static setFilter(filters) {\n    LOBBY_FILTER_ARRAY = filters;\n  }\n  static setCountry(list) {\n    CountryList = list;\n  }\n\n  static setLanguage(Languages) {\n    ALLOW_LANG = Languages;\n  }\n  static setisFromConfirmModal(value) {\n    isFromConfirmModal = value;\n  }\n  static setAppSelectedSport(sport) {\n    AppSelectedSport = sport || Sports.default_sport;\n  }\n  static setAppDownloadLink(link) {\n    APP_DOWNLOAD_LINK_ANDROID = link;\n  }\n  static setBankDeleted(value) {\n    isBankDeleted = value;\n  }\n  static setSportsHubAllow(value) {\n    IS_SPORTS_HUB = value;\n    if (value) {\n      _Map(DASHBOARD_FOOTER.tabs, (item, idx) => {\n        if (item.tab_key === \"earn-coins\") {\n          DASHBOARD_FOOTER.tabs[idx][\"tab_key\"] = \"sports-hub\";\n        }\n      });\n    }\n  }\n  static setGameTypesEnable(value) {\n    if (value == GameType.Tournament) {\n      IS_TOURNAMENT = true;\n    }\n    if (value == GameType.DFS) {\n      IS_DFS = true;\n    }\n    if (value == GameType.Pred) {\n      IS_PREDICTION = true;\n    }\n    if (value == GameType.Pickem) {\n      IS_PICKEM = true;\n    }\n    if (value == GameType.MultiGame) {\n      IS_MULTIGAME = true;\n    }\n    if (value == GameType.OpenPred) {\n      IS_OPEN_PREDICTOR = true;\n    }\n    if (value == GameType.OpenPredLead) {\n      IS_FPP_OPEN_PREDICTOR = true;\n    }\n  }\n  static setSelectedGameType(value) {\n    if(value == GameType.OpenPredLead || value== GameType.Free2Play || value == GameType.Pickem){\n      _Map(DASHBOARD_FOOTER.tabs, (item, idx) => {\n        if (item.tab_key === \"my-profile\") {\n          DASHBOARD_FOOTER.tabs[idx][\"tab_key\"] = \"leaderboard\";\n        }\n      });\n    }else{\n      _Map(DASHBOARD_FOOTER.tabs, (item, idx) => {        \n        if (item.tab_key === \"leaderboard\") {\n          DASHBOARD_FOOTER.tabs[idx][\"tab_key\"] = \"my-profile\";\n        }\n      });\n    }\n    SELECTED_GAMET = value;\n  }\n}\n","/var/www/html/framework/frontend/src/store.jsx",[],"/var/www/html/framework/frontend/src/InitialSetup/MyProvider.jsx",["1268","1269","1270","1271","1272"],"import React from 'react';\nimport { getMasterData, loadLanguageResource } from \"../WSHelper/WSCallings\";\nimport { withTranslation } from \"react-i18next\";\nimport { changeLanguageString } from \"../helper/AppLabels\";\nimport { _Map, _isNull, Utilities, sendMessageToApp } from '../Utilities/Utilities';\nimport { LANGUAGE_OBJ, setValue,GameType } from '../helper/Constants';\nimport { createBrowserHistory } from 'history';\nimport { CustomToast } from \"../Component/CustomComponent\";\nimport { connect  } from \"react-redux\";\nimport { WebviewBridgeInit, WebViewInit, WebviewConsole  } from \"../redux/actions/place\";\nimport CustomLoader from '../helper/CustomLoader';\nimport Routing from './Routing';\nimport ls from 'local-storage';\nimport WSManager from '../WSHelper/WSManager';\nimport { SetFantasyList } from '../JsonFiles/Sports';\nexport const MyContext = React.createContext()\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\nclass MyProvider extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            AppDataPosting: false,\n            isLangLoaded: true\n        }\n    }\n\n    getLanguageCode() {\n        let lsLang = WSManager.getAppLang();\n        let lang = lsLang ? lsLang.split('-') : (this.props.i18n && this.props.i18n.language) ? this.props.i18n.language.split('-') : ['en'];\n        return lang[0];\n    }\n\n    loadResources = async (masterData) => {\n        var l_code = this.getLanguageCode();\n        let isCodeExist = false;\n        _Map(masterData.lang_list, (item) => {\n            if (item.value == l_code && !isCodeExist) {\n                isCodeExist = true;\n            }\n        })\n\n        var param = { lang_code: isCodeExist ? l_code : masterData.default_lang };\n        this.props.i18n.changeLanguage(param.lang_code);\n        var api_response_data = await loadLanguageResource(param)\n        if (api_response_data) {\n            _Map(Object.keys(api_response_data), (key) => {\n                LANGUAGE_OBJ[key] = api_response_data[key];\n            })\n        }\n        else {\n            import(\"../assets/i18n/translations/\" + param.lang_code + \".json\").then(data => {\n                _Map(Object.keys(data), (key) => {\n                    LANGUAGE_OBJ[key] = data[key];\n                })\n                changeLanguageString();\n            });\n        }\n    }\n\n    checkAppISLoggedIn(flag){\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc:'handleLoginReceived'\n            }\n            sendMessageToApp(data);\n            this.handelNativeData();\n        }\n    }\n\n    loadLangLocally(){\n        var l_code = this.getLanguageCode();\n        import(\"../assets/i18n/translations/\" + l_code + \".json\").then(data => {\n            _Map(Object.keys(data), (key) => {\n                LANGUAGE_OBJ[key] = data[key];\n            })\n            changeLanguageString();\n        });\n    }\n\n    generateSportLocalList = (apiDATA) => {\t\n        if (apiDATA.fantasy_list) {\t\n            let data = {\t\n                default_sport: parseInt(apiDATA.default_sport || '7'),\t\n                url: {}\t\n            };\t\n            _Map(apiDATA.fantasy_list, (item) => {\t\n                let spID = parseInt(item.sports_id || '0');\t\n                let spName = ((item.en_display_name || item.sports_name) || '').toLowerCase();\t\n                data[spName] = spID;\t\n                data.url[spID] = spName;\t\n                _Map(apiDATA.lang_list, (lObj) => {\t\n                    data.url[spID + (lObj.value || '')] = item[lObj.value + '_display_name'];\t\n                })\t\n            })\t\n            SetFantasyList.FantasyList(data)\t\n        }\t\n    }\n\n    componentWillMount() {\n        this.checkAppISLoggedIn(false)\n        this.loadLangLocally()\n        let gameType = WSManager.getPickedGameType();\n        setValue.setSelectedGameType(gameType || '')\n        if (window.location.href.includes('#prediction')) {\n            WSManager.setPickedGameType(GameType.Pred);\n            setValue.setGameTypesEnable(GameType.Pred);\n            gameType = GameType.Pred;\n        }\n        if (window.location.href.includes('#multigame')) {\n            WSManager.setPickedGameType(GameType.MultiGame);\n            setValue.setGameTypesEnable(GameType.MultiGame);\n            gameType = GameType.MultiGame;\n        }\n        if (window.location.href.includes('#pickem')) {\n            WSManager.setPickedGameType(GameType.Pickem);\n            setValue.setGameTypesEnable(GameType.Pickem);\n            gameType = GameType.Pickem;\n        }\n        if (window.location.href.includes('#tournament')) {\n            WSManager.setPickedGameType(GameType.Tournament);\n            setValue.setGameTypesEnable(GameType.Tournament);\n            gameType = GameType.Tournament;\n        }\n        if(window.location.href.includes('#freeToPlay')){\n            WSManager.setPickedGameType(GameType.Free2Play);\n            setValue.setGameTypesEnable(GameType.Free2Play);\n            gameType = GameType.Free2Play;\n        }\n        if (window.location.href.includes('#open-predictor')) {\n            WSManager.setPickedGameType(GameType.OpenPred);\n            setValue.setGameTypesEnable(GameType.OpenPred);\n            gameType = GameType.OpenPred;\n        }\n        if (window.location.href.includes('#open-predictor-leaderboard')) {\n            WSManager.setPickedGameType(GameType.OpenPredLead);\n            setValue.setGameTypesEnable(GameType.OpenPredLead);\n            gameType = GameType.OpenPredLead;\n        }\n        if (window.location.href.includes('#pickem')) {\n            WSManager.setPickedGameType(GameType.Pickem);\n            setValue.setGameTypesEnable(GameType.Pickem);\n            gameType = GameType.Pickem;\n        }\n\n        if(parsed.sgmty){\n            let urlGT = atob(parsed.sgmty)\n            WSManager.setPickedGameType(urlGT);\n            setValue.setGameTypesEnable(urlGT);\n            gameType = urlGT;\n        }\n\n        getMasterData().then((api_response_data) => {\n            if (api_response_data) {\n                this.generateSportLocalList(api_response_data)\n                if(process.env.REACT_APP_SERVE_LANG_LOCALLY != '1'){\n                    this.loadResources(api_response_data).then(() => {\n                        changeLanguageString();\n                        this.setState({ isLangLoaded: true })\n                    });\n                }\n                const Data = api_response_data;\n                if (Data.otp_size) {\n                    setValue.setOtpSize(Data.otp_size);\n                }\n                let appCacheVersion = ls.get('acv');\n                if (appCacheVersion && appCacheVersion !== Data.app_cache_version) {\n                    WSManager.logout();\n                } else {\n                    ls.set('acv', Data.app_cache_version);\n\n                    let downloadlinkData = Data.app_version ? Data.app_version.android : {};\n                    setValue.setAppDownloadLink(downloadlinkData.app_url)\n                    let selectedSports = Utilities.getUrlSports();\n                    Utilities.setMasterData(Data);\n                    if (Data.sports_hub && Data.sports_hub.length === 1) {\n                        WSManager.setPickedGameType(Data.sports_hub[0].game_key);\n                        setValue.setGameTypesEnable(Data.sports_hub[0].game_key);\n                    } else if (gameType) {\n                        let isGameAllowed = false;\n                        _Map(Data.sports_hub, (item) => {\n                            setValue.setGameTypesEnable(item.game_key);\n                            if (item.game_key == gameType) {\n                                isGameAllowed = true\n                            }\n                        })\n                        if (!isGameAllowed) {\n                            WSManager.removeLSItem('SHGT');\n                        }\n                    }else{\n                        _Map(Data.sports_hub, (item) => {\n                            setValue.setGameTypesEnable(item.game_key);\n                        })\n                    }\n\n                    if (selectedSports === \"null\") {\n                        selectedSports = Data.default_sport;\n                    }\n                    this.setState({\n                        AppDataPosting: true\n                    }, () => {\n                        changeLanguageString();\n                        setTimeout(() => {\n                            this.web_loaded();\n                        }, 200);\n                    });\n\n                    if (_isNull(selectedSports) || selectedSports === Data.default_sport) {\n                        ls.set('selectedSports', Data.default_sport);\n                        setValue.setAppSelectedSport(Data.default_sport);\n                    } else {\n                        setValue.setAppSelectedSport(selectedSports);\n                    }\n                    let app_version = {\n                        action: 'app_download',\n                        targetFunc: 'app_download',\n                        type: 'android',\n                        data: Utilities.getMasterData().app_version.android\n                    }\n                    sendMessageToApp(app_version)\n                    this.handelNativeData();\n\n                }\n            }\n        });\n    }\n\n    handelNativeData() {\n        window.addEventListener('message', (e) => {\n            if (e.data.action === 'app_version' && e.data.type === 'android') {\n                Utilities.setAndroidAppVersion('' + e.data.version)\n                this.setState({ androidAppVersion: e.data.version })\n            }\n            if(e.data.locale){\n                WSManager.setAppLang(e.data.locale);\n            }\n            if (e.data.UserProfile) {\n                WSManager.setProfile(e.data.UserProfile);\n            } \n            if (e.data.LoginSessionKey) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }   \n            if (e.data.isMobileApp) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }  \n            if (e.data.isIOSApp) {\n                WSManager.setIsIOSApp(e.data.isIOSApp);\n            }  \n        });\n    }\n\n    updateNativeApp() {\n        let app_version = {\n            action: 'app_download',\n            targetFunc: 'app_download',\n            type: 'android',\n            data: Utilities.getMasterData().app_version.android\n        }\n        sendMessageToApp(app_version)\n    }\n    web_loaded() {\n        let webL = {\n            action: 'web_loaded',\n            targetFunc: 'web_loaded'\n        }\n        sendMessageToApp(webL)\n    }\n\n    appLoader = () => {\n        if (WSManager.getIsIOSApp()) {\n            return (\n                <CustomLoader />\n            )\n        } else {\n            return null\n        }\n    }\n\n    render() {\n        const {\n            isLangLoaded,\n            AppDataPosting\n        } = this.state;\n\n        const ContextProps = {\n            state: this.state,\n            modalShow: this.modalShow,\n        }\n\n        let pathName = window.location.pathname;\n\n        return (\n            <MyContext.Provider value={ContextProps}>\n                <CustomToast style={{ zIndex: 999999 }} />\n                {\n                    (AppDataPosting && isLangLoaded)\n                        ? <>{this.props.children}<Routing /></>\n                        : \n                        window.location.search.search(\"isMobile=true\") == -1\n                        ? \n                           window.ReactNativeWebView ? this.appLoader() :  <div className={\"web-container white-bg \" + (pathName == '/' ? 'max-width-100' : '')}><CustomLoader /></div>\n                        : \n                            this.appLoader()\n                }\n            </MyContext.Provider>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ...state\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        WebviewBridgeInit: (data, type) => dispatch(WebviewBridgeInit(data, type)),\n        WebViewInit: (data) => dispatch(WebViewInit(data)),\n        WebviewConsole: (data) => dispatch(WebviewConsole(data))\n    }\n}\n\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(MyProvider))","/var/www/html/framework/frontend/src/views/NoNetwork/NoNetwork.jsx",[],"/var/www/html/framework/frontend/src/helper/AppLabels.jsx",["1273"],"import i18n from \"../i18n\";\nimport { Utilities } from '../Utilities/Utilities';\n\nfunction transtale(key) {\n    return i18n.t(key)\n}\n\nexport function replace_PANTOID(string){\n    if (Utilities.getMasterData().int_version == 1) {\n        const PAN_TEXT = PAN || '';\n        const PAN_TO_ID_TEXT = PAN_TO_ID || '';\n        const regexPAN = new RegExp(PAN_TEXT, \"g\");\n        return string.replace(regexPAN, PAN_TO_ID_TEXT);\n    } else {\n        return string\n    }\n}\n\nexport function changeLanguageString() {\n    translateHomeData();\n    translateSportsHub();\n    translateCoinData();\n    translateOnboardigData();\n    translateDrawer();\n    translateLeaderboard();\n    translateContestData();\n    translateRosterData();\n    translatePlayerCardData();\n    translateMyContestData();\n    translateCreateContestData();\n    translateWalletData();\n    translateInviteData();\n    translateProfileData();\n    translateNotificationData();\n    translateStaticPagesData();\n    translateContestListingData();\n    translateItemData();\n    translateFTPData();\n    translateReferralFriend();\n    translateEsport();\n    translateAffiliate();\n    translateCoinEntry();\n    translateCoinModule();\n    translateTeamCompare();\n\n}\n\n//Home Page\nexport var FIXTURES_HEADER1 = '';\nexport var FIXTURES_HEADER2 = '';\nexport var DOWNLOAD_NOW = '';\nexport var PLAY_NOW = '';\nexport var PLAY = '';\nexport var ABOUT_US = '';\nexport var TERMS_CONDITION = '';\nexport var PRIVACY_POLICY = '';\nexport var THE_GAME = '';\nexport var HOW_TO_PLAY = '';\nexport var HOW_TO_PLAY_FANTASY_SPORTS = '';\nexport var RULES_SCORING_SYSTEM = '';\nexport var SUPPORT = '';\nexport var FAQS = '';\nexport var CONTACT_US = '';\nexport var OFFERS = '';\nexport var LEGALITY = '';\nexport var REFUND_POLICY = '';\nexport var CONTACT_US_EMAIL = '';\nexport var CONTACT_US_PHONE = '';\nexport var DOWNLOAD_APP = '';\nexport var DOWNLOAD_MOBILE_APP = '';\nexport var MOBILE_APP_DESC = '';\nexport var DOWNLOAD_MEESAGE='';\nexport var ENTER_MOBILE_NUMBER = ''\nexport var ENTER_MOBILE = ''\nexport var GET_LINK_NOW = ''\nexport var CHANGE_LANGUAGE = ''\nexport var DISCLAIMER_LINE1 = ''\nexport var DISCLAIMER_LINE_SUB_TITLE1 = ''\nexport var DISCLAIMER_LINE_SUB_TITLE2 = ''\nexport var DISCLAIMER_LINE_SUB_TITLE3 = ''\nexport var DISCLAIMER_LINE_SUB_TITLE4 = ''\nexport var DISCLAIMER_LINE_SUB_TITLE5 = ''\nexport var DISCLAIMER_LINE2 = ''\nexport var DISCLAIMER_LINE3 = ''\nexport var DISCLAIMER_LINE4 = ''\n\n\n//Onboarding\nexport var SIGN_UP = '';\nexport var LOGIN = '';\nexport var GET = '';\nexport var INSTANTLY = '';\nexport var ON_EVERY_SIGNUP = '';\nexport var T_N_C_APPLY = '';\nexport var INVALID_PHONE_NUMBER = '';\nexport var PHONE_NUMBER_REQUIRE = '';\nexport var RESEND_IN = \"\";\nexport var PASSWORD = \"\";\nexport var ENTER_CURRENT_PASSWORD = \"\";\nexport var ENTER_NEW_PASSWORD = \"\";\nexport var CURRENT_PASSWORD = \"\";\nexport var NEW_PASSWORD = \"\";\nexport var CONFIRM_PASSWORD = \"\";\nexport var ENTER_CONFIRM_PASSWORD = \"\";\nexport var FORGOT_PASSWORD = '';\nexport var RESET_PASSWORD = '';\nexport var PLEASE_ENTER_CURRENT_PASSWORD = \"\";\nexport var PLEASE_ENTER_NEW_PASSWORD = \"\";\nexport var NEW_PASSWORD_MIN_LENGTH = \"\";\nexport var NEW_PASSWORD_MAX_LENGTH = \"\";\nexport var PASSWORD_NOT_MATCHED = \"\";\nexport var FORGOT_PASSWORD_TEXT = '';\nexport var BY_SIGNING_UP = '';\nexport var CONNECT_INSTANTLY_WITH = '';\nexport var FACEBOOK = '';\nexport var GOOGLE = '';\nexport var GMAIL = '';\nexport var OR = '';\nexport var YOUR_PHONE_NUMBER = '';\nexport var CONFIRM_18YEAR1 = '';\nexport var CONFIRM_18YEAR2 = '';\nexport var SEND_OTP = '';\nexport var VERIFY_MOBILE = '';\nexport var ENTER_OTP = '';\nexport var RESEND = '';\nexport var OTP_SENT_TO = '';\nexport var HAVE_A_REFERRAL_CODE = '';\nexport var ENTER_REFERRAL_CODE = '';\nexport var SKIP_STEP = '';\nexport var PICK_YOUR_EMAIL = '';\nexport var ENTER_YOUR_EMAIL = '';\nexport var ENTER_YOUR_REGISTERED_EMAIL = '';\nexport var ENTER_PASSWORD = '';\nexport var EMAIL_USE = '';\nexport var PICK_YOUR_USERNAME = '';\nexport var ENTER_YOUR_USERNAME = '';\nexport var USERNAME_UNIQUE = '';\nexport var INVALID_EMAIL_ID = '';\nexport var MORE = '';\nexport var REFERRAL_CODE_TEXT = '';\nexport var VERIFY_MOBILE_TEXT = '';\nexport var VERIFY_MOBILE_TEXT1 = '';\nexport var PASSWORD_TEXT = '';\nexport var PASSWORD_TEXT1 = '';\nexport var EMAIL_ADDRESS = '';\nexport var EMAIL_ADDRESS_TEXT = '';\nexport var PICK_USER_NAME = '';\nexport var SELECT_YOUR_LANGUAGE = '';\nexport var CREATE_YOUR_PASSWORD = '';\nexport var CREATE_YOUR_PASSWORD_TEXT = '';\nexport var YOUR_MOBILE_NUMBER = '';\nexport var YOUR_MOBILE_NUMBER_TEXT = '';\nexport var OPTIONAL = '';\nexport var YOUR_PASSWORD = '';\nexport var YOUR_PASSWORD_TEXT = '';\nexport var VERIFY_EMAIL = '';\nexport var FORGOT_YOUR_PASSWORD = '';\nexport var FORGOT_YOUR_PASSWORD_TEXT = '';\nexport var RESET_PASSWORD_TEXT = '';\nexport var EMAIL_SEND_SUCCESS_MESSAGE = '';\nexport var SIGNUP_INFO = '';\nexport var SIGNUP_INFO1 = '';\nexport var SIGN_UP_OR_LOGIN = '';\nexport var PLEASE_ENTER_A_VALID_REFERRAL_CODE = '';\nexport var HOW_IT_WORKS = '';\n\n//Drawer\nexport var TOTAL_BALANCE = '';\nexport var SWITCH_SPORTS = '';\nexport var HOME = '';\nexport var MY_CONTEST = '';\nexport var MY_WALLET = '';\nexport var MY_PROFILE = '';\nexport var REFER_FRIENDS = '';\nexport var REFER_A_FRIEND = '';\nexport var REFER_A_FRIEND_C = '';\nexport var REFER_A_FRIEND_LOWER = '';\nexport var CHANGE_PASSWORD = '';\nexport var OTHERS = '';\nexport var NOTIFICATIONS = '';\nexport var REDEEM_COINS = '';\nexport var ORDER_HISTORY = '';\nexport var RULES_SCORING = '';\nexport var RULES_AND_SCORING = '';\nexport var SELECT_NAME_FIRST = '';\nexport var LOGOUT_MESSAGE = '';\nexport var HAVE_A_LEAGUE_CODE = '';\nexport var LOGOUT = '';\nexport var DEVELOPED_BY = '';\nexport var VINFOTECH = '';\n\n//Leaderboard\nexport var NO_DATA_AVAILABLE = '';\nexport var GO_TO_MY_CONTEST = '';\nexport var IN_CASE_AUTO_DOWNLOAD_NOT_START = '';\nexport var DOWNLOAD_ALL_TEAMS = '';\nexport var NAME = '';\nexport var URL_COPIED_TO_CLIPBOARD = '';\nexport var SUCCESS = '';\nexport var LEADERBOARD = '';\nexport var CUSTOM_SCORING_MSG = '';\n\n// Fixture, Contest Listing and Detail\nexport var LINEUP_OUT = '';\nexport var PLAYING = '';\nexport var ERROR_MSG = '';\nexport var NOT_PLAYING = '';\nexport var ANNOUNCED = '';\nexport var FIXTURES_HEADER = '';\nexport var CREATE_A_CONTEST = '';\nexport var Create_a_Contest = '';\nexport var JOIN_PRIVATE_CONTEST = '';\nexport var ENTER_LEAGUE_CODE_TO_JOIN = '';\nexport var ENTER_LEAGUE_CODE = '';\nexport var WINNINGS = '';\nexport var NO_FIXTURES_MSG1 = '';\nexport var NO_FIXTURES_MSG2 = '';\nexport var NO_FIXTURES_MSG3 = '';\nexport var HOW_TO_PLAY_FANTASY = '';\nexport var GROUP_CONTESTS = '';\nexport var SORT_CONTESTS = '';\nexport var GROUP_CONTESTS_MSG = '';\nexport var LOADING_MSG = '';\nexport var WIN = '';\nexport var PRACTICE = '';\nexport var JOIN = '';\nexport var ENTRIES = '';\nexport var FIXTURE = '';\nexport var MIN = '';\nexport var MORE_CONTEST = '';\nexport var LESS_CONTEST = '';\nexport var ALREADY_JOIN_WITH = '';\nexport var TEAM = '';\nexport var TEAMS = '';\nexport var INFO = '';\nexport var JOIN_WITH_MAX = '';\nexport var SUBMIT = '';\nexport var SUBMIT_PLAYERS_IN_BUDGET = '';\nexport var SALARY_CAP = '';\nexport var SCORING_RULES = '';\nexport var NORMAL = '';\nexport var BONUS = '';\nexport var CAPTAIN = '';\nexport var VICE_CAPTAIN = '';\nexport var ECONOMY_RATE = '';\nexport var STRIKE_RATE = '';\nexport var ENTRY = '';\nexport var FREE_ENTRY = '';\nexport var FREE = '';\nexport var WINNERS = ' ';\nexport var WINNER = ' ';\nexport var WINNING_DISTRIBUTION = '';\nexport var DISTRIBUTION = '';\nexport var MULTI_ENTRY_CONTEST = '';\nexport var MULTI_ENTRY_DISCRIPTION = ''\nexport var GUARANTEED_DESCRIPTION = ''\nexport var GUARANTEED_CONTEST = '';\nexport var CONFIRM_DESCRIPTION = ''\nexport var CONFIRM_CONTEST = '';\nexport var PRIVATE_CONTEST = '';\nexport var FRIENDS_PLAY_BONUS = '';\nexport var VS = '';\nexport var PRIZE_MSG1 = '';\nexport var PRIZE_MSG2 = '';\nexport var PRIZE_MSG3 = '';\nexport var PRIZE_MSG4 = '';\nexport var GUARANTEED_PRIZE_MSG1 = '';\nexport var GUARANTEED_PRIZE_MSG2 = '';\nexport var GUARANTEED_PRIZE_MSG3 = '';\nexport var IST = '';\nexport var PULL_DOWN_TO_REFRESH = '';\nexport var RELEASE_TO_REFRESH = '';\nexport var THIS_FEATURE_IS_COMING_SOON = '';\nexport var MIN_CAMEL_CASE = '';\nexport var DONE = '';\nexport var ALL = '';\nexport var NO_TEAM_MSG = '';\nexport var THIS_CONTEST = '';\nexport var MY_TEAMS = '';\nexport var JOIN_NOW = '';\nexport var CONTEST_JOIN_NOW = '';\nexport var NO_CONTEST_FOR_FILTER = '';\nexport var NO_DATA_FOR_FILTER = '';\nexport var NO_RESULT_FOUND_FILTER_1 = '';\nexport var NO_CONTEST_FOR_FILTER_1 = '';\nexport var NO_CONTEST_FOR_FILTER_2 = '';\nexport var FILTERS = '';\nexport var MAX_ENTRIES = '';\nexport var Earn = \"\";\nexport var Coin = \"\";\nexport var on_your_friends_signup = \"\";\nexport var on_your_first_cash_contest = \"\";\nexport var MY_TEAM = \"\";\nexport var View_All_Players = \"\";\nexport var COLLECTION_CONTEST_DISCRIPTION = \"\";\nexport var MATCHES_SM = '';\nexport var COLLECTION = '';\nexport var MAX_TEAM_FOR_MULTI_ENTRY = '';\nexport var MAX_MULTI_ENTRY_TEAM = '';\nexport var SALARY_LEFT = '';\nexport var DELAYED = '';\nexport var MULTIGAME_TITLE = '';\nexport var MULTIGAME_DETAIL = '';\nexport var SELECT_MULTIGAME_CONTEST_TITLE = '';\nexport var SELECT_MULTIGAME_CONTEST_DETAIL = '';\nexport var CHOOSE_PLAYER = '';\nexport var FIXTURE_TAB = '';\nexport var VIEW_PROOF = '';\nexport var PROOF = '';\nexport var NO_QUE_FOR_CATEGORY = '';\nexport var SWITCH_TO_OTHER_CAT = '';\nexport var EXCITING_QUE_ON_WAY = '';\nexport var PICKEM_HTP_LABEL1 = '';\nexport var PICKEM_HTP_MSG1 = '';\nexport var PICKEM_HTP_LABEL2 = '';\nexport var PICKEM_HTP_MSG2 = '';\nexport var PICKEM_HTP_LABEL3 = '';\nexport var PICKEM_HTP_MSG3 = '';\nexport var PARTICIPANTS = '';\nexport var PICKEM_SHARE_MSG = '';\nexport var THIS_WILL_BE_UPDATED = '';\nexport var PEOPLE_JOINED_THIS_CONTEST = '';\nexport var Use = '';\nexport var BONUS_CASH_CONTEST_LISTING = '';\n\n\n\n\n\n//Roster and Field View\nexport var CREDITS_LEFT = '';\nexport var RESET_ACTION = '';\nexport var SELECTED = '';\nexport var SELECT = '';\nexport var FILTER_BY_TEAM = '';\nexport var FIND_A_PLAYER = '';\nexport var PLAYER = '';\nexport var POINTS = '';\nexport var GETS = ' ';\nexport var SALARY = '';\nexport var SALARY_ABR = '';\nexport var NEXT = '';\nexport var FANTASY_PTS = '';\nexport var VALUE = '';\nexport var FORM = '';\nexport var GAME_LOG = '';\nexport var LAST_5_MATCHES = '';\nexport var DATE = '';\nexport var FORMAT = '';\nexport var RUNS = '';\nexport var WKT = '';\nexport var E_R = '';\nexport var S_R = '';\nexport var PTS = '';\nexport var ROUND1 = '';\nexport var ROUND2 = '';\nexport var ROUND3 = '';\nexport var RESET = '';\nexport var RANK = '';\nexport var ENTER_TAM_NAME = '';\nexport var CHOOSE_CAPTAIN_VICE_CAPTAIN = '';\nexport var CHOOSE_CAPTAIN = '';\nexport var PICK_CAPTAIN = '';\nexport var CAPTAIN_GETS = '';\nexport var C = '';\nexport var VC = '';\nexport var VICE_CAPTAIN_GETS = '';\nexport var SORT_BY = '';\nexport var PLAYERS = '';\nexport var SUBMIT_LINEUP = '';\nexport var CONFIRMATION = '';\nexport var ENTRY_FEE = '';\nexport var Entry_fee = '';\nexport var PAYABLE_BALANCE = '';\nexport var JOINING_TEAM_WITH = '';\nexport var SELECT_TEAM = '';\nexport var CREATE_NEW_TEAM = '';\nexport var HAVE_A_PROMO_CODE = '';\nexport var PROMO_CODE = '';\nexport var ENTER_PROMO_CODE = '';\nexport var APPLY = '';\nexport var JOIN_CONTEST = '';\nexport var ADD_FUND_JOIN_CONTEST = '';\nexport var PROMO_TEXT1 = '';\nexport var PROMO_TEXT2 = '';\nexport var PROMO_TEXT3 = '';\nexport var PAYABLE_TOOLTIP1 = '';\nexport var PAYABLE_TOOLTIP2 = '';\nexport var MAX = '';\nexport var JOIN_SUCCESS_TITLE = ''\nexport var JOIN_SUCCESS_MESSAGE = ''\nexport var JOIN_MORE = '';\nexport var JOIN_MORE_POPUP = '';\nexport var CONTESTS = '';\nexport var CONTESTS_POPUP = '';\nexport var SEE_MY_CONTESTS = '';\nexport var DISMISS = '';\nexport var OF = '';\nexport var CONTEST_JOINED = '';\nexport var TAB_TO_SEE_FIELD_VIEW = '';\nexport var MAX_PLAYER_TEAMWISE = '';\nexport var MAX_PLAYER_TEAMWISE1 = '';\nexport var VERSES = '';\nexport var CHOOSE_VICE_CAPTAIN = '';\nexport var SELECT_MATCH_TEXT = '';\nexport var CREATE_TEAM = '';\nexport var PLAYERS_FROM_A_TEAM = '';\nexport var PICK = '';\nexport var TEAM_PREVIEW = '';\n\n//Player Card\nexport var EXPECTED_SCORE = '';\n\n//My Contest\nexport var NO_UPCOMING_CONTEST1 = '';\nexport var NO_UPCOMING_CONTEST2 = '';\nexport var NO_LIVE_CONTEST1 = '';\nexport var NO_LIVE_CONTEST2 = '';\nexport var NO_COMPLETED_CONTEST1 = '';\nexport var NO_COMPLETED_CONTEST2 = '';\nexport var GO_TO_LOBBY = '';\nexport var LIVE = '';\nexport var UPCOMING = '';\nexport var COMPLETED = '';\nexport var IN_PROGRESS = '';\nexport var STANDINGS = '';\nexport var SWITCH_TEAM = '';\nexport var EDIT_TEAM = '';\nexport var VIEW_TEAM = '';\nexport var WON = '';\nexport var YOUR_CURRENT_TEAM = '';\nexport var SWITCH_WITH = '';\nexport var NO_UPCOMING_PICKEM1 = '';\nexport var NO_UPCOMING_PICKEM2 = '';\nexport var NO_LIVE_PICKEM1 = '';\nexport var NO_LIVE_PICKEM2 = '';\nexport var NO_COMPLETED_PICKEM1 = '';\nexport var NO_COMPLETED_PICKEM2 = '';\n\n//CREATE CONTEST\nexport var SELECT_LEAGUE = '';\nexport var MATCHES = '';\nexport var Min_team_size = '';\nexport var Max_team_size = '';\nexport var Number_of_winners = '';\nexport var CONTEST_NAME = '';\nexport var Contest_Name = '';\nexport var PRIZE_POOL = '';\nexport var PRIZES = '';\nexport var Prize_Distribution = '';\nexport var WINNING = '';\nexport var TOTAL = '';\nexport var CREATE_SHARE = '';\nexport var SELECT_LEAGUE_ERROR = '';\nexport var SELECT_MATCH = '';\nexport var SELECT_MINIMUM_TEAM = '';\nexport var SELECT_MAX_TEAMS = '';\nexport var MIN_TEAM_CONDITION = '';\nexport var MAX_TEAM_CONDITION = '';\nexport var SELECT_ENTRY_FEE = '';\nexport var SELECT_WINNERS_COUNT = '';\nexport var SELECT_CONTEST_NAME = '';\nexport var SELECT_CONTEST_NAME_MIN_CONDITION = '';\nexport var WINNERS_CONDITION = '';\nexport var PRIZE_STRUCTURE_ERROR = '';\nexport var WINNING_PER_EQ100 = '';\nexport var WINNING_PER_EQLESS100 = '';\nexport var WINNING_AMT_CONDITION = '';\nexport var PLEASE_ENTER_AMOUNT = '';\nexport var ENTERED_AMOUNT_MUST_BE_5 = '';\nexport var PLEASE_ENTER_ATLEAST_4_DIGIT = '';\nexport var PLEASE_ENTER_PROMO_CODE = '';\n\n//My Wallet\nexport var ADD_FUNDS = '';\nexport var WITHDRAW = '';\nexport var EARN_COINS = '';\nexport var EARN_COINS_LOWCASE = '';\nexport var RECENT_TRANSACTION = '';\nexport var VIEW_ALL_TRANSACTION = '';\nexport var TRANSACTION_STATUS_PENDING = '';\nexport var TRANSACTION_STATUS_SUCCESS = '';\nexport var TRANSACTION_STATUS_FAILED = '';\nexport var CREDITS = '';\nexport var CREDIT = '';\nexport var credit = '';\nexport var DEBIT = '';\nexport var REAL_WINNING_BONUS_AMT = '';\nexport var TODAY = '';\nexport var DEPOSIT_BALANCE = '';\nexport var PAYUMONEY = '';\nexport var PAYTM = '';\nexport var GO_CASH = '';\nexport var MPESA = '';\nexport var ADD_AMOUNT_TO_WALLET = 'Add Amount to Your Wallet (' + (Utilities.getMasterData() ? Utilities.getMasterData().currency_code : '') + ')';\nexport var MIN_WITHDRAW_LIMIT = 'The minimum withdrawal limit is ' + (Utilities.getMasterData() ? Utilities.getMasterData().currency_code : '') + ' ';\nexport var MAX_WITHDRAW_LIMIT = '';\nexport var BANK_DETAILS = '';\nexport var PAN_TO_ID = '';\nexport var AMOUNT = 'Amount (' + (Utilities.getMasterData() ? Utilities.getMasterData().currency_code : '') + ')';\nexport var PANCARD_PENDING_STATUS = '';\nexport var PANCARD_REJECTED_STATUS = '';\nexport var PANCARD_REJECTED_STATUS_MSG = '';\nexport var FULL_NAME_AS_BANK = '';\nexport var BANK_NAME = '';\nexport var ACCOUNT_NUMBER = '';\nexport var IFSC_CODE = '';\nexport var PANCARD_NUMBER = '';\nexport var PANCARD = '';\nexport var MAX_SIZE_UPLOAD = '';\nexport var UPLOAD_FORMATS = '';\nexport var UPDATE_BANK_DETAIL_FROM_PROFILE = '';\nexport var YOU_CAN_UPDATE_YOUR = '';\nexport var BANK_DETAIL_FROM_PROFILE = '';\nexport var UPDATE = '';\nexport var WITHDRAW_ALERT = '';\nexport var PROFILE = '';\nexport var PROFILE_SMALL = '';\nexport var NOTE = '';\nexport var WATCH_VIDEO_N_GET = '';\nexport var ADDED_TO_ACCOUNT = '';\nexport var THANKYOU = '';\nexport var WITHDRAW_PROCESS1 = '';\nexport var WITHDRAW_PROCESS2 = '';\nexport var OK = '';\nexport var CANCEL = '';\nexport var ALERT = '';\nexport var BANK_TRANSFER = '';\nexport var Your_payment_successful = \"\";\nexport var Your_payment_failed = \"\";\nexport var Your_payment_pending = \"\";\nexport var Coins_in_your_wallet = \"\";\nexport var coins = \"\";\nexport var Price = \"\";\nexport var Place_order = \"\";\nexport var Min_withdraw_amount_is = \"\";\nexport var YOUR_WINNINGS = \"\";\nexport var MONEY_YOU_WON = \"\";\nexport var VERIFY_YOUR_ACCOUNT_TO_ACTIVATE_WITHDRAW_MONEY_SERVICE = \"\";\nexport var DEPOSIT = \"\";\nexport var VERIFY_YOUR_ACCOUNT = \"\";\nexport var VERIFY_GET = \"\";\nexport var VERIFICATION_PENDING = \"\";\nexport var TRANS_ID = \"\";\nexport var STATUS = \"\";\nexport var PANCARD_VERIFICATION = \"\";\nexport var PHONE_VERIFICATION = \"\";\nexport var FIRST_CONTEST = \"\";\nexport var FIFTH_CONTEST = \"\";\nexport var THENTH_CONTEST = \"\";\nexport var NAME_ON_PANCARD = \"\";\nexport var VERIFY_PANCARD = \"\";\nexport var BankVerification = \"\";\nexport var ADD_CASH = \"\";\nexport var TOTAL_WINNINGS = \"\";\nexport var YOU_CAN_WITHDRAW_ONLY_FROM_WINNING = \"\";\nexport var YOUR_WITHDRAWAL_AMOUNT_WILL_BE_CREDITED_TO_THIS_ACCOUNT = \"\";\nexport var YOUR_WITHDRAWAL_REQUEST_IS_PENDING = \"\";\nexport var VERIFY_BANK_DETAILS = \"\";\nexport var SELECT_PAYMENT_METHOD = \"\";\nexport var TO_PAY = \"\";\nexport var TRANSACTION_STATUS_REJECTED = \"\";\nexport var DELETE = \"\";\nexport var PENDING_AMOUNT = \"\";\nexport var RAISE_ANOTHER_WITHDRAWAL_REQUEST = \"\";\nexport var PANCARD_HELP_TEXT = \"\";\nexport var INVALID_PROMOCODE = \"\";\nexport var PLEASE_ENTER_VALID_PAN_CARD_NUMBER = \"\";\n\nexport var CREDIT_DEBIT_CARD = \"\";\nexport var PAYTM_WALLET = \"\";\nexport var OTHER_WALLET = \"\";\nexport var UPI = \"\";\nexport var NET_BANKING = \"\";\nexport var VERIFY_YOUR_ACCOUNT_FIRST = \"\";\nexport var PAY_WITH_DEBIT_CARD_CREDIT_CARD_UPI_MORE = \"\";\nexport var WHERE__HOW_MUCH_SPENT_KNOW_ALL = \"\";\nexport var WITHDRAW_YOUR_WINNINGS_IN_YOUR_ACCOUNT = \"\";\nexport var YOUR_ACCOUNT_IS_VERIFIED = \"\";\nexport var YOUR_ACCOUNT_IS_VERIFIED1 = \"\";\nexport var VIEW = \"\";\nexport var INSUFFICIENT_BALANCE = \"\";\nexport var WITHDRAW_MONEY = \"\";\nexport var TRANSACTION_HISTORY = \"\";\nexport var TRANSACTIONS = \"\";\nexport var NEED_HELP = \"\";\nexport var HRS24_SUPPORT = \"\";\nexport var SUFFICIENT_WINNING = \"\";\n\n//Inview on social media\nexport var INVITE_YOUR_FRIENDS_VIA = '';\nexport var INVITE_LINK = '';\nexport var INVITE_FB = '';\nexport var INVITE_WHATSAPP = '';\nexport var INVITE_EMAIL = '';\nexport var INVITE_FRIENDS = '';\nexport var INVITE_FRIENDS_EARN = '';\nexport var JOINED = '';\nexport var CASH = '';\nexport var MY_REFERRALS = '';\nexport var BONUS_EARNED = '';\nexport var CASH_EARNED = '';\nexport var COINS_EARNED = '';\nexport var SHARE = '';\nexport var REFERRAL = '';\nexport var FRIEND_DEPOSIT = '';\nexport var ACHIEVEMENTS = '';\nexport var OF_YOUR_FRIEND_DEPOSIT_MAXIMUM = '';\nexport var REAL_CASE_ON_YOUR_FRIEND_SIGN_UP = '';\nexport var INVITE_FRIEND_WIN_REWARD = '';\nexport var REFER_NOW = '';\nexport var EDIT_YOUR_CODE_BONUS = '';\nexport var IT_PAY_TO_HAVE = '';\nexport var YOU_WILL_EARN_ON_EACH_NEW_SIGN_UP = '';\nexport var INVALID_ALPHA_NUMERIC_KEY='';\nexport var OF_YOUR_FRIEND_DEPOSIT = '';\nexport var EMAIL_VERIFIED = '';\nexport var FIRST_DEPOSIT = '';\nexport var PAN_VERIFIED = '';\nexport var SHARE_REFERRAL_CODE = '';\nexport var COPY = '';\nexport var TELL_YOUR_FRIENDS_SIGNUP = ''\nexport var TELL_YOUR_FRIENDS_JOIN_CONTEST = ''\nexport var TOP_REFERRERS = '';\nexport var EARNED = '';\nexport var TOTAL_EARNED = '';\nexport var REAL_CASH = '';\nexport var BONUS_CASH = '';\nexport var ERNED_FIFITH_REF = '';\nexport var ERNED_TEHTH_REF = '';\nexport var ERNED_FIFITHEEN_REF = '';\nexport var COINS = '';\nexport var NOT_REFER = '';\nexport var YOUR_FRIENDS_YET = '';\nexport var SHARE_NOW = '';\nexport var MERCHANDISE = '';\nexport var FREE_CONTEST = '';\nexport var SHARE_CONTEST_CODE = '';\nexport var Hi = \"\";\nexport var contest_and_win_real_cash = \"\";\nexport var League_Url = \"\";\nexport var Your_friend_has_shared = \"\";\nexport var Your_friend_has_shared_pick = \"\";\nexport var WinFantasy = \"\";\nexport var Your_friend_has_referred_you = \"\";\nexport var Your_Friend = \"\";\nexport var has_referred_you_on = \"\";\nexport var please_join_and_earn_prizes = \"\";\nexport var please_join_and_earn_prizes_text = \"\";\nexport var or = \"\";\nexport var Join_through_the_following = \"\";\nexport var Join_through_the_following_text = \"\";\nexport var WHILE_SIGNING_UP = \"\";\nexport var YOUR_FRIEND_CONTEST = \"\";\nexport var has_referred_you_on_contest = \"\";\nexport var please_join_and_earn_prizes_text_contest = \"\";\nexport var OR_CONTEST = \"\";\nexport var Join_through_the_following_text_contest = \"\";\nexport var and_contest_code_contest = \"\";\nexport var and_contest_code = \"\";\nexport var MEDIUM_ADD = \"\";\nexport var Cheers = \"\";\nexport var Teams = \"\";\nexport var CHEERS_CONTEST = \"\";\nexport var TEAMS_CONTEST = \"\";\nexport var Link_has_been_copied = \"\";\nexport var Promocode_has_been_applied = \"\";\nexport var MSZ_COPY_CODE = \"\";\nexport var ON_ENTERING_YOUR_FRIENDS_REFERRAL_CODE = \"\";\nexport var REAL_CASH_FOR_EVERY_FRIEND_YOU_REFER = \"\";\nexport var BONUS_FOR_EVERY_FRIEND_YOU_REFER = \"\";\nexport var COINS_FOR_EVERY_FRIEND_YOU_REFER = \"\";\nexport var REFER_YOU_AND_EARNED = \"\";\nexport var EARN_REAL_CASH_WHEN_YOUR_FRIEND_SIGNS_UP = \"\";\nexport var SHARE_YOUR_CODE = \"\";\nexport var BRING_YOUR_FRIENDS_AND = \"\";\nexport var PLAY_FOR_FREE = \"\";\nexport var YOUR_FRIEND = \"\";\n\n\n//Refer Friend \nexport var CONGRATULATIONS = \"\";\nexport var YOU_GOT_ = \"\";\nexport var BONUS_CASH_ON_SIGNINGUP_REFER_CODE = \"\";\nexport var BONUS_CASH_ON_SETTING_REF_CODE = \"\";\nexport var BONUS_CASH_LOWER = \"\";\n\nexport var REAL_CASH_LOWER = \"\";\nexport var COIN_CASH_LOWER = \"\";\nexport var EDIT_REFER = \"\";\nexport var CODE = \"\";\nexport var INVITE_YOUR_FRIEND_BIG_REWARD = \"\";\nexport var ON_TRY_COOL_REF_CODE = \"\";\nexport var REF_CODE = \"\";\nexport var I_DONT_WANT_TO_EDIT = \"\";\nexport var YOU_WONT_TO_ABLE_EDIT_THIS_CODE_AGAIN = \"\";\nexport var FRIENDS_SIGNUP = \"\";\nexport var YOU_GET = \"\";\nexport var YOUR_FRIEND_GETS = \"\";\nexport var ON_FRIEND_DEPOSIT = \"\";\nexport var OF_YOU = \"\";\nexport var FRIEND_DEPOSIT_MAXIMUM = \"\";\nexport var UPTO = \"\";\nexport var LOYALITY_REWARDS = \"\";\nexport var FTH_REF = \"\";\nexport var TEN_REF = \"\";\nexport var FIF_REF = \"\";\nexport var GOT_IT = \"\";\nexport var REFERRAL_SYSTEM = \"\";\nexport var ON_SIGN_UP = \"\";\nexport var MORE_REFERRALS = \"\";\nexport var ON = \"\";\nexport var TOTAL_EARNING = \"\";\nexport var LOAD_MORE_RESULTS = \"\";\nexport var VIEW_LEADEBOARD=''\nexport var TOTAL_REFERAL = \"\";\nexport var REFERAL_LEADERBOARD = \"\";\nexport var REFER_MORE_TEXT=\"\"\n\n\n\n\n//Profile\nexport var USER_NAME = '';\nexport var BASIC_INFO = '';\nexport var EMAIL = '';\nexport var DOB = '';\nexport var GENDER = '';\nexport var MOBILE_NUMBER = '';\nexport var ADDRESS = '';\nexport var EDIT_PROFILE = '';\nexport var FIRST_NAME = '';\nexport var LAST_NAME = '';\nexport var VERIFY = '';\nexport var VERIFIED = '';\nexport var SELECT_DOB = '';\nexport var SELECT_GENDER = '';\nexport var MALE = '';\nexport var FEMALE = '';\nexport var SETREET_ADDRESS = '';\nexport var COUNTRY = '';\nexport var STATE = '';\nexport var CITY = '';\nexport var PIN_CODE = '';\nexport var POSTAL_CODE = '';\nexport var MICR_CODE = '';\nexport var UPLOAD_PAN_CARD = '';\nexport var UPLOAD = '';\nexport var UPLOAD_BANK_DOC = '';\nexport var UPLOAD_BANK_DOC_DESC = '';\nexport var BANK_PROFILE_VERIFIED = '';\nexport var is_invalid = \"\";\nexport var Please_select_DOB = \"\";\nexport var Please_select_Gender = \"\";\nexport var Please_enter_mobile_number = \"\";\nexport var Please_upload_ID_card = \"\";\nexport var Please_upload_Bank_document = \"\";\nexport var VERIFY_YOUR_DETAILS_TO_ENJOY_SEAMLESS_WITHDRAWLS = \"\";\nexport var PLAYING_EXPERIENCE = \"\";\nexport var PRIMARY_INFO = \"\";\nexport var MOBILE = \"\";\nexport var PAN = \"\";\nexport var BANK = \"\";\nexport var EMAIL_VERIFICATION = \"\";\nexport var EMAIL_VERIFICATION_TEXT = \"\";\nexport var YES = \"\";\nexport var NO = \"\";\nexport var ARE_YOU_SURE_YOU_WANT_TO_DELETE_BANK_DETAILS = \"\";\nexport var EDIT_USERNAME = \"\";\nexport var CHECK_AVAILABILITY = \"\";\nexport var EDIT_MOBILE_NUMBER = \"\";\nexport var EDIT_EMAIL_ADDRESS = \"\";\nexport var VERIFY_EMAIL_ADDRESS = \"\";\nexport var ADD_AMOUNT = \"\";\nexport var ENTER_AMOUNT = \"\";\nexport var PICK_BEST_DEAL = \"\";\nexport var YOU_WILL_ADDITIONALLY_GET = \"\";\nexport var EDIT_BASIC_INFO = \"\";\nexport var USERNAME_HAS_BEEN_UPDATED_SUCCUSSFULLY = \"\";\nexport var YOUR_MOBILE_NUMBER_HAS_BEEN_UPDATED_SUCCUSSFULLY = \"\";\nexport var YOUR_EMAIL_ADDRESS_HAS_BEEN_UPDATED_SUCCUSSFULLY = \"\";\nexport var VERIFY_AND_UPDATE = \"\";\nexport var WRONG_OTP = \"\";\nexport var YOUR_FULL_NAME = \"\";\nexport var CANT_EDIT_AFTER_PAN_APPROVAL = \"\";\nexport var ARE_YOU_SURE_YOU_WANT_TO_UPDATE_YOUR_PROFILE = \"\";\nexport var CONTEST_WON = \"\";\nexport var TOTAL_CONTESTS = \"\";\nexport var CHOOSE_AVATAR = \"\";\nexport var SERIES = \"\";\nexport var SOMETHING_ERROR = \"\";\n\n//Notification\nexport var DONT_HAVE_ANY = '';\nexport var NOTIFICATION_YET = '';\nexport var GO_BACK_TO_LOBBY = '';\n\n//STATIC PAGES\nexport var TEST = '';\nexport var T20 = '';\nexport var ODI = '';\nexport var NO_SCORING_RULES = '';\nexport var ABOUT_US_TITLE = '';\nexport var FAQ_TITLE = '';\nexport var TANDC_TITLE = '';\nexport var PRIVACY_POLICY_TITLE = '';\nexport var AGREE_TO_CONTACTED_BY = \"\";\nexport var AND_THEIR_PARTNERS = \"\";\nexport var WE_WHOULD_LOVE = \"\";\nexport var FOLLOW_US = \"\";\n\n//Filter\nexport var Filters = '';\n\n//Page not found\nexport var I_hereby_confirm = \"\";\nexport var and_I_am_not_a = \"\";\nexport var Oops = \"\";\nexport var Looks_like_you_have = \"\";\nexport var Lobby = \"\";\nexport var Go_Back_to_Lobby = \"\";\nexport var BY_JOINING_THIS_CONTEST = \"\";\n\n//MyContest\nexport var You = \"\";\nexport var Team = \"\";\nexport var Pts = \"\";\nexport var Ranks = \"\";\nexport var YOUR_PICKS_HGHT = \"\";\n\n//Contest,Contest Listing & Join private league\nexport var Entry_for_the_contest = \"\";\nexport var Contest = \"\";\nexport var Please_Login_Signup_First = \"\";\nexport var Please_enter_valid_percentage_value = \"\";\nexport var Please_enter_percentage_value_less_100 = \"\";\nexport var Your_lineup_will_be_reset = \"\";\nexport var Please_enter_a_valid_league_code = \"\";\nexport var How_to_Play = \"\";\nexport var Join_Private_League = \"\";\nexport var Enter_a_League_Code_to_Join = \"\";\nexport var Join_private_leagues = \"\";\nexport var FANTASY_SPORTS = \"\";\nexport var Average = \"\";\nexport var Season = \"\";\nexport var Last_5_games = \"\";\nexport var Graph_data_no_available = \"\";\nexport var NO_DATA_FOUND = \"\";\nexport var Want_the_best_experience = \"\";\nexport var play_fantasy_on_our_Android_app = \"\";\nexport var INSTALL = \"\";\nexport var CREATE_YOUR_TEAM = \"\";\nexport var PAY_AND_JOIN = \"\";\nexport var AUTHORISED_TO_USE = \"\";\nexport var WINNING_BAL_TO_JOIN = \"\";\nexport var BONUS_ALLOWED = \"\";\nexport var GO_TO = \"\";\nexport var TC = \"\";\nexport var AMOUNT_TO_ADD = \"\";\nexport var FILTER_MORE_OPTION_TEXT = \"\";\nexport var NO_DATA_TO_SHOW = \"\";\nexport var MAXIMUM = \"\";\nexport var CURRENT = \"\";\n\n//Item Details\nexport var Hurry_Only = \"\";\nexport var left_in_stock = \"\";\nexport var Redeem_NOW = \"\";\nexport var Product_Description = \"\";\nexport var Coins_Range = \"\";\n\n//Coin Module\nexport var WHATSNEW = \"\";\nexport var HOW_TO_EARN = \"\";\nexport var HOW_TO_EARN_DESC = \"\";\nexport var DAILY_CHECKIN = \"\";\nexport var VISIT = \"\";\nexport var EVERYDAY = \"\";\nexport var DAILY_CHECKIN_DESC = \"\";\nexport var GET_REWARDS = \"\";\nexport var GET_REWARDS_DESC = \"\";\nexport var GOTIT = \"\";\nexport var PREV = \"\";\nexport var DAILYCB = \"\";\nexport var CTG = \"\";\nexport var CTTGC = \"\";\nexport var DAY = \"\";\nexport var CLAIM_BONUS = \"\";\nexport var CLAIM = \"\";\nexport var SEE_COIN_TRANS = \"\";\nexport var REDEEM = '';\nexport var REWARDS = '';\nexport var WORTH = '';\nexport var REDEEM_W = '';\nexport var EC_LAUNCHED = '';\nexport var EC_ONE_PLACE = '';\nexport var START_EARN = '';\nexport var YAHOO = '';\nexport var CR_REAL_CASH = '';\nexport var CR_BONUS_CASH = '';\nexport var CR_GIFT = '';\nexport var REDEEM_COINS_FOR_REWARDS = '';\nexport var CONVERT_COINS_QUICKLY = '';\nexport var COINS_BALANCE = '';\nexport var FEEDBACK = '';\nexport var FB_HINT = '';\nexport var GIFT_VOUCHER = '';\n\nexport var SPORTS_HUB = '';\nexport var PICK_GT = '';\nexport var PICK_HTP = '';\nexport var VARIETY_GAME = '';\nexport var START_PLAYING = '';\nexport var PREDICT_WIN = '';\nexport var LEARN_MORE = '';\nexport var HOW_TO_PREDICT = '';\nexport var VIEW_PREDICTION = '';\nexport var BE_FIRST = '';\nexport var PREDICT = '';\nexport var PREDICTED = '';\nexport var POOL = '';\nexport var PLACE_PRE = '';\nexport var PRE_MSG = '';\nexport var PRE_MSG2 = '';\nexport var PICK_MSG = '';\nexport var YOUR_PRE = '';\nexport var ENTER_COINS = '';\nexport var AVAIL_BAL = '';\nexport var MAKE_PRE = '';\nexport var MAKE_PICK = '';\nexport var NEW_PRE = '';\nexport var CORRECT_ANS = '';\nexport var EST_WIN = '';\nexport var YOUR_BET = '';\nexport var PL_MORE = '';\nexport var EASY_P = '';\nexport var NF_SKILL = '';\nexport var LIVE_ME = '';\nexport var EXT_Q = '';\nexport var PB_WIN = '';\nexport var PWIN_COIN = '';\nexport var BID = '';\nexport var P_EXP_MSG = '';\nexport var EST_WIN_FORMULA = '';\nexport var REM = '';\nexport var REMAINING = '';\nexport var NO_COINS_MSG = '';\nexport var COINS_WON_MSG = '';\nexport var COINS_WON_MSG1 = '';\nexport var OPEN_PREDICTOR = '';\nexport var CLASSIC_TRIVIA_MSG = '';\nexport var JUST_GUESS_MSG = '';\nexport var GAME_FOR_ALL = '';\nexport var QUE_CATERED_MSG = '';\nexport var CORRECT_PREDICTIONS = '';\nexport var COINS_WON = '';\nexport var THIS_WEEK = '';\nexport var THIS_MONTH = '';\nexport var CORRECTED = '';\nexport var PRIZE = '';\nexport var YESTERDAY = '';\nexport var LAST_WEEK = '';\nexport var LAST_MONTH = '';\nexport var SPONSOR_BY = '';\nexport var YOU = '';\nexport var WIN_EXCITING_PRIZES_LEADERBOARD = '';\nexport var NOT_ENOUGH_DATA_ON_LEADERBOARD = '';\nexport var NOT_ENOUGH_DATA = '';\nexport var ON_LEADERBOARD = '';\nexport var ARE_YOU_SURE_WANT_PREDICT = '';\nexport var DISCRIPTION = '';\nexport var WINNING_REFLECT_SHORTLY = '';\nexport var PICKEM = '';\nexport var PICK_YOUR_TEAM = '';\nexport var YOUR_PICK = '';\nexport var BET = '';\nexport var NEW_PICKEM = '';\nexport var YOU_WON = '';\nexport var PICK_EXP_MSG = '';\nexport var REFER_A_FRIEND_AND_GET = '';\n\n\n//Free To Play Module\nexport var NO_PRIZES_FOR_THIS_CONTEST = \"\";\nexport var LEAGUE_WINNER_WILL_GET_EXCITING_PRIZES = \"\";\nexport var VIEW_ALL_PRIZES = \"\";\nexport var JOIN_FOR_FREE = \"\";\nexport var CONTEST_INFO = \"\";\nexport var SPONSER_BY = \"\";\nexport var SPONSORED_BY = \"\";\nexport var ALL_PRIZES = \"\";\nexport var WHAT_IS_HALL_OF_FAME =\"\";\nexport var HALL_OF_FAME_JOIN_CONTEST =\"\";\nexport var HALL_OF_FAME_IPL_SEASON =\"\";\nexport var HALL_OF_FAME_GATHER_POINTS =\"\";\nexport var HALL_OF_FAME_WIN_PRIZES =\"\";\nexport var HALL_OF_FAME_VIEW_SCHEDULED =\"\";\nexport var VIEW_COMPLETED_LEAGUES=\"\";\nexport var F2P_LEAGUES=\"\";\nexport var F2P_HALL_OF_FAME_MSG=\"\";\nexport var GAIN_POINTS=\"\";\nexport var COMPLETED_LEAGUE=\"\";\nexport var NO_DATA_VIEW_MESSAGE_COMPLETED_LEAGUE=\"\";\nexport var NO_DATA_VIEW_MESSAGE_ALL_LEAGUE=\"\";\nexport var NO_PRIZES_FOR_THIS_LEAGUES=\"\";\nexport var EDIT_CURRENT_TEAM=\"\";\nexport var LEAGUE_NO_PRIZE=\"\";\nexport var LEAGUE_END='';\nexport var FREE_TO_PLAY='';\nexport var HOW_TO_PLAY_FREE='';\nexport var HALL_OF_FAME_JOIN_CONTEST_TEXT =\"\";\nexport var PLAY_THE=\"\";\nexport var JOINED_CAP=\"\";\nexport var PARTICIPATE_FOR_FREE=\"\"\nexport var MORE_ABOUT_FREE_TO_PLAY=\"\"\nexport var CREATE_YOUR_TEAM_AND_JOIN=\"\"\nexport var BE_PART_OF_HALL_OF_FAME=\"\"\nexport var JOIN_ALL_MATCHES=\"\"\nexport var WIN_EXCITING_PRIZES_FREE_TO_PLAY=\"\"\nexport var PRIZES_WILL_BE_FOR_CONTEST=\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n//Pickem\nexport var EDIT_PICKS_DEADLINE = '';\nexport var REMOVE_PICK = '';\nexport var PICK_NO_FIXTURES_MSG = '';\nexport var PICK_NO_UPCOMING_CONTEST1 = '';\nexport var PICK_UPCOMING_CONTEST2 = '';\nexport var PICK_NO_LIVE_CONTEST1 = '';\nexport var PICK_NO_LIVE_CONTEST2 = '';\nexport var PICK_NO_COMPLETED_CONTEST1 = '';\nexport var PICK_NO_COMPLETED_CONTEST2 = '';\nexport var WEEKLY = '';\nexport var MONTHLY = '';\nexport var WEEKS = '';\nexport var MONTHS = '';\nexport var YOUR_STATS = '';\nexport var THIS_WEEK_RANK = '';\nexport var THIS_MONTH_RANK = '';\nexport var PICK_LOBBY_TEXT = '';\n\n// Esport\nexport var DONT_SHOW_ME_AGAIN = '';\nexport var CUSTOMIZE_REFERRAL_CODE = '';\n\n//AFFILIATE\nexport var BECOME_AFFILIATE = \"\";\nexport var AFFILIATE_PROGRAM = \"\";\nexport var AFFILIATE_TAGLINE1 = \"\";\nexport var AFFILIATE_TAGLINE2 = \"\";\nexport var INDUSTRY_LEADING = \"\";\nexport var INDUSTRY_LEADING_TAGLINE = \"\";\nexport var PROMOTION_EASY = \"\";\nexport var PROMOTION_EASY_TAGLINE = \"\";\nexport var POWERFUL_TRACKING = \"\";\nexport var POWERFUL_TRACKING_TAGLINE = \"\";\nexport var DETAILS = \"\";\nexport var USER = \"\";\nexport var AFF_AMOUNT = \"\";\nexport var COMMISION = \"\";\nexport var SIGNUP = \"\";\nexport var AMOUNT_DEPOSITED = \"\";\nexport var BONUS_ON = \"\";\nexport var COMMISION_ON = \"\";\nexport var TOTAL_SIGNUP = \"\";\nexport var DEPOSITED_AMOUNT = \"\";\nexport var COMMISION_TILL_DATE = \"\";\nexport var COMMISION_DUE = \"\";\nexport var DEPOSITE = \"\";\nexport var REQ_PENDING = \"\";\nexport var REQ_CANCELED = \"\";\n\n// coin entry\nexport var ADD_COIN_AND_JOIN_CONTEST = '';\nexport var PAYABLE_COINS_BAL = '';\n\n//Coin Module\nexport var BUY_COINS = '';\nexport var AMOUNT_DEDUCTION_MSG = '';\nexport var BUY_CONFIRMATION = '';\nexport var BUY = '';\n\n//Team Compare\nexport var SEE = '';\nexport var ON_FIELDVIEW = '';\nexport var OPP_LEAD_BY = '';\nexport var YOU_LEAD_BY = '';\nexport var COMMON_PLAYERS = '';\nexport var OPP_CVC_LEAD_BY = '';\nexport var YOU_CVC_LEAD_BY = '';\nexport var ALL_PLAYERS = '';\nexport var TOTAL_POINTS = '';\n\n\nfunction translateHomeData() {\n    let objHome = transtale('home');\n    FIXTURES_HEADER1 = objHome.FIXTURES_HEADER1;\n    FIXTURES_HEADER2 = objHome.FIXTURES_HEADER2;\n    DOWNLOAD_NOW = objHome.DOWNLOAD_NOW;\n    PLAY_NOW = objHome.PLAY_NOW;\n    PLAY = objHome.PLAY;\n    ABOUT_US = objHome.ABOUT_US;\n    TERMS_CONDITION = objHome.TERMS_CONDITION;\n    PRIVACY_POLICY = objHome.PRIVACY_POLICY;\n    THE_GAME = objHome.THE_GAME;\n    HOW_TO_PLAY = objHome.HOW_TO_PLAY;\n    HOW_TO_PLAY_FANTASY_SPORTS = objHome.HOW_TO_PLAY_FANTASY_SPORTS;\n    RULES_SCORING_SYSTEM = objHome.RULES_SCORING_SYSTEM;\n    SUPPORT = objHome.SUPPORT;\n    FAQS = objHome.FAQS;\n    CONTACT_US = objHome.CONTACT_US;\n    REFUND_POLICY = objHome.REFUND_POLICY;\n    OFFERS = objHome.OFFERS;\n    LEGALITY = objHome.LEGALITY;\n    CONTACT_US_EMAIL = objHome.CONTACT_US_EMAIL;\n    CONTACT_US_PHONE = objHome.CONTACT_US_PHONE;\n    DOWNLOAD_APP = objHome.DOWNLOAD_APP;\n    DOWNLOAD_MOBILE_APP = objHome.DOWNLOAD_MOBILE_APP;\n    MOBILE_APP_DESC = objHome.MOBILE_APP_DESC;\n    DOWNLOAD_MEESAGE=objHome.DOWNLOAD_MEESAGE;\n    ENTER_MOBILE_NUMBER = objHome.ENTER_MOBILE_NUMBER;\n    ENTER_MOBILE = objHome.ENTER_MOBILE;\n    GET_LINK_NOW = objHome.GET_LINK_NOW;\n    CHANGE_LANGUAGE = objHome.CHANGE_LANGUAGE\n    DISCLAIMER_LINE1 = objHome.DISCLAIMER_LINE1;\n    DISCLAIMER_LINE_SUB_TITLE1 = objHome.DISCLAIMER_LINE_SUB_TITLE1;\n    DISCLAIMER_LINE_SUB_TITLE2 = objHome.DISCLAIMER_LINE_SUB_TITLE2;\n    DISCLAIMER_LINE_SUB_TITLE3 = objHome.DISCLAIMER_LINE_SUB_TITLE3;\n    DISCLAIMER_LINE_SUB_TITLE4 = objHome.DISCLAIMER_LINE_SUB_TITLE4;\n    DISCLAIMER_LINE_SUB_TITLE5 = objHome.DISCLAIMER_LINE_SUB_TITLE5;\n    DISCLAIMER_LINE2 = objHome.DISCLAIMER_LINE2;\n    DISCLAIMER_LINE3 = objHome.DISCLAIMER_LINE3;\n    DISCLAIMER_LINE4 = objHome.DISCLAIMER_LINE4;\n}\nfunction translateFTPData() {\n    let obj = transtale('free_to_play');\n    NO_PRIZES_FOR_THIS_CONTEST = obj.NO_PRIZES_FOR_THIS_CONTEST;\n    LEAGUE_WINNER_WILL_GET_EXCITING_PRIZES = obj.LEAGUE_WINNER_WILL_GET_EXCITING_PRIZES;\n    VIEW_ALL_PRIZES = obj.VIEW_ALL_PRIZES;\n    JOIN_FOR_FREE = obj.JOIN_FOR_FREE;\n    CONTEST_INFO = obj.CONTEST_INFO;\n    SPONSER_BY = obj.SPONSER_BY;\n    SPONSORED_BY = obj.SPONSORED_BY;\n    ALL_PRIZES = obj.ALL_PRIZES;\n    WHAT_IS_HALL_OF_FAME =obj.WHAT_IS_HALL_OF_FAME;\n    HALL_OF_FAME_JOIN_CONTEST=obj.HALL_OF_FAME_JOIN_CONTEST\n    HALL_OF_FAME_JOIN_CONTEST_TEXT=obj.HALL_OF_FAME_JOIN_CONTEST_TEXT\n    HALL_OF_FAME_IPL_SEASON =obj.HALL_OF_FAME_IPL_SEASON;\n    HALL_OF_FAME_GATHER_POINTS =obj.HALL_OF_FAME_GATHER_POINTS;\n    HALL_OF_FAME_WIN_PRIZES =obj.HALL_OF_FAME_WIN_PRIZES;\n    HALL_OF_FAME_VIEW_SCHEDULED =obj.HALL_OF_FAME_VIEW_SCHEDULED;\n    VIEW_COMPLETED_LEAGUES=obj.VIEW_COMPLETED_LEAGUES;\n    F2P_LEAGUES=obj.F2P_LEAGUES;\n    F2P_HALL_OF_FAME_MSG=obj.F2P_HALL_OF_FAME_MSG;\n    GAIN_POINTS=obj.GAIN_POINTS;\n    COMPLETED_LEAGUE=obj.COMPLETED_LEAGUE;\n    NO_DATA_VIEW_MESSAGE_COMPLETED_LEAGUE=obj.NO_DATA_VIEW_MESSAGE_COMPLETED_LEAGUE;\n    NO_DATA_VIEW_MESSAGE_ALL_LEAGUE=obj.NO_DATA_VIEW_MESSAGE_ALL_LEAGUE;\n    NO_PRIZES_FOR_THIS_LEAGUES=obj.NO_PRIZES_FOR_THIS_LEAGUES;\n    EDIT_CURRENT_TEAM=obj.EDIT_CURRENT_TEAM;\n    LEAGUE_NO_PRIZE=obj.LEAGUE_NO_PRIZE;\n    LEAGUE_END=obj.LEAGUE_END;\n    FREE_TO_PLAY=obj.FREE_TO_PLAY;\n    HOW_TO_PLAY_FREE=obj.HOW_TO_PLAY_FREE;\n    PLAY_THE=obj.PLAY_THE;\n    JOINED_CAP=obj.JOINED_CAP;\n    PARTICIPATE_FOR_FREE=obj.PARTICIPATE_FOR_FREE;\n    MORE_ABOUT_FREE_TO_PLAY=obj.MORE_ABOUT_FREE_TO_PLAY;\n    CREATE_YOUR_TEAM_AND_JOIN=obj.CREATE_YOUR_TEAM_AND_JOIN;\n    BE_PART_OF_HALL_OF_FAME=obj.BE_PART_OF_HALL_OF_FAME;\n    JOIN_ALL_MATCHES=obj.JOIN_ALL_MATCHES;\n    WIN_EXCITING_PRIZES_FREE_TO_PLAY=obj.WIN_EXCITING_PRIZES_FREE_TO_PLAY;\n    PRIZES_WILL_BE_FOR_CONTEST=obj.PRIZES_WILL_BE_FOR_CONTEST;\n\n\n}\nfunction translateSportsHub() {\n    let objSportsHub = transtale('sports_hub');\n    SPORTS_HUB = objSportsHub.SPORTS_HUB;\n    PICK_GT = objSportsHub.PICK_GT;\n    PICK_HTP = objSportsHub.PICK_HTP;\n    EDIT_PICKS_DEADLINE = objSportsHub.EDIT_PICKS_DEADLINE;\n    REMOVE_PICK = objSportsHub.REMOVE_PICK;\n    PICK_NO_FIXTURES_MSG = objSportsHub.PICK_NO_FIXTURES_MSG;\n    PICK_NO_UPCOMING_CONTEST1 = objSportsHub.PICK_NO_UPCOMING_CONTEST1;\n    PICK_UPCOMING_CONTEST2 = objSportsHub.PICK_UPCOMING_CONTEST2;\n    PICK_NO_LIVE_CONTEST1 = objSportsHub.PICK_NO_LIVE_CONTEST1;\n    PICK_NO_LIVE_CONTEST2 = objSportsHub.PICK_NO_LIVE_CONTEST2;\n    PICK_NO_COMPLETED_CONTEST1 = objSportsHub.PICK_NO_COMPLETED_CONTEST1;\n    PICK_NO_COMPLETED_CONTEST2 = objSportsHub.PICK_NO_COMPLETED_CONTEST2;\n    WEEKLY = objSportsHub.WEEKLY;\n    MONTHLY = objSportsHub.MONTHLY;\n    WEEKS = objSportsHub.WEEKS;\n    MONTHS = objSportsHub.MONTHS;\n    YOUR_STATS = objSportsHub.YOUR_STATS;\n    THIS_WEEK_RANK = objSportsHub.THIS_WEEK_RANK;\n    THIS_MONTH_RANK = objSportsHub.THIS_MONTH_RANK;\n    PICK_LOBBY_TEXT = objSportsHub.PICK_LOBBY_TEXT;\n\n    \n     \n    VARIETY_GAME = objSportsHub.VARIETY_GAME;\n    START_PLAYING = objSportsHub.START_PLAYING;\n    PREDICT_WIN = objSportsHub.PREDICT_WIN;\n    LEARN_MORE = objSportsHub.LEARN_MORE;\n    HOW_TO_PREDICT = objSportsHub.HOW_TO_PREDICT;\n    VIEW_PREDICTION = objSportsHub.VIEW_PREDICTION;\n    BE_FIRST = objSportsHub.BE_FIRST;\n    PREDICT = objSportsHub.PREDICT;\n    PREDICTED = objSportsHub.PREDICTED;\n    POOL = objSportsHub.POOL;\n    PLACE_PRE = objSportsHub.PLACE_PRE;\n    PRE_MSG = objSportsHub.PRE_MSG;\n    PRE_MSG2 = objSportsHub.PRE_MSG2;\n    PICK_MSG = objSportsHub.PICK_MSG;\n    YOUR_PRE = objSportsHub.YOUR_PRE;\n    ENTER_COINS = objSportsHub.ENTER_COINS;\n    AVAIL_BAL = objSportsHub.AVAIL_BAL;\n    MAKE_PRE = objSportsHub.MAKE_PRE;\n    MAKE_PICK = objSportsHub.MAKE_PICK;\n    NEW_PRE = objSportsHub.NEW_PRE;\n    CORRECT_ANS = objSportsHub.CORRECT_ANS;\n    EST_WIN = objSportsHub.EST_WIN;\n    YOUR_BET = objSportsHub.YOUR_BET;\n    PL_MORE = objSportsHub.PL_MORE;\n    EASY_P = objSportsHub.EASY_P;\n    NF_SKILL = objSportsHub.NF_SKILL;\n    LIVE_ME = objSportsHub.LIVE_ME;\n    EXT_Q = objSportsHub.EXT_Q;\n    PB_WIN = objSportsHub.PB_WIN;\n    PWIN_COIN = objSportsHub.PWIN_COIN;\n    BID = objSportsHub.BID;\n    P_EXP_MSG = objSportsHub.P_EXP_MSG;\n    EST_WIN_FORMULA = objSportsHub.EST_WIN_FORMULA;\n    REM = objSportsHub.REM;\n    REMAINING = objSportsHub.REMAINING;\n    NO_COINS_MSG = objSportsHub.NO_COINS_MSG;\n    COINS_WON_MSG = objSportsHub.COINS_WON_MSG;\n    COINS_WON_MSG1 = objSportsHub.COINS_WON_MSG1;\n    OPEN_PREDICTOR = objSportsHub.OPEN_PREDICTOR;\n    CLASSIC_TRIVIA_MSG = objSportsHub.CLASSIC_TRIVIA_MSG;\n    JUST_GUESS_MSG = objSportsHub.JUST_GUESS_MSG;\n    GAME_FOR_ALL = objSportsHub.GAME_FOR_ALL;\n    QUE_CATERED_MSG = objSportsHub.QUE_CATERED_MSG;\n    COINS_WON = objSportsHub.COINS_WON;\n    THIS_WEEK = objSportsHub.THIS_WEEK;\n    THIS_MONTH = objSportsHub.THIS_MONTH;\n    CORRECTED = objSportsHub.CORRECTED;\n    PRIZE = objSportsHub.PRIZE;\n    YESTERDAY = objSportsHub.YESTERDAY;\n    LAST_WEEK = objSportsHub.LAST_WEEK;\n    LAST_MONTH = objSportsHub.LAST_MONTH;\n    SPONSOR_BY = objSportsHub.SPONSOR_BY;\n    YOU = objSportsHub.YOU;\n    WIN_EXCITING_PRIZES_LEADERBOARD = objSportsHub.WIN_EXCITING_PRIZES_LEADERBOARD;\n    NOT_ENOUGH_DATA_ON_LEADERBOARD = objSportsHub.NOT_ENOUGH_DATA_ON_LEADERBOARD;\n    NOT_ENOUGH_DATA = objSportsHub.NOT_ENOUGH_DATA;\n    ON_LEADERBOARD = objSportsHub.ON_LEADERBOARD;\n    ARE_YOU_SURE_WANT_PREDICT = objSportsHub.ARE_YOU_SURE_WANT_PREDICT;\n    DISCRIPTION = objSportsHub.DISCRIPTION;\n    WINNING_REFLECT_SHORTLY = objSportsHub.WINNING_REFLECT_SHORTLY;\n    PICKEM = objSportsHub.PICKEM;\n    PICK_YOUR_TEAM = objSportsHub.PICK_YOUR_TEAM;\n    YOUR_PICK = objSportsHub.YOUR_PICK;\n    BET = objSportsHub.BET;\n    NEW_PICKEM = objSportsHub.NEW_PICKEM;\n    YOU_WON = objSportsHub.YOU_WON;\n    PICK_EXP_MSG = objSportsHub.PICK_EXP_MSG;\n    REFER_A_FRIEND_AND_GET = objSportsHub.REFER_A_FRIEND_AND_GET;\n}\n\nfunction translateCoinData() {\n    let objCoins = transtale('coins');\n    WHATSNEW = objCoins.WHATSNEW;\n    HOW_TO_EARN = objCoins.HOW_TO_EARN;\n    HOW_TO_EARN_DESC = objCoins.HOW_TO_EARN_DESC;\n    DAILY_CHECKIN = objCoins.DAILY_CHECKIN;\n    VISIT = objCoins.VISIT;\n    EVERYDAY = objCoins.EVERYDAY;\n    DAILY_CHECKIN_DESC = objCoins.DAILY_CHECKIN_DESC;\n    GET_REWARDS = objCoins.GET_REWARDS;\n    GET_REWARDS_DESC = objCoins.GET_REWARDS_DESC;\n    GOTIT = objCoins.GOTIT;\n    PREV = objCoins.PREV;\n    DAILYCB = objCoins.DAILYCB;\n    CTG = objCoins.CTG;\n    CTTGC = objCoins.CTTGC;\n    DAY = objCoins.DAY;\n    CLAIM_BONUS = objCoins.CLAIM_BONUS;\n    CLAIM = objCoins.CLAIM;\n    SEE_COIN_TRANS = objCoins.SEE_COIN_TRANS;\n    REDEEM = objCoins.REDEEM;\n    REWARDS = objCoins.REWARDS;\n    WORTH = objCoins.WORTH;\n    REDEEM_W = objCoins.REDEEM_W;\n    EC_LAUNCHED = objCoins.EC_LAUNCHED;\n    EC_ONE_PLACE = objCoins.EC_ONE_PLACE;\n    START_EARN = objCoins.START_EARN;\n    YAHOO = objCoins.YAHOO;\n    CR_REAL_CASH = objCoins.CR_REAL_CASH;\n    CR_BONUS_CASH = objCoins.CR_BONUS_CASH;\n    CR_GIFT = objCoins.CR_GIFT;\n    REDEEM_COINS_FOR_REWARDS = objCoins.REDEEM_COINS_FOR_REWARDS;\n    CONVERT_COINS_QUICKLY = objCoins.CONVERT_COINS_QUICKLY;\n    COINS_BALANCE = objCoins.COINS_BALANCE;\n    FEEDBACK = objCoins.FEEDBACK;\n    FB_HINT = objCoins.FB_HINT;\n    GIFT_VOUCHER = objCoins.GIFT_VOUCHER;\n}\n\nfunction translateOnboardigData() {\n    let obj = transtale('onboarding');\n    SIGN_UP = obj.SIGN_UP;\n    LOGIN = obj.LOGIN;\n    GET = obj.GET;\n    INSTANTLY = obj.INSTANTLY;\n    ON_EVERY_SIGNUP = obj.ON_EVERY_SIGNUP;\n    T_N_C_APPLY = obj.T_N_C_APPLY;\n    INVALID_PHONE_NUMBER = obj.INVALID_PHONE_NUMBER;\n    PHONE_NUMBER_REQUIRE = obj.PHONE_NUMBER_REQUIRE;\n    RESEND_IN = obj.RESEND_IN;\n    PASSWORD = obj.PASSWORD;\n    ENTER_CURRENT_PASSWORD = obj.ENTER_CURRENT_PASSWORD;\n    ENTER_NEW_PASSWORD = obj.ENTER_NEW_PASSWORD;\n    CURRENT_PASSWORD = obj.CURRENT_PASSWORD;\n    NEW_PASSWORD = obj.NEW_PASSWORD;\n    CONFIRM_PASSWORD = obj.CONFIRM_PASSWORD;\n    ENTER_CONFIRM_PASSWORD = obj.ENTER_CONFIRM_PASSWORD;\n    FORGOT_PASSWORD = obj.FORGOT_PASSWORD;\n    RESET_PASSWORD = obj.RESET_PASSWORD;\n    PLEASE_ENTER_CURRENT_PASSWORD = obj.PLEASE_ENTER_CURRENT_PASSWORD;\n    PLEASE_ENTER_NEW_PASSWORD = obj.PLEASE_ENTER_NEW_PASSWORD;\n    NEW_PASSWORD_MIN_LENGTH = obj.NEW_PASSWORD_MIN_LENGTH;\n    NEW_PASSWORD_MAX_LENGTH = obj.NEW_PASSWORD_MAX_LENGTH;\n    PASSWORD_NOT_MATCHED = obj.PASSWORD_NOT_MATCHED;\n    FORGOT_PASSWORD_TEXT = obj.FORGOT_PASSWORD_TEXT;\n    BY_SIGNING_UP = obj.BY_SIGNING_UP;\n    CONNECT_INSTANTLY_WITH = obj.CONNECT_INSTANTLY_WITH;\n    FACEBOOK = obj.FACEBOOK;\n    GOOGLE = obj.GOOGLE;\n    GMAIL = obj.GMAIL;\n    OR = obj.OR;\n    YOUR_PHONE_NUMBER = obj.YOUR_PHONE_NUMBER;\n    CONFIRM_18YEAR1 = obj.CONFIRM_18YEAR1;\n    CONFIRM_18YEAR2 = obj.CONFIRM_18YEAR2;\n    SEND_OTP = obj.SEND_OTP;\n    VERIFY_MOBILE = obj.VERIFY_MOBILE;\n    ENTER_OTP = obj.ENTER_OTP;\n    RESEND = obj.RESEND;\n    OTP_SENT_TO = obj.OTP_SENT_TO;\n    HAVE_A_REFERRAL_CODE = obj.HAVE_A_REFERRAL_CODE;\n    ENTER_REFERRAL_CODE = obj.ENTER_REFERRAL_CODE;\n    SKIP_STEP = obj.SKIP_STEP;\n    PICK_YOUR_EMAIL = obj.PICK_YOUR_EMAIL;\n    ENTER_YOUR_EMAIL = obj.ENTER_YOUR_EMAIL;\n    ENTER_YOUR_REGISTERED_EMAIL = obj.ENTER_YOUR_REGISTERED_EMAIL;\n    ENTER_PASSWORD = obj.ENTER_PASSWORD;\n    EMAIL_USE = obj.EMAIL_USE;\n    PICK_YOUR_USERNAME = obj.PICK_YOUR_USERNAME;\n    ENTER_YOUR_USERNAME = obj.ENTER_YOUR_USERNAME;\n    USERNAME_UNIQUE = obj.USERNAME_UNIQUE;\n    INVALID_EMAIL_ID = obj.INVALID_EMAIL_ID;\n    MORE = obj.MORE;\n    VERIFY_EMAIL = obj.VERIFY_EMAIL;\n    REFERRAL_CODE_TEXT = obj.REFERRAL_CODE_TEXT;\n    VERIFY_MOBILE_TEXT = obj.VERIFY_MOBILE_TEXT;\n    VERIFY_MOBILE_TEXT1 = obj.VERIFY_MOBILE_TEXT1;\n    PASSWORD_TEXT = obj.PASSWORD_TEXT;\n    PASSWORD_TEXT1 = obj.PASSWORD_TEXT1;\n    EMAIL_ADDRESS = obj.EMAIL_ADDRESS;\n    EMAIL_ADDRESS_TEXT = obj.EMAIL_ADDRESS_TEXT;\n    PICK_USER_NAME = obj.PICK_USER_NAME;\n    SELECT_YOUR_LANGUAGE = obj.SELECT_YOUR_LANGUAGE;\n    CREATE_YOUR_PASSWORD = obj.CREATE_YOUR_PASSWORD;\n    CREATE_YOUR_PASSWORD_TEXT = obj.CREATE_YOUR_PASSWORD_TEXT;\n    YOUR_MOBILE_NUMBER = obj.YOUR_MOBILE_NUMBER;\n    YOUR_MOBILE_NUMBER_TEXT = obj.YOUR_MOBILE_NUMBER_TEXT;\n    OPTIONAL = obj.OPTIONAL;\n    YOUR_PASSWORD = obj.YOUR_PASSWORD;\n    YOUR_PASSWORD_TEXT = obj.YOUR_PASSWORD_TEXT;\n    FORGOT_YOUR_PASSWORD = obj.FORGOT_YOUR_PASSWORD;\n    FORGOT_YOUR_PASSWORD_TEXT = obj.FORGOT_YOUR_PASSWORD_TEXT;\n    RESET_PASSWORD_TEXT = obj.RESET_PASSWORD_TEXT;\n    EMAIL_SEND_SUCCESS_MESSAGE = obj.EMAIL_SEND_SUCCESS_MESSAGE;\n    SIGNUP_INFO = obj.SIGNUP_INFO;\n    SIGNUP_INFO1 = obj.SIGNUP_INFO1;\n    SIGN_UP_OR_LOGIN = obj.SIGN_UP_OR_LOGIN;\n    PLEASE_ENTER_A_VALID_REFERRAL_CODE = obj.PLEASE_ENTER_A_VALID_REFERRAL_CODE;\n\n}\n\nfunction translateDrawer() {\n    let obj = transtale('drawer');\n    TOTAL_BALANCE = obj.TOTAL_BALANCE;\n    SWITCH_SPORTS = obj.SWITCH_SPORTS;\n    HOME = obj.HOME;\n    MY_CONTEST = obj.MY_CONTEST;\n    MY_WALLET = obj.MY_WALLET;\n    MY_PROFILE = obj.MY_PROFILE;\n    REFER_FRIENDS = obj.REFER_FRIENDS;\n    REFER_A_FRIEND = obj.REFER_A_FRIEND;\n    REFER_A_FRIEND_C = obj.REFER_A_FRIEND_C;\n    REFER_A_FRIEND_LOWER = obj.REFER_A_FRIEND_LOWER;\n    CHANGE_PASSWORD = obj.CHANGE_PASSWORD;\n    OTHERS = obj.OTHERS;\n    NOTIFICATIONS = obj.NOTIFICATIONS;\n    REDEEM_COINS = obj.REDEEM_COINS;\n    ORDER_HISTORY = obj.ORDER_HISTORY;\n    RULES_SCORING = obj.RULES_SCORING;\n    RULES_AND_SCORING = obj.RULES_AND_SCORING;\n    SELECT_NAME_FIRST = obj.SELECT_NAME_FIRST;\n    LOGOUT_MESSAGE = obj.LOGOUT_MESSAGE;\n    HAVE_A_LEAGUE_CODE = obj.HAVE_A_LEAGUE_CODE;\n    LOGOUT = obj.LOGOUT;\n    DEVELOPED_BY = obj.DEVELOPED_BY;\n    VINFOTECH = obj.VINFOTECH;\n}\n\nfunction translateLeaderboard() {\n    let obj = transtale('leaderboard');\n    NO_DATA_AVAILABLE = obj.NO_DATA_AVAILABLE;\n    GO_TO_MY_CONTEST = obj.GO_TO_MY_CONTEST;\n    IN_CASE_AUTO_DOWNLOAD_NOT_START = obj.IN_CASE_AUTO_DOWNLOAD_NOT_START;\n    DOWNLOAD_ALL_TEAMS = obj.DOWNLOAD_ALL_TEAMS;\n    NAME = obj.NAME;\n    URL_COPIED_TO_CLIPBOARD = obj.URL_COPIED_TO_CLIPBOARD;\n    SUCCESS = obj.SUCCESS;\n    LEADERBOARD = obj.LEADERBOARD;\n    CUSTOM_SCORING_MSG = obj.CUSTOM_SCORING_MSG;\n}\n\nfunction translateContestData() {\n    let obj = transtale('fixturecontest');\n    LINEUP_OUT = obj.LINEUP_OUT;\n    PLAYING = obj.PLAYING;\n    ERROR_MSG = obj.ERROR_MSG;\n    NOT_PLAYING = obj.NOT_PLAYING;\n    ANNOUNCED = obj.ANNOUNCED;\n    FIXTURES_HEADER = obj.FIXTURES_HEADER;\n    CREATE_A_CONTEST = obj.CREATE_A_CONTEST;\n    Create_a_Contest = obj.Create_a_Contest;\n    JOIN_PRIVATE_CONTEST = obj.JOIN_PRIVATE_CONTEST;\n    ENTER_LEAGUE_CODE_TO_JOIN = obj.ENTER_LEAGUE_CODE_TO_JOIN;\n    ENTER_LEAGUE_CODE = obj.ENTER_LEAGUE_CODE;\n    WINNINGS = obj.WINNINGS;\n    NO_FIXTURES_MSG1 = obj.NO_FIXTURES_MSG1;\n    NO_FIXTURES_MSG2 = obj.NO_FIXTURES_MSG2;\n    NO_FIXTURES_MSG3 = obj.NO_FIXTURES_MSG3;\n    HOW_TO_PLAY_FANTASY = obj.HOW_TO_PLAY_FANTASY;\n    GROUP_CONTESTS = obj.GROUP_CONTESTS;\n    SORT_CONTESTS = obj.SORT_CONTESTS;\n    GROUP_CONTESTS_MSG = obj.GROUP_CONTESTS_MSG;\n    LOADING_MSG = obj.LOADING_MSG;\n    WIN = obj.WIN;\n    PRACTICE = obj.PRACTICE;\n    JOIN = obj.JOIN;\n    ENTRIES = obj.ENTRIES;\n    MIN = obj.MIN;\n    MORE_CONTEST = obj.MORE_CONTEST;\n    LESS_CONTEST = obj.LESS_CONTEST;\n    ALREADY_JOIN_WITH = obj.ALREADY_JOIN_WITH;\n    TEAM = obj.TEAM;\n    TEAMS = obj.TEAMS;\n    INFO = obj.INFO;\n    JOIN_WITH_MAX = obj.JOIN_WITH_MAX;\n    SUBMIT = obj.SUBMIT;\n    SUBMIT_PLAYERS_IN_BUDGET = obj.SUBMIT_PLAYERS_IN_BUDGET;\n    SALARY_CAP = obj.SALARY_CAP;\n    SCORING_RULES = obj.SCORING_RULES;\n    NORMAL = obj.NORMAL;\n    BONUS = obj.BONUS;\n    CAPTAIN = obj.CAPTAIN;\n    VICE_CAPTAIN = obj.VICE_CAPTAIN;\n    ECONOMY_RATE = obj.ECONOMY_RATE;\n    STRIKE_RATE = obj.STRIKE_RATE;\n    ENTRY = obj.ENTRY;\n    FREE_ENTRY = obj.FREE_ENTRY;\n    FREE = obj.FREE;\n    WINNERS = obj.WINNERS;\n    WINNER = obj.WINNER;\n    DISTRIBUTION = obj.DISTRIBUTION;\n    MULTI_ENTRY_CONTEST = obj.MULTI_ENTRY_CONTEST;\n    MULTI_ENTRY_DISCRIPTION = obj.MULTI_ENTRY_DISCRIPTION;\n    GUARANTEED_DESCRIPTION = obj.GUARANTEED_DESCRIPTION;\n    GUARANTEED_CONTEST = obj.GUARANTEED_CONTEST;\n    CONFIRM_DESCRIPTION = obj.CONFIRM_DESCRIPTION;\n    CONFIRM_CONTEST = obj.CONFIRM_CONTEST;\n    PRIVATE_CONTEST = obj.PRIVATE_CONTEST;\n    FRIENDS_PLAY_BONUS = obj.FRIENDS_PLAY_BONUS;\n    VS = obj.VS;\n    PRIZE_MSG1 = obj.PRIZE_MSG1;\n    PRIZE_MSG2 = obj.PRIZE_MSG2;\n    PRIZE_MSG3 = obj.PRIZE_MSG3;\n    PRIZE_MSG4 = obj.PRIZE_MSG4;\n    GUARANTEED_PRIZE_MSG1 = obj.GUARANTEED_PRIZE_MSG1;\n    GUARANTEED_PRIZE_MSG2 = obj.GUARANTEED_PRIZE_MSG2;\n    GUARANTEED_PRIZE_MSG3 = obj.GUARANTEED_PRIZE_MSG3;\n    IST = obj.IST;\n    PULL_DOWN_TO_REFRESH = obj.PULL_DOWN_TO_REFRESH;\n    RELEASE_TO_REFRESH = obj.RELEASE_TO_REFRESH;\n    THIS_FEATURE_IS_COMING_SOON = obj.THIS_FEATURE_IS_COMING_SOON;\n    MIN_CAMEL_CASE = obj.MIN_CAMEL_CASE;\n    DONE = obj.DONE;\n    ALL = obj.ALL;\n    NO_TEAM_MSG = obj.NO_TEAM_MSG;\n    THIS_CONTEST = obj.THIS_CONTEST;\n    MY_TEAMS = obj.MY_TEAMS;\n    JOIN_NOW = obj.JOIN_NOW;\n    CONTEST_JOIN_NOW=obj.CONTEST_JOIN_NOW;\n    NO_CONTEST_FOR_FILTER = obj.NO_CONTEST_FOR_FILTER;\n    NO_DATA_FOR_FILTER = obj.NO_DATA_FOR_FILTER;\n    NO_RESULT_FOUND_FILTER_1 = obj.NO_RESULT_FOUND_FILTER_1;\n    NO_CONTEST_FOR_FILTER_1 = obj.NO_CONTEST_FOR_FILTER_1;\n    NO_CONTEST_FOR_FILTER_2 = obj.NO_CONTEST_FOR_FILTER_2;\n    FILTERS = obj.FILTERS;\n    MAX_ENTRIES = obj.MAX_ENTRIES;\n    Earn = obj.Earn;\n    Coin = obj.Coin;\n    on_your_friends_signup = obj.on_your_friends_signup;\n    on_your_first_cash_contest = obj.on_your_first_cash_contest;\n    MY_TEAM = obj.MY_TEAM;\n    View_All_Players = obj.View_All_Players;\n    COLLECTION_CONTEST_DISCRIPTION = obj.COLLECTION_CONTEST_DISCRIPTION;\n    MATCHES_SM = obj.MATCHES_SM;\n    COLLECTION = obj.COLLECTION;\n    FIXTURE_TAB=obj.FIXTURE_TAB;\n    MAX_TEAM_FOR_MULTI_ENTRY = obj.MAX_TEAM_FOR_MULTI_ENTRY;\n    MAX_MULTI_ENTRY_TEAM = obj.MAX_MULTI_ENTRY_TEAM;\n    SALARY_LEFT = obj.SALARY_LEFT;\n    DELAYED = obj.DELAYED;\n\n    MULTIGAME_TITLE=obj.MULTIGAME_TITLE;\n    MULTIGAME_DETAIL=obj.MULTIGAME_DETAIL;\n    SELECT_MULTIGAME_CONTEST_TITLE=obj.SELECT_MULTIGAME_CONTEST_TITLE;\n    SELECT_MULTIGAME_CONTEST_DETAIL=obj.SELECT_MULTIGAME_CONTEST_DETAIL;\n    CHOOSE_PLAYER=obj.CHOOSE_PLAYER;\n    FIXTURE=obj.FIXTURE;\n    VIEW_PROOF=obj.VIEW_PROOF;\n    PROOF=obj.PROOF;\n    NO_QUE_FOR_CATEGORY=obj.NO_QUE_FOR_CATEGORY;\n    SWITCH_TO_OTHER_CAT=obj.SWITCH_TO_OTHER_CAT;\n    EXCITING_QUE_ON_WAY=obj.EXCITING_QUE_ON_WAY;\n    PICKEM_HTP_LABEL1=obj.PICKEM_HTP_LABEL1;\n    PICKEM_HTP_MSG1=obj.PICKEM_HTP_MSG1;\n    PICKEM_HTP_LABEL2=obj.PICKEM_HTP_LABEL2;\n    PICKEM_HTP_MSG2=obj.PICKEM_HTP_MSG2;\n    PICKEM_HTP_LABEL3=obj.PICKEM_HTP_LABEL3;\n    PICKEM_HTP_MSG3=obj.PICKEM_HTP_MSG3;\n    PARTICIPANTS=obj.PARTICIPANTS;\n    PICKEM_SHARE_MSG=obj.PICKEM_SHARE_MSG;\n    MAXIMUM=obj.Maximum;\n    CURRENT=obj.Current;\n    THIS_WILL_BE_UPDATED=obj.THIS_WILL_BE_UPDATED;\n    PEOPLE_JOINED_THIS_CONTEST=obj.PEOPLE_JOINED_THIS_CONTEST;\n    Use=obj.Use;\n    BONUS_CASH_CONTEST_LISTING=obj.BONUS_CASH_CONTEST_LISTING;\n\n\n\n\n}\n\nfunction translateRosterData() {\n    let obj = transtale('rosterfield');\n    RESET_ACTION = obj.RESET_ACTION;\n    CREDITS_LEFT = obj.CREDITS_LEFT;\n    SELECTED = obj.SELECTED;\n    SELECT = obj.SELECT;\n    FILTER_BY_TEAM = obj.FILTER_BY_TEAM;\n    FIND_A_PLAYER = obj.FIND_A_PLAYER;\n    PLAYER = obj.PLAYER;\n    POINTS = obj.POINTS;\n    GETS = obj.GETS;\n    SALARY = obj.SALARY;\n    SALARY_ABR = obj.SALARY_ABR;\n    NEXT = obj.NEXT;\n    FANTASY_PTS = obj.FANTASY_PTS;\n    VALUE = obj.VALUE;\n    FORM = obj.FORM;\n    GAME_LOG = obj.GAME_LOG;\n    LAST_5_MATCHES = obj.LAST_5_MATCHES;\n    DATE = obj.DATE;\n    FORMAT = obj.FORMAT;\n    RUNS = obj.RUNS;\n    WKT = obj.WKT;\n    E_R = obj.E_R;\n    S_R = obj.S_R;\n    PTS = obj.PTS;\n    ROUND1 = obj.ROUND1;\n    ROUND2 = obj.ROUND2;\n    ROUND3 = obj.ROUND3;\n    RESET = obj.RESET;\n    RANK = obj.RANK;\n    ENTER_TAM_NAME = obj.ENTER_TAM_NAME;\n    CHOOSE_CAPTAIN_VICE_CAPTAIN = obj.CHOOSE_CAPTAIN_VICE_CAPTAIN;\n    CHOOSE_CAPTAIN = obj.CHOOSE_CAPTAIN;\n    PICK_CAPTAIN = obj.PICK_CAPTAIN;\n    CAPTAIN_GETS = obj.CAPTAIN_GETS;\n    C = obj.C;\n    VC = obj.VC;\n    VICE_CAPTAIN_GETS = obj.VICE_CAPTAIN_GETS;\n    SORT_BY = obj.SORT_BY;\n    PLAYERS = obj.PLAYERS;\n    SUBMIT_LINEUP = obj.SUBMIT_LINEUP;\n    CONFIRMATION = obj.CONFIRMATION;\n    ENTRY_FEE = obj.ENTRY_FEE;\n    Entry_fee = obj.Entry_fee;\n    PAYABLE_BALANCE = obj.PAYABLE_BALANCE;\n    JOINING_TEAM_WITH = obj.JOINING_TEAM_WITH;\n    SELECT_TEAM = obj.SELECT_TEAM;\n    CREATE_NEW_TEAM = obj.CREATE_NEW_TEAM;\n    HAVE_A_PROMO_CODE = obj.HAVE_A_PROMO_CODE;\n    PROMO_CODE = obj.PROMO_CODE;\n    ENTER_PROMO_CODE = obj.ENTER_PROMO_CODE;\n    APPLY = obj.APPLY;\n    JOIN_CONTEST = obj.JOIN_CONTEST;\n    ADD_FUND_JOIN_CONTEST = obj.ADD_FUND_JOIN_CONTEST;\n    PROMO_TEXT1 = obj.PROMO_TEXT1;\n    PROMO_TEXT2 = obj.PROMO_TEXT2;\n    PROMO_TEXT3 = obj.PROMO_TEXT3;\n    PAYABLE_TOOLTIP1 = obj.PAYABLE_TOOLTIP1;\n    PAYABLE_TOOLTIP2 = obj.PAYABLE_TOOLTIP2;\n    JOIN_SUCCESS_TITLE = obj.JOIN_SUCCESS_TITLE\n    JOIN_SUCCESS_MESSAGE = obj.JOIN_SUCCESS_MESSAGE\n    JOIN_MORE = obj.JOIN_MORE;\n    JOIN_MORE_POPUP = obj.JOIN_MORE_POPUP;\n    CONTESTS = obj.CONTESTS;\n    CONTESTS_POPUP = obj.CONTESTS_POPUP;\n    SEE_MY_CONTESTS = obj.SEE_MY_CONTESTS;\n    DISMISS = obj.DISMISS;\n    OF = obj.OF;\n    CONTEST_JOINED = obj.CONTEST_JOINED;\n    TAB_TO_SEE_FIELD_VIEW = obj.TAB_TO_SEE_FIELD_VIEW;\n    MAX_PLAYER_TEAMWISE = obj.MAX_PLAYER_TEAMWISE;\n    MAX_PLAYER_TEAMWISE1 = obj.MAX_PLAYER_TEAMWISE1;\n    VERSES = obj.VERSES;\n    MAX = obj.MAX;\n    CHOOSE_VICE_CAPTAIN = obj.CHOOSE_VICE_CAPTAIN;\n    SELECT_MATCH_TEXT = obj.SELECT_MATCH_TEXT;\n    CREATE_TEAM = obj.CREATE_TEAM;\n    PLAYERS_FROM_A_TEAM = obj.PLAYERS_FROM_A_TEAM;\n    PICK = obj.PICK;\n    TEAM_PREVIEW = obj.TEAM_PREVIEW;\n}\n\nfunction translatePlayerCardData() {\n    let obj = transtale('playercard');\n    EXPECTED_SCORE = obj.EXPECTED_SCORE;\n}\n\nfunction translateMyContestData() {\n    let obj = transtale('mycontest');\n    NO_UPCOMING_CONTEST1 = obj.NO_UPCOMING_CONTEST1;\n    NO_UPCOMING_CONTEST2 = obj.NO_UPCOMING_CONTEST2;\n    NO_LIVE_CONTEST1 = obj.NO_LIVE_CONTEST1;\n    NO_LIVE_CONTEST2 = obj.NO_LIVE_CONTEST2;\n    NO_COMPLETED_CONTEST1 = obj.NO_COMPLETED_CONTEST1;\n    NO_COMPLETED_CONTEST2 = obj.NO_COMPLETED_CONTEST2;\n    GO_TO_LOBBY = obj.GO_TO_LOBBY;\n    LIVE = obj.LIVE;\n    UPCOMING = obj.UPCOMING;\n    COMPLETED = obj.COMPLETED;\n    IN_PROGRESS = obj.IN_PROGRESS;\n    STANDINGS = obj.STANDINGS;\n    SWITCH_TEAM = obj.SWITCH_TEAM;\n    EDIT_TEAM = obj.EDIT_TEAM;\n    VIEW_TEAM = obj.VIEW_TEAM;\n    WON = obj.WON;\n    YOUR_CURRENT_TEAM = obj.YOUR_CURRENT_TEAM;\n    SWITCH_WITH = obj.SWITCH_WITH;\n    You = obj.You;\n    Team = obj.Team;\n    Pts = obj.Pts;\n    Ranks = obj.Ranks;\n    YOUR_PICKS_HGHT = obj.YOUR_PICKS_HGHT;\n    NO_UPCOMING_PICKEM1 = obj.NO_UPCOMING_PICKEM1;\n    NO_UPCOMING_PICKEM2 = obj.NO_UPCOMING_PICKEM2;\n    NO_LIVE_PICKEM1 = obj.NO_LIVE_PICKEM1;\n    NO_LIVE_PICKEM2 = obj.NO_LIVE_PICKEM2;\n    NO_COMPLETED_PICKEM1 = obj.NO_COMPLETED_PICKEM1;\n    NO_COMPLETED_PICKEM2 = obj.NO_COMPLETED_PICKEM2;\n}\n\nfunction translateCreateContestData() {\n    let obj = transtale('createcontest');\n    SELECT_LEAGUE = obj.SELECT_LEAGUE;\n    MATCHES = obj.MATCHES\n    Min_team_size = obj.Min_team_size\n    Max_team_size = obj.Max_team_size\n    Number_of_winners = obj.Number_of_winners\n    CONTEST_NAME = obj.CONTEST_NAME\n    Contest_Name = obj.Contest_Name\n    PRIZE_POOL = obj.PRIZE_POOL\n    PRIZES = obj.PRIZES\n    Prize_Distribution = obj.Prize_Distribution\n    WINNING = obj.WINNING\n    TOTAL = obj.TOTAL\n    CREATE_SHARE = obj.CREATE_SHARE\n    SELECT_LEAGUE_ERROR = obj.SELECT_LEAGUE_ERROR\n    SELECT_MATCH = obj.SELECT_MATCH\n    SELECT_MINIMUM_TEAM = obj.SELECT_MINIMUM_TEAM\n    SELECT_MAX_TEAMS = obj.SELECT_MAX_TEAMS\n    MIN_TEAM_CONDITION = obj.MIN_TEAM_CONDITION\n    MAX_TEAM_CONDITION = obj.MAX_TEAM_CONDITION\n    SELECT_ENTRY_FEE = obj.SELECT_ENTRY_FEE\n    SELECT_WINNERS_COUNT = obj.SELECT_WINNERS_COUNT\n    SELECT_CONTEST_NAME = obj.SELECT_CONTEST_NAME\n    SELECT_CONTEST_NAME_MIN_CONDITION = obj.SELECT_CONTEST_NAME_MIN_CONDITION\n    WINNERS_CONDITION = obj.WINNERS_CONDITION\n    PRIZE_STRUCTURE_ERROR = obj.PRIZE_STRUCTURE_ERROR\n    WINNING_PER_EQ100 = obj.WINNING_PER_EQ100\n    WINNING_PER_EQLESS100 = obj.WINNING_PER_EQLESS100\n    WINNING_AMT_CONDITION = obj.WINNING_AMT_CONDITION\n    PLEASE_ENTER_AMOUNT = obj.PLEASE_ENTER_AMOUNT\n    ENTERED_AMOUNT_MUST_BE_5 = obj.ENTERED_AMOUNT_MUST_BE_5\n    PLEASE_ENTER_ATLEAST_4_DIGIT = obj.PLEASE_ENTER_ATLEAST_4_DIGIT\n    PLEASE_ENTER_PROMO_CODE = obj.PLEASE_ENTER_PROMO_CODE\n}\n\nfunction translateWalletData() {\n    let obj = transtale('mywallet');\n    ADD_FUNDS = obj.ADD_FUNDS;\n    WITHDRAW = obj.WITHDRAW;\n    EARN_COINS = obj.EARN_COINS;\n    EARN_COINS_LOWCASE = obj.EARN_COINS_LOWCASE;\n    RECENT_TRANSACTION = obj.RECENT_TRANSACTION;\n    VIEW_ALL_TRANSACTION = obj.VIEW_ALL_TRANSACTION;\n    TRANSACTION_STATUS_PENDING = obj.TRANSACTION_STATUS_PENDING;\n    TRANSACTION_STATUS_SUCCESS = obj.TRANSACTION_STATUS_SUCCESS;\n    TRANSACTION_STATUS_FAILED = obj.TRANSACTION_STATUS_FAILED;\n    CREDITS = obj.CREDITS;\n    CREDIT = obj.CREDIT;\n    credit = obj.credit;\n    DEBIT = obj.DEBIT;\n    REAL_WINNING_BONUS_AMT = obj.REAL_WINNING_BONUS_AMT;\n    TODAY = obj.TODAY;\n    DEPOSIT_BALANCE = obj.DEPOSIT_BALANCE;\n    PAYUMONEY = obj.PAYUMONEY;\n    PAYTM = obj.PAYTM;\n    GO_CASH = obj.GO_CASH;\n    MPESA = obj.MPESA;\n    ADD_AMOUNT_TO_WALLET = obj.ADD_AMOUNT_TO_WALLET1 + (Utilities.getMasterData() ? Utilities.getMasterData().currency_code : '') + obj.ADD_AMOUNT_TO_WALLET2;\n    MIN_WITHDRAW_LIMIT = obj.MIN_WITHDRAW_LIMIT1 + (Utilities.getMasterData() ? Utilities.getMasterData().currency_code : '');\n    MAX_WITHDRAW_LIMIT = obj.MAX_WITHDRAW_LIMIT;\n    BANK_DETAILS = obj.BANK_DETAILS;\n    PAN_TO_ID = obj.PAN_TO_ID;\n    AMOUNT = obj.AMOUNT1 + (Utilities.getMasterData() ? Utilities.getMasterData().currency_code : '') + obj.AMOUNT2;\n    PANCARD_PENDING_STATUS = obj.PANCARD_PENDING_STATUS;\n    PANCARD_REJECTED_STATUS = obj.PANCARD_REJECTED_STATUS;\n    PANCARD_REJECTED_STATUS_MSG = obj.PANCARD_REJECTED_STATUS_MSG;\n    FULL_NAME_AS_BANK = obj.FULL_NAME_AS_BANK;\n    BANK_NAME = obj.BANK_NAME;\n    ACCOUNT_NUMBER = obj.ACCOUNT_NUMBER;\n    IFSC_CODE = obj.IFSC_CODE;\n    PANCARD_NUMBER = obj.PANCARD_NUMBER;\n    PANCARD = obj.PANCARD;\n    MAX_SIZE_UPLOAD = obj.MAX_SIZE_UPLOAD;\n    UPLOAD_FORMATS = obj.UPLOAD_FORMATS;\n    UPDATE_BANK_DETAIL_FROM_PROFILE = obj.UPDATE_BANK_DETAIL_FROM_PROFILE;\n    YOU_CAN_UPDATE_YOUR = obj.YOU_CAN_UPDATE_YOUR;\n    BANK_DETAIL_FROM_PROFILE = obj.BANK_DETAIL_FROM_PROFILE;\n    UPDATE = obj.UPDATE;\n    WITHDRAW_ALERT = obj.WITHDRAW_ALERT;\n    PROFILE = obj.PROFILE;\n    PROFILE_SMALL = obj.PROFILE_SMALL;\n    NOTE = obj.NOTE;\n    WATCH_VIDEO_N_GET = obj.WATCH_VIDEO_N_GET;\n    ADDED_TO_ACCOUNT = obj.ADDED_TO_ACCOUNT;\n    THANKYOU = obj.THANKYOU;\n    WITHDRAW_PROCESS1 = obj.WITHDRAW_PROCESS1;\n    WITHDRAW_PROCESS2 = obj.WITHDRAW_PROCESS2;\n    OK = obj.OK;\n    CANCEL = obj.CANCEL;\n    ALERT = obj.ALERT;\n    BANK_TRANSFER = obj.BANK_TRANSFER;\n    Your_payment_successful = obj.Your_payment_successful;\n    Your_payment_failed = obj.Your_payment_failed;\n    Your_payment_pending = obj.Your_payment_pending;\n    Coins_in_your_wallet = obj.Coins_in_your_wallet;\n    coins = obj.coins;\n    Price = obj.Price;\n    Place_order = obj.Place_order;\n    Min_withdraw_amount_is = obj.Min_withdraw_amount_is;\n    YOUR_WINNINGS = obj.YOUR_WINNINGS;\n    MONEY_YOU_WON = obj.MONEY_YOU_WON;\n    VERIFY_YOUR_ACCOUNT_TO_ACTIVATE_WITHDRAW_MONEY_SERVICE = obj.VERIFY_YOUR_ACCOUNT_TO_ACTIVATE_WITHDRAW_MONEY_SERVICE;\n    DEPOSIT = obj.DEPOSIT;\n    VERIFY_YOUR_ACCOUNT = obj.VERIFY_YOUR_ACCOUNT;\n    VERIFY_GET = obj.VERIFY_GET;\n    VERIFICATION_PENDING = obj.VERIFICATION_PENDING;\n    TRANS_ID = obj.TRANS_ID;\n    STATUS = obj.STATUS;\n    PANCARD_VERIFICATION = obj.PANCARD_VERIFICATION;\n    PHONE_VERIFICATION = obj.PHONE_VERIFICATION;\n    FIRST_CONTEST = obj.FIRST_CONTEST;\n    FIFTH_CONTEST = obj.FIFTH_CONTEST;\n    THENTH_CONTEST = obj.THENTH_CONTEST;\n    NAME_ON_PANCARD = obj.NAME_ON_PANCARD;\n    VERIFY_PANCARD = obj.VERIFY_PANCARD;\n    BankVerification = obj.BankVerification;\n    ADD_CASH = obj.ADD_CASH;\n    TOTAL_WINNINGS = obj.TOTAL_WINNINGS;\n    YOU_CAN_WITHDRAW_ONLY_FROM_WINNING = obj.YOU_CAN_WITHDRAW_ONLY_FROM_WINNING;\n    YOUR_WITHDRAWAL_AMOUNT_WILL_BE_CREDITED_TO_THIS_ACCOUNT = obj.YOUR_WITHDRAWAL_AMOUNT_WILL_BE_CREDITED_TO_THIS_ACCOUNT;\n    YOUR_WITHDRAWAL_REQUEST_IS_PENDING = obj.YOUR_WITHDRAWAL_REQUEST_IS_PENDING;\n    VERIFY_BANK_DETAILS = obj.VERIFY_BANK_DETAILS;\n    SELECT_PAYMENT_METHOD = obj.SELECT_PAYMENT_METHOD;\n    TO_PAY = obj.TO_PAY;\n    CREDIT_DEBIT_CARD = obj.CREDIT_DEBIT_CARD;\n    PAYTM_WALLET = obj.PAYTM_WALLET;\n    OTHER_WALLET = obj.OTHER_WALLET;\n    UPI = obj.UPI;\n    NET_BANKING = obj.NET_BANKING;\n    TRANSACTION_STATUS_REJECTED = obj.TRANSACTION_STATUS_REJECTED;\n    DELETE = obj.DELETE;\n    VERIFY_YOUR_ACCOUNT_FIRST = obj.VERIFY_YOUR_ACCOUNT_FIRST;\n    PAY_WITH_DEBIT_CARD_CREDIT_CARD_UPI_MORE = obj.PAY_WITH_DEBIT_CARD_CREDIT_CARD_UPI_MORE;\n    WHERE__HOW_MUCH_SPENT_KNOW_ALL = obj.WHERE__HOW_MUCH_SPENT_KNOW_ALL;\n    PENDING_AMOUNT = obj.PENDING_AMOUNT;\n    RAISE_ANOTHER_WITHDRAWAL_REQUEST = obj.RAISE_ANOTHER_WITHDRAWAL_REQUEST;\n    PANCARD_HELP_TEXT = obj.PANCARD_HELP_TEXT;\n    INVALID_PROMOCODE = obj.INVALID_PROMOCODE;\n    PLEASE_ENTER_VALID_PAN_CARD_NUMBER = obj.PLEASE_ENTER_VALID_PAN_CARD_NUMBER;\n    WITHDRAW_YOUR_WINNINGS_IN_YOUR_ACCOUNT = obj.WITHDRAW_YOUR_WINNINGS_IN_YOUR_ACCOUNT;\n    YOUR_ACCOUNT_IS_VERIFIED = obj.YOUR_ACCOUNT_IS_VERIFIED;\n    YOUR_ACCOUNT_IS_VERIFIED1 = obj.YOUR_ACCOUNT_IS_VERIFIED1;\n    VIEW = obj.VIEW;\n    INSUFFICIENT_BALANCE = obj.INSUFFICIENT_BALANCE;\n    WITHDRAW_MONEY = obj.WITHDRAW_MONEY;\n    TRANSACTION_HISTORY = obj.TRANSACTION_HISTORY;\n    TRANSACTIONS = obj.TRANSACTIONS;\n    NEED_HELP = obj.NEED_HELP;\n    HRS24_SUPPORT = obj.HRS24_SUPPORT;\n    SUFFICIENT_WINNING = obj.SUFFICIENT_WINNING;\n}\n\nfunction translateInviteData() {\n    let obj = transtale('invite');\n    INVITE_YOUR_FRIENDS_VIA = obj.INVITE_YOUR_FRIENDS_VIA;\n    INVITE_LINK = obj.INVITE_LINK;\n    INVITE_FB = obj.INVITE_FB;\n    INVITE_WHATSAPP = obj.INVITE_WHATSAPP;\n    INVITE_EMAIL = obj.INVITE_EMAIL;\n    INVITE_FRIENDS = obj.INVITE_FRIENDS;\n    INVITE_FRIENDS_EARN = obj.INVITE_FRIENDS_EARN;\n    JOINED = obj.JOINED;\n    CASH = obj.CASH;\n    MY_REFERRALS = obj.MY_REFERRALS;\n    BONUS_EARNED = obj.BONUS_EARNED;\n    CASH_EARNED = obj.CASH_EARNED;\n    COINS_EARNED = obj.COINS_EARNED;\n    SHARE = obj.SHARE;\n    REFERRAL = obj.REFERRAL;\n    EMAIL_VERIFIED = obj.EMAIL_VERIFIED;\n    FIRST_DEPOSIT = obj.FIRST_DEPOSIT;\n    PAN_VERIFIED = obj.PAN_VERIFIED;\n    SHARE_REFERRAL_CODE = obj.SHARE_REFERRAL_CODE;\n    COPY = obj.COPY;\n    TELL_YOUR_FRIENDS_SIGNUP = obj.TELL_YOUR_FRIENDS_SIGNUP;\n    TELL_YOUR_FRIENDS_JOIN_CONTEST = obj.TELL_YOUR_FRIENDS_JOIN_CONTEST;\n    TOP_REFERRERS = obj.TOP_REFERRERS;\n    EARNED = obj.EARNED;\n    TOTAL_EARNED = obj.TOTAL_EARNED;\n    REAL_CASH = obj.REAL_CASH;\n    BONUS_CASH = obj.BONUS_CASH;\n    COINS = obj.COINS;\n    NOT_REFER = obj.NOT_REFER;\n    YOUR_FRIENDS_YET = obj.YOUR_FRIENDS_YET;\n    SHARE_NOW = obj.SHARE_NOW;\n    MERCHANDISE = obj.MERCHANDISE;\n    FREE_CONTEST = obj.FREE_CONTEST;\n    SHARE_CONTEST_CODE = obj.SHARE_CONTEST_CODE;\n    Hi = obj.Hi;\n    contest_and_win_real_cash = obj.contest_and_win_real_cash;\n    League_Url = obj.League_Url;\n    Your_friend_has_shared = obj.Your_friend_has_shared;\n    Your_friend_has_shared_pick = obj.Your_friend_has_shared_pick;\n    WinFantasy = obj.WinFantasy;\n    Your_friend_has_referred_you = obj.Your_friend_has_referred_you;\n    Your_Friend = obj.Your_Friend;\n    has_referred_you_on = obj.has_referred_you_on;\n    please_join_and_earn_prizes = obj.please_join_and_earn_prizes;\n    please_join_and_earn_prizes_text = obj.please_join_and_earn_prizes_text;\n    or = obj.or;\n    Join_through_the_following = obj.Join_through_the_following;\n    Join_through_the_following_text = obj.Join_through_the_following_text;\n    YOUR_FRIEND_CONTEST = obj.YOUR_FRIEND_CONTEST;\n    has_referred_you_on_contest = obj.has_referred_you_on_contest;\n    please_join_and_earn_prizes_text_contest = obj.please_join_and_earn_prizes_text_contest;\n    OR_CONTEST = obj.OR_CONTEST;\n    Join_through_the_following_text_contest = obj.Join_through_the_following_text_contest;\n    and_contest_code_contest = obj.and_contest_code_contest;\n    CHEERS_CONTEST = obj.Cheers_CONTEST;\n    TEAMS_CONTEST = obj.TEAMS_CONTEST;\n    WHILE_SIGNING_UP = obj.WHILE_SIGNING_UP;\n    and_contest_code = obj.and_contest_code;\n    MEDIUM_ADD=obj.MEDIUM_ADD;\n    Cheers = obj.Cheers;\n    Teams = obj.Teams;\n    Link_has_been_copied = obj.Link_has_been_copied;\n    MSZ_COPY_CODE = obj.MSZ_COPY_CODE;\n    Promocode_has_been_applied = obj.Promocode_has_been_applied;\n    ON_ENTERING_YOUR_FRIENDS_REFERRAL_CODE = obj.ON_ENTERING_YOUR_FRIENDS_REFERRAL_CODE;\n    REAL_CASH_FOR_EVERY_FRIEND_YOU_REFER = obj.REAL_CASH_FOR_EVERY_FRIEND_YOU_REFER;\n    BONUS_FOR_EVERY_FRIEND_YOU_REFER = obj.BONUS_FOR_EVERY_FRIEND_YOU_REFER;\n    COINS_FOR_EVERY_FRIEND_YOU_REFER = obj.COINS_FOR_EVERY_FRIEND_YOU_REFER;\n    REFER_YOU_AND_EARNED = obj.REFER_YOU_AND_EARNED;\n    EARN_REAL_CASH_WHEN_YOUR_FRIEND_SIGNS_UP = obj.EARN_REAL_CASH_WHEN_YOUR_FRIEND_SIGNS_UP;\n    SHARE_YOUR_CODE = obj.SHARE_YOUR_CODE;\n    BRING_YOUR_FRIENDS_AND = obj.BRING_YOUR_FRIENDS_AND;\n    PLAY_FOR_FREE = obj.PLAY_FOR_FREE;\n    YOUR_FRIEND = obj.YOUR_FRIEND;\n   }\n\nfunction translateProfileData() {\n    let obj = transtale('profile');\n    USER_NAME = obj.USER_NAME;\n    BASIC_INFO = obj.BASIC_INFO;\n    EMAIL = obj.EMAIL;\n    DOB = obj.DOB;\n    GENDER = obj.GENDER;\n    MOBILE_NUMBER = obj.MOBILE_NUMBER;\n    ADDRESS = obj.ADDRESS;\n    EDIT_PROFILE = obj.EDIT_PROFILE;\n    FIRST_NAME = obj.FIRST_NAME;\n    LAST_NAME = obj.LAST_NAME;\n    VERIFY = obj.VERIFY;\n    VERIFIED = obj.VERIFIED;\n    SELECT_DOB = obj.SELECT_DOB;\n    SELECT_GENDER = obj.SELECT_GENDER;\n    MALE = obj.MALE;\n    FEMALE = obj.FEMALE;\n    SETREET_ADDRESS = obj.SETREET_ADDRESS;\n    COUNTRY = obj.COUNTRY;\n    STATE = obj.STATE;\n    CITY = obj.CITY;\n    PIN_CODE = obj.PIN_CODE;\n    POSTAL_CODE = obj.POSTAL_CODE;\n    MICR_CODE = obj.MICR_CODE;\n    UPLOAD_PAN_CARD = obj.UPLOAD_PAN_CARD;\n    UPLOAD = obj.UPLOAD;\n    UPLOAD_BANK_DOC = obj.UPLOAD_BANK_DOC;\n    UPLOAD_BANK_DOC_DESC = obj.UPLOAD_BANK_DOC_DESC;\n    BANK_PROFILE_VERIFIED = obj.BANK_PROFILE_VERIFIED;\n    is_invalid = obj.is_invalid;\n    Please_select_DOB = obj.Please_select_DOB;\n    Please_select_Gender = obj.Please_select_Gender;\n    Please_enter_mobile_number = obj.Please_enter_mobile_number;\n    Please_upload_ID_card = obj.Please_upload_ID_card;\n    Please_upload_Bank_document = obj.Please_upload_Bank_document;\n    VERIFY_YOUR_DETAILS_TO_ENJOY_SEAMLESS_WITHDRAWLS = obj.VERIFY_YOUR_DETAILS_TO_ENJOY_SEAMLESS_WITHDRAWLS;\n    PLAYING_EXPERIENCE = obj.PLAYING_EXPERIENCE;\n    PRIMARY_INFO = obj.PRIMARY_INFO;\n    MOBILE = obj.MOBILE;\n    BANK = obj.BANK;\n    PAN = obj.PAN;\n    EMAIL_VERIFICATION = obj.EMAIL_VERIFICATION;\n    EMAIL_VERIFICATION_TEXT = obj.EMAIL_VERIFICATION_TEXT;\n    YES = obj.YES;\n    NO = obj.NO;\n    ARE_YOU_SURE_YOU_WANT_TO_DELETE_BANK_DETAILS = obj.ARE_YOU_SURE_YOU_WANT_TO_DELETE_BANK_DETAILS;\n    EDIT_USERNAME = obj.EDIT_USERNAME;\n    CHECK_AVAILABILITY = obj.CHECK_AVAILABILITY;\n    EDIT_MOBILE_NUMBER = obj.EDIT_MOBILE_NUMBER;\n    EDIT_EMAIL_ADDRESS = obj.EDIT_EMAIL_ADDRESS;\n    VERIFY_EMAIL_ADDRESS = obj.VERIFY_EMAIL_ADDRESS;\n    ADD_AMOUNT = obj.ADD_AMOUNT;\n    ENTER_AMOUNT = obj.ENTER_AMOUNT;\n    PICK_BEST_DEAL = obj.PICK_BEST_DEAL;\n    YOU_WILL_ADDITIONALLY_GET = obj.YOU_WILL_ADDITIONALLY_GET;\n    EDIT_BASIC_INFO = obj.EDIT_BASIC_INFO;\n    USERNAME_HAS_BEEN_UPDATED_SUCCUSSFULLY = obj.USERNAME_HAS_BEEN_UPDATED_SUCCUSSFULLY;\n    YOUR_MOBILE_NUMBER_HAS_BEEN_UPDATED_SUCCUSSFULLY = obj.YOUR_MOBILE_NUMBER_HAS_BEEN_UPDATED_SUCCUSSFULLY;\n    YOUR_EMAIL_ADDRESS_HAS_BEEN_UPDATED_SUCCUSSFULLY = obj.YOUR_EMAIL_ADDRESS_HAS_BEEN_UPDATED_SUCCUSSFULLY;\n    VERIFY_AND_UPDATE = obj.VERIFY_AND_UPDATE;\n    WRONG_OTP = obj.WRONG_OTP;\n    YOUR_FULL_NAME = obj.YOUR_FULL_NAME;\n    CANT_EDIT_AFTER_PAN_APPROVAL = obj.CANT_EDIT_AFTER_PAN_APPROVAL;\n    ARE_YOU_SURE_YOU_WANT_TO_UPDATE_YOUR_PROFILE = obj.ARE_YOU_SURE_YOU_WANT_TO_UPDATE_YOUR_PROFILE;\n    CONTEST_WON = obj.CONTEST_WON;\n    TOTAL_CONTESTS = obj.TOTAL_CONTESTS;\n    SERIES = obj.SERIES;\n    SOMETHING_ERROR = obj.SOMETHING_ERROR;\n    CHOOSE_AVATAR = obj.CHOOSE_AVATAR;\n}\n\nfunction translateNotificationData() {\n    let obj = transtale('notification');\n    DONT_HAVE_ANY = obj.DONT_HAVE_ANY;\n    NOTIFICATION_YET = obj.NOTIFICATION_YET;\n    GO_BACK_TO_LOBBY = obj.GO_BACK_TO_LOBBY;\n}\n\nfunction translateStaticPagesData() {\n    let obj = transtale('static_pages');\n    TEST = obj.TEST;\n    T20 = obj.T20;\n    ODI = obj.ODI;\n    NO_SCORING_RULES = obj.NO_SCORING_RULES;\n    ABOUT_US_TITLE = obj.ABOUT_US_TITLE;\n    FAQ_TITLE = obj.FAQ_TITLE;\n    TANDC_TITLE = obj.TANDC_TITLE;\n    PRIVACY_POLICY_TITLE = obj.PRIVACY_POLICY_TITLE;\n    Filters = obj.Filters;\n    I_hereby_confirm = obj.I_hereby_confirm;\n    and_I_am_not_a = obj.and_I_am_not_a;\n    Oops = obj.Oops;\n    Looks_like_you_have = obj.Looks_like_you_have;\n    Lobby = obj.Lobby;\n    Go_Back_to_Lobby = obj.Go_Back_to_Lobby;\n    BY_JOINING_THIS_CONTEST = obj.BY_JOINING_THIS_CONTEST;\n    AGREE_TO_CONTACTED_BY = obj.AGREE_TO_CONTACTED_BY;\n    AND_THEIR_PARTNERS = obj.AND_THEIR_PARTNERS;\n    WE_WHOULD_LOVE = obj.WE_WHOULD_LOVE;\n    FOLLOW_US = obj.FOLLOW_US;\n}\n\nfunction translateContestListingData() {\n    let obj = transtale('contest_listing');\n    Entry_for_the_contest = obj.Entry_for_the_contest;\n    Contest = obj.Contest;\n    Please_Login_Signup_First = obj.Please_Login_Signup_First;\n    Please_enter_valid_percentage_value = obj.Please_enter_valid_percentage_value;\n    Please_enter_percentage_value_less_100 = obj.Please_enter_percentage_value_less_100;\n    Your_lineup_will_be_reset = obj.Your_lineup_will_be_reset;\n    Please_enter_a_valid_league_code = obj.Please_enter_a_valid_league_code;\n    How_to_Play = obj.How_to_Play;\n    Join_Private_League = obj.Join_Private_League;\n    Enter_a_League_Code_to_Join = obj.Enter_a_League_Code_to_Join;\n    Join_private_leagues = obj.Join_private_leagues;\n    FANTASY_SPORTS = obj.FANTASY_SPORTS;\n    Average = obj.Average;\n    Season = obj.Season;\n    Last_5_games = obj.Last_5_games;\n    Graph_data_no_available = obj.Graph_data_no_available;\n    NO_DATA_FOUND = obj.NO_DATA_FOUND;\n    Want_the_best_experience = obj.Want_the_best_experience;\n    play_fantasy_on_our_Android_app = obj.play_fantasy_on_our_Android_app;\n    INSTALL = obj.INSTALL;\n    CREATE_YOUR_TEAM = obj.CREATE_YOUR_TEAM;\n    PAY_AND_JOIN = obj.PAY_AND_JOIN;\n    AUTHORISED_TO_USE = obj.AUTHORISED_TO_USE;\n    WINNING_BAL_TO_JOIN = obj.WINNING_BAL_TO_JOIN;\n    BONUS_ALLOWED = obj.BONUS_ALLOWED;\n    GO_TO = obj.GO_TO;\n    TC = obj.TC;\n    AMOUNT_TO_ADD = obj.AMOUNT_TO_ADD;\n    FILTER_MORE_OPTION_TEXT = obj.FILTER_MORE_OPTION_TEXT;\n    NO_DATA_TO_SHOW = obj.NO_DATA_TO_SHOW;\n}\n\nfunction translateItemData() {\n    let obj = transtale('item_details');\n    Hurry_Only = obj.Hurry_Only;\n    left_in_stock = obj.left_in_stock;\n    Redeem_NOW = obj.Redeem_NOW;\n    Product_Description = obj.Product_Description;\n    Coins_Range = obj.Coins_Range;\n}\n\nfunction translateReferralFriend() {\n    let obj = transtale('referral_friend');\n    CONGRATULATIONS = obj.CONGRATULATIONS;\n    YOU_GOT_ = obj.YOU_GOT_;\n    BONUS_CASH_ON_SIGNINGUP_REFER_CODE = obj.BONUS_CASH_ON_SIGNINGUP_REFER_CODE;\n    BONUS_CASH_ON_SETTING_REF_CODE = obj.BONUS_CASH_ON_SETTING_REF_CODE;\n    EDIT_REFER = obj.EDIT_REFER;\n    CODE = obj.CODE;\n    INVITE_YOUR_FRIEND_BIG_REWARD = obj.INVITE_YOUR_FRIEND_BIG_REWARD;\n    BONUS_CASH_LOWER = obj.BONUS_CASH_LOWER;\n    REAL_CASH_LOWER = obj.REAL_CASH_LOWER;\n    COIN_CASH_LOWER = obj.COIN_CASH_LOWER;\n    ON_TRY_COOL_REF_CODE = obj.ON_TRY_COOL_REF_CODE;\n    REF_CODE = obj.REF_CODE;\n    I_DONT_WANT_TO_EDIT = obj.I_DONT_WANT_TO_EDIT;\n    YOU_WONT_TO_ABLE_EDIT_THIS_CODE_AGAIN = obj.YOU_WONT_TO_ABLE_EDIT_THIS_CODE_AGAIN;\n    FRIENDS_SIGNUP = obj.FRIENDS_SIGNUP;\n    YOU_GET = obj.YOU_GET;\n    YOUR_FRIEND_GETS = obj.YOUR_FRIEND_GETS;\n    ON_FRIEND_DEPOSIT = obj.ON_FRIEND_DEPOSIT;\n    OF_YOU = obj.OF_YOU;\n    FRIEND_DEPOSIT_MAXIMUM = obj.FRIEND_DEPOSIT_MAXIMUM;\n    UPTO = obj.UPTO;\n    LOYALITY_REWARDS = obj.LOYALITY_REWARDS;\n    FTH_REF = obj.FTH_REF;\n    TEN_REF = obj.TEN_REF;\n    FIF_REF = obj.FIF_REF;\n    GOT_IT = obj.GOT_IT;\n    REFERRAL_SYSTEM = obj.REFERRAL_SYSTEM;\n    ON_SIGN_UP = obj.ON_SIGN_UP;\n    MORE_REFERRALS = obj.MORE_REFERRALS;\n    ON = obj.ON;\n    ERNED_FIFITH_REF = obj.ERNED_FIFITH_REF;\n    ERNED_TEHTH_REF = obj.ERNED_TEHTH_REF;\n    ERNED_FIFITHEEN_REF = obj.ERNED_FIFITHEEN_REF;\n    FRIEND_DEPOSIT = obj.FRIEND_DEPOSIT;\n    ACHIEVEMENTS = obj.ACHIEVEMENTS;\n    OF_YOUR_FRIEND_DEPOSIT = obj.OF_YOUR_FRIEND_DEPOSIT;\n    OF_YOUR_FRIEND_DEPOSIT_MAXIMUM = obj.OF_YOUR_FRIEND_DEPOSIT_MAXIMUM;\n    REFER_A_FRIEND = obj.REFER_A_FRIEND;\n    REFER_A_FRIEND_C = obj.REFER_A_FRIEND_C;\n    REAL_CASE_ON_YOUR_FRIEND_SIGN_UP = obj.REAL_CASE_ON_YOUR_FRIEND_SIGN_UP;\n    INVITE_FRIEND_WIN_REWARD = obj.INVITE_FRIEND_WIN_REWARD;\n    REFER_NOW = obj.REFER_NOW;\n    EDIT_YOUR_CODE_BONUS = obj.EDIT_YOUR_CODE_BONUS;\n    IT_PAY_TO_HAVE = obj.IT_PAY_TO_HAVE;\n    YOU_WILL_EARN_ON_EACH_NEW_SIGN_UP = obj.YOU_WILL_EARN_ON_EACH_NEW_SIGN_UP;\n    INVALID_ALPHA_NUMERIC_KEY = obj.INVALID_ALPHA_NUMERIC_KEY;\n    TOTAL_EARNING = obj.TOTAL_EARNING;\n    LOAD_MORE_RESULTS = obj.LOAD_MORE_RESULTS;\n    HOW_IT_WORKS = obj.HOW_IT_WORKS;\n    VIEW_LEADEBOARD=obj.VIEW_LEADEBOARD;\n    TOTAL_REFERAL=obj.TOTAL_REFERAL;\n    REFERAL_LEADERBOARD=obj.REFERAL_LEADERBOARD;\n    REFER_MORE_TEXT=obj.REFER_MORE_TEXT;\n\n}\nfunction translateEsport() {\n    let obj = transtale('esport');\n    DONT_SHOW_ME_AGAIN = obj.DONT_SHOW_ME_AGAIN;\n    CUSTOMIZE_REFERRAL_CODE = obj.CUSTOMIZE_REFERRAL_CODE;\n}\nfunction translateAffiliate() {\n    let obj = transtale('affiliate');\n    BECOME_AFFILIATE = obj.BECOME_AFFILIATE;\n    AFFILIATE_PROGRAM = obj.AFFILIATE_PROGRAM;\n    AFFILIATE_TAGLINE1 = obj.AFFILIATE_TAGLINE1;\n    AFFILIATE_TAGLINE2 = obj.AFFILIATE_TAGLINE2;\n    INDUSTRY_LEADING = obj.INDUSTRY_LEADING;\n    INDUSTRY_LEADING_TAGLINE = obj.INDUSTRY_LEADING_TAGLINE;\n    PROMOTION_EASY = obj.PROMOTION_EASY;\n    PROMOTION_EASY_TAGLINE = obj.PROMOTION_EASY_TAGLINE;\n    POWERFUL_TRACKING = obj.POWERFUL_TRACKING;\n    POWERFUL_TRACKING_TAGLINE = obj.POWERFUL_TRACKING_TAGLINE;\n    DETAILS = obj.DETAILS;\n    USER = obj.USER;\n    AFF_AMOUNT = obj.AFF_AMOUNT;\n    COMMISION = obj.COMMISION;\n    SIGNUP = obj.SIGNUP;\n    AMOUNT_DEPOSITED = obj.AMOUNT_DEPOSITED;\n    BONUS_ON = obj.BONUS_ON;\n    COMMISION_ON = obj.COMMISION_ON;\n    TOTAL_SIGNUP = obj.TOTAL_SIGNUP;\n    DEPOSITED_AMOUNT = obj.DEPOSITED_AMOUNT;\n    COMMISION_TILL_DATE = obj.COMMISION_TILL_DATE;\n    COMMISION_DUE = obj.COMMISION_DUE;\n    DEPOSITE = obj.DEPOSITE;\n    REQ_PENDING = obj.REQ_PENDING;\n    REQ_CANCELED = obj.REQ_CANCELED;\n}\nfunction translateCoinEntry() {\n    let obj = transtale('coin_entry');\n    ADD_COIN_AND_JOIN_CONTEST = obj.ADD_COIN_AND_JOIN_CONTEST;\n    PAYABLE_COINS_BAL = obj.PAYABLE_COINS_BAL;\n}\nfunction translateCoinModule() {\n    let obj = transtale('coin_module');\n    BUY_COINS = obj.BUY_COINS;\n    AMOUNT_DEDUCTION_MSG = obj.AMOUNT_DEDUCTION_MSG;\n    BUY_CONFIRMATION = obj.BUY_CONFIRMATION;\n    BUY = obj.BUY;\n}\nfunction translateTeamCompare() {\n    let obj = transtale('team_compare');\n    SEE = obj.SEE;\n    ON_FIELDVIEW = obj.ON_FIELDVIEW;\n    OPP_LEAD_BY = obj.OPP_LEAD_BY;\n    YOU_LEAD_BY = obj.YOU_LEAD_BY;\n    COMMON_PLAYERS = obj.COMMON_PLAYERS;\n    OPP_CVC_LEAD_BY = obj.OPP_CVC_LEAD_BY;\n    YOU_CVC_LEAD_BY = obj.YOU_CVC_LEAD_BY;\n    ALL_PLAYERS = obj.ALL_PLAYERS;\n    TOTAL_POINTS = obj.TOTAL_POINTS;\n}\n","/var/www/html/framework/frontend/src/Utilities/Utilities.jsx",["1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289"],"import WSManager from \"../WSHelper/WSManager\";\nimport moment from 'moment';\nimport ls from 'local-storage';\nimport { Sports } from \"../JsonFiles\";\nimport _Map from 'lodash/map';\nimport _isNull from 'lodash/isNull';\nimport _isEmpty from 'lodash/isEmpty';\nimport _isUndefined from 'lodash/isUndefined';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _findIndex from 'lodash/findIndex';\nimport _filter from 'lodash/filter';\nimport _indexOf from 'lodash/indexOf';\nimport _sumBy from 'lodash/sumBy';\nimport _debounce from 'lodash/debounce';\nimport _times from 'lodash/times';\nimport { AppSelectedSport, setValue, DASHBOARD_FOOTER, TOAST,SELECTED_GAMET, GameType } from \"../helper/Constants\";\nimport AppConfig from \"../InitialSetup/AppConfig\";\n\nexport {\n    _Map,\n    _isNull,\n    _isEmpty,\n    _isUndefined,\n    _cloneDeep,\n    _findIndex,\n    _filter,\n    _indexOf,\n    _sumBy,\n    _debounce,\n    _times\n};\n\nexport var APP_MASTER_DATA = '';\nexport var ANDROID_APP_INSTALLED_VERSION = '';// Used for android app version to be display on more screen\n\n\nclass Utilities {\n\n    static teamFlagURL(flag) {\n        return (flag || '').includes('http') ? flag : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.FLAG + (flag || 'flag_default.jpg');\n    }\n    static playerJersyURL(jersy) {\n        return (jersy || '').includes('http') ? jersy : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.JERSY + jersy;\n    }\n    static getThumbURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.THUMB + file;\n    }\n    static getPanURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.PAN + file;\n    }\n    static getUploadURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.UPLOAD + file;\n    }\n    static getBankURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.BANK + file;\n    }\n    static getBannerURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.BANNER + file;\n    }\n    static getAppBannerURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.APPBANNER + file;\n    }\n    static getRewardsURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.REWARDS + file;\n    }\n    static getS3URL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.S3ASSETS + file;\n    }\n    static getBadgeURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.BADGES + file;\n    }\n    static getMerchandiseURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.MERCHANDISE + file;\n    }\n    static getSponserURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.SPONSER + file;\n    }\n    static getCategoryURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.CATEGORY + file;\n    }\n    static getOpenPredURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.OPENPRED + file;\n    }\n    static getOpenPredFPPURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.OPENPREDFPP + file;\n    }\n\n    static getSettingURL(file) {\n        return (file || '').includes('http') ? file : AppConfig.s3.BUCKET + AppConfig.s3.S3_FOLDER.SETTING + file;\n    }\n\n    static getTotalUserBalance(mBonusAmount, mRealAmount, mWinningAmount) {\n        var bonusAmount = mBonusAmount;\n        var realAmount = mRealAmount;\n        var winningAmount = mWinningAmount;\n        var totalUserBalance = parseFloat(bonusAmount) + parseFloat(realAmount) + parseFloat(winningAmount);\n        return totalUserBalance\n    }\n\n    static getBalanceAccToMaxPercentOfEntryFee(mEntryFee) {\n        var UserBalance = WSManager.getBalance();\n        var allowedBonusPercantage = WSManager.getAllowedBonusPercantage();\n        var bonusAmount = parseFloat(UserBalance.bonus_amount);\n        var realAmount = UserBalance.real_amount;\n        var winningAmount = UserBalance.winning_amount;\n        var depositAndWinning = parseFloat(realAmount) + parseFloat(winningAmount);\n        var maxBonusAccToEntryFee = parseFloat(allowedBonusPercantage) * parseFloat(mEntryFee) / 100;\n        let master_data = Utilities.getMasterData();\n        if(master_data.max_contest_bonus_cap > 0){\n        maxBonusAccToEntryFee = maxBonusAccToEntryFee > master_data.max_contest_bonus_cap ? master_data.max_contest_bonus_cap : maxBonusAccToEntryFee\n        }\n        if (bonusAmount > maxBonusAccToEntryFee) {\n            return (maxBonusAccToEntryFee + depositAndWinning);\n        } else {\n            return (bonusAmount + depositAndWinning);\n        }\n    }\n    static callNativeRedirection(sponsorLink,event) {\n        event.stopPropagation();\n\n        let data = {\n            action: 'sponserLink',\n            targetFunc: 'sponserLink',\n            type: 'link',\n            url: sponsorLink,\n            detail: \"\"\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n    static getValidSponserURL(sponserUrl){\n        const httpsVar='https:\\\\'\n        const httpVar='http:\\\\'\n\n        let sponserUrlConstant = sponserUrl  &&  sponserUrl !=null   && sponserUrl != \"\" ? sponserUrl: null\n        return (sponserUrlConstant);\n\n    }\n\n    static getBalanceInDetail(mEntryFee) {\n        let BalanceDetail = {};\n        var UserBalance = WSManager.getBalance();\n        var allowedBonusPercantage = WSManager.getAllowedBonusPercantage();\n        var bonusAmount = parseFloat(UserBalance.bonus_amount);\n        var realAmount = UserBalance.real_amount;\n        var winningAmount = UserBalance.winning_amount;\n        var maxBonusAccToEntryFee = parseFloat(allowedBonusPercantage) * parseFloat(mEntryFee) / 100;\n        let master_data = Utilities.getMasterData();\n        if(master_data.max_contest_bonus_cap > 0){\n            maxBonusAccToEntryFee = maxBonusAccToEntryFee > master_data.max_contest_bonus_cap ? master_data.max_contest_bonus_cap : maxBonusAccToEntryFee\n        }\n        if (bonusAmount > maxBonusAccToEntryFee) {\n            BalanceDetail['Bonus'] = maxBonusAccToEntryFee;\n            \n        } else {\n            BalanceDetail['Bonus'] = bonusAmount;\n        }\n\n        var EntryFeeLeft = parseFloat(mEntryFee) - parseFloat(BalanceDetail['Bonus']);\n        if(realAmount >= EntryFeeLeft){\n            BalanceDetail['Deposit'] = EntryFeeLeft;\n        }\n        else{\n            BalanceDetail['Deposit'] = realAmount;\n            if(winningAmount >= (EntryFeeLeft - realAmount)){\n                BalanceDetail['Winning'] = (EntryFeeLeft - realAmount);\n            }\n            else{\n                BalanceDetail['Winning'] = winningAmount;\n            }\n        }\n        return BalanceDetail;\n    }\n\n    static getTotalBalance(data) {\n        return (parseFloat(data.winning_amount) + parseFloat(data.bonus_amount) + parseFloat(data.real_amount)).toFixed(2)\n    }\n\n    static setDefaultSport() {\n        let master_data = Utilities.getMasterData();\n        ls.set('selectedSports', AppSelectedSport || master_data.default_sport);\n        setValue.setAppSelectedSport(AppSelectedSport || master_data.default_sport);\n    }\n\n    static getMaxBonusAllowedOfEntryFeeContestWise(mEntryFee, maxBonusAllowed) {\n        var UserBalance = WSManager.getBalance();\n        var allowedBonusPercantage = maxBonusAllowed;\n        var bonusAmount = parseFloat(UserBalance.bonus_amount);\n        var realAmount = UserBalance.real_amount;\n        var winningAmount = UserBalance.winning_amount;\n        var depositAndWinning = parseFloat(realAmount) + parseFloat(winningAmount);\n        var maxBonusAccToEntryFee = parseFloat(allowedBonusPercantage) * parseFloat(mEntryFee) / 100;\n        let master_data = Utilities.getMasterData();\n        if(master_data.max_contest_bonus_cap > 0){\n            maxBonusAccToEntryFee = maxBonusAccToEntryFee > master_data.max_contest_bonus_cap ? master_data.max_contest_bonus_cap : maxBonusAccToEntryFee\n            }\n        if (bonusAmount > maxBonusAccToEntryFee) {\n            return (maxBonusAccToEntryFee + depositAndWinning);\n        } else {\n            return (bonusAmount + depositAndWinning);\n        }\n    }\n    /**\n     * @description This function is responsible to get 18 year old date\n     * @param date UTC date\n     * @return 18 years old date\n    */\n    static get18YearOldDate = (date) => {\n        return new Date(moment().subtract(18, 'years'));\n    }\n    /**\n     * @description This function is responsible to get 18 year old date\n     * @param date UTC date\n     * @return 18 years old date\n    */\n    static getFormatedDate = (data) => {\n        return moment(data.date).format(data.format);\n    }\n\n    /**\n     * @description This function is responsible to convert UTC date to local date\n     * @param date UTC date\n     * @return Local date\n    */\n    static getUtcToLocal = (date) => {\n        return moment(date).utc(true).local().format();\n    }\n    /**\n     * @description This function is responsible to convert local date to UTC date\n     * @param date Local date\n     * @return UTC date\n    */\n    static getLocalToUtc = (date) => {\n        return moment.utc(date).format('YYYY-MM-DD hh:mm:ss');\n    }\n\n    static getFormatedDateTime = (date, format) => {\n        if (format) {\n            return moment.utc(date).local().format(format);\n        }\n        return moment(date).utc().local().format();\n    }\n    /**\n     * @description This function is to get know that count down timer should be display or not\n     * @param item Fixture item\n     */\n    static showCountDown(item) {\n        let scheduleDate = Utilities.getFormatedDateTime(item.game_starts_in);\n        let currentDate = Utilities.getFormatedDateTime(Date.now());\n        var now = moment(currentDate); //todays date\n        var end = moment(scheduleDate); // another date\n        var duration = moment.duration(end.diff(now));\n        var hours = duration.asHours();\n        var minutes = duration.asMinutes();\n        return ((minutes >= 0) && (hours <= 24));\n    }\n\n    static minuteDiffValue(item) {\n        let currentDate = Utilities.getFormatedDateTime(Date.now());\n        let scheduleDate = Utilities.getFormatedDateTime(item.date);\n        var now = moment(currentDate);\n        var end = moment(scheduleDate);\n        var duration = moment.duration(now.diff(end));\n        var minutes = duration.asMinutes();\n        return minutes;\n    }\n\n    static scrollToTop() {\n        window.scrollTo(0, 0)\n    }\n\n    static kFormatter(num) {\n        return Math.abs(num) > 9999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num).toFixed(0)\n    }\n\n    static numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    static showToast(message = \"\", duration = 2000, icon = 'icon-ic-info') {\n        if (message != \"\" && TOAST) {\n            TOAST.showToast({ message: message, duration: duration, icon: icon });\n        }\n    }\n\n    static getSelectedSportsForUrl(sports_id) {\n        let selectedSports = sports_id;\n        if (typeof sports_id == \"undefined\") {\n            selectedSports = AppSelectedSport;\n        }\n        let sports_url = '';\n        if (selectedSports != null) {\n            sports_url = Sports.url[selectedSports] ? Sports.url[selectedSports].toLowerCase() : '';\n        }\n        return sports_url\n    }\n\n    static getGameTypeHash() {\n        var lobbyHash = ''\n        if(SELECTED_GAMET == GameType.Pred){\n            lobbyHash = '#prediction'\n        }\n        if(SELECTED_GAMET == GameType.OpenPred){\n            lobbyHash = '#open-predictor'\n        }\n        if(SELECTED_GAMET == GameType.Free2Play){\n            lobbyHash = '#freeToPlay'\n        }\n        if(SELECTED_GAMET == GameType.OpenPredLead){\n            lobbyHash = '#open-predictor-leaderboard'\n        }\n        if(SELECTED_GAMET == GameType.MultiGame){\n            lobbyHash = '#multigame'\n        }\n        if(SELECTED_GAMET == GameType.Pickem){\n            lobbyHash = '#pickem'\n        }\n        if(SELECTED_GAMET == GameType.Tournament){\n            lobbyHash = '#tournament'\n        }\n        return lobbyHash\n    }\n\n    static getUrlSports() {\n        var sportsId = AppSelectedSport;\n        let url = window.location.href;\n        \n        if (url.includes(\"#\")) {\n            let urlArr = url.split(\"#\");\n            _Map(urlArr,(item)=>{\n                let selectedSports = item.toLowerCase();\n                if (selectedSports in Sports) {\n                    sportsId = Sports[selectedSports] + \"\";\n                    ls.set('selectedSports', sportsId)\n                    setValue.setAppSelectedSport(sportsId);\n                }\n            })\n        }\n        sportsId = (sportsId === \"null\" || sportsId === null) ? Sports.default_sport : sportsId\n        return sportsId + \"\";\n    }\n\n    static setUrlParams = (LobyyData) => {\n\n        let dateformaturl = Utilities.getFormatedDateTime(LobyyData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n        let urlParams = LobyyData.home + \"-vs-\" + LobyyData.away + \"-\" + dateformaturl;\n        return urlParams.toLowerCase();\n    }\n\n    static replaceAll = (stringLabel, stringToFind, stringToReplace) => {\n        if (stringToFind === stringToReplace) return stringLabel;\n        var temp = stringLabel;\n        var index = temp.indexOf(stringToFind);\n        while (index !== -1) {\n            temp = temp.replace(stringToFind, stringToReplace);\n            index = temp.indexOf(stringToFind);\n        }\n        return temp;\n    }\n\n    static getMasterData() {\n        return APP_MASTER_DATA || '';\n    }\n\n    static setMasterData(data) {\n        APP_MASTER_DATA = data;\n    }\n\n    static getAndroidAppVersion() {\n        return ANDROID_APP_INSTALLED_VERSION;\n    }\n\n    static setAndroidAppVersion(version) {\n        ANDROID_APP_INSTALLED_VERSION = version;\n    }\n\n    static getGameTypeSports() {\n        var sportData = Utilities.getMasterData().sports_hub || [];\n\n        let tempArray = []\n        sportData.map((item, key) => {\n            tempArray.push({ \n                sports_hub_id: item.sports_hub_id, \n                game_key: item.game_key , \n                allowed_sports: item.allowed_sports\n            })\n        })\n        return tempArray;\n    }\n}\n\nexport function parseURLDate(date){\n    let dateformaturl = Utilities.getUtcToLocal(date);\n    dateformaturl = new Date(dateformaturl);\n    let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n    let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n    dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n    return dateformaturl;\n}\n\nexport function BannerRedirectLink(result, props){\n    if (result.banner_type_id == 1) {\n        let dateformaturl = parseURLDate(result.schedule_date);\n        let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + result.collection_master_id + '/' + result.home + \"-vs-\" + result.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(SELECTED_GAMET);\n        props.history.push({ pathname: contestListingPath });\n    }\n    else if (result.banner_type_id == 2) {\n        props.history.push({ pathname: '/refer-friend' });\n    }\n    else if (result.banner_type_id == 3) {\n        props.history.push({ pathname: '/add-funds' });\n    }\n    else if (result.banner_type_id == 4) {\n        if(result.target_url.includes('/refer-friend')){\n            props.history.push({ pathname: '/refer-friend' });\n        }else if(result.target_url.includes('/add-funds')){\n            props.history.push({ pathname: '/add-funds' });\n        }else{\n            window.open(result.target_url, \"_blank\")\n        }\n    }\n}\n\nexport function getImageBaseUrl(image) {\n    let IMAGE_BASE_URL = Utilities.getS3URL(image);\n    return process.env.NODE_ENV === 'production' ? IMAGE_BASE_URL : require('./../assets/img/' + image);\n}\n\nexport function _handleWKeyDown(event) {\n        const BACKSPACE = 8;\n        const LEFT_ARROW = 37;\n        const RIGHT_ARROW = 39;\n        const DELETE = 46;\n        const ENTER = 13;\n\n        var isValidKey = event.keyCode === ENTER || event.keyCode === BACKSPACE || event.keyCode === LEFT_ARROW || event.keyCode === RIGHT_ARROW || event.keyCode === DELETE;\n        if (this && event.target instanceof HTMLInputElement) {\n            const regex = /^[0-9\\b]+$/;\n            if (event.key !== '' && !regex.test(event.key) && !isValidKey) {\n                event.preventDefault();\n            }\n        }\n}\n\nexport {\n    Utilities\n};\n/**\n    * @description After Social login check if user is existing or new user and navigate to appropriate step\n    * @param data data received from social plateform\n    * @param fbUser in case user login through FB then it will have user data else it will be null\n    * @param googleUser in case user login through Google then it will have user data else it will be null\n   */\nexport function checkFlow(nextStepData) {\n    let pathName = '/' + nextStepData.data.next_step;\n\n    if (nextStepData.data.next_step === 'login_success') {\n        WSManager.setToken(nextStepData.data.Sessionkey);\n        pathName = '/';\n    } else if (nextStepData.data.next_step === 'phone') {\n        pathName = '/pick-mobile';\n    }\n\n    return { pathname: pathName, state: { nextStepData: nextStepData } }\n}\n\nexport function isFooterTab(tab_key) {\n    let allFooterTabs = DASHBOARD_FOOTER.tabs;\n    for (let i = 0; i < allFooterTabs.length; i++) {\n        if (allFooterTabs[i].tab_key === tab_key) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function sendMessageToApp(action) {\n    if (window.ReactNativeWebView) {\n        window.ReactNativeWebView.postMessage(JSON.stringify(action));\n    }\n}\n\nexport function blobToFile(theBlob, fileName) {\n    //A Blob() is almost a File() - it's just missing the two properties below which we will add\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    return new File([theBlob], fileName, { name: fileName, lastModifiedDate: Date.now() });\n}\n","/var/www/html/framework/frontend/src/redux/reducers/myReducer.js",["1290"],"import {\n    API_CALL,\n    API_RESPONSE,\n    SPORTS_CHANGE,\n    WEBVIEW_CONSOLE,\n    HEADER_REF\n   } from '../actions/types';\n  \n  const initialState = {\n    name: '',\n    data: '',\n    isMszView: false,\n    WebviewConsoleMSZ: ''\n  };\n  \n  const myReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case API_CALL:\n        return {\n          ...state,\n          name: action.name,\n        };\n      case API_RESPONSE:\n        return {\n          ...state,\n          name: action.name,\n          data: action.data,\n        };\n      case SPORTS_CHANGE:\n        return {\n          ...state,\n          sports_id: action.sports_id,\n        };\n      case WEBVIEW_CONSOLE:\n        return {\n          ...state,\n          isMszView: action.flag,\n          WebviewConsoleMSZ: action.data,\n        };\n      default:\n        return state;\n    }\n  }\n  \n  export default myReducer;\n  \n","/var/www/html/framework/frontend/src/redux/actions/place.js",["1291"],"import { API_CALL, API_RESPONSE, SPORTS_CHANGE} from './types';\nimport {\n  WEBVIEW_BRIDGE,\n  WEBVIEW_CONSOLE,\n  WEBVIEW_INIT\n} from './types';\nimport ls from 'local-storage';\nexport const callApi = (name) => {\n\n  return {\n    type: API_CALL,\n    name: name\n  }\n}\n\nexport const apiResponse = (name, data) => {\n  \n  return {\n    type: API_RESPONSE,\n    name: name,\n    data: data\n  }\n}\n\nexport const setSport = (sports_id) => {\n\n  return {\n    type: SPORTS_CHANGE,\n    sports_id: sports_id\n  }\n}\n\n\n\n  export function WebviewConsole (data) {\n    \n    function init(val) {\n      let ResData = '';\n      if (typeof val != 'string') {\n        ResData = JSON.stringify(val);\n      } else {\n          ResData = val;\n      }\n      return ResData;\n    }\n    return {\n      type: WEBVIEW_CONSOLE,\n      flag: data ? true : false,\n      data: init(data)\n    }\n  }\n  \n  \n  \n  export function WebviewBridgeInit(data, Type) {\n    function bridge(data) {\n      let params = { Type: Type }\n      switch (Type) {\n        case 'Login':\n        case 'HeaderHeight':\n        case 'handleLoginReceived':\n          params = data\n          break;\n        default:\n          break;\n      }\n      params.isMobile = true;\n      if (process.env.NODE_ENV !== 'production') {\n        console.log('params >>', params)\n      }\n      if (!window.postMessage) return;\n      window.postMessage(JSON.stringify(params), '*');\n    }\n  \n    return {\n      type: WEBVIEW_BRIDGE,\n      payload: bridge(data),\n    };\n  }\n  export function WebViewInit(data) {\n    function init(data) {\n      ls.set('isWebView', true);\n      if (data.targetFunc == 'handleLoginReceived') {\n        // alert(JSON.stringify(data))\n      }\n    }\n    return {\n      type: WEBVIEW_INIT,\n      payload: init(data),\n    };\n  }\n  \n  \n  \n  \n  \n","/var/www/html/framework/frontend/src/helper/CustomLoader.jsx",["1292"],"import React from 'react';\nexport default class CustomLoader extends React.Component {\n    render() {\n        return (\n            <div className={\"loader-back \" + (window.location.pathname == '/' ? 'max-width-100' : '')}>\n                <div className=\"loader-custom\"></div>\n            </div>\n        );\n    }\n}","/var/www/html/framework/frontend/src/InitialSetup/Routing.jsx",["1293","1294","1295","1296","1297"],"import React, { Component, Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { MyWallet, Transaction, AddFunds, Withdraw, PaymentMethod,BuyCoins } from \"../Component/Finance\";\nimport { Utilities, _isUndefined, isFooterTab } from '../Utilities/Utilities';\nimport { WebViewInit, WebviewConsole } from '../redux/actions/place';\nimport { createBrowserHistory } from 'history'\nimport { isAndroid, isBrowser, isIOS } from 'react-device-detect';\n// import { Guidelines } from \"../Guidelines\";\nimport { MyContext } from './MyProvider';\nimport { connect } from 'react-redux';\nimport { LandingScreen, TermsCondition, RulesScoring, PrivacyPolicy, FAQ, AboutUs, HowToPlay, ContactUs, Offers,Legality,HowItWorks } from \"../Component/StaticPages\";\nimport { ForgotEmailPassword, ResetPassword, ChangePassword, EmailLogin, SetPassword, VerifyEmail, UpdateMobileNo, EnterPassword } from \"../Component/OnBoarding/EmailFlow\";\nimport { MobileLogin, VerifyMobile, PickUsername, ReferralCode, PickEmail, PickMobileNo, } from \"../Component/OnBoarding/MobileFlow\";\nimport { MyContest } from '../Component/MyContest';\nimport { APP_DOWNLOAD_LINK_ANDROID, setValue } from '../helper/Constants';\nimport { Profile, ProfileEdit, VerifyAccount, PanVerification, BankVerification } from \"../Component/Profile\";\nimport { activateAccount } from '../WSHelper/WSCallings';\nimport ScrollMemory from 'react-router-scroll-memory';\nimport Notification from 'react-notify-toast';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport WSManager from \"../WSHelper/WSManager\";\nimport Contest from \"../views/Contest\";\nimport SelectCaptainList from \"../views/SelectCaptainList\";\nimport Roster from \"../views/Roster\";\nimport ContestListing from \"../views/ContestListing\";\nimport createContest from \"../views/CreateContest\";\nimport LeaderBoard from \"../views/Leaderboard\";\nimport UserNotification from '../views/Notification';\nimport ReferFriend from '../views/ReferFriend';\nimport RefferalSystem from \"../views/ReferralSystem\";\nimport HaveALeagueCodeClass from '../views/HaveALeagueCodeClass';\nimport MyTeams from \"../views/MyTeams\";\nimport Dashboard from \"../views/Dashboard\";\nimport PageNotFound from '../views/PageNotFound/PageNoFound';\nimport Loadable from 'react-loadable';\nimport CustomLoader from '../helper/CustomLoader';\n/*Pickem*/\nimport {PickemLeaderboard, PickemYourStats, PickemStatsUser} from '../Component/Pickem';\nimport { MultiGameContest } from '../Component/MultiGameModule';\nimport { FreeToPlayList, AllPrizes, UserLeaguePoints, FreeToPlayLobby } from \"../Component/FreeToPlayModule\";\nimport AllLeagueList from '../Component/FreeToPlayModule/AllLeagueList';\nimport CompletedLeagueList from '../Component/FreeToPlayModule/CompletedLeagueList';\nimport LeagueDetails from '../Component/FreeToPlayModule/LeagueDetails';\nimport LeaderBoardFreeToPlay from '../Component/FreeToPlayModule/LeaderBoardFreeToPlay';\nimport LeagueSheduledFixture from '../Component/FreeToPlayModule/LeagueSheduledFixture';\nimport NewPickemParticipants from '../Component/Pickem/NewPickemParticipants';\nimport { AffiliateProgram } from '../Component/BecomeAffiliate';\nimport ReferalLeaderBoard from '../views/ReferalLeaderBoard';\nimport TeamComparison from '../views/Leaderboard/TeamComparison';\n\nconst AppInstallNotification = lazy(()=>import('../views/AppInstallNotification'));\nconst FieldView = lazy(()=>import('../views/FieldView'));\n// const Offers = lazy(()=>import('../views/Offers'));\nconst Store = lazy(()=>import('../views/Store'));\nconst EditReferralCode = lazy(()=>import('../views/EditReferralCode'));\nconst ItemCheckout = lazy(()=>import('../views/Checkout'));\nconst ItemDetail = lazy(()=>import('../views/ItemDetail'));\nconst OrderHistory = lazy(()=>import('../views/OrderHistory'));\nconst Partners = lazy(()=>import('../views/Partners'));\nconst SidePage = lazy(()=>import('../views/SidePage'));\nconst YouRInQueue = lazy(()=>import('../Component/CustomComponent/YouRInQueue'));\nconst DownloadAppScreen = lazy(()=>import('../components/DownloadAppScreen'));\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\nfunction LoadingComponent(props) {\n    return <div className=\"web-container\"><CustomLoader /></div>;\n}\n\nconst SportsHub = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().sports_hub && Utilities.getMasterData().sports_hub.length > 1)\n            return import('../Component/SportsHub/SportsHub')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst EarnCoins = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/CoinsModule/EarnCoins')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst RedeemCoins = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/CoinsModule/RedeemCoins')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst WhatIsNew = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/CoinsModule/WhatIsNew')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst FeedbackQA = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/CoinsModule/FeedbackQA')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst PredictionContestList = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/PredictionModule/PredictionContestList')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst PredictionShare = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/PredictionModule/SharePrediction')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst PredictionParticipants = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/PredictionModule/PredictionParticipants')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst ShareOpenPredictor = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/OpenPredictorModule/ShareOpenPredictor')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst OpenPredictorParticipants = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/OpenPredictorModule/OpenPredictorParticipants')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst ShareFPPOpenPredictor = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/OpenPredictorFPPModule/ShareFPPOpenPredictor')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst OpenPredictorFPPParticipants = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/OpenPredictorFPPModule/OpenPredictorFPPParticipants')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst PickemShare = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/Pickem/NewPickemShare')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nconst PickemParticipants = Loadable({\n    loader: () => {\n        if (Utilities.getMasterData().allow_coin)\n            return import('../Component/Pickem/NewPickemParticipants')\n        else\n            return import('../views/PageNotFound/PageNoFound')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\n\nclass Routing extends Component {\n    constructor(params) {\n        super(params);\n        this.state = {\n            installNotificationShow: true,\n            InternetStatus: true\n        };\n    }\n\n    componentWillMount() {\n        window.addEventListener('online', this.updateIndicator);\n        window.addEventListener('offline', this.updateIndicator);\n        this.userAccountActivitaion();\n        if (Utilities.getMasterData().sports_hub && Utilities.getMasterData().sports_hub.length > 1) {\n            setValue.setSportsHubAllow(true);\n        } else {\n            setValue.setSportsHubAllow(false)\n        }\n    }\n\n    updateIndicator=()=>{\n        let internetStatus = '';\n        if(navigator.onLine) { \n            internetStatus = true ;// for online\n        }\n        else{\n            internetStatus = false ;// for offline\n        }\n        this.setState({\n            InternetStatus : internetStatus\n        })\n    }\n\n    userAccountActivitaion() {\n        if (!_isUndefined(parsed) && parsed.activation_key != null && parsed.activation_key != \"\" && !_isUndefined(parsed.activation_key)) {\n            this.callUserAccountActivitaion(parsed.activation_key)\n        }\n    }\n\n    callUserAccountActivitaion(activeKey) {\n        let param = {\n            \"key\": activeKey,\n        }\n        activateAccount(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                Utilities.showToast(responseJson.message, 3000);\n            } else {\n                Utilities.showToast(responseJson.global_error, 3000);\n            }\n        })\n    }\n\n    closeInstallNotification = () => {\n        this.setState({ installNotificationShow: false })\n    }\n\n    render() {\n\n        const PrivateRoute = ({ component: Component, ...rest }) => (\n            <Route {...rest} render={(props) => (\n                WSManager.loggedIn() === true\n                    ? <Component {...props} />\n                    : <Redirect to={{ pathname: '/signup', state: { from: props.location } }} />\n            )} />\n        )\n\n        const SequenceRoute = ({ component: Component, ...rest }) => (\n            <Route {...rest} render={(props) => (\n                (WSManager.loggedIn() === true && !_isUndefined(props.location.state))\n                    ? <Component {...props} />\n                    : <Redirect to={{ pathname: \"/lobby\", state: { from: props.location } }} />\n            )} />\n        )\n\n        const OnboardingRoute = ({ component: Component, ...rest }) => (\n\n            <Route {...rest} render={(props) => (\n                <React.Fragment>\n                    {WSManager.loggedIn() === false ?\n                        !_isUndefined(rest.location.state) || rest.path === '/signup'\n                            ? <Component {...props} />\n                            : <Redirect to={{ pathname: '/signup' }} />\n                        : <Redirect to={\"/lobby#\" + Utilities.getSelectedSportsForUrl()} />\n                    }\n                </React.Fragment>\n            )} />\n        )\n\n        const CoinRoute = ({ component: Component, ...rest }) => (\n\n            Utilities.getMasterData().allow_coin == '1'\n                ?\n                <Route {...rest} render={(props) => (<Component {...props} />)} />\n                :\n                <PageNotFound />\n        )\n\n        const DashboardPRoute = ({ component: Component, page_key: pageKey, ...rest }) => (\n            isFooterTab(pageKey)\n                ?\n                <Route {...rest} render={(props) => (\n                    WSManager.loggedIn() === true\n                    ? <Dashboard {...props} />\n                    : <Redirect to={{ pathname: '/signup', state: { from: props.location } }} />\n                    )} />\n                :\n                <Route {...rest} render={(props) => (\n                    WSManager.loggedIn() === true\n                    ? <Component {...props} />\n                    : <Redirect to={{ pathname: '/signup', state: { from: props.location } }} />\n                )} />\n        )\n\n        let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.ios : {};\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <React.Fragment>\n                                <Suspense fallback={<div />} >\n                        <Router>\n                            <main className='Site'>\n                                {\n                                    (this.state.installNotificationShow\n                                        && window.navigator.userAgent.toLowerCase().includes('android')\n                                        && navigator.userAgent.toLowerCase() !== 'android-app') &&\n                                    <AppInstallNotification closeInstallNotification={this.closeInstallNotification} />\n                                }\n                                {\n                                    (this.state.installNotificationShow && isAndroid && isBrowser && APP_DOWNLOAD_LINK_ANDROID != '') &&\n                                    <AppInstallNotification closeInstallNotification={this.closeInstallNotification} />\n                                }\n                                {\n                                    (this.state.installNotificationShow && !window.ReactNativeWebView && isIOS && iosAppDownload.app_url != '') &&\n                                    <AppInstallNotification isIOS={true} closeInstallNotification={this.closeInstallNotification} />\n                                }\n                                <Notification options={{ zIndex: 999999 }} />\n                                {\n                                    !this.state.InternetStatus && \n                                    <div>{Utilities.showToast(\"You're offline right now. Check your connection.\", 4000)}</div>\n                                }\n                                <div\n                                    style={{\n                                        backgroundImage: window.ReactNativeWebView ? '' : `url(${Utilities.getUploadURL(Utilities.getMasterData().bg_image)})`,\n                                        backgroundPosition: \"center\",\n                                        backgroundSize: \"cover\",\n                                        backgroundRepeat: \"no-repeat\"\n                                    }}\n                                    className=\"Site-content\">\n                                    <ScrollMemory />\n                                    <Switch>\n                                        {/* <Route path=\"/guidelines\" component={Guidelines} exact /> */}\n                                        <Route path=\"/you-are-in-queue\" component={YouRInQueue} exact />\n                                        <Route path=\"/lobby\" component={Dashboard} exact />\n                                        <Route path=\"/\" component={LandingScreen} exact />\n\n                                        <SequenceRoute path=\"/lineup/:lineupKey\" component={Roster} exact />\n                                        <SequenceRoute path=\"/field-view/:fieldKey\" component={FieldView} exact />\n                                        <SequenceRoute path=\"/select-captain/:captainKey\" component={SelectCaptainList} exact />\n\n                                        {/* Onboarding */}\n                                        <OnboardingRoute path=\"/signup\" component={Utilities.getMasterData().login_flow === '1' ? EmailLogin : MobileLogin} exact />\n                                        <OnboardingRoute path=\"/set-password\" component={SetPassword} exact />\n                                        <OnboardingRoute path=\"/password\" component={EnterPassword} exact />\n                                        <OnboardingRoute path=\"/verify\" component={Utilities.getMasterData().login_flow === '1' ? VerifyEmail : VerifyMobile} exact />\n                                        <OnboardingRoute path=\"/referral\" component={ReferralCode} exact />\n                                        <OnboardingRoute path=\"/pick-username\" component={PickUsername} exact />\n                                        <OnboardingRoute path=\"/email\" component={PickEmail} exact />\n                                        <OnboardingRoute path=\"/enter-email\" component={ForgotEmailPassword} exact />\n                                        <Route path=\"/forgot-password\" component={ResetPassword} exact />\n                                        <Route path=\"/pick-mobile\" component={Utilities.getMasterData().login_flow === '1' ? UpdateMobileNo : PickMobileNo} exact />\n\n                                        {/* Public */}\n                                        <Route path=\"/:sportsId/contest-listing/:collection_master_id/:myKey\" component={ContestListing} exact />\n                                        <Route path=\"/:sportsId/contest/:contest_unique_id\" component={Contest} exact />\n                                        <Route path=\"/:sportsId/multigame-contest/:contest_unique_id\" component={MultiGameContest} exact />\n                                        <Route path=\"/:sportsId/my-teams/:collection_master_id/:myKey\" component={MyTeams} exact />\n                                        <Route path=\"/terms-condition\" component={TermsCondition} exact />\n                                        <Route path=\"/rules-and-scoring\" component={RulesScoring} exact />\n                                        <Route path=\"/offers\" component={Offers} exact />\n                                        <Route path=\"/privacy-policy\" component={PrivacyPolicy} exact />\n                                        <Route path=\"/faq\" component={FAQ} exact />\n                                        <Route path=\"/about-us\" component={AboutUs} exact />\n                                        <Route path=\"/contact-us\" component={ContactUs} exact />\n                                        <Route path=\"/how-to-play\" component={HowToPlay} exact />\n                                        <Route path=\"/legality\" component={Legality} exact />\n                                        <Route path=\"/how-it-works\" component={HowItWorks} exact />\n                                        <Route path=\"/partners\" component={Partners} exact />\n                                        <Route path=\"/private-contest\" component={HaveALeagueCodeClass} exact />\n                                        <Route path=\"/payment-method\" component={PaymentMethod} exact />\n                                        <Route path=\"/:sportsId/prediction/contest-listing/:collection_master_id/:myKey\" component={PredictionContestList} exact />\n                                        <Route path=\"/:sportsId/prediction-details/:season_game_uid/:prediction_master_id\" component={PredictionShare} exact />\n                                        <Route path=\"/:sportsId/prediction/participants/:prediction_master_id\" component={PredictionParticipants} exact />\n                                        <Route path=\"/:sportsId/open-predictor-details/:category_id/:prediction_master_id\" component={ShareOpenPredictor} exact />\n                                        <Route path=\"/:sportsId/open-predictor/participants/:prediction_master_id\" component={OpenPredictorParticipants} exact />\n                                        <Route path=\"/:sportsId/open-predictor-leaderboard-details/:category_id/:prediction_master_id\" component={ShareFPPOpenPredictor} exact />\n                                        <Route path=\"/:sportsId/open-predictor-leaderboard/participants/:prediction_master_id\" component={OpenPredictorFPPParticipants} exact />\n                                        <Route path=\"/download-app\" component={DownloadAppScreen} exact />\n                                        <Route path=\"/team-comparison\" component={TeamComparison} exact />\n\n                                        <PrivateRoute path=\"/leaderboard\" component={Dashboard} exact />\n\n                                        {/* Dashboard Private Screen */}\n                                        <DashboardPRoute path=\"/my-contests\" component={MyContest} page_key={'my-contests'} exact />\n                                        <DashboardPRoute path=\"/my-profile\" component={Profile} page_key={'my-profile'} exact />\n                                        <DashboardPRoute path=\"/notification\" component={UserNotification} page_key={'notification'} exact />\n                                        <DashboardPRoute path=\"/refer-friend\" component={ReferFriend} page_key={'refer-friend'} exact />\n                                        <DashboardPRoute path=\"/refer-friend-leaderboard\" component={ReferalLeaderBoard} page_key={'refer-friend-leaderboard'} exact />\n                                        <DashboardPRoute path=\"/my-wallet\" component={MyWallet} page_key={'my-wallet'} exact />\n                                        <DashboardPRoute path=\"/buy-coins\" component={BuyCoins} page_key={'my-wallet'} exact />\n                                        {/* <PrivateRoute path=\"/my-contests\" component={isFooterTab('my-contests') ? Dashboard : MyContest} exact /> */}\n                                        {/* <PrivateRoute path=\"/my-profile\" component={isFooterTab('my-profile') ? Dashboard : Profile} exact /> */}\n                                        {/* <PrivateRoute path=\"/notification\" component={isFooterTab('notification') ? Dashboard : UserNotification} exact /> */}\n                                        {/* <PrivateRoute path=\"/refer-friend\" component={isFooterTab('refer-friend') ? Dashboard : ReferFriend} exact /> */}\n                                        {/* <PrivateRoute path=\"/my-wallet\" component={isFooterTab('my-wallet') ? Dashboard : MyWallet} exact /> */}\n\n                                        {/* Coins*/}\n                                        <CoinRoute path=\"/earn-coins\" component={isFooterTab('earn-coins') ? Dashboard : EarnCoins} exact />\n                                        <CoinRoute path=\"/rewards\" component={RedeemCoins} exact />\n                                        <CoinRoute path=\"/feedback\" component={FeedbackQA} exact />\n                                        <CoinRoute path=\"/what-is-new\" component={WhatIsNew} exact />\n                                        {/********/}\n\n                                        <PrivateRoute path=\"/edit-profile\" component={ProfileEdit} exact />\n                                        <PrivateRoute path=\"/create-contest\" component={createContest} exact />\n                                        <PrivateRoute path=\"/:sportsId/leaderboard\" component={LeaderBoard} exact />\n                                        <PrivateRoute path=\"/transactions\" component={Transaction} exact />\n                                        <PrivateRoute path=\"/add-funds\" component={AddFunds} exact />\n                                        <PrivateRoute path=\"/withdraw\" component={Withdraw} exact />\n                                        <PrivateRoute path=\"/store\" component={Store} exact />\n                                        <PrivateRoute path=\"/item-detail/:product_unique_id\" component={ItemDetail} exact={true} />\n                                        <PrivateRoute path=\"/item-checkout/:product_unique_id\" component={ItemCheckout} exact={true} />\n                                        <PrivateRoute path=\"/order-history\" component={OrderHistory} exact />\n                                        <PrivateRoute path=\"/more\" component={Dashboard} exact />\n                                        <PrivateRoute path=\"/change-password\" component={ChangePassword} exact />\n                                        <PrivateRoute path=\"/verify-account\" component={VerifyAccount} exact />\n                                        <PrivateRoute path=\"/pan-verification\" component={PanVerification} exact />\n                                        <PrivateRoute path=\"/bank-verification\" component={BankVerification} exact />\n                                        <PrivateRoute path=\"/referral-system\" component={RefferalSystem} exact />\n                                        <PrivateRoute path=\"/edit-referral-code\" component={EditReferralCode} exact />\n                                        <PrivateRoute path=\"/affiliate-program\" component={AffiliateProgram} exact />\n                                        {/* Pickem */}\n                                        <PrivateRoute path=\"/pickem/leaderboard\" component={PickemLeaderboard} exact />\n                                        <PrivateRoute path=\"/pickem/stats\" component={PickemYourStats} exact />\n                                        <PrivateRoute path=\"/pickem/userstats\" component={PickemStatsUser} exact />\n                                        <PrivateRoute path=\"/pickem/participants\" component={NewPickemParticipants} exact />\n                                        {/* <PrivateRoute path=\"/pickem/participants/:pickem_master_id\" component={NewPickemParticipants} exact /> */}\n                                        <Route path=\"/:sportsId/pickem-detail/:league_id/:pickem_id\" component={PickemShare} exact />\n                                        <Route path=\"/:sportsId/pickem/participants/:pickem_id\" component={PickemParticipants} exact />\n                                \n\n\n                                        {/* <PrivateRoute path=\"/free-to-play\" component={FreeToPlayList} exact /> */}\n                                        <Route path=\"/:sportsId/free-to-play/:collection_master_id/:myKey/:game_type/:season_game_uid/:contest_id\" component={FreeToPlayList} exact />\n                                        {/* <Route path=\"/:sportsId/free-to-play-contest/:contest_unique_id/:game_type\" component={MultiGameContest} exact /> */}\n\n                                        <PrivateRoute path=\"/all-prizes/:mini_league_uid/:isMiniLeaguePrize\" component={AllPrizes} exact />\n                                        <PrivateRoute path=\"/mini-league-fixture/:mini_league_id/:league_name\" component={FreeToPlayLobby} exact />\n                                        <PrivateRoute path=\"/sheduled-fixture/:mini_league_uid/:mini_league_name\" component={LeagueSheduledFixture} exact />\n\n                                        <PrivateRoute path=\"/user-league-points\" component={UserLeaguePoints} exact />\n                                        <PrivateRoute path=\"/all-leagues\" component={AllLeagueList} exact />\n                                        <PrivateRoute path=\"/completed-leagues\" component={CompletedLeagueList} exact />\n                                        <PrivateRoute path=\"/league-details\" component={LeagueDetails} exact />\n                                        <PrivateRoute path=\"/mini-league-leader-board\" component={LeaderBoardFreeToPlay} exact />\n                                        {SportsHub && <Route path=\"/sports-hub\" component={SportsHub} exact />}\n\n                                        {/* Default Page */}\n                                        <Route component={PageNotFound} />\n                                        \n                                    </Switch>\n                                    <SidePage />\n                                </div>\n                            </main>\n                        </Router>\n                        </Suspense>\n\n                    </React.Fragment>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ...state\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        WebViewInit: (data) => dispatch(WebViewInit(data)),\n        WebviewConsole: (data) => dispatch(WebviewConsole(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Routing)\n","/var/www/html/framework/frontend/src/JsonFiles/Sports.jsx",[],"/var/www/html/framework/frontend/src/JsonFiles/index.js",[],"/var/www/html/framework/frontend/src/WSHelper/WSManager.jsx",["1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316"],"import ReactGA from 'react-ga'; \nimport cookie from 'react-cookies';\nimport * as WSC from \"./WSConstants\";\nimport ls from 'local-storage';\nimport app_config from \"../InitialSetup/AppConfig\";\nimport { Utilities, _isUndefined, getImageBaseUrl } from \"../Utilities/Utilities\";\nimport {  setValue } from '../helper/Constants';\n\nrequire('es6-promise').polyfill();\nrequire('isomorphic-fetch');\n\nexport default class WSManager {\n    constructor() {\n        this.getToken = this.getToken.bind(this)\n    }\n    // API \n    static Rest(url, param, cacheResponse) {\n\n        let cacheKey = \"\";\n        if (param) {\n            cacheKey = (url + JSON.stringify(param));\n        }\n        else {\n            cacheKey = url + \"\";\n        }\n\n        if (cacheResponse) {\n            let response = ls.get(cacheKey.toString())\n            if (response)\n                cacheResponse(response);\n        }\n\n        let apiHeader = {\n            'Accept-Language': this.getAppLang(),\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Sessionkey': this.getToken() || this.getTempToken() || \"\"\n        };\n\n        if(param.apiversion){\n            apiHeader['Apiversion'] = param.apiversion;\n        }\n\n        return fetch(url, {\n            method: 'POST',\n            headers: apiHeader,\n            body: JSON.stringify(param)\n        })\n            .then((response) => {\n                return response.json()\n            })\n            .then(responseJson => {\n                if (responseJson.response_code != WSC.successCode) {\n                    var errorMsg = responseJson.message != '' ? responseJson.message : responseJson.global_error\n                    var toastIcon = 'icon-ic-info';\n                    if (errorMsg == '') {\n                        for (var key in responseJson.error) {\n                            errorMsg = responseJson.error[key];\n                            if(key === \"phone_no\"){\n                                toastIcon = getImageBaseUrl('mobile-icon.svg');\n                            }else if(key === \"user_name\" || key === \"first_name\" || key === \"gender\" || key === \"dob\"){\n                                toastIcon = 'icon-user';\n                            } else if(key === \"email\"){\n                                toastIcon = getImageBaseUrl('email-icon.svg');\n                            } else if(key === \"ifsc_code\"){\n                                toastIcon = getImageBaseUrl('bank-icon.svg');\n                            }\n                        }\n                    }\n                    if(responseJson.response_code == WSC.inQueueCode){\n                        let message = btoa(errorMsg || \"Sorry!! You are in queue, Please try again...\")\n                        let time = btoa(responseJson.data || 5)\n                        window.location.assign('/you-are-in-queue/?yqmsg=' + message + '&yqtm=' + time);\n                    }else if (responseJson.response_code == WSC.sessionExpireCode) {\n                        Utilities.showToast(responseJson.global_error, 5000);\n                        this.logout();\n                    } else {\n                        if (errorMsg != '') {\n                            Utilities.showToast(errorMsg, 5000,toastIcon);\n                        }\n                    }\n                }\n\n                if (cacheResponse) {\n                    ls.set(cacheKey, JSON.stringify(responseJson));\n                }\n\n\n                return responseJson;\n            })\n            .catch((error) => {\n                console.error(error);\n                return {};\n            });\n\n    }\n\n    static RestS3ApiCall = async (s3_api_data_url, api_url, param) => {\n\n        try {\n\n            var response = {};\n            response.ok = false;\n            if (app_config.s3.BUCKET_STATIC_DATA_ALLOWED && s3_api_data_url) {\n\n                let tmpArray = s3_api_data_url.split('/');\n                let splitURL = tmpArray.length > 0 ? tmpArray[tmpArray.length - 1] : api_url;\n\n                let S3ApiLastTime = WSManager.getS3LastTime();\n                let oldDateData = S3ApiLastTime[splitURL];\n                let timeStamp = ''\n\n                if (!oldDateData || Utilities.minuteDiffValue(oldDateData) > 1 || api_url === WSC.GET_CONTEST_LEADERBOARD\n                    || api_url === WSC.GET_CONTEST_DETAIL || api_url === WSC.GET_FIXTURE_DETAIL\n                    || api_url === WSC.GET_USER_LINEUP_LIST || api_url === WSC.GET_FIXTURE_DETAIL || api_url === WSC.GET_ALL_ROSTER) {\n                    timeStamp = \"?\" + Date.now();\n                    S3ApiLastTime[splitURL] = { date: Date.now() };\n                    WSManager.setS3LastTime(S3ApiLastTime);\n                }\n\n                response = await fetch(s3_api_data_url + timeStamp, {\n                    mode: 'cors',\n                    method: 'GET',\n                          headers: {\n                        'Accept-Language': localStorage.getItem('i18nextLng'),\n                        'Accept': 'application/json, text/plain, */*',\n                        'Content-Type': 'text/plain',\n                        'Access-Control-Allow-Methods': 'PUT, POST, DELETE, GET',\n                        'Access-Control-Allow-Origin': '*'\n                    }\n                })\n            \n            }\n\n\n            if (response.ok == true) {\n                const responseJson = await response.json();\n                return responseJson;\n            }\n            else {\n                var actualBaseURL = WSC.baseURL\n                if(api_url.startsWith(\"user/\")){\n                    actualBaseURL = WSC.userURL;\n                }\n                if(api_url.startsWith(\"fantasy/\")){\n                    actualBaseURL = WSC.fantasyURL;\n                }\n                const response = await fetch(actualBaseURL + api_url, {\n                    method: 'POST',\n                    headers: {\n                        'Accept-Language': localStorage.getItem('i18nextLng'),\n                        'Accept': 'application/json, text/plain, */*',\n                        'Content-Type': 'application/json;charset=UTF-8',\n                        'Sessionkey': WSManager.getToken() || WSManager.getTempToken() || \"\"\n                    },\n                    body: JSON.stringify(param)\n                });\n                if (response.status != WSC.successCode) {\n                    var errorMsg = response.message != '' ? response.message : response.global_error\n\n                    if (errorMsg == '') {\n                        for (var key in response.error) {\n                            errorMsg = response.error[key];\n                        }\n                    }\n                    if(response.status == WSC.inQueueCode){\n                        const responseJson = await response.json();\n                        let message = btoa(errorMsg || \"Sorry!! You are in queue, Please try again...\")\n                        let time = btoa(responseJson.data || 5)\n                        window.location.assign('/you-are-in-queue/?yqmsg=' + message + '&yqtm=' + time);\n                    }else if (response.status == WSC.sessionExpireCode) {\n                        Utilities.showToast(response.global_error, 5000);\n                        this.logout();\n                    } else {\n                        if (errorMsg != '') {\n                            Utilities.showToast(errorMsg, 5000);\n                        }\n                    }\n                } else {\n                    const responseJson = await response.json();\n                    return responseJson.data;\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n\n    // Check Auth\n\n    static loggedIn() {\n        return localStorage.getItem('id_token') != null;\n        // return false;\n    }\n\n    static clearLineup() {\n        ls.remove('home_player_count');\n        ls.remove('away_player_count');\n        ls.remove('Lineup_data')\n    }\n\n    static logout() {\n        let def_lang = this.getAppLang()\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                locale:def_lang,\n                targetFunc:'handleLogoutReceived'\n            }\n            window.ReactNativeWebView.postMessage(JSON.stringify(data));\n        }\n        let admin_id_token = localStorage.getItem('admin_id_token');\n        let ALLOW_COIN_MODULE = localStorage.getItem('ALLOW_COIN_MODULE');\n        let module_access = localStorage.getItem('module_access');\n        let defSports = ls.get('selectedSports');\n        let gameType = WSManager.getPickedGameType();\n        sessionStorage.clear();\n        localStorage.clear();\n        ls.clear();\n        this.setAppLang(def_lang);\n        ls.set('selectedSports', defSports);\n        if(admin_id_token){\n            localStorage.setItem('admin_id_token', admin_id_token);\n        }\n        if(ALLOW_COIN_MODULE){\n            localStorage.setItem('ALLOW_COIN_MODULE', ALLOW_COIN_MODULE);\n        }\n        if(module_access){\n            localStorage.setItem('module_access', module_access);\n        }\n        setValue.setAppSelectedSport(defSports);\n        if(gameType){\n            WSManager.setPickedGameType(gameType);\n        }\n        setTimeout(() => {\n            if (navigator.userAgent.match(/(Mobile)/) || navigator.userAgent.match(/(mobile)/) || window.ReactNativeWebView) {\n                window.location.assign('/signup');\n            }\n            else {\n                window.location.assign('/');\n            }\n        }, 300);\n    }\n\n    static setIsMobileApp(isMobileApp) {\n        // Saves isMobileApp data to localStorage\n        localStorage.setItem('isMobileApp', isMobileApp)\n    }\n    static getIsMobileApp() {\n        // Get isMobileApp data to localStorage\n        const isMobileApp = localStorage.getItem('isMobileApp')\n        return isMobileApp ? JSON.parse(localStorage.isMobileApp) : false\n    }\n    static setIsIOSApp(isIOSApp) {\n        // Saves isIOSApp data to localStorage\n        localStorage.setItem('isIOSApp', isIOSApp)\n    }\n    static getIsIOSApp() {\n        // Get isMobileApp data to localStorage\n        const isIOSApp = localStorage.getItem('isIOSApp')\n        return isIOSApp ? JSON.parse(localStorage.isIOSApp) : false\n    }\n\n    static setProfile(profile) {\n        // Saves profile data to localStorage\n        try {\n            localStorage.setItem('referral_code', profile.referral_code)\n            localStorage.setItem('profile', JSON.stringify(profile))\n        }\n        catch (error) {\n            localStorage.setItem('referral_code', profile.referral_code)\n        }\n    }\n\n    static getProfile() {\n        // Retrieves the profile data from localStorage\n        const profile = localStorage.getItem('profile')\n        return profile ? JSON.parse(localStorage.profile) : {}\n    }\n\n    static getAccVerified(){\n        let profile = localStorage.getItem('profile')\n        const accVerified = (profile.pan_verified == \"1\" && profile.is_bank_verified == \"1\" && profile.email_verified == \"1\" && profile.phone_verfied == \"1\" ) ? \"1\" : \"0\"\n        return accVerified;\n    }\n\n    static getUserReferralCode() {\n        return localStorage.getItem('referral_code')\n    }\n\n    static setToken(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken);\n    }\n\n    static getToken = () => {\n        // Retrieves the user token from localStorage\n        // return '7864ef5e61cbb021e15c9b6aed396250';\n        return localStorage.getItem('id_token')\n    }\n\n    static setTempToken(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_temp_token', idToken);\n    }\n\n    static getTempToken() {\n        // Retrieves the user token from localStorage\n        // return '7864ef5e61cbb021e15c9b6aed396250';\n        return localStorage.getItem('id_temp_token')\n    }\n\n    static setBalance(userBalance) {\n        // Saves UserBalance data to localStorage\n        localStorage.setItem('userBalance', JSON.stringify(userBalance))\n    }\n\n    static getBalance() {\n        // Retrieves the UserBalance data from localStorage\n        const userBalance = localStorage.getItem('userBalance')\n        return userBalance ? JSON.parse(localStorage.userBalance) : {}\n    }\n\n    static setAllowedBonusPercantage(allowed_bonus_percantage) {\n        // Saves allowed_bonus_percantage data to localStorage\n        localStorage.setItem('allowed_bonus_percantage', allowed_bonus_percantage)\n    }\n\n    static getAllowedBonusPercantage() {\n        // Retrieves the allowed_bonus_percantage data from localStorage\n        return localStorage.getItem('allowed_bonus_percantage')\n    }\n\n\n    static setContestFromAddFundsAndJoin(contestData) {\n        // Saves Data of Contest from ConfirmationModal to localStorage\n        localStorage.setItem('contestData', JSON.stringify(contestData))\n    }\n\n    static getContestFromAddFundsAndJoin() {\n        // Retrieves Data of Contest from ConfirmationModal to localStorage\n        const contestData = localStorage.getItem('contestData')\n        return contestData ? JSON.parse(localStorage.contestData) : {}\n    }\n\n    static setContestFromAddCoinAndJoin(contestCoinData) {\n        // Saves Data of Contest from ConfirmationModal to localStorage\n        localStorage.setItem('contestCoinData', JSON.stringify(contestCoinData))\n    }\n\n    static getContestFromAddCoinAndJoin() {\n        // Retrieves Data of Contest from ConfirmationModal to localStorage\n        const contestCoinData = localStorage.getItem('contestCoinData')\n        return contestCoinData ? JSON.parse(localStorage.contestCoinData) : {}\n    }\n\n\n    static setFromFundsOnly(isAddFundsClicked) {\n        // Saves boolean value that user comes from Add Funds\n        localStorage.setItem('isAddFundsClicked', isAddFundsClicked)\n    }\n\n    static getFromFundsOnly() {\n        // Saves boolean value that user comes from Add Funds\n        return localStorage.getItem('isAddFundsClicked') != null && !_isUndefined(localStorage.getItem('isAddFundsClicked')) ? localStorage.getItem('isAddFundsClicked') : false\n    }\n\n    static setPaymentCalledFrom(PaymentCalledFrom) {\n        // Saves name of class from which Funds Are Added \n        localStorage.setItem('PaymentCalledFrom', PaymentCalledFrom);\n    }\n    static getPaymentCalledFrom() {\n        // Retrieves name of class from which Funds Are Added \n        return localStorage.getItem('PaymentCalledFrom')\n    }\n    static setIsFromPayment(status) {\n        // Saves name of class from which Funds Are Added \n        localStorage.setItem('status', status);\n    }\n    static getIsFromPayment() {\n        // Retrieves name of class from which Funds Are Added \n        return localStorage.getItem('status')\n    }\n\n    static setFromConfirmPopupAddFunds(flag) {\n        localStorage.setItem('from_confirm_popup_add_funds', flag);\n    }\n\n    static getFromConfirmPopupAddFunds(){\n        return localStorage.getItem('from_confirm_popup_add_funds')\n    }\n\n    static setReferralCode(referralCode) {\n        // Saves the refferal code\n        localStorage.setItem('referralCode', referralCode);\n    }\n    static getReferralCode() {\n        // Retrieves the refferal code \n        return localStorage.getItem('referralCode')\n    }\n    static setAffiliatCode(affCode) {\n        localStorage.setItem('affcd', affCode);\n    }\n    static getAffiliatCode() {\n        return localStorage.getItem('affcd')\n    }\n    static googleTrack(profileId, action) {\n        let rcuid = localStorage.getItem('rcuid');\n        ReactGA.initialize(WSC.GA_PROFILE_ID);\n        ReactGA.event({\n            category: rcuid ? rcuid : 'nocampaign',\n            action: action\n        });\n    }\n\n    static googleTrackDaily(profileId, action) {\n        var userAnalytic = cookie.load('userAnalytic');\n        if (!userAnalytic) {\n            let rcuid = localStorage.getItem('rcuid');\n            ReactGA.initialize(WSC.GA_PROFILE_ID);\n            ReactGA.event({\n                category: rcuid ? rcuid : 'nocampaign',\n                action: action\n            });\n            var today = new Date();\n            var userAnalytic = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n            var date = new Date();\n            var midnight = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 29, 29, 59);\n            cookie.save('userAnalytic', userAnalytic, { path: '/', expires: midnight })\n        }\n    }\n\n\n    static setAppLang(lang) {\n        // Saves the app language\n        localStorage.setItem('i18nextLng', lang);\n    }\n    static getAppLang() {\n        // Retrieves the app language  \n        let lsLang = localStorage.getItem('i18nextLng');\n        let lang = lsLang ? lsLang.split('-') : ['en'];        \n        return lang[0];\n    }\n\n    static setS3LastTime(data) {\n        let strObj = JSON.stringify(data);\n        localStorage.setItem('S3LTAC', btoa(strObj));\n    }\n    static getS3LastTime() {\n        let obj = localStorage.getItem('S3LTAC');\n        return obj ? JSON.parse(atob(obj)) : {};\n    }\n    static setBannerData(data) {\n        let strObj = JSON.stringify(data);\n        localStorage.setItem('abdata', btoa(strObj));\n    }\n    static getBannerData() {\n        let obj = localStorage.getItem('abdata');\n        return obj && obj != '[object Object]' ? JSON.parse(atob(obj)) : {};\n    }\n    static setShareContestJoin(data) {\n        let strObj = JSON.stringify(data);\n        localStorage.setItem('SCJF', btoa(strObj));\n    }\n    static getShareContestJoin() {\n        let obj = localStorage.getItem('SCJF');\n        return obj ? JSON.parse(atob(obj)) : null;\n    }\n\n    static setDailyData(data) {\n        let todayString = new Date().toDateString();\n        data['day_string'] = todayString;\n        let strObj = JSON.stringify(data);\n        localStorage.setItem('DSBD', btoa(strObj));\n    }\n    static getDailyData() {\n        let obj = localStorage.getItem('DSBD');\n        return obj ? JSON.parse(atob(obj)) : {};\n    }\n    static setWheelData(data) {\n        let strObj = JSON.stringify(data);\n        localStorage.setItem('S2WW', btoa(strObj));\n    }\n    static getWheelData() {\n        let obj = localStorage.getItem('S2WW');\n        return obj ? JSON.parse(atob(obj)) : {};\n    }\n    static setPickedGameType(value) {\n        setValue.setSelectedGameType(value);\n        let strObj = JSON.stringify(value);\n        localStorage.setItem('SHGT', btoa(strObj));\n    }\n    static getPickedGameType() {\n        let obj = localStorage.getItem('SHGT');\n        return obj ? JSON.parse(atob(obj)) : null;\n    }\n\n    static removeLSItem(key) {\n       localStorage.removeItem(key)\n    }\n\n}","/var/www/html/framework/frontend/src/WSHelper/WSCallings.jsx",[],"/var/www/html/framework/frontend/src/components/images.jsx",["1317","1318"],"/var/www/html/framework/frontend/src/Component/CustomComponent/index.js",[],"/var/www/html/framework/frontend/src/InitialSetup/AppConfig.jsx",["1319"],"const prod = {\n    s3: {\n        BUCKET: process.env.REACT_APP_S3_URL,\n        S3_FOLDER: {\n            UPLOAD: 'upload/',\n            SETTING: 'upload/setting/',\n            BANNER: 'upload/banner/',\n            APPBANNER: 'upload/app_banner/',\n            FLAG: 'upload/flag/',\n            JERSY: 'upload/jersey/',\n            PAN: 'upload/pan/',\n            THUMB: 'upload/profile/thumb/',\n            BANK: 'upload/bank_document/',\n            REWARDS: 'upload/rewards/',\n            S3ASSETS: 'assets/img/',\n            BADGES:'upload/badges/',\n            MERCHANDISE:'upload/merchandise/',\n            SPONSER:'upload/sponsor/',\n            CATEGORY: 'upload/category/',\n            OPENPRED: 'upload/open_predictor/',\n            OPENPREDFPP: 'upload/fixed_open_predictor/sponsor/'\n        },\n        BUCKET_DATA_PREFIX: process.env.REACT_APP_S3_PREFIX,\n        BUCKET_STATIC_DATA_ALLOWED: true,\n    },\n    apiGateway: {\n        URL: process.env.REACT_APP_BASE_URL + '/',\n        USER_URL: process.env.REACT_APP_USER_BASE_URL + '/',\n        FANTASY_URL: process.env.REACT_APP_FANTASY_BASE_URL + '/',\n        nodeURL: process.env.REACT_APP_NODE_URL + \":4000\"\n    },\n    cognito: {\n        FB_APP_ID: process.env.REACT_APP_FB_APP_ID,\n        GOOGLE_CLIENT_ID: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        GOOGLE_PROFILE_ID: process.env.REACT_APP_GOOGLE_PROFILE_ID,\n    }\n};\n\nexport default {\n    ...prod\n};\n","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemShare.jsx",["1320","1321","1322","1323"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities } from '../../Utilities/Utilities';\nimport { getPickemDetail } from '../../WSHelper/WSCallings';\nimport Helmet from 'react-helmet';\nimport NewConfirmPickem from './NewPickemConfirmModal';\nimport NewPIckemHTPModal from './NewPickemHTPModal';\nimport MetaData from '../../helper/MetaData';\nimport WSManager from '../../WSHelper/WSManager';\nimport { CircularProgressBar, MomentDateComponent } from \"../CustomComponent\";\nimport CustomHeader from '../../components/CustomHeader';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport ls from 'local-storage';\nimport { Sports } from \"../../JsonFiles\";\nimport { GameType, setValue} from '../../helper/Constants';\n\nclass PickemShare extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            HOS: {\n                back: this.props.history.length > 2,\n                fixture: false,\n                title: '',\n                hideShadow: false,\n                MLogo: false\n            },\n            LData: '',\n            detail: '',\n            showCP: false,\n            sourceUrlShow: false,\n            showHTP: false,\n            selectedData: '',\n            PickemConfigData: ''\n        }\n    }\n\n    componentWillMount() {\n        WSManager.setShareContestJoin(true);\n        WSManager.setPickedGameType(GameType.Pickem);\n        if (this.props.match && this.props.match.params) {\n            const matchParam = this.props.match.params;\n            let selectedSports = this.props.match.params.sportsId;\n            if (selectedSports in Sports) {\n                var sportsId = Sports[selectedSports] + \"\";\n                ls.set('selectedSports', sportsId)\n                setValue.setAppSelectedSport(sportsId);\n            }\n            let pmid = atob(matchParam.pickem_id)\n            this.getDetail(pmid);\n        }\n    }\n\n    showHTPModal = () => {\n        this.setState({\n            showHTP: true\n        })\n    }\n\n    hideHTPModal = () => {\n        this.setState({\n            showHTP: false\n        })\n    }\n\n    getDetail(pickem_master_id) {\n        let param = {\n            \"pickem_id\": pickem_master_id\n        }\n        getPickemDetail(param).then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                if (responseJson.data) {\n                    this.setState({\n                        detail: responseJson.data.result,\n                        PickemConfigData: responseJson.data.pickem_coin_config\n                    });\n                } else {\n                    Utilities.showToast(AL.PICK_EXP_MSG, 1000);\n                    setTimeout(() => {\n                        if (this.props.history.length > 2) {\n                            this.props.history.goBack();\n                        } else {\n                            this.gotoLobby()\n                        }\n                    }, 1000);\n                }\n            }\n            if (responseJson.response_code === 500){\n                Utilities.showToast(AL.PICK_EXP_MSG, 1000);\n                setTimeout(() => {\n                    if (this.props.history.length > 2) {\n                        this.props.history.goBack();\n                    } else {\n                        this.gotoLobby()\n                    }\n                }, 1000);\n            }\n        })\n    }\n\n    onMakePrediction = (optName, optFlag, uid, schDate, startInTime) => {\n        if (WSManager.loggedIn()) {\n            this.setState({\n                selectedData: {\n                    'pickem_id': this.state.detail.pickem_id,\n                    'Name': optName,\n                    'Flag': optFlag,\n                    'TeamUID': uid,\n                    'Date': schDate,\n                    'startInTime': startInTime\n                }\n            })\n            this.setState({\n                showCP: true\n            })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    hideCP = () => {\n        this.setState({\n            showCP: false\n        })\n    }\n\n    goToSignup = () => {\n        const matchParam = this.props.match.params;\n        let selectedSports = this.props.match.params.sportsId;\n        if (selectedSports in Sports) {\n            var sportsId = Sports[selectedSports] + \"\";\n            ls.set('selectedSports', sportsId)\n            setValue.setAppSelectedSport(sportsId);\n        }\n        let pathName = '/' + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/pickem-detail/\" + matchParam.league_id + '/' + matchParam.pickem_id\n        this.props.history.push({\n            pathname: '/signup', state: {\n                joinContest: true,\n                lineupPath: pathName,\n                FixturedContest: this.state.detail,\n                LobyyData: this.state.detail,\n                sportsId: sportsId\n            }\n        })\n    }\n\n    timerCallback = () => {\n\n    }\n\n    gotoLobby = () => {\n        this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n    }\n\n    PickedPercentage = (picked, total) => {\n        let pickedPer = picked == 0 ? 0 : ((picked / total) * 100).toFixed(2);\n        let checkpickedPer = (pickedPer % 1) == 0 ? Math.floor(pickedPer) : pickedPer;\n        pickedPer = Math.round(checkpickedPer);\n        return pickedPer;\n    }\n\n    render() {\n        const { HOS, selectedData, detail, showCP, showHTP,PickemConfigData } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container prediction-detail-wrap\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.PMSHARE.title}</title>\n                            <meta name=\"description\" content={MetaData.PMSHARE.description} />\n                            <meta name=\"keywords\" content={MetaData.PMSHARE.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader \n                            {...this.props} \n                            HeaderOption={HOS} \n                            openPage={this.openPage} \n                        />\n                        {\n                            detail !== '' &&\n                            <React.Fragment>\n                                <div className=\"pickem-share-wrap\">\n                                    <i className=\"icon-share\"></i>\n                                    <div className=\"pickem-info-header\">\n                                        <div className=\"pickem-info-top\">\n                                            <div className=\"name\">\n                                                {AL.PICKEM}\n                                                <a \n                                                    href\n                                                    onClick={() => { this.showHTPModal() }}>\n                                                    <i className=\"icon-info\"></i> {AL.HOW_TO_PLAY} ?\n                                                </a>\n                                            </div>\n                                        </div>\n                                        <div className=\"pickem-info-bottom\">\n                                            <div className=\"pickem-timer\">\n                                                {\n                                                    Utilities.showCountDown({ game_starts_in: detail.game_starts_in })\n                                                    ?\n                                                    <div className=\"countdown-timer-section\">\n                                                        {\n                                                            detail.game_starts_in && <CountdownTimer\n                                                                timerCallback={this.timerCallback}\n                                                                deadlineTimeStamp={detail.game_starts_in} />\n                                                        }\n                                                    </div>\n                                                    :\n                                                    <div className=\"timer-section\">\n                                                        <MomentDateComponent data={{ date: detail.season_scheduled_date, format: \"D MMM - hh:mm A \" }} />\n                                                    </div>\n                                                }\n                                                <div className=\"league-name\">{detail.league_name}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    {\n                                        detail.total_user_joined == 0 ?\n                                            <div className=\"pickem-prize-section be-first\">                                    \n                                                {AL.BE_FIRST}\n                                            </div>\n                                            :\n                                            <div className=\"pickem-prize-section\">      \n                                                {AL.PRIZE_POOL} \n                                                <span><img src={Images.IC_COIN} alt=\"\"/> {detail.total_pool}</span>\n                                            </div>\n                                    }\n                                    <div className=\"pickem-que\">{AL.PICKEM_SHARE_MSG}</div>\n                                    <ul className=\"option-info\">\n                                        <li\n                                            onClick={() => this.onMakePrediction(\n                                                detail.home,\n                                                detail.home_flag,\n                                                detail.home_uid,\n                                                detail.season_scheduled_date,\n                                                detail.game_starts_in\n                                            )}\n                                        >\n                                            <img src={Utilities.teamFlagURL(detail.home_flag)} alt=\"\"/>\n                                            <span className=\"opt-name\">{detail.home}</span>\n                                            <CircularProgressBar\n                                                progressPer={this.PickedPercentage(\n                                                    detail.home_coins,\n                                                    detail.total_pool\n                                                )\n                                                }\n                                            />\n                                        </li>\n                                        {\n                                            detail.allow_draw == 1 &&\n                                            <li\n                                                onClick={() => this.onMakePrediction(\n                                                    'DRAW',\n                                                    Images.DRAW_ICON,\n                                                    0,\n                                                    detail.season_scheduled_date,\n                                                    detail.game_starts_in\n                                                )}\n                                            >\n                                                <img src={Images.DRAW_ICON} alt=\"\"/>\n                                                <span className=\"opt-name\">DRAW</span>\n                                                <CircularProgressBar\n                                                    progressPer={this.PickedPercentage(\n                                                        detail.draw_coins,\n                                                        detail.total_pool\n                                                    )\n                                                    }\n                                                />\n                                            </li>\n                                        }\n                                        <li\n                                            onClick={() => this.onMakePrediction(\n                                                detail.away,\n                                                detail.away_flag,\n                                                detail.away_uid,\n                                                detail.season_scheduled_date,\n                                                detail.game_starts_in\n                                            )}\n                                        >\n                                            <img src={Utilities.teamFlagURL(detail.away_flag)} alt=\"\"/>\n                                            <span className=\"opt-name\">{detail.away}</span>\n                                            <CircularProgressBar\n                                                progressPer={this.PickedPercentage(\n                                                    detail.away_coins,\n                                                    detail.total_pool\n                                                )\n                                                }\n                                            />\n                                        </li>\n                                    </ul>\n                                </div>\n\n                                <div className=\"lobby-go\">\n                                    {this.props.history.length <= 2 && <a href onClick={this.gotoLobby}>{AL.GO_TO_LOBBY}</a>}\n                                </div>\n                            </React.Fragment>\n                        }\n                        {\n                            showHTP &&\n                            <NewPIckemHTPModal\n                                ModalData={{\n                                    show: showHTP,\n                                    hide: this.hideHTPModal\n                                }}\n                            />\n                        }\n                        {\n                            showCP && <NewConfirmPickem {...this.props} preData={{\n                                mShow: showCP,\n                                mHide: this.hideCP,\n                                selectedData: selectedData,\n                                successAction: this.gotoLobby,\n                                PickemConfigData: PickemConfigData\n                            }} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default PickemShare;\n","/var/www/html/framework/frontend/src/WSHelper/WSConstants.jsx",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPParticipants.jsx",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ShareFPPOpenPredictor.jsx",["1324","1325","1326","1327","1328"],"import React, { Component } from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { _Map, Utilities } from '../../Utilities/Utilities';\nimport { getFPPOpenPredictionDetail } from '../../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../CustomComponent';\nimport Helmet from 'react-helmet';\nimport ConfirmFPPOpenPredictor from './ConfirmFPPOpenPredictor';\nimport MetaData from '../../helper/MetaData';\nimport WSManager from '../../WSHelper/WSManager';\nimport CustomHeader from '../../components/CustomHeader';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport { AppSelectedSport, MATCH_TYPE , GameType} from '../../helper/Constants';\n\nclass ShareFPPOpenPredictor extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            HOS: {\n                back: this.props.history.length > 2,\n                fixture: false,\n                title: '',\n                hideShadow: false,\n                MLogo: true\n            },\n            LData: '',\n            detail: '',\n            showCP: false,\n            sourceUrlShow: false\n        }\n    }\n\n    componentWillMount() {\n        WSManager.setShareContestJoin(true);\n        WSManager.setPickedGameType(GameType.OpenPred);\n        if (this.props.match && this.props.match.params) {\n            const matchParam = this.props.match.params;\n            let pmid = atob(matchParam.prediction_master_id)\n            this.getDetail(matchParam.category_id, pmid);\n        }\n    }\n\n    getDetail(category_id, prediction_master_id) {\n        let param = {\n            \"category_id\": category_id,\n            \"prediction_master_id\": prediction_master_id\n        }\n        getFPPOpenPredictionDetail(param).then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                if (responseJson.data.prediction) {\n                    this.setState({\n                        detail: responseJson.data.prediction[0] || '',\n                        LData: responseJson.data.category_data,\n                    });\n                } else {\n\n                    Utilities.showToast(AL.P_EXP_MSG, 1000);\n                    setTimeout(() => {\n                        if (this.props.history.length > 2) {\n                            this.props.history.goBack();\n                        } else {\n                            this.gotoLobby()\n                        }\n                    }, 1000);\n                }\n            }\n        })\n    }\n\n    onSelectPredict = (optionIndex, option) => {\n        let item = this.state.detail;\n        _Map(item['option'], (obj, idx) => {\n            if (idx === optionIndex) {\n                obj['user_selected_option'] = option.prediction_option_id;\n                item['option_predicted'] = option\n            } else {\n                obj['user_selected_option'] = null;\n            }\n        })\n        this.setState({\n            detail: item\n        }, () => {\n            setTimeout(() => {\n                this.onMakePrediction()\n            }, 50);\n        })\n    }\n\n    onMakePrediction = () => {\n        if (WSManager.loggedIn()) {\n            this.setState({\n                showCP: true\n            })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    hideCP = () => {\n        this.setState({\n            showCP: false\n        })\n    }\n\n    goToSignup = () => {\n        const matchParam = this.props.match.params;\n        let pathName = '/' + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor-leaderboard-details/\" + matchParam.category_id + '/' + matchParam.prediction_master_id\n        this.props.history.push({\n            pathname: '/signup', state: {\n                joinContest: true,\n                lineupPath: pathName,\n                FixturedContest: this.state.LData,\n                LobyyData: this.state.LData\n            }\n        })\n    }\n\n    timerCallback = () => {\n\n    }\n\n    gotoLobby = () => {\n        this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl() + \"#open-predictor-leaderboard\")\n    }\n\n    successAction = () => {\n        setTimeout(() => {\n            if (this.props.history.length > 2) {\n                this.props.history.goBack();\n            } else {\n                this.gotoLobby()\n            }\n        }, 1500);\n    }\n\n    renderFilledBar = (opt, idx) => {\n        const { detail } = this.state;\n        let predictedPer = detail.total_predictions === 0 ? 0 : ((opt.option_total_coins / detail.total_pool) * 100).toFixed(2);\n        let checkPredictedPer = (predictedPer % 1) === 0 ? Math.floor(predictedPer) : predictedPer;\n        predictedPer = checkPredictedPer;\n        let isOptSelected = (opt.user_selected_option === opt.prediction_option_id);\n        return (\n            <div key={idx} onClick={() => this.onSelectPredict(idx, opt)} className={\"prediction-bar\" + (isOptSelected ? ' selected' : '')}>\n                <div className=\"filled-bar\" style={{ width: detail.entry_type == 1 ? (isOptSelected ? '100%' : '0') : predictedPer + '%', animationDelay: (0.05 * idx) + 's' }} />\n                <p className=\"answer\">{opt.option}</p>\n                {\n                    detail.entry_type == 0 &&\n                    <div className=\"corrected-ans\">\n                        <p>{predictedPer > 0 ? (predictedPer + '%') : ''}</p>\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    viewParticipants = () => {\n        const matchParam = this.props.match.params;\n        let pmid = atob(matchParam.prediction_master_id)\n        let mURL = Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor-leaderboard/participants/\" + btoa(pmid);\n        this.props.history.push({ pathname: '/' + mURL, state: { isLeader: false } });\n    }\n\n    callNativeRedirection(item) {\n        let data = {\n            action: 'predictionLink',\n            targetFunc: 'predictionLink',\n            type: 'link',\n            url: item.source_url,\n            detail: item\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    render() {\n        const { HOS, LData, detail, showCP } = this.state;\n        let game_starts_in = detail.deadline_time / 1000;\n        let betCoin = 0;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container prediction-detail-wrap\">\n                        <img className=\"bg-c-img\" src={Images.OPEN_CARD_IMG_DETAIL} alt=\"\" />\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.PRDSHARE.title}</title>\n                            <meta name=\"description\" content={MetaData.PRDSHARE.description} />\n                            <meta name=\"keywords\" content={MetaData.PRDSHARE.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} LobyyData={LData} HeaderOption={HOS} openPage={this.openPage} />\n                        {\n                            detail !== '' && <div className=\"pred-detail-v \">\n                                <p className=\"questions\">\n                                    {detail.desc}\n                                </p>\n                                {\n                                    (detail.source_desc || detail.source_url) &&\n                                    <div className=\"que-desc\">\n                                        {\n                                            detail.source_url &&\n                                            <React.Fragment>\n                                                {\n                                                    window.ReactNativeWebView ?\n                                                        <a\n                                                            href\n                                                            onClick={() => this.callNativeRedirection(detail)}\n                                                            className=\"attached-url\">\n                                                            <i className=\"icon-link\"></i>\n                                                        </a>\n                                                        :\n                                                        <a\n                                                            href={detail.source_url}\n                                                            target='_blank'\n                                                            className=\"attached-url \">\n                                                            <i className=\"icon-link\"></i>\n                                                        </a>\n                                                }\n                                            </React.Fragment>\n                                        }\n\n                                        {\n                                            detail.source_desc &&\n                                            <OverlayTrigger trigger={['hover', 'focus']} placement={'right'} overlay={\n                                                <Tooltip id=\"tooltip\">\n                                                    <strong>{detail.source_desc}</strong>\n                                                </Tooltip>\n                                            }>\n                                                <i className=\"icon-ic-info que-info\" />\n                                            </OverlayTrigger>\n                                        }\n\n                                    </div>\n                                }\n                                {\n                                    _Map(detail.option, (opt, idx) => {\n                                        betCoin = (opt.user_selected_option === opt.prediction_option_id) ? opt.bet_coins : betCoin\n                                        return this.renderFilledBar(opt, idx);\n                                    })\n                                }\n                                <div className=\"footer-vc\">\n                                    <div className=\"match-timing league-n\">\n                                        <div className=\"leag-name\">{LData.name}</div>\n                                    </div>\n                                    <div>\n                                        \n                                        <div className=\"date-v\">\n                                            <div className=\"match-timing\">\n                                                {\n                                                    Utilities.showCountDown({ game_starts_in: game_starts_in }) ?\n                                                        <span className=\"d-flex\">\n                                                            <div className=\"countdown time-line\">\n                                                                {\n                                                                    game_starts_in && <CountdownTimer timerCallback={this.timerCallback} deadlineTimeStamp={game_starts_in} />\n                                                                }\n                                                            </div>\n                                                            {AL.REMAINING}\n                                                        </span> :\n                                                        <span> <MomentDateComponent data={{ date: detail.deadline_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                                }\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <div className=\"lobby-go\">\n                                        \n                                        {this.props.history.length <= 2 && <a href onClick={this.gotoLobby}>{AL.GO_TO_LOBBY}</a>}\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        {\n                            showCP && <ConfirmFPPOpenPredictor {...this.props} preData={{\n                                mShow: showCP,\n                                mHide: this.hideCP,\n                                cpData: detail,\n                                successAction: this.successAction\n                            }} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default ShareFPPOpenPredictor;\n","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorParticipants.jsx",[],"/var/www/html/framework/frontend/src/Component/CustomComponent/AdSenseComponent.jsx",[],"/var/www/html/framework/frontend/src/Component/CustomComponent/CircularProgressBar.jsx",["1329","1330"],"import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nclass CircularProgressBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showSelected: '',\n            showCP: false,\n        }\n    }\n\n    render() {\n        const { progressPer } = this.props;\n        return (\n            <div className=\"circular-progress\" data-percentage={progressPer || 0}>\n                <span className=\"progress-left\">\n                    <span className=\"progress-bar\"></span>\n                </span>\n                <span className=\"progress-right\">\n                    <span className=\"progress-bar\"></span>\n                </span>\n                <div className=\"progress-value\">\n                    <div>\n                        {progressPer || 0}<span>%</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CircularProgressBar;","/var/www/html/framework/frontend/src/Component/CustomComponent/Toast.jsx",[],"/var/www/html/framework/frontend/src/Component/CustomComponent/TransactionList.jsx",["1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384"],"\nimport React, { Component } from \"react\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { MomentDateComponent } from \"./CustomComponents\";\nimport Images from \"../../components/images\";\n\nexport default class TransactionList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            transList: this.props.transactionHistoryList,\n            ExpandedIndex: -1,\n            selectedTAB: this.props.selectedTAB,\n            dummyData: [\n                { \"prize_type\": \"1\", \"amount\": \"14\" },\n                { \"prize_type\": \"0\", \"amount\": \"10\" },\n                { \"prize_type\": \"2\", \"amount\": \"15\" }\n            ]\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.transList != nextProps.transactionHistoryList) {\n            this.setState({\n                transList: nextProps.transactionHistoryList,\n                selectedTAB: nextProps.selectedTAB\n            })\n        }\n    }\n\n    expand(idx) {\n        this.setState({\n            ExpandedIndex: idx\n        })\n    }\n    getAmtFormat = (item) => {\n        let points = parseFloat(item.points);\n        let real = parseFloat(item.real_amount);\n        let winning = parseFloat(item.winning_amount);\n        let bonus = parseFloat(item.bonus_amount);\n        if (this.state.selectedTAB == AppLabels.BONUS) {\n            return <i className=\"icon-bonus\"></i>\n        }\n\n        return (real > 0 ? Utilities.getMasterData().currency_code : points > 0 ? <img src={Images.IC_COIN} alt=\"\" style={{ maxWidth: 14}} /> : winning > 0 ? Utilities.getMasterData().currency_code : bonus > 0 ? <i className=\"icon-bonus\"></i> : '');\n    }\n    calcAmt = (item) => {\n        let points = parseFloat(item.points);\n        var real = parseFloat(item.real_amount);\n        let winning = parseFloat(item.winning_amount);\n        let bonus = parseFloat(item.bonus_amount);\n        if (this.state.selectedTAB == AppLabels.BONUS) {\n            return bonus\n        }\n        if (this.state.selectedTAB == AppLabels.ALL) {\n            real = real + winning + bonus;\n        }\n\n        return (real > 0 ? real : points > 0 ? points : winning > 0 ? winning : bonus > 0 ? bonus : '0');\n    }\n\n\n    getTransactionStatus(item) {\n        if (item.status == 1) {\n            return '';\n        }\n        else if (item.status == 0) {\n            return ' (' + AppLabels.TRANSACTION_STATUS_PENDING + ')';\n        }\n        else if (item.source == \"8\" && item.status == 2) {\n            return ' (' + AppLabels.TRANSACTION_STATUS_REJECTED + ')';\n        }\n        else {\n            return ' (' + AppLabels.TRANSACTION_STATUS_FAILED + ')';\n        }\n    }\n\n    parseMerchandiseData = (prizeItem, item, idx) => {\n        let pAmt = prizeItem.amount; \n        return (\n            (prizeItem.prize_type == 0) ?\n                <div className=\"no-margin\" >\n                    {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                    {<i style={{ display: 'inlineBlock', color: \"#0CBFEB\" }} className=\"icon-bonus\"></i>}\n                    {item.custom_data.length === idx + 1 ? Number(parseFloat(pAmt || 0).toFixed(2)) : Number(parseFloat(pAmt || 0).toFixed(2)) + \"/\"}\n                </div>\n                :\n                (prizeItem.prize_type == 1) ?\n                    <div className=\"no-margin\" >\n                        {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                        {<span style={{ display: 'inlineBlock', color: \"#0CBFEB\" }}>{Utilities.getMasterData().currency_code}</span>}\n                        {item.custom_data.length === idx + 1 ? Number(parseFloat(pAmt || 0).toFixed(2)) : Number(parseFloat(pAmt || 0).toFixed(2)) + \"/\"}\n                    </div>\n                    :\n                    (prizeItem.prize_type == 2) ?\n                        <div className=\"no-margin\">\n                            {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                            <img src={Images.IC_COIN} alt=\"\" style={{ maxWidth: 14 }} />\n                            {item.custom_data.length === idx + 1 ? pAmt : pAmt + \"/\"}\n                        </div>\n                        :\n                        (prizeItem.prize_type == 3) ?\n                            <div className=\"no-margin\">\n                                {item.custom_data.length === idx + 1 ? prizeItem.name : prizeItem.name + \"/\"}\n                            </div> : ''\n        )\n    }\n\n    showTransDesc=(item)=>{\n        let desc = item.trans_desc;\n        if(desc && desc.includes('match_date') && item.season_scheduled_date){\n            let startDate = Utilities.getUtcToLocal(item.season_scheduled_date);  \n            let date = Utilities.getFormatedDateTime(startDate, \"MMM DD, YY - hh:mm a\");\n            desc = desc.replace(\"{{match_date}}\", date);\n        }\n        return desc;\n    }\n\n    render() {\n        const { transList } = this.state;\n        return (\n            <div className=\"transaction-list\">\n                <div className=\"trans-wrap\">\n                    <div className=\"trans-header-wrap\">\n                        <div className=\"trans-head\"></div>\n                        <div className=\"trans-head\">\n                            <span>\n                                <i className=\"icon-remove\"></i>\n                            </span>\n                        </div>\n                        <div className=\"trans-head\">\n                            <span>\n                                <i className=\"icon-plus\"></i>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"trans-body-wrap\">\n                        {transList.map((item, idx) => {\n                            return (\n                                <div key={item + idx} className={\"trans-tr-wrap \" + (this.state.ExpandedIndex === idx ? 'trans-detail-wrap' : '')} onClick={() => this.expand(idx)}>\n                                    <div className=\"trans-tr-view\">\n                                        <div className=\"trans-td-view v-mid\">\n                                            <div className=\"trans-heading\">\n                                                {this.showTransDesc(item)}\n                                                {this.getTransactionStatus(item)}\n                                            </div>\n                                            <div className=\"trans-timing\">\n                                                <MomentDateComponent data={{ date: item.date_added, format: \"MMM DD - hh:mm A \" }} />\n                                            </div>\n                                        </div>\n                                        <div className=\"trans-td-view v-mid\">\n                                            {item.type == 1 &&\n                                                (\n                                                    (this.state.ExpandedIndex !== idx || this.state.selectedTAB != AppLabels.ALL) ?\n                                                        (\n                                                            <div>\n                                                                <i className=\"icon-remove text-danger\"></i>\n                                                                <span>{this.getAmtFormat(item)}</span>\n                                                                {this.calcAmt(item)}\n                                                            </div>\n                                                        )\n                                                        :\n                                                        <React.Fragment>\n                                                            {\n                                                                item.real_amount > 0 && <div>\n                                                                    <i className=\"icon-remove text-danger\"></i>\n                                                                    <span>{Utilities.getMasterData().currency_code}</span>\n                                                                    {item.real_amount}\n                                                                </div>\n                                                            }\n                                                            {\n                                                                item.bonus_amount > 0 && <div>\n                                                                    <i className=\"icon-remove text-danger\"></i>\n                                                                    <span className=\"no-margin-r\"><i className=\"icon-bonus\" /></span>{item.bonus_amount}\n                                                                </div>\n                                                            }\n                                                            {\n                                                                item.winning_amount > 0 && <div>\n                                                                    <i className=\"icon-remove text-danger\"></i>\n                                                                    <span>{Utilities.getMasterData().currency_code}</span>\n                                                                    {item.winning_amount}<span>({AppLabels.WIN})</span>\n                                                                </div>\n                                                            }\n                                                            {\n                                                                item.points > 0 && <div>\n                                                                    <i className=\"icon-remove text-danger\"></i>\n                                                                    <img src={Images.IC_COIN} alt=\"\" style={{ maxWidth: 14 }} />\n                                                                    {item.points}\n                                                                </div>\n                                                            }\n                                                        </React.Fragment>\n                                                )\n                                            }\n                                        </div>\n                                        <div className=\"trans-td-view v-mid\">\n                                            {item.type == 0 &&\n                                                (\n                                                    (this.state.ExpandedIndex !== idx || this.state.selectedTAB != AppLabels.ALL) ?\n                                                        (\n                                                            <div>\n                                                                {\n                                                                    item.source != 3 && item.source != 225 && item.source != 226 && item.source != 227 && item.source != 230 && item.source != 322 && item.source != 261 && item.source != 262 && item.source != 263\n                                                                        ?\n                                                                        <React.Fragment>\n                                                                            {item.status == 1 ?\n                                                                                <i className=\"icon-plus text-success\"></i>\n                                                                                :\n                                                                                <i className=\"icon-info-down warning\"></i>\n                                                                            }\n                                                                            <span className=\"no-margin-l\">{this.getAmtFormat(item)}</span>\n                                                                            {this.calcAmt(item)}\n                                                                        </React.Fragment>\n                                                                        :\n                                                                        item.custom_data ?\n                                                                        _Map(item.custom_data, (prizeItem, idx) => {\n                                                                            return this.parseMerchandiseData(prizeItem, item, idx)\n                                                                        })\n                                                                        :\n                                                                        <React.Fragment>\n                                                                            {\n                                                                                item.real_amount > 0 && <div>\n                                                                                    {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                    <span>{Utilities.getMasterData().currency_code}</span>\n                                                                                    {item.real_amount}\n                                                                                </div>\n                                                                            }\n                                                                            {\n                                                                                item.bonus_amount > 0 && <div>\n                                                                                    {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                    <span className=\"no-margin-r\"><i className=\"icon-bonus\" /></span>{item.bonus_amount}\n                                                                                </div>\n                                                                            }\n                                                                            {\n                                                                                item.winning_amount > 0 && <div>\n                                                                                    {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                    <span>{Utilities.getMasterData().currency_code}</span>\n                                                                                    {item.winning_amount}<span>({AppLabels.WIN})</span>\n                                                                                </div>\n                                                                            }\n                                                                            {\n                                                                                item.points > 0 && <div>\n                                                                                    {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                    <img src={Images.IC_COIN} alt=\"\" style={{ maxWidth: 14, marginRight: 3}} />\n                                                                                    {item.points}\n                                                                                </div>\n                                                                            }\n                                                                        </React.Fragment>\n                                                                }\n                                                            </div>\n                                                        )\n                                                        :\n                                                        <React.Fragment>\n                                                            {\n                                                                item.source != 3 && item.source != 225 && item.source != 226 && item.source != 227 && item.source != 230 && item.source != 322 && item.source != 261 && item.source != 262 && item.source != 263\n                                                                    ?\n                                                                    <React.Fragment>\n\n                                                                        {\n                                                                            item.real_amount > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <span>{Utilities.getMasterData().currency_code}</span>\n                                                                                {item.real_amount}\n                                                                            </div>\n                                                                        }\n                                                                        {\n                                                                            item.bonus_amount > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <span className=\"no-margin-r\"><i className=\"icon-bonus\" /></span>{item.bonus_amount}\n                                                                            </div>\n                                                                        }\n                                                                        {\n                                                                            item.winning_amount > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <span>{Utilities.getMasterData().currency_code}</span>\n                                                                                {item.winning_amount}<span>({AppLabels.WIN})</span>\n                                                                            </div>\n                                                                        }\n                                                                        {\n                                                                            item.points > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <img src={Images.IC_COIN} alt=\"\" style={{ maxWidth: 14, marginRight: 3}} />\n                                                                                {item.points}\n                                                                            </div>\n                                                                        }\n                                                                    </React.Fragment>\n                                                                    :\n\n                                                                    item.custom_data ?\n                                                                    _Map(item.custom_data, (prizeItem, idx) => {\n                                                                        return this.parseMerchandiseData(prizeItem, item, idx)\n                                                                    })\n                                                                    :\n                                                                    <React.Fragment>\n                                                                        {\n                                                                            item.real_amount > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <span>{Utilities.getMasterData().currency_code}</span>\n                                                                                {item.real_amount}\n                                                                            </div>\n                                                                        }\n                                                                        {\n                                                                            item.bonus_amount > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <span className=\"no-margin-r\"><i className=\"icon-bonus\" /></span>{item.bonus_amount}\n                                                                            </div>\n                                                                        }\n                                                                        {\n                                                                            item.winning_amount > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <span>{Utilities.getMasterData().currency_code}</span>\n                                                                                {item.winning_amount}<span>({AppLabels.WIN})</span>\n                                                                            </div>\n                                                                        }\n                                                                        {\n                                                                            item.points > 0 && <div>\n                                                                                {item.status == 1 ? <i className=\"icon-plus text-success\"></i> : <i className=\"icon-info-down warning\"></i>}\n                                                                                <img src={Images.IC_COIN} alt=\"\" style={{ maxWidth: 14, marginRight: 3}} />\n                                                                                {item.points}\n                                                                            </div>\n                                                                        }\n                                                                    </React.Fragment>\n                                                            }\n                                                        </React.Fragment>\n                                                )\n                                            }\n                                        </div>\n                                    </div>\n                                    <div className=\"trans-detail\">\n                                        <div>\n                                            {AppLabels.TRANS_ID}\n                                            <span>\n                                                {item.order_unique_id}\n                                            </span>\n                                        </div>\n                                        <div>\n                                            {AppLabels.STATUS}\n                                            <span className=\"text-success\">\n                                                {item.status == \"0\" ? AppLabels.TRANSACTION_STATUS_PENDING\n                                                    :\n                                                    item.source == \"8\" && item.status == \"2\" ? AppLabels.TRANSACTION_STATUS_REJECTED\n                                                        :\n                                                        item.status == \"1\" ? AppLabels.TRANSACTION_STATUS_SUCCESS : AppLabels.TRANSACTION_STATUS_FAILED\n                                                }\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/CustomComponent/ShareReferal.jsx",["1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404"],"import React from \"react\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { FacebookShareButton, WhatsappShareButton } from 'react-share';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { Utilities } from '../../Utilities/Utilities';\nimport Images from \"../../components/images\";\nimport { BecomeAffiliateModal } from \"../BecomeAffiliate\";\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\n\nvar userProfileDataFromLS = null;\n\nexport default class ShareReferal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shareURL: WSC.baseURL + \"signup/?referral=\" + WSManager.getUserReferralCode(),\n            showBecomeAM: false,\n            is_affiliate: WSManager.getProfile().is_affiliate\n        }\n        userProfileDataFromLS = WSManager.getProfile();\n\n    }\n    onCopyLink = () => {\n        Utilities.showToast(AppLabels.Link_has_been_copied, 1000);\n        this.setState({ copied: true })\n    }\n    onCopyCode = () => {\n        Utilities.showToast(AppLabels.MSZ_COPY_CODE, 1000);\n        this.setState({ copied: true })\n    }\n    callNativeShare(type, url, detail) {\n        let data = {\n            action: 'social_sharing',\n            targetFunc: 'social_sharing',\n            type: type,\n            url: url,\n            detail: detail\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n    becomeAffiliate = () => {\n        if (this.state.is_affiliate == 0 || this.state.is_affiliate == 4) {\n            this.setState({\n                showBecomeAM: true\n            })\n        } else if(this.state.is_affiliate == 1) {\n            this.props.history.push('/affiliate-program');\n        }\n    }\n\n    hideBecomeAM = (value) => {\n        this.setState({\n            showBecomeAM: false, is_affiliate: value ? value : this.state.is_affiliate\n        })\n    }\n\n    render() {\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"referral-wrap\">\n                        <div className=\"invite-text\">{AppLabels.INVITE_YOUR_FRIENDS_VIA}</div>\n                        <ul className=\"social-icons refer-css\">\n                            <li>\n                                {window.ReactNativeWebView ?\n                                    <span className=\"icon-whatsapp-ic cursor-pointer\" onClick={() => this.callNativeShare('whatsapp', this.state.shareURL, AppLabels.Your_Friend + ' ' + userProfileDataFromLS.user_name\n                                    + ' ' + AppLabels.has_referred_you_on + ' ' + WSC.AppName + \",\" +\n                                    \" \" + AppLabels.please_join_and_earn_prizes + \" : \\n\"\n                                    + this.state.shareURL + \" \\n \" + AppLabels.or + \" \\n\" + AppLabels.Join_through_the_following + \" \" +\n                                    WSManager.getUserReferralCode() + \" \" + AppLabels.WHILE_SIGNING_UP + \" \" + \"\\n\\n\" + AppLabels.Cheers + \",\\n\" + AppLabels.Team + \" \" + WSC.AppName)}>\n                                        <label>{AppLabels.INVITE_WHATSAPP}</label>\n                                    </span>\n                                    :\n                                    <React.Fragment>\n                                        <WhatsappShareButton className=\"icon-whatsapp-ic cursor-pointer\" url={\n                                            AppLabels.Your_Friend + ' ' + userProfileDataFromLS.user_name\n                                            + ' ' + AppLabels.has_referred_you_on + ' ' + WSC.AppName + \",\" +\n                                            \" \" + AppLabels.please_join_and_earn_prizes + \" : \\n\"\n                                            + this.state.shareURL + \" \\n \" + AppLabels.or + \" \\n\" + AppLabels.Join_through_the_following + \" \" +\n                                            WSManager.getUserReferralCode() + \" \" + AppLabels.WHILE_SIGNING_UP + \" \" + \"\\n\\n\" + AppLabels.Cheers + \",\\n\" + AppLabels.Team + \" \" + WSC.AppName\n                                        } />\n                                        <label>{AppLabels.INVITE_WHATSAPP}</label>\n                                    </React.Fragment>\n                                }\n\n                            </li>\n                            <li>\n                                <div>\n                                    <CopyToClipboard onCopy={this.onCopyLink} text={this.state.shareURL} className=\"cursor-pointer \">\n                                        <img alt='' src={Images.LINK_COPY} />\n                                    </CopyToClipboard>\n                                </div>\n                                <label>{AppLabels.INVITE_LINK}</label>\n                            </li>\n                            <li>\n                                {window.ReactNativeWebView ?\n                                    <span className=\"cursor-pointer\" onClick={() => this.callNativeShare('facebook', this.state.shareURL, AppLabels.Your_Friend + ' ' + userProfileDataFromLS.user_name\n                                        + ' ' + AppLabels.has_referred_you_on + ' ' + WSC.AppName + \",\" +\n                                        \" \" + AppLabels.please_join_and_earn_prizes + \" : \\n\"\n                                        + this.state.shareURL + \" \\n \" + AppLabels.or + \" \\n\" + AppLabels.Join_through_the_following + \" \" +\n                                        WSManager.getUserReferralCode() + \" \" + AppLabels.WHILE_SIGNING_UP + \" \" + \"\\n\\n\" + AppLabels.Cheers + \",\\n\" + AppLabels.Team + \" \" + WSC.AppName)}>\n                                        <img alt='' src={Images.FACE_BOOK_ICON} className=\"cursor-pointer\" />\n                                        <label>{AppLabels.INVITE_FB}</label>\n                                    </span>\n                                    :\n                                    <React.Fragment>\n\n                                        <FacebookShareButton className=\"cursor-pointer\" url={this.state.shareURL} quote={\n                                            AppLabels.Your_Friend + ' ' + userProfileDataFromLS.user_name\n                                            + ' ' + AppLabels.has_referred_you_on + ' ' + WSC.AppName + \",\" +\n                                            \" \" + AppLabels.please_join_and_earn_prizes + \" : \\n\"\n                                            + this.state.shareURL + \" \\n \" + AppLabels.or + \" \\n\" + AppLabels.Join_through_the_following + \" \" +\n                                            WSManager.getUserReferralCode() + \" \" + AppLabels.WHILE_SIGNING_UP + \" \" + \"\\n\\n\" + AppLabels.Cheers + \",\\n\" + AppLabels.Team + \" \" + WSC.AppName\n                                        }>\n                                            <img alt='' src={Images.FACE_BOOK_ICON} className=\"cursor-pointer\" />\n                                        </FacebookShareButton>\n\n                                        <label>{AppLabels.INVITE_FB}</label>\n                                    </React.Fragment>\n                                }\n                            </li>\n                        </ul>\n                        <div className={\"referal-code\"}>\n                            <div className=\"referal-body image-index\">\n                                <div className=\"invite-text\">{AppLabels.SHARE_YOUR_CODE}</div>\n                                <div className=\"invite-subtext m-t-6 m-b-15\">{AppLabels.EARN_REAL_CASH_WHEN_YOUR_FRIEND_SIGNS_UP}</div>\n                                <CopyToClipboard text={WSManager.getUserReferralCode()}>\n                                    <div className='center-alingment'>\n                                    <div className='center-alingment ifcopy'>\n                                        <i className=\"icon-copy-file\" ></i>\n                                        <h1 className={userProfileDataFromLS.is_rc_edit == 1 ? \"\" : \"cursor-pointer code-text\"}>{WSManager.getUserReferralCode()}</h1>\n                                        \n                                        <img style={{width: '25px',height: '25px',marginTop:'15px' }} onClick={() => { this.onCopyCode() }} src={(Images.COPY_CODE)}></img>\n                                        \n                                    </div>\n                                        {\n                                            process.env.REACT_APP_REFERAL_ENABLE == 1 &&\n                                            <div className=\"copy-text copy-text-btn\" onClick={() => this.props.history.push({\n                                                pathname: '/refer-friend-leaderboard',\n\n                                            })}>\n                                                <a href>{AppLabels.VIEW_LEADEBOARD}</a>\n                                            </div>\n                                        }\n                                        {Utilities.getMasterData().affiliate_module == '1' && this.state.is_affiliate != 3 && <div className=\"copy-text copy-text-btn affiliate\" >\n                                            <a onClick={this.becomeAffiliate} href>{this.state.is_affiliate == 1 ? AppLabels.AFFILIATE_PROGRAM : AppLabels.BECOME_AFFILIATE}\n                                            {(this.state.is_affiliate == 2 || this.state.is_affiliate == 4) && <OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" overlay={\n                                                    <Tooltip id=\"tooltip\" className=\"m-l-n\">\n                                                        <strong>{this.state.is_affiliate == 2 ? AppLabels.REQ_PENDING : this.state.is_affiliate == 4 ? AppLabels.REQ_CANCELED : ''} </strong>\n                                                    </Tooltip>\n                                                }>\n                                                    <i onClick={(e) => e.stopPropagation()} className={(this.state.is_affiliate == 2 ? 'icon-info-down warning' : this.state.is_affiliate == 4 ? 'icon-cross-circular reject' : '')}></i>\n                                                </OverlayTrigger>}\n                                                </a>\n                                        </div>}\n                                    </div>\n                                </CopyToClipboard>\n                            </div>\n                        </div>\n\n                        <div className={this.props.from == 1 ? \"vhide\" : \"btm-banner\"}>\n                            <div className=''>\n                                <div className='text-wrapper-animation'>{AppLabels.BRING_YOUR_FRIENDS_AND} </div>\n                            </div>\n                            <div>\n                                <div className='text-wrapper-animation-2'>{AppLabels.PLAY_FOR_FREE}</div>\n                            </div>\n\n                        </div>\n                        {\n                            this.state.showBecomeAM && <BecomeAffiliateModal {...this.props} preData={{\n                                mShow: this.state.showBecomeAM,\n                                mHide: this.hideBecomeAM\n                            }} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/CustomComponent/UserProfileHeader.jsx",["1405","1406","1407","1408","1409","1410","1411","1412","1413"],"import React from 'react';\nimport Images from '../../components/images';\nimport { ProfileVerifyStep } from './CustomComponents';\nimport { Utilities,blobToFile, isFooterTab } from '../../Utilities/Utilities'\nimport WSManager from '../../WSHelper/WSManager';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport imageCompression from 'browser-image-compression';\nimport ls from 'local-storage';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { OnlyCoinsFlow } from '../../helper/Constants';\n\nconst options = {\n    maxWidthOrHeight: 300          \n}\nlet globalThis = null;\nexport default class UserProfileHeader extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            UserProfileDetail:(this.props.UserProfileDetail || ls.get('profile')) || '',\n            profileImageFile: '',\n            selectedProfileImage: '',\n            imageUrl : ''\n        }\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    isAccountVerified = (data) => {\n        return (data.pan_verified == \"1\" && data.is_bank_verified == \"1\" && data.email_verified == \"1\" && data.phone_verfied == \"1\") ? true : false\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            UserProfileDetail: nextProps.UserProfileDetail,\n            imageUrl :  this.props.UserProfileDetail.image\n        })\n\n    }\n    \n    componentDidMount = () => {\n        this.handelCameraPermission()\n    };\n    actionPancard = () => {\n        let data = {\n            action: 'profilepic',\n            targetFunc: 'profilepic',\n        }\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(data));\n        }\n    }\n\n    handelCameraPermission() {\n        window.addEventListener('message', (e) => {\n           if (e.data.action == 'profilepic' && e.data.type == 'granted') {\n               this.upload.click()\n              // alert(e.data.action + \" \"+ e.data.type )\n\n        }\n            \n        });\n    }\n\n    onDrop(e) {\n        e.preventDefault();\n        let reader = new FileReader();\n        let mfile = e.target.files[0];\n        reader.onloadend = () => {\n            this.setState({selectedProfileImage:reader.result})\n            this.compressImage(mfile)\n        }\n        reader.readAsDataURL(mfile)\n    }\n    compressImage = async (mfile) => {\n        imageCompression(mfile, options).then((compressedFile) => {\n            this.setState({profileImageFile:blobToFile(compressedFile ? compressedFile : mfile,mfile.name)},()=>{\n                this.uploadImage()\n            })\n        })\n    }\n\n    uploadImage() {\n        this.setState({ isLoading: true });\n        var data = new FormData();\n        data.append(\"userfile\", this.state.profileImageFile);\n        data.append(\"update_image_record\",'1');\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = false;\n        xhr.addEventListener(\"readystatechange\", function () {\n            if (this.readyState == 4) {\n                if(!this.responseText){\n                    Utilities.showToast(AppLabels.SOMETHING_ERROR, 5000,Images.PAN_ICON);\n                    return;\n                }\n                var response = JSON.parse(this.responseText);\n                if (response !== '' && response.response_code == WSC.successCode) {\n                    globalThis.setState({imageUrl:response.data.file_name})\n                }\n                else {\n                    if (response.global_error && response.global_error != '') {\n                        Utilities.showToast(response.global_error, 5000);\n                    }\n                    else {\n                        var keys = Object.keys(response.error);\n                        if (keys.length > 0) {\n                            Utilities.showToast(response.global_error, 5000);\n                        }\n                    }\n                }\n\n            }\n        });\n\n        xhr.open(\"POST\", WSC.userURL + WSC.DO_UPLOAD);\n        xhr.setRequestHeader('Sessionkey', WSManager.getToken())\n        xhr.send(data);\n    }\n\n    render() {\n        globalThis = this;\n        \n        let { IsImgEditable, EditUserNameModalShow, IsProfileVerifyShow, goToVerifyAccount, StepList,accVerified } = this.props;\n        let { imageUrl, selectedProfileImage, UserProfileDetail } = this.state;\n        return (\n            <div className={\"user-profile-section\" + (!isFooterTab('my-profile') ? ' pt-0' : '')}>\n                <div className=\"overlay-white-circle\"></div>\n                <div className=\"text-center profile-img-section\">\n                    <figure>\n                        <input id=\"myInput\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            ref={(ref) => this.upload = ref}\n                            style={{ display: 'none' }}\n                            onChange={this.onDrop.bind(this)}\n                        />\n                        <img src={imageUrl!==''? Utilities.getThumbURL(imageUrl): \n                        (selectedProfileImage!==''?selectedProfileImage: Images.DEFAULT_AVATAR)} alt=\"\" />\n                    </figure>\n                    {IsImgEditable &&\n                        <span id=\"uploadImage\" onClick={() => window.ReactNativeWebView ? this.actionPancard() : this.upload.click()} className=\"change-img\">\n                            <span className=\"icon-wrapper\"><i className=\"icon-camera-fill\"></i></span>\n                        </span>\n                    }\n                </div>\n                <div className=\"user-name\">\n                    {UserProfileDetail.first_name &&\n                        (UserProfileDetail.first_name + ' ' + (UserProfileDetail.last_name || ''))                       \n                    }\n                </div>\n                <div className=\"user-profile-name\">\n                    {UserProfileDetail.user_name}\n                    <a href id=\"changeUserName\" onClick={EditUserNameModalShow}  className=\"editUserName\" >\n                        <i className=\"icon-edit\"></i>\n                    </a>\n                </div>\n                {IsProfileVerifyShow &&\n                    <div>\n                        <ProfileVerifyStep OnlyCoinsFlow = {OnlyCoinsFlow} goToVerifyAccount={goToVerifyAccount} StepList={StepList} accVerified={accVerified} />\n                    </div>\n                }\n            </div>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/CustomComponent/CustomComponents.jsx",["1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449"],"import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport Skeleton from \"react-loading-skeleton\";\nimport Moment from \"react-moment\";\nimport Slider from \"react-slick\";\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport {EnableBuyCoin} from \"../../helper/Constants\";\n\nexport function LobbyShimmer () {\n    return (\n        <div className=\"collection-list\">\n            <div className=\"display-table row\">\n                <div className=\"display-table-cell text-center v-mid\">\n                    <Skeleton width={54} height={54} />\n                </div>\n                <div className=\"display-table-cell text-center v-mid pt-2\">\n                    <Skeleton height={8} />\n                    <Skeleton height={6} width={'70%'} />\n                </div>\n                <div className=\"display-table-cell text-center v-mid\">\n                    <Skeleton width={54} height={54} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport function MomentDateComponent({ data }) {\n    let date = data.date;\n    let format = data.format;\n    return (date ? <Moment date={Utilities.getUtcToLocal(date)} format={format} /> : '')\n}\n\nexport function ProfileVerifyStep({ OnlyCoinsFlow, goToVerifyAccount, StepList, accVerified }) {\n    return (\n        <React.Fragment>\n            {\n                StepList && <div className=\"profile-verify-block\">\n                    <div className=\"profile-verify-body\">\n                        {\n                            StepList.map((item, key) => {\n                                return (\n                                    <React.Fragment key={key}>\n                                        <div className={\"verify-step\" + (item.status == 1 ? ' verified-step' : '')}>\n                                            <span>\n                                                <img src={item.icon} alt=\"\" />\n                                                {\n                                                    item.status == 1 ?\n                                                        <img src={Images.TICK_IC} alt=\"\" className=\"step-status\" />\n                                                        :\n                                                        (item.status == 2 ?\n                                                            <img src={Images.REJECTED_IC} alt=\"\" className=\"step-status\" />\n                                                            :\n                                                            ((item.status == 0 && item.image) ?\n                                                                <img src={Images.PENDING_IC} alt=\"\" className=\"step-status\" />\n                                                                :\n                                                                '')\n                                                        )\n                                                }\n                                            </span>\n                                            <div className={\"step-name\" + (item.status == 1 ? ' step-name-black' : '')}>{item.name}</div>\n                                        </div>\n                                        {(StepList.length - 1) != key &&\n                                            <i className=\"icon-next-arrow next-step\"></i>\n                                        }\n                                    </React.Fragment>\n                                )\n                            })\n\n                        }\n                    </div>\n                    <ProfileVerifySuggestion OnlyCoinsFlow={OnlyCoinsFlow} goToVerifyAccount={goToVerifyAccount} accVerified={accVerified} />\n                </div>\n            }\n        </React.Fragment>\n    )\n}\n\nexport function ProfileVerifySuggestion({ OnlyCoinsFlow, goToVerifyAccount, isFrom, accVerified }) {\n    return (\n        <div className=\"profile-verify-footer-block\">\n            <div className=\"display-table-cell\">\n                {isFrom === 'wallet' ?\n                    AppLabels.VERIFY_YOUR_ACCOUNT_TO_ACTIVATE_WITHDRAW_MONEY_SERVICE\n                    :\n                    accVerified ?\n                        (AppLabels.YOUR_ACCOUNT_IS_VERIFIED + AppLabels.YOUR_ACCOUNT_IS_VERIFIED1)\n                        :\n                        (OnlyCoinsFlow == 1 || OnlyCoinsFlow == 2) ? AppLabels.VERIFY_YOUR_ACCOUNT : AppLabels.VERIFY_YOUR_DETAILS_TO_ENJOY_SEAMLESS_WITHDRAWLS\n                }\n            </div>\n            <div className=\"text-right display-table-cell\">\n                <Button className=\"button button-primary-rounded-sm\" onClick={goToVerifyAccount}>{accVerified ? AppLabels.VIEW : AppLabels.VERIFY}</Button>\n            </div>\n        </div>\n    )\n}\n\nexport function UserWinning({ winningAmt, goToVerifyAccount, IsProfileVerifyShow }) {\n    return (\n        <div className=\"user-winning-section\">\n            <div className={\"user-winning-body\" + (IsProfileVerifyShow ? ' border-bottom-0' : '')}>\n                <div className=\"data-count-block display-table-cell\">\n                    <i className=\"icon-positioned-left icon-badge\"></i>\n                    <div className=\"count text-capitalize\">{AppLabels.YOUR_WINNINGS}</div>\n                    <div className=\"count-for\">{AppLabels.MONEY_YOU_WON}</div>\n                </div>\n                <div className={\"display-table-cell winning-amt\" + (winningAmt.length > 7 ? ' winning-amt-sm' : '')}>{Utilities.getMasterData().currency_code} {winningAmt} </div>\n            </div>\n            {!IsProfileVerifyShow &&\n                <ProfileVerifySuggestion goToVerifyAccount={goToVerifyAccount} isFrom={'wallet'} />\n            }\n        </div>\n    )\n}\n\nexport function DataCountBlock({ TextRight, item, onClick = () => { }, countInt, showPendingIcon,onBuyCoins = () => { }}) {\n    let isCoin = item.isCoin;\n    let CoachMark = item.CoachMark;\n    return (\n        <div className={\"data-block-wrap\" + (showPendingIcon ? ' data-pending-block' : '') + (isCoin ? ' m-t ' : '')} onClick={isCoin ? () => { } : onClick}>\n            <div className={\"data-count-block \" + (TextRight ? 'text-right' : '')}>\n                <i className={\"icon-positioned-left \" + (item.icon)}></i>\n                <div className={\"count\" + (countInt && item.count.length > 9 ? ' count-sm' : '')}>\n                    {isCoin && <img className=\"coin-img\" src={Images.IC_COIN} alt=\"\" />}{item.count || '0'}\n                </div>\n                <div className=\"count-for\">{item.count_for}</div>\n                {    \n                    isCoin && onBuyCoins && EnableBuyCoin &&\n                    <Button className=\"button button-primary-rounded-xs button-abs\" onClick={(e)=>onBuyCoins(e)}>\n                        {AppLabels.BUY}\n                    </Button>\n                }\n                {\n                    isCoin && \n                    <Button className={\"button button-primary-rounded-xs button-abs\" + (CoachMark ? \" disabled-touch\" : \"\")} onClick={onClick}>{item.count > 0 ? AppLabels.REDEEM : (CoachMark ? AppLabels.REDEEM : AppLabels.Earn)}</Button>\n                }\n                {!isCoin && <img src={Images.PENDING_IC} alt=\"\" className=\"pending-status\" />}\n            </div>\n        </div>\n    )\n}\n\nexport function VerifyBlock({ item, openModalFor }) {\n    return (\n        <div className={\"verify-block\" + (item.status == 1 ? ' verify-block-success' : '') + (item.get_bonus != '' ? ' display-block' : '') + (item.blockAction && item.status == \"1\" ? ' cursor-pointer' : '') + (item.label === 'Email' ? ' email-block' : '')} onClick={item.blockAction && item.status == \"1\" ? openModalFor : ''} >\n            \n            <div className=\"verify-block-content\">\n                {item.labelLg == '' ?\n                    <React.Fragment>\n                        <div className={\"info-label\" + (item.value ? '' : ' info-label-lg')}>{item.label}</div>\n                        {item.value && item.value != null && item.value != '' &&\n                            <div className=\"info-value\">{item.value}</div>                            \n                        }\n                    </React.Fragment>\n                    :\n                    item.status == \"1\" ?\n                        <React.Fragment>\n                            <div className={\"info-label\" + (item.value ? '' : ' info-label-lg')}>{item.labelLg}</div>\n                            <div className=\"info-value\">{item.value}</div>\n                        </React.Fragment>\n                        :\n                        <div className={\"info-label-xlg\" + ((item.image && item.status == 0) ? ' label-v-mid' : '')}>{item.labelLg}</div>\n                }\n            </div>\n            <div>{console.log('get_bonus',item.get_bonus)}</div>\n            {\n                item.status == 1 ?\n                    <div className=\"verify-block-status\">\n                        <img src={Images.TICK_IC} alt=\"\" />\n                    </div>\n                    : (item.status == 0 || item.status == 2) ?\n                        <React.Fragment>\n\n                            {(item.image && item.status == 0) ?\n                                <div className=\"verify-block-status\">\n                                    <span>{AppLabels.VERIFICATION_PENDING}</span>\n                                    <img src={Images.PENDING_IC} alt=\"\" />\n                                </div>\n                                :\n\n                                (item.get_bonus == '' || item.get_bonus == '0') ?\n                                    <div className=\"verify-block-status\">\n                                        <Button id={'btn' + item.label} className=\"button button-primary-rounded-sm\" onClick={openModalFor}>{AppLabels.VERIFY}</Button>\n                                    </div>\n                                    :\n                                    <div onClick={openModalFor} className=\"bonus-banner\">\n                                        <div className=\"overlay-banner\"></div>\n                                        {AppLabels.VERIFY_GET}\n                                        <i className=\"icon-bonus\"></i>\n                                        <span>{item.get_bonus}</span>\n                                    </div>\n                            }\n                        </React.Fragment>\n                        : ''\n            }\n        </div>\n    )\n}\n\nexport function UserProfile({ IsProfileVerifyShow, IsImgEditable, EditUserNameModalShow, goToVerifyAccount, StepList }) {\n    return (\n        <div className=\"user-profile-section\">\n            <div className=\"text-center profile-img-section\">\n                <figure>\n                    <img src={Images.USERIMG} alt=\"\" />\n                </figure>\n                {IsImgEditable &&\n                    <span className=\"change-img\">\n                        <i className=\"icon-camera-fill\"></i>\n                    </span>\n                }\n            </div>\n            <div className=\"user-name\">Mark Zuckerberg</div>\n            <div className=\"user-profile-name\">\n                mark.zuckerberg\n                <a href id=\"changeUserName\" onClick={EditUserNameModalShow}>\n                    <i className=\"icon-edit\"></i>\n                </a>\n            </div>\n            {IsProfileVerifyShow &&\n                <div>\n                    <ProfileVerifyStep goToVerifyAccount={goToVerifyAccount} StepList={StepList} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport function LobbyBannerSlider({ BannerList, redirectLink }) {\n    var settings = {\n        touchThreshold: 10,\n        infinite: true,\n        slidesToScroll: 1,\n        slidesToShow: 1,\n        variableWidth: false,\n        initialSlide: 0,\n        dots: false,\n        autoplay:true,\n        autoplaySpeed:5000,\n        centerMode: BannerList.length == 1 ? false : true,\n        responsive: [\n            {\n                breakpoint: 500,\n                settings: {\n                    className: \"center\",\n                    centerPadding: \"20px\",\n                }\n\n            },\n            {\n                breakpoint: 360,\n                settings: {\n                    className: \"center\",\n                    centerPadding: \"15px\",\n                }\n\n            }\n        ]\n    };\n\n    return (\n        <div className={BannerList.length == 1 ? 'single-banner-wrap' : ''}>\n            <Slider {...settings}>\n                {\n                    BannerList.map((item, index) => {\n                        let bannerType = item.banner_type_id;\n                        let currenyType = item.currency_type;\n                        return (\n                            <div className=\"banner-container\" key={index}>\n                                {\n                                    (bannerType == '1' || bannerType == '6' || bannerType == '4')\n                                        ?\n                                        <div className='banner-item'>\n                                            <img alt='' onClick={() => redirectLink(item)} src={Utilities.getBannerURL(item.image)} />\n                                        </div>\n                                        :\n                                        <div className='banner-item'>\n                                            {\n                                                bannerType == '2' && <img alt='' className='banner-logo' src={Images.REFER_FRIEND_SM} />\n                                            }\n                                            {\n                                                bannerType == '3' && <img alt='' className='banner-logo' src={Images.BANNER_ADD_FUND} />\n                                            }\n                                            <div onClick={() => redirectLink(item)} className='info-container'>\n                                                <div className='title-style'>{item.name}</div>\n                                                <div className='message-style'>\n                                                    {bannerType == '2' ? AppLabels.GET + ' ' : bannerType == '3' ? ' ' + AppLabels.Earn + ' ' : ''}\n                                                    <span className='highlighted-text'>{currenyType == 'INR' ? (Utilities.getMasterData().currency_code) : (currenyType == 'Bonus' ? <i className=\"icon-bonus bonus-ic\" /> : currenyType == 'Coin' ? <img className=\"coin-img\" src={Images.IC_COIN} alt=\"\" /> : '')}\n                                                        {item.amount}</span>\n                                                    {bannerType == '2' ? ' ' + AppLabels.on_your_friends_signup : bannerType == '3' ? ' ' + AppLabels.on_your_first_cash_contest : ''}\n                                                </div>\n                                            </div>\n                                        </div>\n                                }\n                            </div>\n                        );\n                    })\n                }\n            </Slider>\n        </div>\n    )\n}\n\nclass CustomComponents extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: false,\n            tooltipOpen: false,\n            emailID: ''\n        };\n    }\n\n    render() {\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"container-fluid view-bg-color container-bg-white\">\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nCustomComponents.propTypes = {};\n\nexport { CustomComponents };","/var/www/html/framework/frontend/src/Component/CustomComponent/NoDataView.jsx",[],"/var/www/html/framework/frontend/src/Component/CustomComponent/YouRInQueue.jsx",[],"/var/www/html/framework/frontend/src/Component/CustomComponent/MatchInfo.jsx",["1450","1451","1452","1453","1454","1455","1456","1457"],"import React from \"react\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport { MomentDateComponent } from \"./CustomComponents\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\n\nexport default class MatchInfo extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { item, status, timerCallback, onlyTimeShow } = this.props;\n        let lengthFixture = item.match_list ? item.match_list.length : 0\n        let match_item = lengthFixture >= 1 ? item.match_list[0] : item\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"match-info-section\" + (onlyTimeShow ? ' match-time-only' : '')}>\n                        {\n                            ((Constants.SELECTED_GAMET == Constants.GameType.Pred || lengthFixture <= 1) && !onlyTimeShow) && Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                            <div className=\"section-left\">\n                                <img src={Utilities.teamFlagURL(match_item.home_flag)} alt=\"\" className=\"home-team-flag\" />\n                            </div>\n                        }\n                        <div className=\"section-middle\">\n                            {\n                                ((Constants.SELECTED_GAMET == Constants.GameType.Pred) || Constants.SELECTED_GAMET != Constants.GameType.MultiGame)\n                                    ?\n                                    !onlyTimeShow &&\n                                    <div>\n                                        <span className=\"team-home\">{match_item.home}</span>\n                                        <span className=\"vs-text\">{AppLabels.VERSES}</span>\n                                        <span className=\"team-away\">{match_item.away}</span>\n                                    </div>\n                                    :\n\n                                    <span className=\"team-home\">\n                                        {item.collection_name}\n                                    </span>\n                            }\n                            {\n                                status !== Constants.CONTEST_LIVE && <div className=\"match-timing\">\n                                    {\n\n                                        Utilities.showCountDown(item) && status !== Constants.CONTEST_COMPLETED ?\n                                            <div className=\"countdown time-line\">\n                                                {item.game_starts_in && (Utilities.minuteDiffValue({ date: item.game_starts_in }) <= 0) && <CountdownTimer timerCallback={timerCallback} deadlineTimeStamp={item.game_starts_in} />}\n                                            </div> :\n                                            <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                    }\n                                </div>\n                            }\n                        </div>\n                        {\n                            ((Constants.SELECTED_GAMET == Constants.GameType.Pred || lengthFixture <= 1) && !onlyTimeShow) && Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                            <div className=\"section-right\">\n                                <img src={Utilities.teamFlagURL(match_item.away_flag)} alt=\"\" className=\"away-team-flag\" />\n                            </div>\n                        }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n\n}","/var/www/html/framework/frontend/src/Component/CustomComponent/MatchCard.jsx",["1458","1459","1460","1461","1462","1463","1464","1465"],"import React from \"react\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport MatchInfo from \"./MatchInfo\";\nimport { Utilities } from \"../../Utilities/Utilities\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MATCH_TYPE ,SELECTED_GAMET} from \"../../helper/Constants\";\nimport * as Constants from \"../../helper/Constants\";\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport Images from \"../../components/images\";\n\nexport default class MatchCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sports_id: Constants.AppSelectedSport,\n            timerCallback : this.props.timerCallback\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps != this.props){\n            this.setState({\n                timerCallback : nextProps.timerCallback\n            })\n        }\n\n    }\n    \n\n    render() {\n        const { item, gotoDetails,gotoLeaderBoard,isFromFreeToPlayLandingPage} = this.props;\n        let sponserImage = item.sponsor_logo && item.sponsor_logo!=null ? item.sponsor_logo : 0\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"fixture-card-wrapper cursor-pointer \" + (this.props.fixtureCardLg ? ' fixture-card-wrapper-lg' : '')} onClick={(event) => gotoDetails(item, event)}>\n                        <div className=\"fixture-card-body display-table\">\n                            {\n                                item.custom_message != '' && item.custom_message != null &&\n                                <div className=\"announcement-custom-msg-wrapper\">\n                                    <OverlayTrigger trigger={['click']} placement=\"left\" overlay={\n                                            <Tooltip id=\"tooltip\" className=\"tooltip-featured\">\n                                                 <strong>{item.custom_message} </strong> \n                                            </Tooltip>\n                                        }>\n                                        <i className=\"icon-megaphone\" onClick={(e)=>e.stopPropagation()}></i>\n                                    </OverlayTrigger>\n                                </div>\n                            \n                            }\n\n                            <MatchInfo item={item} timerCallback={this.state.timerCallback} />\n                        </div>\n                        <div className={\"fixture-card-footer\" + (item.league_name ? '' : ' justify-center') +(SELECTED_GAMET == Constants.GameType.Free2Play ? ' height-league-card' :'')}>\n                            {item.league_name &&\n                                <div className=\"match-type\">\n                                    {item.league_name || item.league_abbr} \n                                    {this.state.sports_id === '7' &&\n                                        <span> - {MATCH_TYPE[item.format]}</span>\n                                    }\n                                </div>\n                            }\n                            {\n                                process.env.REACT_APP_LOBBY_WINNING_ENABLE == 1 &&\n                                <div className=\"winning-section\">\n                                { SELECTED_GAMET == Constants.GameType.Free2Play  ? \n                                    \n                                    \n                                        window.ReactNativeWebView  ?\n                                        <a \n                                            href\n                                            onClick={(event)=>Utilities.callNativeRedirection(Utilities.getValidSponserURL(item.sponsor_link,event))}\n                                            className=\"attached-url\">\n                                            <img alt='' className=\"lobby_sponser-image\" style={{resizeMode: 'contain'}} src={sponserImage == 0 ?Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)}/>\n                                        </a>\n                                    \n                                        :\n                                        <a \n                                            href={Utilities.getValidSponserURL(item.sponsor_link)}\n                                            onClick={(event)=>event.stopPropagation()}\n                                            target='__blank'\n                                            className=\"attached-url\">\n                                            <img alt='' className=\"lobby_sponser-image\" style={{resizeMode: 'contain'}} src={sponserImage == 0 ?Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)}/>\n                                        </a>\n                                    \n                                :\n                                item.total_prize_pool > 0 ?\n                                        <div className=\"collection-list-prize-pool\">{AppLabels.WINNINGS}&nbsp;<span> {Utilities.getMasterData().currency_code + Utilities.kFormatter(item.total_prize_pool)}</span></div> : ''\n                                    \n                                }\n                               </div>\n                            }\n                           \n                        </div>\n                        {\n                            SELECTED_GAMET == Constants.GameType.Free2Play && !isFromFreeToPlayLandingPage &&\n                            <div className =\"free-to-play-info no-margin\" onClick={(event) => gotoLeaderBoard(item, event)}>\n                                <img alt='' src={Images.HALL_OF_FAME_SMALL_ICON} className=\"hall-of-fame-img\"/>\n                                  <div  className=\"text_hall_of_fame\">\n                                    {AppLabels.GAIN_POINTS}\n                                </div>\n                                <img alt='' src={Images.IC_INFO} className=\"icon-info\"></img>\n\n                                   </div>\n\n\n                        }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/CustomComponent/SelectLanguage.jsx",["1466","1467","1468"],"import React from 'react';\nimport { changeLanguageString } from \"../../helper/AppLabels\";\nimport { withTranslation } from \"react-i18next\";\nimport { Utilities } from '../../Utilities/Utilities';\nimport LanguagePopup from \"../../Modals/LanguagePopup\";\nimport WSManager from \"../../WSHelper/WSManager\";\n\nclass SelectLanguage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showLanguagePopup: false,\n            languageList: Utilities.getMasterData().lang_list,\n            defaultLang: WSManager.getAppLang() || Utilities.getMasterData().default_lang\n        }\n    }\n\n    componentDidMount() {\n        if (WSManager.getAppLang() == null) {\n            WSManager.setAppLang(this.state.defaultLang);\n        }\n        changeLanguageString();\n    }\n\n    handleChange = (selectedLang) => {\n        if (this.props.i18n.language != selectedLang.value) {\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale:selectedLang.value,\n                    targetFunc:'handleLanguageChange'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n            this.props.i18n.changeLanguage(selectedLang.value);\n            WSManager.setAppLang(selectedLang.value);\n            changeLanguageString();\n            window.location.reload();\n        }\n    };\n\n    LanguagePopupShow = () => {\n        this.setState({\n            showLanguagePopup: true\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    LanguagePopupHide = () => {\n        this.setState({\n            showLanguagePopup: false,\n        });\n    }\n    render() {\n        const {\n            showLanguagePopup,\n            languageList,\n            defaultLang\n        } = this.state;\n\n        const { isBottomFixed, boxView } = this.props;\n\n        return (\n            <div>\n                {languageList.length >= 2 &&\n                    <div className={\"language-wrapper\" + (isBottomFixed ? ' language-btm-fixed' : '') + (boxView ? ' language-box-view' : '') + (languageList.length == 2 ? ' two-lang-wrap' : '')}>\n                        <ul>\n                            {\n                                languageList && languageList.slice(0, 3).map((item, idx) => {\n                                    return (\n                                        <React.Fragment key={idx}>\n                                            {idx < 2 &&\n                                                <li className={item.value == defaultLang ? 'active' : ''}>\n                                                    <a href\n                                                        onClick={() => this.handleChange(item)}\n                                                    >{item.label}</a>\n                                                </li>\n                                            }\n                                            {\n                                                idx === 2 &&\n                                                <li>\n                                                    <a href onClick={() => this.LanguagePopupShow()}>\n                                                        <i className=\"icon-more rotate-90deg\"></i>\n                                                    </a>\n                                                </li>\n                                            }\n                                        </React.Fragment>\n                                    )\n                                })\n                            }\n                        </ul>\n                    </div>\n                }\n                {showLanguagePopup &&\n                    <LanguagePopup {...this.props} IsLanguagePopupShow={showLanguagePopup} IsLanguagePopupHide={this.LanguagePopupHide} LanguageList={languageList} DefaultLanguage={defaultLang} />\n                }\n            </div>\n        );\n    }\n}\n\nexport default withTranslation()(SelectLanguage)","/var/www/html/framework/frontend/src/Component/CustomComponent/CustomPhoneInput.jsx",["1469"],"import React from 'react';\nimport ReactPhoneInput from 'react-phone-input-2';\nimport { Row, Col } from 'react-bootstrap';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\n\nexport default class CustomPhoneInput extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            inputFocus: false,\n            value: '',\n            data: ''\n        };\n    }\n\n    onFocusChange = (focus) => {\n        this.setState({\n            inputFocus: focus\n        })\n    }\n\n    handleChange = (value, data) => {\n        if (value.startsWith('+' + Constants.DEFAULT_COUNTRY_CODE)) {\n            if (value.length <= 13) {\n                this.setState({ value: value, data: data }, () => {\n                    this.props.handleOnChange(this.state.value, this.state.data)\n                })\n            }\n            else {\n                this.setState({ value: this.state.value, data: this.state.data }, () => {\n                    this.props.handleOnChange(this.state.value, this.state.data)\n                })\n            }\n        }\n        else {\n            this.setState({ value: this.state.value, data: this.state.data }, () => {\n                this.props.handleOnChange(this.state.value, this.state.data)\n            })\n        }\n    }\n\n    render() {\n        let phoneValue = this.props.phone ? this.props.phone : ('+' + Constants.DEFAULT_COUNTRY_CODE)\n        return (\n            <div className={\"phone-input-section\" + (this.props.isFormLeft ? ' phone-input-from-left' : '') + (this.state.inputFocus ? ' phone-input-focus' : '')}>\n                {!this.props.isLabelHide &&\n                    <Row>\n                        <Col xs={12}>\n                            <div className=\"phone-no-label text-center\">\n                                {AppLabels.ENTER_MOBILE_NUMBER}\n                            </div>\n                        </Col>\n                    </Row>\n                }\n                {this.props.isFormLeft &&\n                    <Row>\n                        <Col xs={12}>\n                            <div className=\"phone-no-label text-center\">\n                                {AppLabels.MOBILE_NUMBER}\n                            </div>\n                        </Col>\n                    </Row>\n                }\n                <ReactPhoneInput\n                    inputExtraProps={{\n                        name: 'phone',\n                        required: true\n                    }}\n                    countryCodeEditable={false}\n                    autoFormat={false}\n                    enableSearchField={true}\n                    preferredCountries={[Constants.DEFAULT_COUNTRY]}\n                    value={phoneValue}\n                    onChange={this.props.handleOnChange}\n                    onFocus={() => this.onFocusChange(true)}\n                    onBlur={() => this.onFocusChange(false)}\n                    disableDropdown={process.env.REACT_APP_ONLY_ONE_COUNTRY_ENABLE == 1}\n\n                />\n            </div>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/views/CountDownTimer.jsx",[],"/var/www/html/framework/frontend/src/components/CustomHeader.jsx",["1470","1471","1472","1473","1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493"],"import React from 'react';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities } from '../Utilities/Utilities';\nimport { MatchInfo, MomentDateComponent } from \"../Component/CustomComponent\";\nimport { getUserProfile, getUserBalance, getAppNotificationCount, getDailyCoins, getSpinTheWheelData } from \"../WSHelper/WSCallings\";\nimport Banner from '../Modals/Banner';\nimport MyAlert from '../Modals/MyAlert';\nimport Images from './images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as Constants from \"../helper/Constants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { RefferCoachMark, SpeenWheelModal } from '../Modals';\nimport OpenSourceUrl from \"../Component/OpenPredictorModule/OpenSourceUrl\";\n\nvar lastBlanceCallDate = {};\nvar globalThis = null;\n\nexport default class CustomHeader extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mTotalBalance: \"\",\n            showResetAlert: false,\n            message: AppLabels.RESET_ACTION,\n            notificationData: Constants.NOTIFICATION_DATA,\n            allowCollection: Utilities.getMasterData().allow_collection,\n            showTooltip: true,\n            lineupArr: [],\n            showDCBM: false,\n            showCoinCM: false,\n            showRCM: false,\n            refRCMData: '',\n            dailyData: '',\n            isBannerShow: false,\n            userCoinBalnc: (WSManager.getBalance().point_balance || 0),\n            selectedGameType: WSManager.getPickedGameType(),\n            showRSuccess: false,\n            redeemData: '',\n            showRedeemCM: false,\n            DailyCheckinBonus: null,\n            CoinCoachMarks: null,\n            RedeemSuccess: null,\n            ReedemCoachMarks: null,\n            SHCoachMarks: null,\n            showSHSCM: false,\n            NEWP: false,\n            NPMSG: '',\n            sourceUrlShow: false,\n            sourceUrlData: '',\n            isFilterselected: false,\n            filterBy: '',\n            showSpinWheel: false,\n            spinWheelData: '',\n            LobyyData: {\n                home_flag: '',\n                away_flag: '',\n                home: '--',\n                away: '--',\n                collection_name: '--',\n                game_starts_in: 0,\n                today: 0,\n                season_scheduled_date: 0,\n            }\n        }\n    }\n\n    componentDidMount() {  \n\n        if (Utilities.getMasterData().allow_coin == '1') {\n            import('../Component/CoinsModule').then(CM => {\n                if (CM.EarnCoins) {\n                    this.setState({\n                        DailyCheckinBonus: CM.DailyCheckinBonus,\n                        CoinCoachMarks: CM.CoinCoachMarks,\n                        RedeemSuccess: CM.RedeemSuccess,\n                        ReedemCoachMarks: CM.ReedemCoachMarks\n                    });\n                }\n            });\n        }\n\n        if (Constants.IS_SPORTS_HUB) {\n            import('../Component/SportsHub').then(CM => {\n                if (CM.SHCoachMarks) {\n                    this.setState({\n                        SHCoachMarks: CM.SHCoachMarks\n                    });\n                }\n            });\n        }\n\n        if (WSManager.loggedIn()) {\n            var page_pathname = window.location.pathname;\n            if(page_pathname === \"/add-funds\") {\n            \n                setTimeout(() => {\n                    this.callUserBalanceApi();\n                }, 500);\n            }\n            if (!WSManager.getProfile().user_setting) {\n                this.callGetMyProfileApi();\n            } else {\n                this.showWhatsNew(WSManager.getProfile());\n            }\n            setTimeout(() => {\n                this.getAPiNotificationCount();\n            }, 2500);\n            let lsBannerData = WSManager.getBannerData();\n            let mdBannerData = Utilities.getMasterData().banner;\n            if (mdBannerData && (!lsBannerData  || lsBannerData.app_banner_id !=  mdBannerData.app_banner_id)) {\n                this.isDisplayBanner();\n            }\n            if(Utilities.getMasterData().allow_spin == 1){\n                let todayString = new Date().toDateString();\n                if (WSManager.getWheelData().day_string !== todayString) {\n                    this.getSpinWheelData();\n                }\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.LobyyData && nextProps.LobyyData && this.state.LobyyData.collection_name != nextProps.LobyyData.collection_name) {\n            this.setState({ LobyyData: nextProps.LobyyData })\n        }\n    }\n\n    getAPiNotificationCount() {\n\n        let minuts = Constants.NOTIFICATION_DATA.date ? Utilities.minuteDiffValue(Constants.NOTIFICATION_DATA) : 0;\n        if (this.props.HeaderOption.notification && (minuts === 0 || minuts > 0.7)) {\n            getAppNotificationCount().then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    if (typeof responseJson.data != \"undefined\") {\n                        let obj = { date: Date.now(), count: responseJson.data }\n                        Constants.setValue.setNotificationCount(obj);\n                        this.setState({ notificationData: obj })\n                    }\n                }\n            })\n        }\n    }\n\n    static changeFilter = (value,filterBy) => {\n        globalThis.setState({ \n            isFilterselected: value,\n            filterBy : filterBy\n        })\n    }\n\n    callGetMyProfileApi() {\n        let param = {\n        }\n\n        getUserProfile(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                WSManager.setProfile(responseJson.data);\n                this.setState({ profile: responseJson.data });\n                this.showWhatsNew(responseJson.data);\n            }\n        })\n    }\n\n    callUserBalanceApi() {\n        if (!lastBlanceCallDate.date || Utilities.minuteDiffValue(lastBlanceCallDate) > 1) {\n            lastBlanceCallDate['date'] = Date.now();\n            getUserBalance().then((responseJson) => {\n                if (responseJson && responseJson.response_code == WSC.successCode) {\n                    WSManager.setAllowedBonusPercantage(responseJson.data.allowed_bonus_percantage)\n                    WSManager.setBalance(responseJson.data.user_balance);\n                    let tempBalance = Utilities.getTotalUserBalance((responseJson.data.user_balance.bonus_amount || 0), (responseJson.data.user_balance.real_amount || 0), (responseJson.data.user_balance.winning_amount || 0))\n                    this.setState({ mTotalBalance: Utilities.kFormatter(tempBalance), userCoinBalnc: responseJson.data.user_balance.point_balance });\n                }\n            })\n        } else {\n            let lsbalance = WSManager.getBalance() || {};\n            let tempBalance = Utilities.getTotalUserBalance((lsbalance.bonus_amount || 0), (lsbalance.real_amount || 0), (lsbalance.winning_amount || 0))\n            this.setState({ mTotalBalance: Utilities.kFormatter(tempBalance), userCoinBalnc: (lsbalance.point_balance || 0) });\n        }\n    }\n\n    getDailyStreakCoins = () => {\n        let param = {}\n        getDailyCoins(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({ dailyData: responseJson.data, showDCBM: responseJson.data.allow_claim === 1 })\n                WSManager.setDailyData(responseJson.data)\n            }\n        })\n    }\n\n    getSpinWheelData = () => {\n        let param = {}\n        getSpinTheWheelData(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    spinWheelData: responseJson.data, showSpinWheel: responseJson.data.claimed == 0\n                })\n            }\n        })\n    }\n\n    showWhatsNew = (data) => {\n        let isSporthub = Constants.IS_SPORTS_HUB ? Constants.SELECTED_GAMET : true;\n        const {\n            HeaderOption,\n        } = this.props;\n        if (!HeaderOption.isOnb && isSporthub && Utilities.getMasterData().allow_coin !== \"0\" && !WSManager.getShareContestJoin()) {\n            if (data.user_setting && data.user_setting.earn_coin == \"0\") {\n                this.props.history.push({ pathname: '/what-is-new', state: { isFirst: true } })\n            } else {\n                if(Utilities.getMasterData().allow_spin != 1){\n                    let todayString = new Date().toDateString();\n                    if (WSManager.getDailyData().day_string !== todayString) {\n                        this.getDailyStreakCoins();\n                    } else {\n                        this.setState({ dailyData: WSManager.getDailyData(), showDCBM: WSManager.getDailyData().allow_claim === 1 })\n                    }\n                }\n            }\n        }\n    }\n\n    hideSpinWheel = () => {\n        this.setState({ showSpinWheel: false }) \n    }\n\n    static showDailyStreak = () => {\n        globalThis.setState({ showDCBM: true })\n    }\n\n    hideDailyCheckIn = () => {\n        this.setState({ showDCBM: false })\n    }\n\n    static showCoinCM = () => {\n        globalThis.setState({ showCoinCM: Constants.IS_SPORTS_HUB ? false : true })\n    }\n\n    hideCoinCM = () => {\n        this.setState({ showCoinCM: false })\n    }\n\n    static showSHSCM = () => {\n        globalThis.setState({ showSHSCM: true })\n    }\n\n    hideSHSCM = () => {\n        this.setState({ showSHSCM: false })\n\n    }\n    static showRCM = (data) => {\n        if (WSManager.getProfile().user_setting && WSManager.getProfile().user_setting.refer_a_friend == \"0\") {\n            globalThis.setState({ showRCM: true, refRCMData: data })\n        }\n\n    }\n\n    hideRCM = () => {\n        this.setState({ showRCM: false })\n    }\n\n    static showUrlModal=(data)=>{\n        globalThis.setState({\n            sourceUrlShow: true,\n            sourceUrlData: data\n        })\n    }\n\n    hideUrmModal=()=>{\n        this.setState({\n            sourceUrlShow: false\n        })\n    }\n    \n    static showRSuccess = (value) => {\n        globalThis.setState({ showRSuccess: true, redeemData: value })\n    }\n\n    hideRSuccess = () => {\n        this.setState({ showRSuccess: false })\n    }\n\n    static showRedeemCM = () => {\n        if (!globalThis.state.showDCBM && !globalThis.state.showCoinCM && !globalThis.state.showRSuccess && !globalThis.state.isBannerShow) {\n            globalThis.setState({ showRedeemCM: true })\n        }\n    }\n\n    hideRedeemCM = () => {\n        this.setState({ showRedeemCM: false });\n    }\n\n    static updateCoinBalance = (bal) => {\n        globalThis.setState({ userCoinBalnc: bal })\n    }\n\n    isDisplayBanner() {\n        let masterData = Utilities.getMasterData();\n        if (masterData.banner) {\n            this.setState({ isBannerShow: true })\n        } else {\n            this.setState({ isBannerShow: false })\n        }\n    }\n\n    onBannerHide() {\n        let masterData = Utilities.getMasterData();\n        this.setState({ isBannerShow: false });\n        WSManager.setBannerData(masterData.banner)\n    }\n\n    hidePitchToolTip = () => {\n        setTimeout(() => {\n            this.setState({\n                showTooltip: false\n            })\n        }, 3000)\n        return true;\n    }\n\n    AlertgoBack = () => {\n        if (this.state.lineupArr && this.state.lineupArr.length > 0) {\n            this.setState({ showResetAlert: true })\n        }\n        else {\n            this.goBackScreen()\n        }\n    }\n\n    GetHeaderProps = (type, data, master, lobby, FixturedContest, isFrom, rootDataItem, teamData, teamName) => {\n        if (teamName) {\n            this.setState({ teamName: teamName })\n        }\n        this.setState({ lineupArr: data, masterData: master, LobyyData: lobby, FixturedContest: FixturedContest, isFrom: isFrom, rootDataItem: rootDataItem, team: teamData })\n    }\n\n    showFilter = () => {\n        this.props.showLobbyFitlers();\n    }\n\n    resetConfirm() {\n        this.setState({ showResetAlert: true })\n    }\n\n    resetConfirmHide() {\n        this.setState({ showResetAlert: false })\n    }\n\n    goToScreen = (pathname) => {\n        this.props.history.push(pathname);\n    }\n\n    goBackScreen = () => {\n        if(this.props && this.props.location.state && this.props.location.state.isFrom == 'lineup-flow'){\n            this.props.history.replace('/lobby' + \"#\" + Utilities.getSelectedSportsForUrl() + Utilities.getGameTypeHash())\n        }\n        else if( WSManager.getIsFromPayment()== 'true'){\n            WSManager.setIsFromPayment(false)\n            this.props.history.replace('/lobby' + \"#\" + Utilities.getSelectedSportsForUrl() + Utilities.getGameTypeHash())\n        }\n        else{\n            this.props.history.goBack();\n        }\n    }\n\n    GobackToLobby = () => {\n        if (this.props.HeaderOption.resetIndex && this.props.HeaderOption.resetIndex > 0) {\n            this.props.history.go(-this.props.HeaderOption.resetIndex);\n        } else {\n            let urlParams = Utilities.setUrlParams(this.state.LobyyData);\n            let sportsId = Utilities.getSelectedSportsForUrl();\n            let collection_master_id = this.state.LobyyData.collection_master_id;\n            this.props.history.push({ pathname: \"/\" + sportsId + '/my-teams/' + collection_master_id + \"/\" + urlParams, state: { LobyyData: this.state.LobyyData } })\n        }\n\n        this.setState({ showResetAlert: false })\n        WSManager.clearLineup();\n    }\n\n\n    renderLeftSection = (HeaderOpt) => {\n        if (HeaderOpt.goBackLobby) {\n            this.goToScreen(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        } else if (HeaderOpt.back) {\n            let backAction = this.goBackScreen;\n            if (HeaderOpt.showAlertRoster) {\n                backAction = this.AlertgoBack\n            }\n            return <a href className=\"header-action\" onClick={backAction}><i className=\"icon-left-arrow\"></i></a>\n        }\n        else if (WSManager.loggedIn() && HeaderOpt.title !== AppLabels.WHATSNEW) {\n            return (\n                <div className='center-container text-left' onClick={() => this.goToScreen('/my-wallet')}>\n                    <a href className=\"header-action\">\n                        <i className=\"icon-wallet-ic\"></i>\n                    </a>\n                </div>\n            )\n        }\n\n    }\n\n    renderMiddleSection = (HeaderOpt) => {\n        if ((HeaderOpt.fixture || HeaderOpt.leaderboard) && this.state.LobyyData) {\n            return <MatchInfo item={this.state.LobyyData} status={HeaderOpt.status}/>\n        }\n        else if (HeaderOpt.fixtureDate && this.state.LobyyData) {\n            return <MatchInfo item={this.state.LobyyData} status={HeaderOpt.status} onlyTimeShow={HeaderOpt.fixtureDate} />\n        }\n        else if (HeaderOpt.title && HeaderOpt.FPPLeaderboard){\n            return <div className={'app-header-text selected-cat-text' + (this.state.filterBy != '' ? ' cat-name-exist' : '')}>\n                {\n                   this.state.filterBy != '' &&\n                    <span> \n                        {this.state.filterBy}\n                    </span>\n                }\n                 {HeaderOpt.title}\n            </div>\n        }\n        else if (HeaderOpt.title && !HeaderOpt.FPPLeaderboard) {\n            return <div className={'app-header-text' + (this.state.filterBy != '' ? ' cat-name-exist' : '')}>\n                {HeaderOpt.title} \n                {\n                    this.state.filterBy != '' &&\n                    <div className=\"selected-cat-nm\">{this.state.filterBy}</div>\n                }\n            </div>\n        } else if (!HeaderOpt.back || HeaderOpt.MLogo) {\n            return <div className='center-container'>\n                <img onClick={() => this.goToScreen(\"/lobby#\" + Utilities.getSelectedSportsForUrl())} className='header-brand-logo' alt=\"\" src={HeaderOpt.isPrimary || HeaderOpt.DFSPrimary ? Images.WHITE_BRAND_LOGO : Images.BRAND_LOGO}></img>\n            </div>\n        }else if (HeaderOpt.screentitle && HeaderOpt.leagueDate) {\n            return (\n                <React.Fragment>\n                    <div className=\"match-info-section\">\n\n                        <div className=\"section-middle\">\n                            {\n                                <span className={\"team-home\" + (HeaderOpt.minileague ? ' no-transform' : '')}>\n                                    {HeaderOpt.screentitle}\n                                </span>\n                            }\n                            {\n                                <div className=\"match-timing\">\n                                    {<span> <MomentDateComponent data={{ date: HeaderOpt.leagueDate.scheduled_date, format: \"D MMM\" }} />\n                             -  <MomentDateComponent data={{ date: HeaderOpt.leagueDate.end_date, format: \"D MMM\" }} />\n                                    </span>}\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </React.Fragment>\n            )\n        }\n        else if (HeaderOpt.screentitle && HeaderOpt.rank) {\n            return (\n                <React.Fragment>\n                    <div className=\"match-info-section\">\n\n                        <div className=\"section-middle\">\n                            {\n                                <span className=\"team-home\">\n                                    {HeaderOpt.screentitle}\n                                </span>\n                            }\n                            {\n                                <div className=\"match-timing\">\n                                    {<span> {HeaderOpt.rank}</span>\n                                    }\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    \n                </React.Fragment>\n            )\n        }\n        else if (HeaderOpt.referalLeaderboradTitle && HeaderOpt.referalLeaderboradSubTitle) {\n            return (\n                <React.Fragment>\n                    <div className=\"match-info-section\">\n\n                        <div className=\"section-middle\">\n                            {\n                                <span className=\"team-home-rf-leaderboard\">\n                                    {HeaderOpt.referalLeaderboradTitle}\n                                </span>\n                            }\n                            {\n                                <div className=\"match-timing-rf-leaderboard\">\n                                    {<span> {HeaderOpt.referalLeaderboradSubTitle}</span>\n                                    }\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    \n                </React.Fragment>\n            )\n        }\n\n    }\n\n    onHRightBlcClick = (isCoins) => {\n        if (isCoins) {\n            this.props.history.push({ pathname: '/transactions', state: { tab: AppLabels.COINS } })\n        } else {\n            this.goToScreen('/my-wallet')\n        }\n    }\n\n    renderRightSection = (HeaderOpt) => {\n        let btnAction = HeaderOpt.showFilterByTeam ? HeaderOpt.showRosterFilter : this.showFilter;\n        let isCoins = (window.location.pathname === '/earn-coins' || window.location.pathname === '/rewards');\n        return (\n            <React.Fragment>\n                {\n                    (HeaderOpt.skip) &&\n                    <a href className=\"header-action skip-step\" onClick={HeaderOpt.skipAction}>\n                        {AppLabels.SKIP_STEP}\n                    </a>\n                }\n                {\n                    (HeaderOpt.filter || HeaderOpt.showFilterByTeam) &&\n                    <a href className=\"header-action\" onClick={btnAction}>\n                        <i className=\"icon-filter\"></i>\n                        {\n                            this.state.isFilterselected &&\n                            <span className=\"filter-applied\"></span>\n                        }\n                    </a>\n                }\n                {\n                    (HeaderOpt.pitch && this.state.lineupArr.length > 0 && this.hidePitchToolTip()) &&\n                    <a href className=\"header-action hide-sm-above\" onClick={HeaderOpt.fieldViewAction}>\n                        <i className=\"icon-ground\"></i>\n                        {this.state.showTooltip &&\n                            <div className=\"onLoadTooltip\">{AppLabels.TAB_TO_SEE_FIELD_VIEW}</div>\n                        }\n                    </a>\n                }\n                {\n                    (HeaderOpt.edit) &&\n                    <a href onClick={() => this.goToScreen('/edit-profile')} className=\"header-action\">\n                        <i className=\"icon-edit-line\"></i>\n                    </a>\n                }\n                {\n                    (HeaderOpt.notification) &&\n                    <a href className=\"header-action\" onClick={() => this.goToScreen('/notification')}>\n                        <i className=\"icon-alarm-new\">\n                            {\n                                (this.state.notificationData && this.state.notificationData.count > 0) &&\n                                <div style={{ textAlign: 'center', fontSize: 9, fontFamily: 'Geominist-Bold', position: 'absolute', top: -8, padding: '4px 0px', left: 8, height: 17, width: 17, borderRadius: \"100%\", backgroundColor: 'red', color: '#fff' }}>\n                                    <span>{this.state.notificationData.count > 99 ? '99+' : this.state.notificationData.count}</span>\n                                </div>\n                            }\n                        </i>\n                    </a>\n                }\n                {\n                    (HeaderOpt.export) &&\n                    <a href className=\"header-action\" >\n                        <i className=\"icon-export-ic\">\n                        </i>\n                    </a>\n                }\n                 {\n                    (HeaderOpt.statusLeaderBoard) &&\n                    <span className=\"header-action status border-live\">\n                        {\n                            HeaderOpt.statusLeaderBoard == Constants.CONTEST_LIVE &&\n                            <span className={\"live-indicator \" + (HeaderOpt.statusLeaderBoard === Constants.CONTEST_LIVE ? 'live' : '')} />\n                        }\n                        <span className={\"status-text league-margin \" + (HeaderOpt.statusLeaderBoard === Constants.CONTEST_LIVE ? 'live' : 'completed')}>{HeaderOpt.statusLeaderBoard === Constants.CONTEST_LIVE ? AppLabels.LIVE : AppLabels.COMPLETED}</span>\n                    </span>\n                }\n\n                {\n                    (HeaderOpt.status) &&\n                    <span className={\"header-action status \" + (HeaderOpt.statusBox ? (HeaderOpt.status === Constants.CONTEST_LIVE ? 'status-box-live' : 'status-box-completed') : '')}>\n                        {\n                            HeaderOpt.status == Constants.CONTEST_LIVE &&\n                            <span className={\"live-indicator  live-indicator-league\" + (HeaderOpt.status === Constants.CONTEST_LIVE ? 'live' : '')} />\n                        }\n                        <span className={\"status-text \" + (HeaderOpt.status === Constants.CONTEST_LIVE ? 'live' : 'completed')}>{HeaderOpt.status === Constants.CONTEST_LIVE ? AppLabels.LIVE : AppLabels.COMPLETED}</span>\n                    </span>\n                }\n\n                {\n                    (HeaderOpt.close) &&\n                    <a href className=\"header-action\" onClick={this.goBackScreen}>\n                        <i className=\"icon-close font-12\"></i>\n                    </a>\n                }\n                {\n                    (HeaderOpt.showBal) &&\n                    <div className='right-container-bal-box' onClick={() => this.onHRightBlcClick(isCoins)}>\n                        {\n                            isCoins ? <div className='balance-box-style is-coin'>{<img className=\"coin-img\" src={Images.IC_COIN} alt=\"\" />} {Utilities.kFormatter(this.state.userCoinBalnc)}</div>\n                                : <div className='balance-box-style'>{Utilities.getMasterData().currency_code} {this.state.mTotalBalance}</div>\n                        }\n                    </div>\n                }\n                {\n                    (HeaderOpt.referAfriend) && WSManager.loggedIn() &&\n                    <div className='right-container-refer-f' onClick={() => this.goToScreen('/refer-friend')}>\n                        <img className=\"img-ref\" src={Images.REFER_FRIEND_HEADER} alt='' />\n                    </div>\n                }\n\n            </React.Fragment>\n        )\n    }\n\n    static showNewPToast = (msg) => {\n        globalThis.setState({\n            NEWP: true,\n            NPMSG: msg ? msg : ''\n        })\n        setTimeout(() => {\n            globalThis.setState({\n                NEWP: false\n            })\n        }, 4000);\n    }\n\n    renderNewPrediction = () => {\n        const {NPMSG} = this.state;\n        return (\n            <div onClick={() => Utilities.scrollToTop()} className=\"new-data-toast\">\n                <i className=\"icon-alarm-new primary\" />\n                <div className=\"text-msg\">{NPMSG ? NPMSG : AppLabels.NEW_PRE}</div>\n            </div>\n        )\n    }\n\n    render() {\n        const {\n            HeaderOption,\n        } = this.props;\n\n        const {\n            DailyCheckinBonus,\n            CoinCoachMarks,\n            RedeemSuccess,\n            ReedemCoachMarks,\n            showDCBM,\n            showCoinCM,\n            dailyData,\n            showRedeemCM,\n            showRSuccess,\n            redeemData,\n            showResetAlert,\n            message,\n            isBannerShow,\n            SHCoachMarks,\n            showSHSCM,\n            NEWP,\n            sourceUrlShow,\n            sourceUrlData,\n            showSpinWheel,\n            spinWheelData\n        } = this.state;\n\n        let isCoins = (window.location.pathname === '/earn-coins' || window.location.pathname === '/rewards');\n        globalThis = this;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={'app-header-style ' + (HeaderOption.hideHeader ? ' hide ' : '') + (HeaderOption.hideShadow ? 'hide-shadow' : '') + (HeaderOption.themeHeader ? ' header-transparent' : '') + (isCoins || HeaderOption.isPrimary ? ' coin-headr ' : '')}>\n                        <div className='row-container'>\n                            {\n                                NEWP && this.renderNewPrediction()\n                            }\n                            <div className='section-min section-left'>\n                                {\n                                    this.renderLeftSection(HeaderOption)\n                                }\n                            </div>\n                            <div className='section-middle'>\n                                {\n                                    this.renderMiddleSection(HeaderOption)\n                                }\n                            </div>\n\n                            <div xs={2} className='section-min section-right'>\n                                {\n                                    this.renderRightSection(HeaderOption)\n                                }\n                            </div>\n                        </div>\n                        {\n                            SHCoachMarks && showSHSCM && !showDCBM && !showSpinWheel && !isBannerShow && <SHCoachMarks {...this.props} cmData={{\n                                mShow: window.location.pathname !== '/what-is-new' && showSHSCM,\n                                mHide: this.hideSHSCM\n                            }} />\n                        }\n                        {\n                            Utilities.getMasterData().allow_coin !== \"0\" &&\n                            <React.Fragment>\n                                {\n                                    !HeaderOption.isOnb && DailyCheckinBonus && !showCoinCM && showDCBM && Utilities.getMasterData().allow_spin != 1 && <DailyCheckinBonus {...this.props} preData={{\n                                        dailyData: dailyData,\n                                        mShow: showDCBM,\n                                        mHide: this.hideDailyCheckIn\n                                    }} />\n                                }\n                                {\n                                    CoinCoachMarks && showCoinCM && <CoinCoachMarks {...this.props} cmData={{\n                                        mShow: showCoinCM,\n                                        mHide: this.hideCoinCM\n                                    }} />\n                                }\n                                {\n                                    ReedemCoachMarks && !showDCBM && !showSpinWheel && showRedeemCM && <ReedemCoachMarks {...this.props} cmData={{\n                                        mHide: this.hideRedeemCM,\n                                        mShow: showRedeemCM\n                                    }} />\n                                }\n                                {\n                                    RedeemSuccess && showRSuccess && <RedeemSuccess {...this.props} rmData={{\n                                        redeemData: redeemData,\n                                        mShow: showRSuccess,\n                                        mHide: this.hideRSuccess\n                                    }} />\n                                }\n\n                                {\n                                    this.state.showRCM && window.location.pathname === '/lobby' && !this.state.showDCBM && !this.state.showCoinCM && !this.state.isBannerShow && !this.state.showSHSCM && !showSpinWheel && <RefferCoachMark {...this.props} cmData={{\n                                        mShow: this.state.showRCM,\n                                        mHide: this.hideRCM,\n                                        refRCMData: this.state.refRCMData,\n                                    }} />\n                                }\n                            </React.Fragment>\n                        }\n                        {\n                            (!showDCBM && !HeaderOption.isOnb && !showSpinWheel && isBannerShow) &&\n                            <Banner\n                                isBannerShow={true}\n                                onBannerHide={() => this.onBannerHide()}\n                            />\n                        }\n                        {\n                            showResetAlert &&\n                            <MyAlert isMyAlertShow={showResetAlert} onMyAlertHide={() => this.GobackToLobby()} hidemodal={() => this.resetConfirmHide()} message={message} />\n                        }\n                        {\n                            sourceUrlShow &&\n                            <OpenSourceUrl mShow={sourceUrlShow} mHide={this.hideUrmModal} UrlData={sourceUrlData} />\n                        }\n                        {\n                            !HeaderOption.isOnb && !showCoinCM && !showDCBM && showSpinWheel && window.location.pathname === '/lobby' && <SpeenWheelModal {...this.props} preData={{\n                                data: spinWheelData,\n                                mHide: this.hideSpinWheel\n                            }} />\n                        }\n                    </div>\n                )}\n\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ConfirmFPPOpenPredictor.jsx",["1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Modal, FormGroup } from 'react-bootstrap';\nimport { inputStyleLeft } from '../../helper/input-style';\nimport { makeFPPOpenPrediction, getUserBalance } from '../../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _handleWKeyDown } from '../../Utilities/Utilities';\nimport FloatingLabel from 'floating-label-react';\nimport Skeleton from 'react-loading-skeleton';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport CustomHeader from '../../components/CustomHeader';\n\nclass ConfirmFPPOpenPredictor extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            bidAmount: '',\n            minCoin: parseInt(Utilities.getMasterData().min_bet_coins || 10),\n            isLoading: false,\n            point_balance: WSManager.getBalance().point_balance || 0\n        }\n    }\n\n    componentWillMount() {\n        document.addEventListener(\"keydown\", _handleWKeyDown, false);\n        getUserBalance().then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    point_balance: responseJson.data.user_balance.point_balance || 0\n                })\n                WSManager.setAllowedBonusPercantage(responseJson.data.allowed_bonus_percantage)\n                WSManager.setBalance(responseJson.data.user_balance);\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", _handleWKeyDown);\n    }\n\n    onChange = (e) => {\n        this.setState({ bidAmount: e.target.value })\n    }\n\n    timerCompletionCall = () => {\n    }\n\n    submitPrediction = () => {\n        const { mHide, cpData, successAction } = this.props.preData;\n        let preBal = parseInt(this.state.point_balance);\n        let bidAmount = cpData.entry_type == 0 ? parseInt(this.state.bidAmount) : parseInt(cpData.entry_fee);\n        let updatedBal = preBal - bidAmount;\n        let param = {\n            \"prediction_master_id\": cpData.prediction_master_id,\n            \"prediction_option_id\": cpData.option_predicted.prediction_option_id,\n            \"bet_coins\": bidAmount\n        }\n        this.setState({ isLoading: true })\n        makeFPPOpenPrediction(param).then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                CustomHeader.updateCoinBalance(updatedBal);\n                let bal = WSManager.getBalance();\n                bal[\"point_balance\"] = updatedBal;\n                WSManager.setBalance(bal);\n                Utilities.showToast(responseJson.message, 3000, Images.PREDICTION_IC);\n                successAction(cpData);\n                this.setState({\n                    isLoading: false\n                }, () => {\n                    mHide();\n                });\n            } else {\n                this.setState({ isLoading: false })\n            }\n        })\n    }\n\n    clickEarnCoins = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push(\"/earn-coins\")\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    render() {\n\n        const { mShow, mHide, cpData } = this.props.preData;\n        const { bidAmount, minCoin, isLoading, point_balance } = this.state;\n\n        let game_starts_in = cpData.deadline_time / 1000;\n        let coin_bal = parseInt(point_balance || 0);\n        let isBtnEnbl = cpData.entry_type == 1 ? (cpData.entry_fee <= coin_bal) : (bidAmount >= minCoin && bidAmount <= coin_bal);\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"modal-pred-confirm fpp-pred-confirm\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Body>\n                            <div className=\"container\">\n                                <p className=\"pred-que\">{cpData.desc}</p>\n                                {\n                                    cpData && cpData.source_desc &&\n                                    <p className=\"pred-desc\">{AL.DISCRIPTION} - {cpData.source_desc}</p>\n                                }\n                                <div className=\"your-pre-text\">\n                                    <div>\n                                        {AL.ARE_YOU_SURE_WANT_PREDICT} \n                                        <span className=\"option\"> {cpData.option_predicted.option}</span>?\n                                    </div>                                    \n                                </div>\n                                <p className=\"pred-desc\">{AL.PRE_MSG2}</p>\n                                {\n                                    (coin_bal < minCoin || coin_bal < bidAmount || (cpData.entry_type == 1 && coin_bal < cpData.entry_fee)) && <span className=\"no-coins-msg\">\n                                        {AL.NO_COINS_MSG}<a href onClick={this.clickEarnCoins}>{AL.EARN_COINS.toLowerCase()}</a>\n                                    </span>\n                                }\n                                <button onClick={this.submitPrediction} className=\"btn btn-m-p\">{AL.SUBMIT}</button>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default ConfirmFPPOpenPredictor;","/var/www/html/framework/frontend/src/helper/MetaData.jsx",["1506"],"import * as WSC from \"../WSHelper/WSConstants\";\nimport Meta from \"../meta\";\n\nconst MetaData = {\n    \"template\": WSC.AppName,\n    \"signup\": {\n        \"title\": \"Signup\",\n        \"description\": \"Login page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"download\": {\n        \"title\": \"Download App\",\n        \"description\": \"Download App page\",\n        \"keywords\": \"fantasy, contest, download, app, android\"\n    },\n    \"verifymobile\": {\n        \"title\": \"Verify Your Mobile\",\n        \"description\": \"OTP page\",\n        \"keywords\": \"fantasy, contest\"\n    },    \n    \"referral\": {\n        \"title\": \"Referral\",\n        \"description\": \"lobby page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"emaillogin\": {\n        \"title\": \"Signup\",\n        \"description\": \"Login page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"passwordlogin\": {\n        \"title\": \"Signup\",\n        \"description\": \"Login page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"forgotpassword\": {\n        \"title\": \"Forgot Password\",\n        \"description\": \"Forgot Password page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"resetpassword\": {\n        \"title\": \"Reset Password\",\n        \"description\": \"Reset Password page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"changepassword\": {\n        \"title\": \"Change Password\",\n        \"description\": \"Change Password page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"pickemail\": {\n        \"title\": \"Pick Your Email\",\n        \"description\": \"Email page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"pickusername\": {\n        \"title\": \"Pick Your Username\",\n        \"description\": \"Username page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \n    \"lobby\" : {\n        \"title\" : \"Lobby\",\n        \"description\" : \"lobby page\",\n        \"keywords\" : \"fantasy, contest, prediction\"\n    },\n    \"contestListing\" : {\n        \"title\": \"Contest Listing\",\n        \"description\" : \"lobby page\",\n        \"keywords\" : \"fantasy, contest\"\n    },\n    \"sharedcontest\" : {\n        \"title\": \"Contest\",\n        \"description\" : \"Shared Contest\",\n        \"keywords\" : \"fantasy, contest\"\n    },\n    \"lineup\": {\n        \"title\": \"Lineup\",\n        \"description\": \"Lineup page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"fieldview\": {\n        \"title\": \"Field View\",\n        \"description\": \"Field View page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"select-captain\": {\n        \"title\": \"Select Captain | Vice Captain\",\n        \"description\": \"Lineup page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"contests\": {\n        \"title\": \"My Contests\",\n        \"description\": \"My Contests page\",\n        \"keywords\": \"fantasy, contest, prediction\"\n    },\n    \"myprofile\": {\n        \"title\": \"My Profile\",\n        \"description\": \"My Profile page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"editprofile\": {\n        \"title\": \"Edit Profile\",\n        \"description\": \"Edit Profile page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"addfunds\": {\n        \"title\": \"Add Funds\",\n        \"description\": \"Add Funds page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"createcontest\": {\n        \"title\": \"Create Contest\",\n        \"description\": \"Create contest page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"leaderboard\": {\n        \"title\": \"Leaderboard\",\n        \"description\": \"Leaderboard page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"allleagues\": {\n        \"title\": \"all-leagues\",\n        \"description\": \"all-leagues page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \n    \"referfriend\": {\n        \"title\": \"Refer a Friend\",\n        \"description\": \"Refer a friend page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"mywallet\": {\n        \"title\": \"My Wallet\",\n        \"description\": \"My wallet page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"transactions\": {\n        \"title\": \"Transactions\",\n        \"description\": \"Transaction page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"notification\": {\n        \"title\": \"Notifications\",\n        \"description\": \"Notifications page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"howtoplay\": {\n        \"title\": \"How To Play\",\n        \"description\": \"How To Play page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"aboutus\": {\n        \"title\": \"About Us\",\n        \"description\": \"About Us page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"faqs\": {\n        \"title\": \"FAQs\",\n        \"description\": \"FAQs page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"withdraw\": {\n        \"title\": \"Withdraw\",\n        \"description\": \"Withdraw page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"termsconditions\": {\n        \"title\": \"Terms and Conditions\",\n        \"description\": \"Terms and conditions page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"rulesscoring\": {\n        \"title\": \"Rules and Scoring\",\n        \"description\": \"Rules and scoring page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"privacypolicy\": {\n        \"title\": \"Privacy Policy\",\n        \"description\": \"Privacy policy page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"partners\": {\n        \"title\": \"Partners\",\n        \"description\": \"Partners page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"ContactUs\": {\n        \"title\": \"ContactUs\",\n        \"description\": \"ContactUs page\",\n        \"keywords\": \"fantasy, contest\"\n    },\n    \"PageNotFound\": {\n        \"title\": \"404 Page Not Found\",\n    },\n    \"more\": {\n        \"title\": \"More\",\n        \"description\": \"More\",\n        \"keywords\": \"fantasy, sports\"\n    },\n    \"referralSystem\": {\n        \"title\": \"REFERRAL SYSTEM\",\n        \"description\": \"Invite your friends & win big rewards\",\n        \"keywords\": \"fantasy, sports\"\n    },\n    \"WSN\": {\n        \"title\": \"What’s New?\",\n        \"description\": \"What’s New?\",\n        \"keywords\": \"fantasy, sports, new, feature\"\n    },\n    \"ERNC\": {\n        \"title\": \"How to Earn Coins?\",\n        \"description\": \"How to Earn Coins?\",\n        \"keywords\": \"fantasy, sports, new, feature, coins, earn, earn coins\"\n    },\n    \"RWRDS\": {\n        \"title\": \"Rewards\",\n        \"description\": \"Rewards - Redeem Coins\",\n        \"keywords\": \"fantasy, sports, new, feature, coins, earn, earn coins, Redeem, rewards\"\n    },\n    \"ECFEEDBAK\": {\n        \"title\": \"Feedback\",\n        \"description\": \"Feedback - Get Coins\",\n        \"keywords\": \"feedback, fantasy, sports, new, feature, coins, earn, earn coins, Redeem, rewards\"\n    },\n    \"SHS\": {\n        \"title\": \"Sports Hub\",\n        \"description\": \"Sports Hub - Pick Game Type\",\n        \"keywords\": \"Sports Hub, fantasy, sports, hub, feature, Pick Game Type, daily\"\n    },\n    \"PRDLIST\" : {\n        \"title\": \"Contest Listing\",\n        \"description\" : \"prediction list page\",\n        \"keywords\" : \"fantasy, contest, prediction\"\n    },\n    \"PRDSHARE\" : {\n        \"title\": \"Prediction Details\",\n        \"description\" : \"prediction share page\",\n        \"keywords\" : \"fantasy, contest, prediction, share\"\n    },\n    \"PRDPLIST\" : {\n        \"title\": \"Participants\",\n        \"description\" : \"Prediction Participants page\",\n        \"keywords\" : \"fantasy, contest, prediction, share, Participants\"\n    },\n    \"PMSHARE\" : {\n        \"title\": \"Pick'em Details\",\n        \"description\" : \"prediction share page\",\n        \"keywords\" : \"fantasy, contest, pick'em, share\"\n    },\n    \"PMPLIST\" : {\n        \"title\": \"Participants\",\n        \"description\" : \"Pick'em Participants page\",\n        \"keywords\" : \"fantasy, contest, pick'em, share, Participants\"\n    },\n    \"AffiliateProgram\" : {\n        \"title\": \"Affiliate Program\",\n        \"description\" : \"Affiliate Program page\",\n        \"keywords\" : \"profite, profile, user, Affiliate, Program\"\n    }\n}\n\n\nexport default { \n    ...MetaData, \n    ...Meta\n };","/var/www/html/framework/frontend/src/views/Dashboard.jsx",["1507","1508","1509","1510","1511","1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554","1555","1556"],"import React from 'react';\nimport { PickemLobby, PickemMycontest, NewPickemLobby, NewPickemMyContest} from '../Component/Pickem';\nimport { Tabs, Tab, Nav, NavItem, Row, Col } from 'react-bootstrap';\nimport { MyContest } from '../Component/MyContest';\nimport { Utilities, _Map, _filter, _debounce } from '../Utilities/Utilities';\nimport { Helmet } from \"react-helmet\";\nimport queryString from 'query-string';\nimport ls from 'local-storage';\nimport Loadable from 'react-loadable';\nimport MetaData from \"../helper/MetaData\";\nimport WSManager from '../WSHelper/WSManager';\nimport Profile from '../Component/Profile/MyProfile';\nimport Lobby from './Lobby';\nimport CustomHeader from '../components/CustomHeader';\nimport More from './More';\nimport Notification from '../views/Notification';\nimport Wallet from '../Component/Finance/MyWallet';\nimport ReferFriend from './ReferFriend';\nimport Images from '../components/images';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport * as Constants from \"../helper/Constants\";\nimport { Sports } from \"../JsonFiles\";\n\n\nexport const MyContext = React.createContext()\nvar mContext = null;\nfunction LoadingComponent() {\n    return <div className=\"web-container\" />;\n}\nconst PredictionLobby = Loadable({\n    loader: () => {\n            return import('../Component/PredictionModule/PredictionLobby')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst MyPrediction = Loadable({\n    loader: () => {\n            return import('../Component/PredictionModule/MyPredictions')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst OpenPredictorLobby = Loadable({\n    loader: () => {\n            return import('../Component/OpenPredictorModule/OpenPredictorLobby')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst MyOpenPredictors = Loadable({\n    loader: () => {\n            return import('../Component/OpenPredictorModule/MyOpenPredictors')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst OpenPredictionLeaderboard = Loadable({\n    loader: () => {\n            return import('../Component/OpenPredictorModule/OpenPredictionLeaderboard')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst LeagueLeaderBoard = Loadable({\n    loader: () => {\n            return import('../Component/FreeToPlayModule/LeaguaNavLeaderBoard')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst OpenPredictorFPPLobby = Loadable({\n    loader: () => {\n            return import('../Component/OpenPredictorFPPModule/OpenPredictorFPPLobby')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst MyFPPOpenPredictors = Loadable({\n    loader: () => {\n            return import('../Component/OpenPredictorFPPModule/MyFPPOpenPredictors')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst FPPOpenPredictionLeaderboard = Loadable({\n    loader: () => {\n            return import('../Component/OpenPredictorFPPModule/OpenPredictionFPPLeaderboard')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nconst PickemLeaderboard = Loadable({\n    loader: () => {\n            return import('../Component/Pickem/NewPickemLeaderboard')\n    },\n    delay: 0,\n    loading: LoadingComponent\n});\nexport default class Dashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeSportsTab: 0,\n            ShimmerList: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            activeTab: 'lobby',\n            urlParams: '',\n            sportsList: [],\n            showLobbyFitlers: false,\n            EarnCoins: LoadingComponent,\n            PredictionLobby: LoadingComponent,\n            MyPrediction: LoadingComponent,\n            selectedGameType: WSManager.getPickedGameType(),\n            getGameTypeSport: Utilities.getGameTypeSports(),\n            MultiGame:LoadingComponent,\n            FreeToPlay:LoadingComponent,\n            CurrentGameType: Constants.SELECTED_GAMET,\n            headerReload: true,\n            AvaSports:[],\n            HeaderOption: {\n                menu: true,\n                title: \"\",\n                notification: true,\n                filter: true,\n                edit: false,\n                hideShadow: true,\n                hideHeader: false,\n                close: false\n            },\n            footerTabs: Constants.DASHBOARD_FOOTER.tabs\n\n        }\n    }    \n\n    componentWillMount() {\n        if (!this.checkPickedGame()) {\n            let sports_id = Utilities.getUrlSports();\n            this.setState({ sportsList: Utilities.getMasterData().fantasy_list ? Utilities.getMasterData().fantasy_list : [] }, () => {\n                Constants.setValue.setAppSelectedSport(sports_id);\n\n                let url = this.props.location.search;\n                let urlParams = queryString.parse(url);\n\n                let pathData = Constants.DASHBOARD_FOOTER.config.tab_path;\n                let event = pathData[window.location.pathname];\n\n                this.onSelect(event, true);\n                this.setState({ activeTab: event, urlParams, activeSportsTab: sports_id })\n                if (Constants.AppSelectedSport == null) {\n                    this.checkSportId();\n                }\n            })\n\n            if (Utilities.getMasterData().allow_coin == 0 || !WSManager.loggedIn()) {\n                var filterArray = _filter(Constants.DASHBOARD_FOOTER.tabs, (item) => {\n                    return item.tab_key !== 'earn-coins'\n                })\n                this.setState({ footerTabs: filterArray })\n            }\n            if (Utilities.getMasterData().allow_coin == '1') {\n                import('../Component/CoinsModule').then(CM => {\n                    if (CM.EarnCoins) {\n                        this.setState({\n                            EarnCoins: CM.EarnCoins\n                        });\n                    }\n                });\n            }\n            if (Constants.SELECTED_GAMET == Constants.GameType.MultiGame) {\n                import('../Component/MultiGameModule').then(MM => {\n                    if (MM.MultiGameLobby) {\n                        this.setState({\n                            MultiGame: MM.MultiGameLobby,\n                        });\n                    }\n                });\n            }\n            if (Constants.SELECTED_GAMET == Constants.GameType.Free2Play ) {\n                import('../Component/FreeToPlayModule').then(FF => {\n                    if (FF.LandingFreeToPlay) {\n                        this.setState({\n                            FreeToPlay: FF.LandingFreeToPlay,\n                        });\n                    }\n                });\n            }\n            WSManager.setShareContestJoin(false);\n        }\n\n        if(this.state.getGameTypeSport){\n            var gametypeArray = this.state.getGameTypeSport;\n            let tempArray = [];\n            let option = [];\n            for (var item of gametypeArray) {\n                if(item.game_key == this.state.selectedGameType){\n                    tempArray = item.allowed_sports || ''\n                }\n            }  \n            if(tempArray != ''){\n                for(var obj of tempArray){\n                    var sportsId = '';\n                    if (obj in Sports.url) {\n                        sportsId = Sports.url[obj] + \"\";\n                    }\n                    option.push({\n                        'label': sportsId,\n                        'value': obj\n                    })\n                }\n            }\n            this.setState({\n                AvaSports: option\n            })\n        }\n    }\n\n    checkSportId = () => {\n        let interval = setInterval(() => {\n            if (Constants.AppSelectedSport != null) {\n                clearInterval(interval)\n                this.setState({ activeSportsTab: Constants.AppSelectedSport })\n            }\n        }, 100)\n    }\n\n    /**\n     * @description will be called when user tap on filter icon on header\n     * @return UI components\n    */\n    showFilterData = () => {\n        this.setState({ showLobbyFitlers: true });\n    }\n    /**\n     * @description will be called when user tap on filter  done icon \n     * @return UI components\n    */\n    hideFilterData = () => {\n        this.setState({ \n            showLobbyFitlers: false\n        });\n    }\n    \n    onSelect = (tab, fromMount) => {\n        \n        if (!fromMount) {\n            this.setState({ urlParams: '' })\n            if (tab === \"lobby\")\n                this.props.history.push('/' + tab + \"#\" + Utilities.getSelectedSportsForUrl() + Utilities.getGameTypeHash())\n            else if (tab === \"my-contests\")\n                this.props.history.push('/' + tab + \"?contest=upcoming\")\n            else\n                this.props.history.push('/' + tab)\n        }\n\n        this.setHeaderOptions(tab);\n    }\n\n    setHeaderOptions(tab) {\n\n        let { HeaderOption, sportsList,selectedGameType } = mContext.state;\n        HeaderOption.title = '';\n        HeaderOption.edit = false;\n        HeaderOption.filter = false;\n        HeaderOption.notification = false;\n        HeaderOption.hideHeader = false;\n        HeaderOption.close = false;\n        if (tab === 'my-contests') {\n            HeaderOption.title = Constants.SELECTED_GAMET == Constants.GameType.OpenPred || Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead || Constants.SELECTED_GAMET == Constants.GameType.Pickem ? AppLabels.MY_CONTEST : '';\n            HeaderOption.notification = true;\n            HeaderOption.hideShadow = true;\n            HeaderOption.DFSPrimary = true;\n            HeaderOption.filter = Constants.SELECTED_GAMET == Constants.GameType.OpenPred|| Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead ? true : false;\n        }\n        else if (tab === 'my-profile') {\n            HeaderOption.edit = true;\n            HeaderOption.hideShadow = true;\n        }\n        else if (tab === 'more') {\n            HeaderOption.title = AppLabels.MORE;\n            HeaderOption.hideShadow = true;\n            HeaderOption.close = true;\n        }\n        else if (tab === 'lobby') {\n            HeaderOption.filter = (Constants.SELECTED_GAMET == Constants.GameType.Pred || Constants.SELECTED_GAMET == Constants.GameType.OpenPred || Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead) ? false : true;\n            HeaderOption.isPrimary = (Constants.SELECTED_GAMET == Constants.GameType.Pred || Constants.SELECTED_GAMET == '1' || Constants.SELECTED_GAMET == Constants.GameType.OpenPred || Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead || selectedGameType == Constants.GameType.Pickem || Constants.SELECTED_GAMET == Constants.GameType.Free2Play) ? true : false;\n            HeaderOption.notification = true;\n            HeaderOption.DFSPrimary = true;\n            HeaderOption.hideShadow = sportsList.length > 1 ? true : false;\n        }\n        else if (tab === 'notification') {\n            HeaderOption.title = AppLabels.NOTIFICATIONS;\n            HeaderOption.filter = false;\n            HeaderOption.notification = false;\n            HeaderOption.hideShadow = false;\n        }\n        else if (tab === 'my-wallet') {\n            HeaderOption.title = AppLabels.MY_WALLET;\n            HeaderOption.filter = false;\n            HeaderOption.notification = false;\n            HeaderOption.hideShadow = false;\n        }\n        else if (tab === 'refer-friend') {\n            HeaderOption.title = AppLabels.REFER_A_FRIEND;\n            HeaderOption.filter = false;\n            HeaderOption.notification = false;\n            HeaderOption.hideShadow = false;\n        }\n        else if (tab === 'earn-coins') {\n            HeaderOption.title = AppLabels.HOW_TO_EARN;\n            HeaderOption.filter = false;\n            HeaderOption.notification = true;\n            HeaderOption.hideShadow = true;\n        }\n        else if (tab === 'leaderboard') {\n            HeaderOption.title = Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? AppLabels.F2P_LEAGUES :  Constants.SELECTED_GAMET == Constants.GameType.Pickem ? AppLabels.PICKEM + ' ' + AppLabels.LEADERBOARD : AppLabels.LEADERBOARD;\n            HeaderOption.filter =Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? false : true;\n            HeaderOption.notification = false;\n            HeaderOption.hideShadow = true;\n            HeaderOption.isPrimary = Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead ? true : Constants.SELECTED_GAMET == Constants.GameType.Pickem ? true : false;\n            HeaderOption.FPPLeaderboard = Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead || Constants.SELECTED_GAMET == Constants.GameType.Pickem ? true : false;\n            HeaderOption.showLBal = Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead ? true : Constants.SELECTED_GAMET == Constants.GameType.Pickem ? true : false;\n           \n        }\n        this.checkPickedGame();\n        mContext.setState({ HeaderOption, activeTab: tab })\n    }\n\n    componentDidUpdate() {\n        let tempTab = Constants.DASHBOARD_FOOTER.config.tab_path[window.location.pathname];\n        if (this.state.activeTab !== tempTab || this.state.CurrentGameType != Constants.SELECTED_GAMET)\n            this.setState({ activeTab: tempTab, CurrentGameType: Constants.SELECTED_GAMET }, () => {\n                this.setHeaderOptions(tempTab)\n            })\n    }\n    onTabClick = _debounce((item, index) => {\n        ls.set('selectedSports', item.value);\n        Constants.setValue.setAppSelectedSport(item.value);\n        this.setState({ activeSportsTab: item.value }, () => {\n            if (window.location.pathname === \"/lobby\") {\n                this.props.history.replace(window.location.pathname + \"#\" + Utilities.getSelectedSportsForUrl() + Utilities.getGameTypeHash())\n            }\n        });\n    }, 200)\n\n    returnLobbyType = () => {\n        var LobbyType = Lobby;\n        \n        if(Constants.SELECTED_GAMET == Constants.GameType.Pred){\n            LobbyType = PredictionLobby;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.MultiGame){\n            LobbyType = this.state.MultiGame;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.OpenPred){\n            LobbyType = OpenPredictorLobby;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.Free2Play){\n            LobbyType = this.state.FreeToPlay;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead){\n            LobbyType = OpenPredictorFPPLobby;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.Pickem){\n            LobbyType = NewPickemLobby;\n        }\n        return LobbyType;\n    }\n    returnMyContestType = () => {\n        var MyContestType = MyContest;\n        \n        if(Constants.SELECTED_GAMET == Constants.GameType.Pred){\n            MyContestType = MyPrediction;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.OpenPred){\n            MyContestType = MyOpenPredictors;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.OpenPredLead){\n            MyContestType = MyFPPOpenPredictors;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.Pickem){\n            MyContestType = NewPickemMyContest;\n        }        \n        \n        return MyContestType;\n    }\n    returnLeaderBoardType = () => {\n        var LeaderBoardType = FPPOpenPredictionLeaderboard;\n        \n        if(Constants.SELECTED_GAMET == Constants.GameType.Free2Play){\n            LeaderBoardType = LeagueLeaderBoard;\n        }\n        if(Constants.SELECTED_GAMET == Constants.GameType.Pickem){\n            LeaderBoardType = PickemLeaderboard;\n        }\n        \n        return LeaderBoardType;\n    }\n\n    renderTabById(tabItem, activeTab) {\n        let LobbyType = this.returnLobbyType();\n        let MyContestType = this.returnMyContestType();\n        let LeaderBoardType=this.returnLeaderBoardType();\n        \n        if (tabItem.tab_key === 'lobby') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"> <div><i className=\"icon-home\" /></div>\n                <div className=\"tab-label\">{AppLabels.HOME}</div>\n            </div>}>\n                {activeTab === tabItem.tab_key && <LobbyType showLobbyFitlers={this.state.showLobbyFitlers} hideFilterData={this.hideFilterData} {...this.props} selectedSport={this.state.activeSportsTab} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'my-contests') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"><div><i className=\"icon-my-contests\" /></div><div className=\"tab-label\">{AppLabels.MY_CONTEST}</div> </div>}>\n                {activeTab === tabItem.tab_key && <MyContestType {...this.props} hideHeader={true} urlParams={this.state.urlParams} selectedSport={this.state.activeSportsTab} showLobbyFitlers={this.state.showLobbyFitlers} hideFilter={this.hideFilterData} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'my-profile') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"><div><i className=\"icon-profile\" /></div><div className=\"tab-label\">{AppLabels.PROFILE}</div> </div>}>\n                {activeTab === tabItem.tab_key && <Profile hideHeader={true} urlParams={this.state.urlParams} {...this.props} selectedSport={this.state.activeSportsTab} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'leaderboard') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"><div><i className=\"icon-leaderboard\" /></div><div className=\"tab-label\">{AppLabels.LEADERBOARD}</div> </div>}>\n                {activeTab === tabItem.tab_key && <LeaderBoardType {...this.props} showLobbyFitlers={this.state.showLobbyFitlers} hideFilter={this.hideFilterData} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'more') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"><div><i className=\"icon-more-large\" /></div><div className=\"tab-label\">{AppLabels.MORE} </div></div>}>\n                {activeTab === tabItem.tab_key && <More {...this.props} onLanguageChange={this.setHeaderOptions} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'notification') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"><div><i className=\"icon-alarm-new\" /></div><div className=\"tab-label\">{AppLabels.NOTIFICATIONS} </div></div>}>\n                {activeTab === tabItem.tab_key && <Notification {...this.props} hideHeader={true} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'my-wallet') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"><div><i className=\"ic icon-Wallet\" /></div><div className=\"tab-label\">{AppLabels.MY_WALLET}</div> </div>}>\n                {activeTab === tabItem.tab_key && <Wallet {...this.props} hideHeader={true} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'refer-friend') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={<div className=\"animated-tab-div\"><div><i className=\"ic icon-add-user\" /></div><div className=\"tab-label\">{AppLabels.REFER_A_FRIEND}</div> </div>}>\n                {activeTab === tabItem.tab_key && <ReferFriend {...this.props} hideHeader={true} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'earn-coins') {\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={\n                <div className=\"isCoin coin-shine\">\n                    <div className=\"shadow-v\" />\n                    <span className=\"coins-tab-label\">{AppLabels.EARN_COINS}</span>\n                    <span className={activeTab === tabItem.tab_key ? \"fcoin\" : 'position-relative'}>\n                        <img src={activeTab === tabItem.tab_key ? Images.EARN_COINS : Images.SILVR_EARN_COINS} alt=\"\" />\n                        {\n                            activeTab === tabItem.tab_key && <React.Fragment>\n                                <div className=\"spark1\">✦</div>\n                                <div className=\"spark2\">✦</div>\n                                <div className=\"spark3\">✦</div>\n                            </React.Fragment>\n                        }\n                    </span>\n                </div>\n            } >\n                {activeTab === tabItem.tab_key && <this.state.EarnCoins {...this.props} hideHeader={true} showDailyStreak={CustomHeader.showDailyStreak} />}\n            </Tab>\n        }\n        else if (tabItem.tab_key === 'sports-hub') {\n            let spImg = Utilities.getMasterData().hub_icon;\n            return <Tab key={tabItem.tab_key} eventKey={tabItem.tab_key} title={\n                <div className=\"isCoin coin-shine\">\n                    <div className=\"shadow-v logo-hub\" />\n                    {!spImg && <span className=\"coins-tab-label\">{AppLabels.SPORTS_HUB}</span>}\n                    <span className={\"position-relative\" + (spImg ? \" upload-img\" : \"\")}>\n                        <img src={spImg ? Utilities.getSettingURL(spImg) : Images.SPORTS_HUB} alt=\"\" />\n                    </span>\n                </div>\n            } />\n        }\n    }\n\n    renderHelmetData = (ATab) => {\n        let isLobby = ATab === 'lobby';\n        let isMyContast = ATab === 'my-contests';\n        let isCoins = ATab === 'earn-coins';\n        let isProfile = ATab === 'my-profile';\n        let isLeaderboard = ATab === 'leaderboard';\n        let isMore = ATab === 'more';\n        var data = '';\n\n        if (isLobby) {\n            data = MetaData.lobby;\n        } else if (isMyContast) {\n            data = MetaData.contests;\n        } else if (isCoins) {\n            data = MetaData.ERNC;\n        } else if (isProfile) {\n            data = MetaData.myprofile;\n        } else if (isMore) {\n            data = MetaData.more;\n        } else if (isLeaderboard) {\n            data = MetaData.leaderboard;\n        }\n\n\n        return (\n            <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                <title>{data.title}</title>\n                <meta name=\"description\" content={data.description} />\n                <meta name=\"keywords\" content={data.keywords}></meta>\n            </Helmet>\n        )\n    }\n\n    renderTopSportsTab = () => {\n        let { AvaSports, activeSportsTab } = this.state;\n        return (\n            <Tab.Container id='top-sports-slider' onSelect={() => console.log('onSelect')} activeKey={activeSportsTab.toString()} defaultActiveKey={activeSportsTab.toString()} className={Constants.SELECTED_GAMET == Constants.GameType.OpenPred ? 'hide' : ''}>\n                <Row className=\"clearfix\">\n                    <Col className=\"sports-tab-nav \" xs={12}>\n                        <Nav>\n                            {\n                                    _Map(AvaSports, (item, idx) => {\n                                    return (\n                                        <NavItem key={item.value} style={{ width: 'calc(100% / ' + AvaSports.length + ')' }} onClick={() => this.onTabClick(item, idx)} eventKey={item.value.toString()}>\n                                        <span>\n                                        <i className={\"icon-\" + item.value + \"-ic\"} /> \n                                            {\n                                                Sports.url[item.value + (WSManager.getAppLang() || '')] \n                                            }\n                                         </span>\n                                     </NavItem>\n\n                                    )\n                                })\n                            }\n                        </Nav>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        )\n    }\n\n    checkPickedGame = () => {\n        let returnValue = false;\n        if (!Constants.SELECTED_GAMET && Constants.IS_SPORTS_HUB) {\n            returnValue = true;\n            this.props.history.push(\"/sports-hub#\" + Utilities.getSelectedSportsForUrl())\n        }\n        return returnValue;\n    }\n\n    render() {\n        let { sportsList, activeTab,getGameTypeSport,AvaSports   } = this.state;\n        mContext = this;\n\n        let isLobby = activeTab === 'lobby';\n        let isMyContast = activeTab === 'my-contests';\n        let isCoins = activeTab === 'earn-coins';\n        let isProfile = activeTab === 'my-profile';\n        let isMore = activeTab === 'more';\n        let isLeaderboard = activeTab === 'leaderboard';\n\n        var showLobbySportsTab = process.env.REACT_APP_LOBBY_SPORTS_ENABLE == 1 ? true : (Constants.IS_SPORTS_HUB ? false : true)\n\n        return (\n\n            <MyContext.Provider value={this}>\n                <div className={\"web-container transparent-header lobby-web-container web-container-fixed \" + (sportsList.length > 1 ? ' ' : 'web-container-no-fixed') + (isProfile ? 'white-bg profile-web-container' : '') + (isMore ? ' more-web-container' : '') + (isLeaderboard ? ' header-with-img' : '')}>\n\n                    {this.renderHelmetData(activeTab)}\n\n                    {!isProfile && \n                        <CustomHeader {...this.props} HeaderOption={this.state.HeaderOption} showLobbyFitlers={this.showFilterData} getGameTypeSport={getGameTypeSport} />\n                    }\n\n\n                    <div className={\n                        \"dashboard-container\" + (isProfile ? ' without-header ' : (\n                                isMore || isCoins || sportsList.length < 2 || \n                                (!showLobbySportsTab || AvaSports.length == 0) || (Constants.SELECTED_GAMET == Constants.GameType.OpenPred)\n                                // (!showLobbySportsTab || Constants.SELECTED_GAMET != Constants.GameType.DFS)\n                            ) ?  ' without-sports-tab' : '' ) + ((Constants.SELECTED_GAMET == Constants.GameType.Pickem && isLeaderboard) ?  ' without-sports-tab' : '' )+ (isMyContast ? ' dashboard-my-contest' : '') + (showLobbySportsTab &&this.state.HeaderOption.isPrimary ? ' sports-tab-primary' : '') }>\n                        {\n                            (\n                                // (sportsList.length > 1 && \n                                (AvaSports.length > 1 && \n                                (isLobby || isMyContast)) && \n                                (showLobbySportsTab)\n                                // (showLobbySportsTab && Constants.SELECTED_GAMET == Constants.GameType.DFS)\n                            ) &&\n                            this.renderTopSportsTab()\n                        }\n                        <Tabs id='bottom-tabs' animation={false} onSelect={(tab) => this.onSelect(tab, false)} activeKey={this.state.activeTab} defaultActiveKey={'lobby'} className=\"dasboard-footer-tabs\">\n                            {this.state.footerTabs !== undefined &&\n                                _Map(this.state.footerTabs, (item, idx) => {\n                                    return (\n                                        this.renderTabById(item, activeTab)\n                                    )\n                                })\n                            }\n                        </Tabs>\n                    </div>\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemHTPModal.jsx",[],"/var/www/html/framework/frontend/src/Component/Pickem/NewPickemConfirmModal.jsx",["1557","1558"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Modal, FormGroup } from 'react-bootstrap';\nimport { inputStyleLeft } from '../../helper/input-style';\nimport { getUserBalance,submitPickemFixture } from '../../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _handleWKeyDown } from '../../Utilities/Utilities';\nimport FloatingLabel from 'floating-label-react';\nimport Skeleton from 'react-loading-skeleton';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport CustomHeader from '../../components/CustomHeader';\n\nclass NewConfirmPickem extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            bidAmount: '',\n            minCoin: (this.props.preData.PickemConfigData && this.props.preData.PickemConfigData.min_value) ? parseInt(this.props.preData.PickemConfigData.min_value) : 10,\n            maxCoin: (this.props.preData.PickemConfigData && this.props.preData.PickemConfigData.max_value) ? parseInt(this.props.preData.PickemConfigData.max_value) : 1000,\n            isLoading: false,\n            point_balance: WSManager.getBalance().point_balance || 0,\n        }\n    }\n\n    componentWillMount() {\n        document.addEventListener(\"keydown\", _handleWKeyDown, false);\n        getUserBalance().then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    point_balance: responseJson.data.user_balance.point_balance || 0\n                })\n                WSManager.setAllowedBonusPercantage(responseJson.data.allowed_bonus_percantage)\n                WSManager.setBalance(responseJson.data.user_balance);\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", _handleWKeyDown);\n    }\n\n    onChange = (e) => {\n        this.setState({ bidAmount: e.target.value })\n    }\n\n    timerCompletionCall = () => {\n    }\n\n    submitPrediction = () => {\n        const { mHide, successAction ,selectedData} = this.props.preData;\n        let preBal = parseInt(this.state.point_balance);\n        let bidAmount = parseInt(this.state.bidAmount);\n        let updatedBal = preBal - bidAmount;\n        let param = {\n            \"pickem_id\": selectedData.pickem_id,\n            \"team_uid\": selectedData.TeamUID,\n            \"bet_coins\": bidAmount\n        }\n        this.setState({ isLoading: true })\n        submitPickemFixture(param).then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                CustomHeader.updateCoinBalance(updatedBal);\n                let bal = WSManager.getBalance();\n                bal[\"point_balance\"] = updatedBal;\n                WSManager.setBalance(bal);\n                Utilities.showToast(responseJson.message, 3000, Images.PREDICTION_IC);\n                successAction(selectedData);\n                this.setState({\n                    isLoading: false\n                }, () => {\n                    mHide();\n                });\n            } \n            if(responseJson.response_code === 500){\n                Utilities.showToast(AL.PICK_EXP_MSG, 1000);\n                setTimeout(() => {\n                    if (this.props.history.length > 2) {\n                        this.props.history.goBack();\n                    } else {\n                        this.gotoLobby()\n                    }\n                }, 1000);\n            }\n            else {\n                this.setState({ isLoading: false })\n            }\n        })\n    }\n\n    gotoLobby = () => {\n        this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n    }\n\n    clickEarnCoins = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push(\"/earn-coins\")\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    render() {\n\n        const { \n            mShow, \n            mHide, \n            selectedData,\n            showShareM,\n            item,\n            isFrom\n        } = this.props.preData;\n        const { bidAmount, minCoin, isLoading, point_balance ,maxCoin} = this.state;\n\n        let coin_bal = parseInt(point_balance || 0);\n        let isBtnEnbl = bidAmount >= minCoin && bidAmount <= coin_bal && bidAmount <= maxCoin;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"modal-pred-confirm\"\n                        className={\"center-modal\" + (showShareM ? ' opacityZero' : '')}\n                    >\n                        <Modal.Body>\n                            <div className=\"container\">\n                                <p className=\"title-pp\">{AL.PICK_YOUR_TEAM}</p>\n                                <p className=\"desc-pp\">{AL.PICK_MSG}</p>\n                                {\n                                    isFrom == 'Lobby' && \n                                    <i\n                                        onClick={(e) =>this.props.preData.shareContest(e, item)}\n                                        className=\"icon-share pickem-share\"\n                                    />\n                                }\n                                <div className=\"your-pre\">\n                                    <div className=\"shimmer-v\"><Skeleton duration={2} width={'100%'} height={'100%'} /></div>\n\n                                    <span>{AL.YOUR_PICK}</span>\n                                    <span className=\"option\">\n                                        {\n                                            selectedData.Flag == Images.DRAW_ICON ? \n                                            <img src={Images.DRAW_ICON} alt=\"\" className=\"option-img\" />\n                                            :\n                                            <img src={Utilities.teamFlagURL(selectedData.Flag)} alt=\"\" className=\"option-img\" />\n                                        }\n                                        <span>{selectedData.Name}</span>\n                                    </span>\n                                    {\n                                        <div className=\"match-timing\">\n                                            {\n                                                Utilities.showCountDown({ game_starts_in: selectedData.startInTime })\n                                                    ?\n                                                    <div className=\"countdown time-line\">\n                                                        {\n                                                            selectedData.startInTime && <CountdownTimer\n                                                                deadlineTimeStamp={selectedData.startInTime} />\n                                                        }\n                                                    </div>\n                                                    :\n                                                    <span>\n                                                        <MomentDateComponent data={{ date: selectedData.Date, format: \"D MMM - hh:mm A \" }} />\n                                                    </span>\n                                            }\n                                        </div>\n                                    }\n                                </div>\n                                <FormGroup\n                                    className='input-label-center input-transparent'\n                                    controlId=\"formBasicText\"\n                                >\n                                    <FloatingLabel\n                                        autoComplete='off'\n                                        styles={inputStyleLeft}\n                                        id='amont'\n                                        name='amont'\n                                        value={bidAmount}\n                                        placeholder={`${AL.ENTER_COINS} (${AL.MIN} ${minCoin} ${AL.coins})`}\n                                        type='text'\n                                        maxLength={5}\n                                        onChange={this.onChange}\n                                    />\n                                </FormGroup>\n                                <div className=\"available-bal\">\n                                    <span>{AL.AVAIL_BAL}</span>\n                                    <span className=\"bal\">\n                                        <img src={Images.IC_COIN} alt=\"\" />\n                                        {coin_bal} \n                                    </span>\n                                </div>\n                                {\n                                    (coin_bal < minCoin || coin_bal < bidAmount) && \n                                        <span className=\"no-coins-msg\">\n                                            {AL.NO_COINS_MSG}<a href onClick={this.clickEarnCoins}>{AL.EARN_COINS.toLowerCase()}</a>\n                                        </span>\n                                }\n                            </div>\n                            <button \n                                onClick={this.submitPrediction} \n                                className={\"btn btn-m-p\" + ((isBtnEnbl && !isLoading) ? '' : ' disabled')}>\n                                    {AL.MAKE_PICK}\n                            </button>\n                        </Modal.Body>\n                    </Modal>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default NewConfirmPickem;","/var/www/html/framework/frontend/src/Modals/LanguagePopup.jsx",["1559","1560","1561"],"import React from 'react';\nimport { Modal, Row, Col } from 'react-bootstrap';\nimport Images from '../components/images';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport WSManager from \"../WSHelper/WSManager\";\nimport { changeLanguageString } from \"../helper/AppLabels\";\n\nexport default class LanguagePopup extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            language: this.props.DefaultLanguage,\n            isChanges: false\n        };\n    }\n\n    handleChange = (selectedLang) => {\n        this.setState({\n            language: selectedLang.value,\n            isChanges: true\n        })\n    };\n\n    submitLanguage() {\n        let selectedLang = this.state.language;\n        if (this.props.i18n.language != selectedLang) {\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale:selectedLang,\n                    targetFunc:'handleLanguageChange'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n            this.props.i18n.changeLanguage(selectedLang);\n            WSManager.setAppLang(selectedLang);\n            changeLanguageString();\n            window.location.reload();\n        } else {\n            this.props.IsLanguagePopupHide();\n        }\n        // alert('afbasf')\n    }\n\n    render() {\n\n        const { IsLanguagePopupShow, IsLanguagePopupHide, LanguageList, DefaultLanguage } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsLanguagePopupShow} onHide={IsLanguagePopupHide} bsSize=\"large\" dialogClassName=\"language-modal\" className=\"center-modal\">\n                            <Modal.Header closeButton>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"text-center center-section\">\n                                    <div className=\"language-header\">\n                                        <img src={Images.LANGUAGE_IMG} alt=\"\" />\n                                        <div className=\"m-t-20\">{AppLabels.SELECT_YOUR_LANGUAGE}</div>\n                                    </div>\n                                    <div className=\"language-modal-body\">\n                                        <Row>\n                                            <Col sm={2}></Col>\n                                            <Col sm={8}>\n                                                <Row>\n                                                    {LanguageList && LanguageList.map((item, idx) => {\n                                                        return (\n                                                            <Col key={idx} xs={6} className=\"text-center\">\n                                                                <div\n                                                                    onClick={() => this.handleChange(item)}\n                                                                    className={\"language-box\" + (item.value == this.state.language ? ' selected' : '')}>\n                                                                    <div className=\"language-text\">{item.label}</div>\n                                                                    <div className=\"language-sub-text\">{item.label}</div>\n                                                                </div>\n                                                            </Col>\n                                                        )\n                                                    })\n                                                    }\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <Row>\n                                        <Col xs={12} className=\"text-center\">\n                                            <button disabled={!this.state.isChanges} className=\"submit-otp\" type='submit' onClick={() => this.submitLanguage()}><i className=\"icon-check\"></i></button>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Modal.Body>\n                        </Modal>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ShareOpenPredictor.jsx",["1562","1563","1564","1565","1566","1567","1568","1569","1570"],"import React, { Component } from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { _Map, Utilities } from '../../Utilities/Utilities';\nimport { getOpenPredictionDetail } from '../../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../CustomComponent';\nimport Helmet from 'react-helmet';\nimport ConfirmOpenPredictor from './ConfirmOpenPredictor';\nimport MetaData from '../../helper/MetaData';\nimport WSManager from '../../WSHelper/WSManager';\nimport CustomHeader from '../../components/CustomHeader';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport { AppSelectedSport, MATCH_TYPE, GameType } from '../../helper/Constants';\n\nclass ShareOpenPredictor extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            HOS: {\n                back: this.props.history.length > 2,\n                fixture: false,\n                title: '',\n                hideShadow: false,\n                MLogo: true\n            },\n            LData: '',\n            detail: '',\n            showCP: false,\n            sourceUrlShow: false\n        }\n    }\n\n    componentWillMount() {\n        WSManager.setShareContestJoin(true);\n        WSManager.setPickedGameType(GameType.OpenPred);\n        if (this.props.match && this.props.match.params) {\n            const matchParam = this.props.match.params;\n            let pmid = atob(matchParam.prediction_master_id)\n            this.getDetail(matchParam.category_id, pmid);\n        }\n    }\n\n    getDetail(category_id, prediction_master_id) {\n        let param = {\n            \"category_id\": category_id,\n            \"prediction_master_id\": prediction_master_id\n        }\n        getOpenPredictionDetail(param).then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                if (responseJson.data.prediction) {\n                    this.setState({\n                        detail: responseJson.data.prediction[0] || '',\n                        LData: responseJson.data.category_data,\n                    });\n                } else {\n\n                    Utilities.showToast(AL.P_EXP_MSG, 1000);\n                    setTimeout(() => {\n                        if (this.props.history.length > 2) {\n                            this.props.history.goBack();\n                        } else {\n                            this.gotoLobby()\n                        }\n                    }, 1000);\n                }\n            }\n        })\n    }\n\n    onSelectPredict = (optionIndex, option) => {\n        let item = this.state.detail;\n        _Map(item['option'], (obj, idx) => {\n            if (idx === optionIndex) {\n                obj['user_selected_option'] = option.prediction_option_id;\n                item['option_predicted'] = option\n            } else {\n                obj['user_selected_option'] = null;\n            }\n        })\n        this.setState({\n            detail: item\n        }, () => {\n            setTimeout(() => {\n                this.onMakePrediction()\n            }, 50);\n        })\n    }\n\n    onMakePrediction = () => {\n        if (WSManager.loggedIn()) {\n            this.setState({\n                showCP: true\n            })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    hideCP = () => {\n        this.setState({\n            showCP: false\n        })\n    }\n\n    goToSignup = () => {\n        const matchParam = this.props.match.params;\n        let pathName = '/' + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor-details/\" + matchParam.category_id + '/' + matchParam.prediction_master_id\n        this.props.history.push({\n            pathname: '/signup', state: {\n                joinContest: true,\n                lineupPath: pathName,\n                FixturedContest: this.state.LData,\n                LobyyData: this.state.LData\n            }\n        })\n    }\n\n    timerCallback = () => {\n\n    }\n\n    gotoLobby = () => {\n        this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl() + \"#open-predictor\")\n    }\n\n    successAction = () => {\n        setTimeout(() => {\n            if (this.props.history.length > 2) {\n                this.props.history.goBack();\n            } else {\n                this.gotoLobby()\n            }\n        }, 1500);\n    }\n\n    renderFilledBar = (opt, idx) => {\n        const { detail } = this.state;\n        let predictedPer = detail.total_predictions === 0 ? 0 : ((opt.option_total_coins / detail.total_pool) * 100).toFixed(2);\n        let checkPredictedPer = (predictedPer % 1) === 0 ? Math.floor(predictedPer) : predictedPer;\n        predictedPer = checkPredictedPer;\n        let isOptSelected = (opt.user_selected_option === opt.prediction_option_id);\n        return (\n            <div key={idx} onClick={() => this.onSelectPredict(idx, opt)} className={\"prediction-bar\" + (isOptSelected ? ' selected' : '')}>\n                <div className=\"filled-bar\" style={{ width: detail.entry_type == 1 ? (isOptSelected ? '100%' : '0') : predictedPer + '%', animationDelay: (0.05 * idx) + 's' }} />\n                <p className=\"answer\">{opt.option}</p>\n                {\n                    detail.entry_type == 0 &&\n                    <div className=\"corrected-ans\">\n                        <p>{predictedPer > 0 ? (predictedPer + '%') : ''}</p>\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    viewParticipants = () => {\n        const matchParam = this.props.match.params;\n        let pmid = atob(matchParam.prediction_master_id)\n        let mURL = Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor/participants/\" + btoa(pmid);\n        this.props.history.push({ pathname: '/' + mURL, state: { isLeader: false } });\n    }\n\n    callNativeRedirection(item) {\n        let data = {\n            action: 'predictionLink',\n            targetFunc: 'predictionLink',\n            type: 'link',\n            url: item.source_url,\n            detail: item\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n\n    render() {\n        const { HOS, LData, detail, showCP } = this.state;\n        let game_starts_in = detail.deadline_time / 1000;\n        let betCoin = 0;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container prediction-detail-wrap\">\n                        <img className=\"bg-c-img\" src={Images.OPEN_CARD_IMG_DETAIL} alt=\"\" />\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.PRDSHARE.title}</title>\n                            <meta name=\"description\" content={MetaData.PRDSHARE.description} />\n                            <meta name=\"keywords\" content={MetaData.PRDSHARE.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} LobyyData={LData} HeaderOption={HOS} openPage={this.openPage} />\n                        {\n                            detail !== '' && <div className=\"pred-detail-v \">\n                                <p className=\"questions\">\n                                    {detail.desc}\n                                </p>\n                                {\n                                    (detail.source_desc || detail.source_url) &&\n                                    <div className=\"que-desc\">\n                                        {\n                                            detail.source_url &&\n                                            <React.Fragment>\n                                                {\n                                                    window.ReactNativeWebView ?\n                                                        <a\n                                                            href\n                                                            onClick={() => this.callNativeRedirection(detail)}\n                                                            className=\"attached-url\">\n                                                            <i className=\"icon-link\"></i>\n                                                        </a>\n                                                        :\n                                                        <a\n                                                            href={detail.source_url}\n                                                            target='_blank'\n                                                            className=\"attached-url \">\n                                                            <i className=\"icon-link\"></i>\n                                                        </a>\n                                                }\n                                            </React.Fragment>\n                                        }\n\n\n                                        {\n                                            detail.source_desc &&\n                                            <OverlayTrigger trigger={['hover', 'focus']} placement={'right'} overlay={\n                                                <Tooltip id=\"tooltip\">\n                                                    <strong>{detail.source_desc}</strong>\n                                                </Tooltip>\n                                            }>\n                                                <i className=\"icon-ic-info que-info\" />\n                                            </OverlayTrigger>\n                                        }\n\n                                    </div>\n                                }\n                                {\n                                    _Map(detail.option, (opt, idx) => {\n                                        betCoin = (opt.user_selected_option === opt.prediction_option_id) ? opt.bet_coins : betCoin\n                                        return this.renderFilledBar(opt, idx);\n                                    })\n                                }\n                                <div className=\"footer-vc\">\n                                    <div className=\"match-timing league-n\">\n                                        <div className=\"leag-name\">{LData.name}</div>\n                                    </div>\n                                    <div>\n                                        {\n                                            detail.entry_type == 0 && detail.prize_pool > 0 &&\n                                            <p className=\"price-pool\"><span className=\"price-pool-first\">{AL.WIN}</span><img src={Images.IC_COIN} alt=\"\" />{detail.prize_pool}</p>\n                                        }\n                                        {\n                                            detail.entry_type == 0 && detail.prize_pool == 0 &&\n                                            <p className=\"price-pool-first\">{AL.BE_FIRST}</p>\n                                        }\n                                        {\n                                            detail.entry_type == 1 &&\n                                            <p className=\"price-pool\"><span className=\"price-pool-first\">{AL.WIN}</span><img src={Images.IC_COIN} alt=\"\" />{detail.win_prize}</p>\n                                        }\n                                        <div className=\"date-v\">\n                                            <div className=\"match-timing\">\n                                                {\n                                                    Utilities.showCountDown({ game_starts_in: game_starts_in }) ?\n                                                        <span className=\"d-flex\">\n                                                            <div className=\"countdown time-line\">\n                                                                {\n                                                                    game_starts_in && <CountdownTimer timerCallback={this.timerCallback} deadlineTimeStamp={game_starts_in} />\n                                                                }\n                                                            </div>\n                                                            {AL.REMAINING}\n                                                        </span> :\n                                                        <span> <MomentDateComponent data={{ date: detail.deadline_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                                }\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <div className=\"lobby-go\">\n                                       \n                                        {this.props.history.length <= 2 && <a href onClick={this.gotoLobby}>{AL.GO_TO_LOBBY}</a>}\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        {\n                            showCP && <ConfirmOpenPredictor {...this.props} preData={{\n                                mShow: showCP,\n                                mHide: this.hideCP,\n                                cpData: detail,\n                                successAction: this.successAction\n                            }} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default ShareOpenPredictor;\n","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionParticipants.jsx",[],"/var/www/html/framework/frontend/src/Component/PredictionModule/SharePrediction.jsx",[],"/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionContestList.jsx",["1571","1572","1573","1574","1575","1576","1577"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { _Map, _filter, Utilities } from '../../Utilities/Utilities';\nimport { NoDataView } from '../CustomComponent';\nimport { PredictionLearnMore, ConfirmPrediction } from '.';\nimport { getPredictionContest, checkIsPredictionJoin } from '../../WSHelper/WSCallings';\nimport { CONTESTS_LIST, IS_DFS, IS_PREDICTION } from '../../helper/Constants';\nimport SocketIOClient from \"socket.io-client\";\nimport Helmet from 'react-helmet';\nimport Skeleton from 'react-loading-skeleton';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport PredictionCard from './PredictionCard';\nimport SharePModal from './SharePModal';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\n\nvar socket = '';\n\nclass PredictionContestList extends Component {\n    constructor(props) {\n        super(props);\n        this._isMounted = false;\n        this.state = {\n            LData: this.props.data || '',\n            ContestList: [],\n            isLoading: false,\n            ShimmerList: [1, 2, 3, 4, 5, 6],\n            showCP: false,\n            showLM: false,\n            showShareM: false,\n            ShareItem: '',\n            joinPItem: ''\n        }\n    }\n\n    componentDidMount() {\n        if(IS_PREDICTION){\n            socket = SocketIOClient(WSC.nodeBaseURL);\n        }\n        this._isMounted = true;\n        this.parseHistoryStateData(this.state.LData);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        socket.disconnect();\n    }\n\n    getContestList(data) {\n        let param = {\n            \"season_game_uid\": data.season_game_uid,\n        }\n        this.setState({ isLoading: true })\n        getPredictionContest(param).then((responseJson) => {\n            this.setState({ isLoading: false })\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    ContestList: responseJson.data.predictions || []\n                });\n            }\n        })\n    }\n\n    parseHistoryStateData = (data) => {\n        socket.disconnect();\n        if (data) {\n            let { LobyyData } = data;\n            this.setState({\n                LData: LobyyData\n            }, () => {\n                this.getContestList(LobyyData)\n                this.joinPredictionRoom(LobyyData)\n            })\n        }\n    }\n\n    joinPredictionRoom = (data) => {\n        socket.connect()\n        socket.emit('JoinAddPredictionRoom', { season_game_uid: data.season_game_uid });\n        socket.emit('JoinPausePlayPredictionRoom', { season_game_uid: data.season_game_uid });\n        socket.emit('JoinDeletePredictionRoom', { season_game_uid: data.season_game_uid });\n        if (WSManager.loggedIn()) {\n            socket.emit('JoinWonPredictionRoom', { user_id: WSManager.getProfile().user_id });\n            socket.on('NotifyWonPrediction', (obj) => {\n                if (this._isMounted) {\n                    let bal = WSManager.getBalance();\n                    let preBal = parseInt(bal.point_balance || 0);\n                    let updatedBal = preBal + parseInt(obj.amount);\n                    CustomHeader.updateCoinBalance(updatedBal);\n                    bal[\"point_balance\"] = updatedBal;\n                    WSManager.setBalance(bal);\n                    CustomHeader.showRSuccess(obj);\n                }\n            })\n        }\n        socket.on('NotifyNewPrediction', (obj) => {\n            if (this._isMounted && obj.season_game_uid === data.season_game_uid) {\n                this.addFixture(obj)\n                CustomHeader.showNewPToast()\n            }\n        })\n        socket.on('NotifyDeletePrediction', (obj) => {\n            if (this._isMounted && obj.season_game_uid === data.season_game_uid) {\n                this.deleteFixture(obj)\n            }\n        })\n        socket.on('NotifyPausePlayPrediction', (obj) => {\n            if (this._isMounted && obj.season_game_uid === data.season_game_uid) {\n                if (obj.pause === 1) {\n                    this.deleteFixture(obj)\n                } else if (obj.pause === 0) {\n                    if (WSManager.loggedIn()) {\n                        let param = {\n                            \"prediction_master_id\": obj.prediction_master_id,\n                        }\n                        checkIsPredictionJoin(param).then((responseJson) => {\n                            if (responseJson.response_code === WSC.successCode) {\n                                if (responseJson.data.is_joined == 0) {\n                                    this.addFixture(obj)\n                                }\n                            }\n                        })\n                    } else {\n                        this.addFixture(obj)\n                    }\n                }\n            }\n        })\n    }\n\n    deleteFixture = (item) => {\n        let fArray = _filter(this.state.ContestList, (obj) => {\n            return item.prediction_master_id != obj.prediction_master_id\n        })\n        this.setState({\n            ContestList: fArray\n        })\n    }\n\n    addFixture = (obj) => {\n        let pinnedArray = [];\n        let tmpArray = [];\n        _Map(this.state.ContestList, (item) => {\n            if (item.is_pin == 1) {\n                pinnedArray.push(item)\n            } else {\n                tmpArray.push(item)\n            }\n        })\n        this.setState({\n            ContestList: [...pinnedArray, obj.prediction, ...tmpArray]\n        });\n    }\n\n    timerCompletionCall = (item) => {\n        this.deleteFixture(item)\n    }\n\n    onSelectPredict = (itemIndex, optionIndex, option) => {\n        let tmpArray = this.state.ContestList;\n        let item = tmpArray[itemIndex];\n        _Map(item['option'], (obj, idx) => {\n            if (idx === optionIndex) {\n                obj['user_selected_option'] = option.prediction_option_id;\n                item['option_predicted'] = option\n            } else {\n                obj['user_selected_option'] = null;\n            }\n        })\n        this.setState({\n            ContestList: tmpArray\n        })\n    }\n\n    onMakePrediction = (item) => {\n        if (WSManager.loggedIn()) {\n            this.setState({\n                joinPItem: item,\n                showCP: true\n            })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    showShareM = (data) => {\n        this.setState({\n            showShareM: true,\n        });\n    }\n\n    hideShareM = () => {\n        this.setState({\n            showShareM: false,\n        });\n    }\n\n    shareContest(event, data) {\n        if (WSManager.loggedIn()) {\n            event.stopPropagation();\n            this.setState({ showShareM: true, ShareItem: data })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    hideCP = () => {\n        let tmpArray = this.state.ContestList;\n        let itemIndex = tmpArray.indexOf(this.state.joinPItem)\n        let item = itemIndex >= 0 ? tmpArray[itemIndex] : null;\n        if (item && item.option) {\n            _Map(item['option'], (obj, idx) => {\n                if (obj.user_selected_option) {\n                    obj['user_selected_option'] = null;\n                }\n            })\n            this.setState({\n                ContestList: tmpArray,\n                showCP: false\n            })\n        } else {\n            this.setState({\n                showCP: false\n            })\n        }\n    }\n\n    clickLearnMore = () => {\n        this.setState({\n            showLM: true\n        })\n    }\n\n    hideLM = () => {\n        this.setState({\n            showLM: false\n        })\n    }\n\n    clickEarnCoins = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push(\"/earn-coins\")\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    renderDFSCard = () => {\n        if(Utilities.getMasterData().allow_dfs_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().dfs_bnr;\n        if (IS_DFS) {\n            return ( bannerImg ?\n                <li onClick={this.props.goToDFS} className=\"is-card prd-card-img-only\" >\n                    <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n                </li>\n                :\n                <li onClick={this.props.goToDFS} className=\"is-card\">\n                    <div className=\"dfs-card\" >\n                        <img className=\"img-dfs-shape\" src={Images.DFS_SHAPE_IMG} alt='' />\n                        <div className=\"dfs-c\">\n                            <img className=\"img-dfs\" src={Images.DFS_IMG} alt='' />\n                            <p>Play Daily Fantasy Sports, Win Real Cash Prizes</p>\n                        </div>\n                    </div>\n                </li>\n            )\n        }\n        return ''\n    }\n    renderPrizeCard = () => {\n        if(Utilities.getMasterData().allow_prize_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().prize_bnr;\n        return ( bannerImg ?\n            <li onClick={this.props.goToRewards} className=\"is-card prd-card-img-only m-b-20\" >\n                <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n            </li>\n            :\n            <li className=\"is-card\" onClick={this.props.goToRewards}>\n                <div className=\"prd-prize-card\">\n                    <img className=\"img-prize-card\" src={Images.PRD_PRIZE_IMG} alt='' />\n                    <div className=\"dfs-c\">\n                        <img className=\"img-dfs\" src={Images.PRIZES_CAR} alt='' />\n                        <p>Play Prediction and Win Huge Rewards</p>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n\n    render() {\n        const { ContestList, isLoading, ShimmerList, showCP, joinPItem, showLM, showShareM, ShareItem } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"prediction-wrap-v\">\n                        <div className=\"p_view-container\">\n                            <div className=\"contest-action\">\n                                <button onClick={this.clickLearnMore} className=\"btn btn-rounded small\">{AL.HOW_TO_PREDICT}</button>\n                                <button onClick={this.clickEarnCoins} className=\"btn btn-rounded small\">{AL.EARN_COINS}</button>\n                            </div>\n                            {\n                                !isLoading && <ul className=\"list-pred\">\n                                    {\n                                        ContestList.map((item, index) => {\n                                            return (\n                                                <React.Fragment key={index} >\n                                                    <PredictionCard\n                                                        {...this.props}\n                                                        key={item.prediction_master_id}\n                                                        data={{\n                                                            itemIndex: index,\n                                                            item: item,\n                                                            status: CONTESTS_LIST,\n                                                            timerCallback: this.timerCompletionCall,\n                                                            onSelectPredict: this.onSelectPredict,\n                                                            onMakePrediction: this.onMakePrediction,\n                                                            shareContest: this.shareContest.bind(this)\n                                                        }} />\n                                                    {\n                                                        index === 0 && this.renderPrizeCard()\n                                                    }\n                                                    {\n                                                        index === 2 && this.renderDFSCard()\n                                                    }\n                                                </React.Fragment>\n                                            );\n                                        })\n                                    }\n                                    {\n                                        (ContestList.length < 3 && !isLoading) && this.renderDFSCard()\n                                    }\n                                </ul>\n                            }\n\n                            {\n                                ContestList.length === 0 && !isLoading &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                    MESSAGE_1={AL.NO_FIXTURES_MSG1}\n                                    MESSAGE_2={AL.NO_FIXTURES_MSG3}\n                                />\n                            }\n                            {\n                                ContestList.length === 0 && isLoading &&\n                                _Map(ShimmerList, (item, index) => {\n                                    return (\n                                        this.Shimmer(index)\n                                    )\n                                })\n                            }\n\n                        </div>\n                        {\n                            showCP && <ConfirmPrediction {...this.props} preData={{\n                                mShow: showCP,\n                                mHide: this.hideCP,\n                                cpData: joinPItem,\n                                successAction: this.timerCompletionCall\n                            }} />\n                        }\n                        {\n                            showLM && <PredictionLearnMore {...this.props} preData={{\n                                mShow: showLM,\n                                mHide: this.hideLM\n                            }} />\n                        }\n                        {\n                            showShareM &&\n                            <SharePModal\n                                {...this.props}\n                                preData={{\n                                    mShow: showShareM,\n                                    mHide: this.hideShareM,\n                                    spData: ShareItem\n                                }}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default PredictionContestList;","/var/www/html/framework/frontend/src/Component/CoinsModule/WhatIsNew.jsx",["1578","1579","1580"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Helmet } from \"react-helmet\";\nimport { _Map } from '../../Utilities/Utilities';\nimport { Swipeable } from 'react-swipeable'\nimport { SELECTED_GAMET } from '../../helper/Constants';\nimport { updateUserSettings } from '../../WSHelper/WSCallings';\nimport CustomHeader from '../../components/CustomHeader';\nimport Images from '../../components/images';\nimport MD from \"../../helper/MetaData\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport WSManager from '../../WSHelper/WSManager';\n\nclass WhatIsNew extends Component {\n    constructor(props) {\n        super(props);\n        this.isFirst = (props.location && props.location.state) ? props.location.state.isFirst : false;\n        this.state = {\n            HOS: {\n                back: !this.isFirst,\n                title: AL.WHATSNEW,\n                skip: true,\n                skipAction: this.skipBtnClicked\n            },\n            SIN: 'slide-in-r',\n            CSI: 0,\n            FLOAD: 0,\n            gameType: SELECTED_GAMET,\n            SLIDRD: [\n                {\n                    title: AL.HOW_TO_EARN,\n                    decription: AL.HOW_TO_EARN_DESC,\n                    image: Images.COIN_SW1\n                },\n                {\n                    title: AL.DAILY_CHECKIN,\n                    decription: AL.VISIT + ' ' + WSC.AppName + ' ' + AL.EVERYDAY + '. ' + AL.DAILY_CHECKIN_DESC,\n                    image: Images.COIN_SW2\n                },\n                {\n                    title: AL.GET_REWARDS,\n                    decription: AL.GET_REWARDS_DESC,\n                    image: Images.COIN_SW3\n                }\n            ]\n        }\n    }\n\n\n    componentWillMount() {\n        if (this.state.gameType && this.isFirst) {\n            WSManager.removeLSItem('SHGT');\n        }\n    }\n\n\n    completedWhatsNew = () => {\n        let profile = WSManager.getProfile();\n        let param = profile.user_setting || {};\n        if (param.earn_coin == \"1\") {\n            this.props.history.push({ pathname: '/' });\n        } else {\n            param[\"earn_coin\"] = \"1\";\n            param[\"user_id\"] = undefined;\n            param[\"_id\"] = undefined;\n\n            profile['user_setting'] = param;\n            WSManager.setProfile(profile);\n            if (this.state.gameType) {\n                setTimeout(() => {\n                    CustomHeader.showSHSCM();\n                }, 100);\n                WSManager.setPickedGameType(this.state.gameType);\n            }\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/' });\n            }, 50);\n\n            updateUserSettings(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    CustomHeader.showCoinCM();\n                }\n            })\n        }\n    }\n\n    skipBtnClicked = () => {\n        if (this.isFirst) {\n            this.completedWhatsNew();\n        } else {\n            this.props.history.goBack();\n        }\n    }\n\n    nextBtnAction = () => {\n        const { CSI, SLIDRD } = this.state;\n        const length = (SLIDRD.length - 1);\n        this.changleSlider(CSI < length ? (CSI + 1) : CSI)\n        if (CSI === length) {\n            if (!this.isFirst) {\n                this.props.history.goBack();\n            } else {\n                this.completedWhatsNew();\n            }\n        }\n    }\n\n    preBtnAction = () => {\n        const { CSI } = this.state;\n        this.changleSlider(CSI > 0 ? (CSI - 1) : CSI)\n    }\n\n    onSwiped = (eventData) => {\n        const { CSI, SLIDRD } = this.state;\n        if (eventData && eventData.dir === \"Left\" && CSI < (SLIDRD.length - 1)) {\n            this.nextBtnAction();\n        }\n        if (eventData && eventData.dir === \"Right\") {\n            this.preBtnAction();\n        }\n    }\n\n    changleSlider = (value) => {\n        const length = (this.state.SLIDRD.length - 1)\n        if (this.state.CSI != value) {\n            this.setState({\n                CSI: value,\n                FLOAD: this.state.FLOAD < value ? value : this.state.FLOAD,\n                SIN: value >= this.state.CSI ? 'slide-in-r' : 'slide-in-l',\n                HOS: {\n                    back: !this.isFirst,\n                    title: AL.WHATSNEW,\n                    skip: value < length,\n                    skipAction: this.skipBtnClicked\n                }\n            })\n        }\n    }\n\n    styleCss(CSI, index) {\n        const { SIN } = this.state;\n        if (CSI === index) {\n            return ('active ' + SIN)\n        } else if (CSI > index && index < 2) {\n            return ('slide-out-r')\n        }\n        else if (CSI < index && index > 0) {\n            return 'slide-out-l' + (this.state.FLOAD < index ? ' no-anim' : '');\n        }\n\n    }\n\n    renderSPage = () => {\n        const { SLIDRD, CSI } = this.state;\n        return (\n            <React.Fragment>\n                {\n                    _Map(SLIDRD, (item, index) => {\n                        return (\n                            <div name={\"slide-\" + item.title} key={index} className={\"c-slide \" + this.styleCss(CSI, index)}>\n                                <div className=\"slider-title\">\n                                    {item.title}\n                                </div>\n                                <div className=\"slider-desc\">\n                                    {item.decription}\n                                </div>\n                                <img alt=\"\" src={item.image} />\n                            </div>\n                        )\n                    })\n                }\n            </React.Fragment>\n        )\n    }\n    renderSDots = () => {\n        const { SLIDRD, CSI } = this.state;\n        return (\n            <ul className=\"slider-dots-ul\">\n                {\n                    _Map(SLIDRD, (item, index) => {\n                        return <li name={item.title} key={index} value={index} onClick={(e) => this.changleSlider(e.target.value)} className={CSI === index ? \"active\" : \"\"} />\n                    })\n                }\n            </ul>\n        )\n    }\n\n\n\n    renderFooterBtns = () => {\n        const { CSI, SLIDRD } = this.state;\n        const length = (SLIDRD.length - 1)\n        return (\n            <div className=\"footer-btns\" >\n                <a href onClick={this.preBtnAction} name={CSI + 'prev'} className={\"header-action skip-step\" + (CSI > 0 ? '' : ' btn-hide')}>\n                    {AL.PREV}\n                </a>\n                <a href onClick={this.nextBtnAction} name={CSI + 'next'} className=\"header-action skip-step active\">\n                    {CSI === length ? AL.GOTIT : AL.NEXT}\n                </a>\n            </div>\n        )\n    }\n\n    render() {\n        const { HOS } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container what-is-new\">\n                        <Helmet titleTemplate={`${MD.template} | %s`}>\n                            <title>{MD.WSN.title}</title>\n                            <meta name=\"description\" content={MD.WSN.description} />\n                            <meta name=\"keywords\" content={MD.WSN.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HOS} />\n                        <Swipeable className=\"swipe-view\" onSwiped={this.onSwiped} >\n                            <div className=\"slider-container\">\n                                <div className=\"slides\">\n                                    {this.renderSPage()}\n                                </div>\n                                {this.renderSDots()}\n                                {this.renderFooterBtns()}\n                            </div>\n                        </Swipeable>\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default WhatIsNew;","/var/www/html/framework/frontend/src/Component/CoinsModule/EarnCoins.jsx",["1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591"],"import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport Skeleton from 'react-loading-skeleton';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map, isFooterTab } from '../../Utilities/Utilities';\nimport { getEarnCoinsList, getUserBalance } from '../../WSHelper/WSCallings';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport MD from \"../../helper/MetaData\";\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport { GameType } from '../../helper/Constants';\n\nvar globalHELIST = [];\nvar showToolTip = true;\nvar gThis = null;\n\nclass EarnCoins extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            PRFLD: WSManager.getProfile(),\n            AllSports: Utilities.getMasterData().sports_hub,\n            HELIST: [],\n            ISLOAD: false,\n            user_balance: '',\n            toolTip: showToolTip,\n            blinkAnim: showToolTip\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ toolTip: false });\n            setTimeout(() => {\n                this.setState({ blinkAnim: false });\n            }, 7000);\n            showToolTip = false;\n        }, 4000);\n\n        if (globalHELIST.length > 0) {\n            this.setState({\n                HELIST: globalHELIST\n            })\n            this.getUserBal();\n        } else {\n            this.callApiEarnCoinsList();\n        }\n    }\n\n    componentWillUnmount() {\n        gThis = null;\n    }\n\n\n    callApiEarnCoinsList = () => {\n        let param = {}\n        this.setState({ ISLOAD: true })\n        getEarnCoinsList(param).then((responseJson) => {\n            this.getUserBal();\n            this.setState({ ISLOAD: false })\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    HELIST: responseJson.data.earn_coins || []\n                })\n                globalHELIST = (responseJson.data.earn_coins || [])\n            }\n        })\n    }\n\n    getUserBal = () => {\n        getUserBalance().then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                WSManager.setAllowedBonusPercantage(responseJson.data.allowed_bonus_percantage)\n                WSManager.setBalance(responseJson.data.user_balance);\n                this.setState({ user_balance: responseJson.data.user_balance });\n            }\n        })\n    }\n\n    btnAction = (value) => {\n        if (value.module_key === 'daily_streak_bonus' && CustomHeader.showDailyStreak) {\n            CustomHeader.showDailyStreak();\n        } else if (value.module_key === 'refer-a-friend') {\n            this.props.history.push({ pathname: \"/refer-friend\" });\n        } else if (value.module_key === 'feedback') {\n            this.props.history.push({ pathname: \"/feedback\" });\n        } else if (value.module_key === 'prediction') {\n            WSManager.setPickedGameType(GameType.Pred);\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        } else if (value.game_key === GameType.OpenPred) {\n            WSManager.setPickedGameType(GameType.OpenPred);\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        } else if (value.game_key === GameType.OpenPredLead) {\n            WSManager.setPickedGameType(GameType.OpenPredLead);\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        } else if (value.game_key === GameType.Pickem) {\n            WSManager.setPickedGameType(GameType.Pickem);\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        }\n    }\n\n    gotoCoinTransaction = () => {\n        this.props.history.push({ pathname: '/transactions', state: { tab: AL.COINS } })\n    }\n    gotoRewards = () => {\n        this.props.history.push({ pathname: '/rewards', state: { tab: AL.COINS } })\n    }\n\n    static updateBalance = () => {\n        if (gThis) {\n            gThis.getUserBal();\n        }\n    }\n\n\n    renderListItem = (item,isSport) => {\n        let is_allSport = isSport;\n        let data = (item[WSManager.getAppLang() || 'en']) || '';\n        return (\n            <React.Fragment>\n                {\n                    is_allSport ?\n                    <React.Fragment>\n                        {\n                            ( item.game_key == GameType.OpenPred || item.game_key == GameType.OpenPredLead || item.game_key == GameType.Pickem) &&\n                            <li key={item.game_key}>\n                                <div>\n                                    <p className=\"list-t\">{item[WSManager.getAppLang() + '_title']}</p>\n                                    <p className=\"list-d\">{item[WSManager.getAppLang() + '_desc']}</p>\n                                    <a href className=\"list-btn\" onClick={() => this.btnAction(item)} >\n                                        {(item.game_key == GameType.Pickem || item.game_key == GameType.OpenPred || item.game_key == GameType.OpenPredLead) ? AL.PREDICT : (item.game_key == GameType.Pickem) ? AL.PICK : AL.PLAY_NOW }\n                                    </a>\n                                </div>\n                                {\n                                    (item.game_key == GameType.Pickem) ?\n                                    <img src={Images.PICK_EARNCOIN} alt=\"\" />\n                                    :\n                                    <img src={Images.PREDICT_EARNCOIN} alt=\"\" />\n                                }\n                            </li>\n                        }\n                    </React.Fragment>\n                    :\n                    <li key={item.module_key}>\n                        <div>\n                            <p className=\"list-t\">{data.label}</p>\n                            <p className=\"list-d\">{data.description}</p>\n                            <a href className=\"list-btn\" onClick={() => this.btnAction(item)} >{data.button_text}</a>\n                        </div>\n                        <img src={Utilities.getS3URL(item.image_url)} alt=\"\" />\n                    </li>\n                }\n            </React.Fragment>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-line\">\n                            <Skeleton height={9} width={'80%'} />\n                            <Skeleton height={6} width={'100%'} />\n                            <Skeleton height={6} width={100} />\n                        </div>\n                        <div className=\"shimmer-bottom-view\">\n                            <div className=\"shimmer-buttin w-25\">\n                                <Skeleton height={30} width={160} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"shimmer-image\">\n                        <Skeleton width={70} height={70} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        const { PRFLD, HELIST, ISLOAD, user_balance, toolTip, blinkAnim,AllSports } = this.state;\n        let userCoinBalnc = (user_balance.point_balance || 0);\n        gThis = this;\n\n        let HeaderOption = {\n            title: AL.HOW_TO_EARN,\n            notification: true,\n            hideShadow: true,\n            filter: false,\n            back: true\n        }\n\n        console.log('AllSports',AllSports);\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"web-container how-earn-coins \" + (isFooterTab('earn-coins') ? 'mh-100-per p-0' : '')}>\n                        {\n                            !isFooterTab('earn-coins') &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        <Helmet titleTemplate={`${MD.template} | %s`}>\n                            <title>{MD.ERNC.title}</title>\n                            <meta name=\"description\" content={MD.ERNC.description} />\n                            <meta name=\"keywords\" content={MD.ERNC.keywords}></meta>\n                        </Helmet>\n                        <div className=\"top-profile\">\n                            {\n                                (user_balance != '' && toolTip) &&\n                                <div className=\"coin-tooltip\"><div className=\"inner-text\">{AL.SEE_COIN_TRANS}</div></div>\n                            }\n                            <div className=\"profile-v\">\n                                <img src={PRFLD.image ? Utilities.getThumbURL(PRFLD.image) : Images.DEFAULT_AVATAR} alt=\"\" />\n                                <div className=\"v-username\">{PRFLD.user_name}</div>\n                            </div>\n                            {\n                                user_balance != '' && <div className=\"coins-v\">\n                                    {userCoinBalnc > 0 && <span onClick={this.gotoRewards} className=\"redeem\">{AL.REDEEM}</span>}\n                                    <div onClick={this.gotoCoinTransaction} className={\"c-balance \" + (blinkAnim ? 'show-tooltip' : '')}>\n                                        <div className=\"pulse-ring\" style={{ animationDelay: \"-2s\" }}></div>\n                                        <div className=\"pulse-ring\" style={{ animationDelay: \"-1s\" }}></div>\n                                        <div className=\"pulse-ring\" style={{ animationDelay: \"-0s\" }}></div>\n                                        <img className=\"coin-img\" src={Images.IC_COIN} alt=\"\" /><span>{Utilities.kFormatter(userCoinBalnc)}</span>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                        <ul className=\"list-type\">\n                            {\n                                _Map(HELIST, (item, idx) => {\n                                    return this.renderListItem(item)\n                                })\n                            }\n                            {\n                                HELIST.length === 0 && ISLOAD &&\n                                [1, 1, 1, 1, 1, 1].map((item, index) => {\n                                    return this.Shimmer(index)\n                                })\n                            }\n                            {\n                                _Map(AllSports, (item, idx) => {\n                                    return this.renderListItem(item,true)\n                                })\n                            }\n                        </ul>\n                    </div>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default EarnCoins;\n","/var/www/html/framework/frontend/src/Component/CoinsModule/FeedbackQA.jsx",[],"/var/www/html/framework/frontend/src/Component/CoinsModule/RedeemCoins.jsx",["1592"],"import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport Skeleton from 'react-loading-skeleton';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { getRewardList, redeemRewards } from '../../WSHelper/WSCallings';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport MD from \"../../helper/MetaData\";\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\n\nvar globalRCLIST = []\n\nclass RedeemCoins extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            RCLIST: [],\n            ISLOAD: false,\n            userCoinB: (WSManager.getBalance().point_balance || 0),\n            isApiCalling: false\n        }\n    }\n\n    componentDidMount() {\n        if (globalRCLIST.length > 0) {\n            this.setState({\n                RCLIST: globalRCLIST.sort((a, b) => parseInt(a.redeem_coins) - parseInt(b.redeem_coins))\n            })\n        } else {\n            this.callApiRedeemList();\n        }\n    }\n\n    callApiRedeemList = () => {\n        let param = {}\n        this.setState({ ISLOAD: true })\n        getRewardList(param).then((responseJson) => {\n            this.setState({ ISLOAD: false })\n            if (responseJson.response_code === WSC.successCode) {\n                let listdata = responseJson.data.rewards || [];\n                this.setState({\n                    RCLIST: listdata.sort((a, b) => parseInt(a.redeem_coins) - parseInt(b.redeem_coins))\n                })\n                globalRCLIST = listdata.sort((a, b) => parseInt(a.redeem_coins) - parseInt(b.redeem_coins))\n            }\n        })\n    }\n\n    btnAction = (value) => {\n        if (!this.state.isApiCalling) {\n            let preBal = parseInt(this.state.userCoinB);\n            let updatedBal = preBal - parseInt(value.redeem_coins);\n            let param = {\n                coin_reward_id: value.coin_reward_id['$oid']\n            }\n            this.setState({\n                isApiCalling: true\n            })\n            redeemRewards(param).then((responseJson) => {\n                this.setState({\n                    isApiCalling: false\n                })\n                if (responseJson.response_code === WSC.successCode) {\n                    CustomHeader.updateCoinBalance(updatedBal);\n                    this.setState({ userCoinB: updatedBal });\n                    CustomHeader.showRSuccess(value);\n                    let bal = WSManager.getBalance();\n                    bal[\"point_balance\"] = updatedBal;\n                    WSManager.setBalance(bal);\n                }\n            })\n        }\n    }\n\n    renderListItem = (item, idx) => {\n        return (\n            <li key={idx} className={\"border \" + (parseInt(item.redeem_coins || '0') > parseInt(this.state.userCoinB) ? 'disabled' : '')}>\n                <div className=\"lock-icon\"><i className=\"icon-lock-ic\" /></div>\n                <div className=\"text-c\">\n                    {\n                        item.type === \"3\" && <div className=\"img-c\">\n                            <img src={Utilities.getRewardsURL(item.image)} alt=\"\" />\n                        </div>\n                    }\n                    <div className={\"detail-c\" + (item.type === \"3\" ? '' : ' not-gift')}>\n                        {\n                            item.type != \"3\" ?\n                                <React.Fragment>\n                                    <p className=\"list-t\"> {item.type === \"1\" ? <i className=\"icon-bonus\" /> : (Utilities.getMasterData().currency_code)}{item.value}</p>\n                                    <p className=\"list-d\">{item.type === \"3\" ? item.detail : (item.type === \"2\" ? AL.REAL_CASH : AL.BONUS_CASH)}</p>\n                                </React.Fragment>\n                                :\n                                <p className=\"list-t\">{item.detail}</p>\n                        }\n                    </div>\n                </div>\n                <div>\n                    <p className=\"list-d text-center m-b-xs\">{AL.REDEEM_W}</p>\n                    <a href className=\"list-btn\" onClick={() => this.btnAction(item)} ><img className=\"coin-img\" src={parseInt(item.redeem_coins || '0') > parseInt(this.state.userCoinB) ? Images.IC_COIN_GRAY : Images.IC_COIN} alt=\"\" />{item.redeem_coins}</a>\n                </div>\n            </li>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list border\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-image\">\n                        <Skeleton width={70} height={46} />\n                    </div>\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-line m-l w-75\">\n                            <Skeleton height={9} width={'75%'} />\n                            <Skeleton height={6} width={'80%'} />\n                        </div>\n                    </div>\n                    <div className=\"m-0\">\n                        <Skeleton height={6} width={'100%'} />\n                        <div className=\"shimmer-button\">\n                            <Skeleton height={30} width={85} />\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        const { RCLIST, ISLOAD } = this.state;\n\n        const HeaderOption = {\n            back: true,\n            notification: false,\n            title: AL.REWARDS,\n            hideShadow: true,\n            showBal: true\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container redeem-coins-cont\">\n                        <Helmet titleTemplate={`${MD.template} | %s`}>\n                            <title>{MD.RWRDS.title}</title>\n                            <meta name=\"description\" content={MD.RWRDS.description} />\n                            <meta name=\"keywords\" content={MD.RWRDS.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className=\"top-primary\" />\n                        <ul className=\"list-type\">\n                            {\n                                _Map(RCLIST, (item, idx) => {\n                                    return this.renderListItem(item, idx)\n                                })\n                            }\n                            {\n                                RCLIST.length === 0 && ISLOAD &&\n                                [1, 1, 1, 1, 1, 1].map((item, index) => {\n                                    return this.Shimmer(index)\n                                })\n                            }\n                        </ul>\n                    </div>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default RedeemCoins;","/var/www/html/framework/frontend/src/views/SidePage.jsx",["1593"],"import React from 'react';\nimport Images from '../components/images';\nimport DownloadAppModal from '../Modals/DownloadAppModal';\nimport { APP_DOWNLOAD_LINK_ANDROID } from '../helper/Constants';\nimport { Utilities } from '../Utilities/Utilities';\n\nexport default class ShowCase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            smsChecked: false,\n        }\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    downloadIPhoneApp = () => {\n        let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.ios : {};\n        // window.location = iosAppDownload.app_url;\n        window.open(iosAppDownload.app_url, \"_blank\")\n    }\n\n    render() {\n        let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.ios : {};\n        return (\n            <div className=\"web-container-right\">\n                {\n                    window.location.pathname !== '/download-app' && iosAppDownload.app_url != '' && <div className=\"text-container\">\n                        <div className='cursor-pointer'>\n                            <img onClick={this.downloadIPhoneApp} src={Images.APPLE_APP_STORE} alt=\"\" />\n                        </div>\n                    </div>\n                }\n                {\n                    window.location.pathname !== '/download-app' && APP_DOWNLOAD_LINK_ANDROID !== '' && <div className=\"text-container\">\n                        <div className='cursor-pointer'>\n                            <img onClick={this.handleShow} src={Images.BTN_ANDROID_APP} alt=\"\" />\n                        </div>\n                    </div>\n                }\n\n                <DownloadAppModal show={this.state.show} handleClose={this.handleClose} onSubmit={this.onSubmit} />\n            </div>\n\n        )\n    }\n}","/var/www/html/framework/frontend/src/components/DownloadAppScreen.jsx",["1594","1595","1596","1597","1598","1599","1600","1601","1602","1603"],"import React from 'react';\nimport { Row, Col, Checkbox, FormGroup } from 'react-bootstrap';\nimport { NavLink } from \"react-router-dom\";\nimport { getAppStoreLink } from '../WSHelper/WSCallings';\nimport { CustomPhoneInput } from '../Component/CustomComponent';\nimport Helmet from 'react-helmet';\nimport Images from './images';\nimport CustomHeader from './CustomHeader';\nimport MetaData from '../helper/MetaData';\nimport * as AL from \"../helper/AppLabels\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { Utilities } from '../Utilities/Utilities';\nimport { DEFAULT_COUNTRY_CODE,APP_DOWNLOAD_LINK_ANDROID } from '../helper/Constants';\n\nclass DownloadAppScreen extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            code: DEFAULT_COUNTRY_CODE,\n            smsChecked: false,\n            phone: ''\n        }\n    }\n\n    handleOnChange = (value, data) => {\n        this.setState({ code: data.dialCode, phone: value })\n    }\n\n    callDownloadAppApi() {\n        // let phone_code_str = \"+\" + this.state.code;\n        // let phone_no = this.state.phone.replace(phone_code_str, \"\");\n        // let param = {\n        //     \"phone_no\": phone_no,\n        //     \"phone_code\": this.state.code\n        // }\n        // getAppStoreLink(param).then((responseJson) => {\n        //     if (responseJson.response_code === WSC.successCode) {\n        //         this.props.history.goBack();\n        //     }\n        // })\n        var filename = APP_DOWNLOAD_LINK_ANDROID.substring(APP_DOWNLOAD_LINK_ANDROID.lastIndexOf('/') + 1);\n\n        let save = document.createElement('a');\n        save.href = APP_DOWNLOAD_LINK_ANDROID;\n        save.target = '_blank';\n\n        save.download = filename;\n        var evt = new MouseEvent('click', {\n            'view': window,\n            'bubbles': true,\n            'cancelable': false\n        });\n        save.dispatchEvent(evt);\n        (window.URL || window.webkitURL).revokeObjectURL(save.href);\n\n    }\n\n    render() {\n        let HeaderOption = {\n            title: AL.DOWNLOAD_APP,\n            back: true\n        }\n        return (\n            <div className=\"web-container bg-white\">\n                <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                    <title>{MetaData.download.title}</title>\n                    <meta name=\"description\" content={MetaData.download.description} />\n                    <meta name=\"keywords\" content={MetaData.download.keywords}></meta>\n                </Helmet>\n                <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                <div className=\"download-app-body d-app-screen text-center\">\n                    <img alt=\"\" src={Images.BRAND_LOGO_FULL} className=\"logo-lg\" />\n                    {/* <Row>\n                        <Col xs={12}>\n                            <FormGroup>\n                                <CustomPhoneInput\n                                    {...this.props}\n                                    phone={this.state.phone}\n                                    handleOnChange={this.handleOnChange} />\n                            </FormGroup>\n                        </Col>\n                    </Row> */}\n\n                    <div className=\"text-small m-t-20 sms-checkbox\">\n                        {/* <FormGroup>\n                            <Checkbox className=\"custom-checkbox\" value=\"\"\n                                onClick={() => this.setState({\n                                    smsChecked: !this.state.smsChecked\n                                })}\n                                name=\"all_leagues\" id=\"all_leagues\">\n                                <span className=\"auth-txt sm\">\n                                    <NavLink\n                                        target='_blank'\n                                        exact to=\"/terms-condition\">{AL.TERMS_CONDITION}</NavLink>\n                                </span>\n                            </Checkbox>\n                        </FormGroup> */}\n                        <div className=\"fantasy-expirence-text\">{AL.DOWNLOAD_MEESAGE && AL.DOWNLOAD_MEESAGE != '' ? AL.DOWNLOAD_MEESAGE : 'The Best Fantasty Sports Experience'}</div>\n                    </div>\n                    {/* <button className={\"btn btn-primary  m-t-lg \" + (!this.state.smsChecked || !this.state.phone ? ' click-disabled' : '')}\n                        onClick={() => this.callDownloadAppApi()}>{AL.DOWNLOAD_APP}</button> */}\n\n                    <img onClick={() => this.callDownloadAppApi()} style={{ marginTop: 100 }} alt=\"\" src={Images.DOWNLOAD_APP_BTN} className=\"logo-lg\" />\n\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default DownloadAppScreen","/var/www/html/framework/frontend/src/views/OrderHistory.jsx",["1604","1605","1606"],"import React from 'react';\n\nimport WSManager from \"../WSHelper/WSManager\";\nimport { notify } from 'react-notify-toast';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport CustomHeader from '../components/CustomHeader';\nimport {Utilities} from '../Utilities/Utilities';\n\nexport default class OrderHistory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            orderList : '',\n            orderParam : {offset : 0}\n        }\n    }\n\n    componentDidMount(){\n        this.getOrderList();\n    }\n\n    getOrderList = () => {\n        let param ={\n            \"offset\":this.state.orderParam.offset,\n        }\n        WSManager.Rest(WSC.baseURL + WSC.GET_ORDERS_LIST, param).then((responseJson) => {\n            if (responseJson != null && responseJson != '' && responseJson.response_code == WSC.successCode) {\n                let {orderParam} = this.state;\n\n               orderParam['offset'] = responseJson.data.offset;\n               orderParam['is_load_more'] = responseJson.data.is_load_more;\n               this.setState({orderParam: orderParam, orderList: responseJson.data.result});\n            }\n            else {\n                var keys = Object.keys(responseJson.error);\n                if (keys.length > 0) {\n                    Utilities.showToast(responseJson.error.keys, 5000);\n                }\n            }\n        })\n    }\n\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            title: 'Order History'\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container account-wrapper transparent-header web-container-fixed\">\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className=\"webcontainer-inner\">\n                            <ul className=\"transaction-list order-list\">\n                            {\n                                this.state.orderList.length && this.state.orderList.map((order, index) => {\n                                return <li key={'product'+order.product_order_id}>\n                                    <div className=\"flex\">\n                                        <div className=\"transaction-icon justify-content-center\">\n                                            <img src={order.product_image_url} alt=\"\"/>\n                                        </div>\n                                        <div className=\"transaction-detail\">\n                                            <div className=\"transaction-label\">{order.product_name}</div>\n                                            <span>\n                                                ID {order.product_order_unique_id} <span className=\"dot-class\"></span>\n                                                {order.order_date}\n                                            </span>\n                                        </div>\n                                        <div className=\"transaction-type\">\n                                            <span className=\"text-black text-primary font-16 amount-text\">{order.price}<i className=\"icon-coins\"></i> </span>\n                                            <div> Coins</div>\n                                        </div>\n                                    </div>\n                                </li>\n                                })\n                            }\n                            </ul>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/Partners.jsx",["1607","1608"],"import React from 'react';\n\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../helper/MetaData\";\nimport CustomHeader from '../components/CustomHeader';\nimport { getStaticPageData } from '../WSHelper/WSCallings';\n\nexport default class Partners extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pageData: { \"page_title\": \"Partners\", \"page_content\": \"\" }\n        }\n    }\n    componentDidMount() {\n        this.getPageContentData()\n    }\n    getPageContentData=async()=> {\n        var page_alias = \"about\";\n        let param = {\n            \"page_alias\": page_alias\n        }\n        \n        var api_response_data = await getStaticPageData(param);\n        if(api_response_data){\n            this.setState({\n                pageData: api_response_data\n            })\n        }\n    }\n    render() {\n        const HeaderOption = {\n            back: true,\n            filter: false,\n            title: this.state.pageData.page_title\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container static-page transparent-header web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.partners.title}</title>\n                            <meta name=\"description\" content={MetaData.partners.description} />\n                            <meta name=\"keywords\" content={MetaData.partners.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        {/* <div className=\"page-header\">\n                            <div className=\"page-heading about-heading\">{this.state.pageData.page_title}</div>\n                        </div> */}\n                        <div className=\"webcontainer-inner\">\n                            <div className=\"page-body\">\n                                <div dangerouslySetInnerHTML={{ __html: this.state.pageData.page_content }}></div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/ItemDetail.jsx",["1609","1610"],"import React from 'react';\n\nimport { Row, Col, Button } from 'react-bootstrap';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport CustomHeader from '../components/CustomHeader';\nimport * as AppLabels from \"../helper/AppLabels\";\n\nexport default class ItemDetail extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            productDetail : ''\n        }\n    }\n    componentDidMount(){\n        this.getProductDetail();\n    }\n\n    getProductDetail = () => {\n        let param ={\n            \"product_unique_id\": this.props.match.params.product_unique_id\n        }\n        WSManager.Rest(WSC.baseURL + WSC.GET_PRODUCT_DETAIL, param).then((responseJson) => {\n            if(responseJson.response_code == WSC.successCode){\n                this.setState({productDetail : responseJson.data});\n            }\n        })\n    }\n\n    checkProductAvail = () => {\n        let param ={\n            \"size\":\"6\",\n            \"product_master_id\": this.state.productDetail.product_master_id\n        }\n        WSManager.Rest(WSC.baseURL + WSC.CHECK_PRODUCT_QUANTITY, param).then((responseJson) => {\n            if(responseJson.response_code == WSC.successCode){\n                this.props.history.push({pathname: '/item-checkout/'+this.state.productDetail.product_unique_id});\n            }\n        })\n    }\n\n    render() {\n        const {\n            productDetail\n        } = this.state;\n\n        const HeaderOption = {\n            back: true,\n            title: 'Product Detail'\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed\">\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className=\"webcontainer-inner\">\n                            <div className=\"item-detail-wrapper\">\n                                <Row>\n                                    <Col sm={12} className=\"item-detail-header\">\n                                        <figure className=\"text-center item-img\">\n                                            <img src={productDetail.product_image_url} alt=\"\" />\n                                        </figure>\n                                        \n                                        {\n                                            (this.state.productDetail.size)\n                                            ?\n\n                                            (productDetail.size[this.state.productDetail.size.length-1].qty <= 10) ?\n                                            (<div className=\"item-left\" >{AppLabels.Hurry_Only} {productDetail.size[this.state.productDetail.size.length-1].qty} {AppLabels.left_in_stock}</div>) : ''\n                                            :\"\"\n                                        } \n                                        \n                                        <div className=\"item-name\">{productDetail.product_name}</div>\n                                        <div className=\"item-price\"><i className=\"icon-coins\"></i>{productDetail.price}<span className=\"text-small\">Coins</span></div>\n                                        <div className=\"text-center\">\n                                            <Button bsStyle=\"primary\" onClick={this.checkProductAvail}>{AppLabels.Redeem_NOW}</Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12} className=\"product-description\">\n                                        <div className=\"product-heading\">\n                                            {AppLabels.Product_Description}\n                                        </div>\n                                        <div className=\"desc\">\n                                            {productDetail.long_desc}\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                            </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/Checkout.jsx",["1611","1612","1613"],"import React from 'react';\nimport { Row, Col, Button, FormGroup } from 'react-bootstrap';\nimport FloatingLabel from 'floating-label-react';\n\nimport { inputStyle } from '../helper/input-style';\nimport Select from 'react-select';\nimport CustomHeader from '../components/CustomHeader';\nimport ls from 'local-storage';\nimport WSManager from \"../WSHelper/WSManager\";\nimport {getAllCountries, getAllStates} from \"../WSHelper/WSCallings\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../helper/MetaData\";\nimport {Utilities} from '../Utilities/Utilities';\nimport * as AppLabels from \"../helper/AppLabels\";\n\n\nexport default class ItemCheckout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            productDetail : '',\n            formData: { address: '', city: '', pincode: ''},\n            placeOrderButton : false,\n            selectedCountry : {value : '', label:''},\n            selectedState : {value : '', label:''}\n        }\n    }\n\n    componentDidMount(){\n        this.getProductDetail();\n        this.getCountryList();\n    }\n\n    getProductDetail = () => {\n        let param ={\n            \"product_unique_id\": this.props.match.params.product_unique_id\n        }\n        WSManager.Rest(WSC.baseURL + WSC.GET_PRODUCT_DETAIL, param).then((responseJson) => {\n            if(responseJson.response_code == WSC.successCode){\n                this.setState({productDetail : responseJson.data});\n            }\n        })\n    }\n\n    getCountryList = () => {\n        this.setState({ isLoading: true });\n        let param = {}\n\n        getAllCountries(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson) {\n                const countries = [];\n                responseJson.map((data, key) => {\n                    countries.push({ value: data.master_country_id, label: data.country_name});\n                    return '';\n                })\n                this.setState({ allState: [] })\n                this.setState({ allCountry: countries })\n                this.setState({selectedCountry : {value: \"101\", label: \"India\"}},function(){\n                     this.getAllState(this.state.selectedCountry.value);\n                })\n            }\n            else {\n                if (responseJson && responseJson.error) {\n                    var keys = Object.keys(responseJson.error);\n                    if (keys.length > 0) {\n                        Utilities.showToast(responseJson.error.keys, 5000);\n                    }\n                    this.setState({ allState: [] })\n                }\n            }\n            this.setState({ displayForm: true })\n        })\n    }\n    getAllState = (masterCountryId) => {\n        this.setState({ isLoading: true });\n        let param = {\n            \"master_country_id\": masterCountryId\n        }\n        getAllStates(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson) {\n                const states = [];\n                responseJson.map((data, key) => {\n                    states.push({ value: data.master_state_id, label: data.state_name })\n                    return '';\n                })\n                this.setState({ allState: [] })\n                this.setState({ allState: states })\n            }\n            else {\n                if (responseJson && responseJson.error) {\n                var keys = Object.keys(responseJson.error);\n                if (keys.length > 0) {\n                    Utilities.showToast(responseJson.error.keys, 5000);\n                }\n                this.setState({ allState: [] })\n            }\n            }\n        })\n    }\n\n    handleStateChange = (selectedOption) => {\n       \n        this.setState({ selectedState: selectedOption});\n    }\n\n    handleFormChange = (e) =>{\n        let {formData} = this.state;\n\n        const name = e.target.id;\n        const value = e.target.value;\n        formData[name] = value;\n        this.setState({ formData });\n    }\n\n    placeOrder = () => {\n        this.setState({placeOrderButton : true});\n        let param ={\n            \"master_country_id\" : this.state.selectedCountry.value,\n            \"master_state_id\" : this.state.selectedState.value,\n            \"city\" : this.state.formData.city,\n            \"address\" : this.state.formData.address,\n            \"zip_code\" : this.state.formData.pincode,\n            \"product_master_id\" : this.state.productDetail.product_master_id,\n            \"price\" : this.state.productDetail.price,\n            \"size\":\"6\"\n        }\n        WSManager.Rest(WSC.baseURL + WSC.PLACE_ORDER, param).then((responseJson) => {\n            this.setState({placeOrderButton : false});\n            if (responseJson != null && responseJson != '' && responseJson.response_code == WSC.successCode) {\n                this.props.history.push({pathname: '/order-history'});\n            }\n            else {\n                var keys = Object.keys(responseJson.error);\n                if (keys.length > 0) {\n                    Utilities.showToast(responseJson.error.keys, 5000);\n                }\n            }\n        })\n    }\n\n    \n    render() {\n        const {\n            productDetail\n        } = this.state;\n\n\n        const HeaderOption = {\n            back: true,\n            title: 'Checkout'\n        }\n\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container create-contest transparent-header\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.createcontest.title}</title>\n                            <meta name=\"description\" content={MetaData.createcontest.description} />\n                            <meta name=\"keywords\" content={MetaData.createcontest.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className=\"verification-block  m-t-20\">\n                            <Row>\n                                <Col xs={12}>\n                                    <FormGroup\n                                        className='input-label-center input-transparent font-14'\n                                        controlId=\"formBasicText\"\n                                    >\n                                        <FloatingLabel\n                                        autoComplete='off'\n                                            styles={inputStyle}\n                                            id=\"address\"\n                                            name='address'\n                                            placeholder='Street Address'\n                                            type='text'\n                                            maxLength={50}\n                                            onChange={this.handleFormChange}\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                        <div className=\"verification-block\">\n                            <Row>\n                                <Col xs={12}>\n                                    <FormGroup\n                                        className='input-label-center input-transparent font-14 default-selected'\n                                        controlId=\"formBasicText\"\n                                    >\n                                        <label className=\"select-field-transparent-label custom-label\">{AppLabels.COUNTRY}</label>\n                                            <Select\n                                                className='select-field-transparent'\n                                                classNamePrefix='select'\n                                                onChange={this.handleCountryChange}\n                                                options={this.state.allCountry}\n                                                arrowRenderer={this.arrowRenderer}\n                                                value={this.state.selectedCountry}\n                                                isDisabled={true}\n                                                placeholder=\"--\"\n                                                isSearchable={true}\n                                                theme={(theme) => ({\n                                                    ...theme,\n                                                    borderRadius: 0,\n                                                    colors: {\n                                                    ...theme.colors,\n                                                      primary: '#013D79',\n                                                    },\n                                                  })}\n                                                >\n                                            </Select>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                        <div className=\"verification-block\">\n                            <Row>\n                                <Col xs={12}>\n                                    <FormGroup className='input-label-center input-transparent font-14'>\n                                        <div className=\"select-league\">\n                                            <label style={inputStyle.label}>{AppLabels.STATE}</label>\n                                            <div className=\"stateStyle\">\n                                                <Select\n                                                    name = \"state\"\n                                                    onChange={this.handleStateChange}\n                                                    options={this.state.allState}\n                                                    classNamePrefix=\"secondary\"\n                                                    className=\"State\"\n                                                    isDisabled={this.state.isReadOnly}\n                                                    arrowRenderer={this.arrowRenderer}\n                                                    value={this.state.selectedState}\n                                                    placeholder=\"--\"\n                                                    isSearchable={true} isClearable={false}\n                                                    theme={(theme) => ({\n                                                        ...theme,\n                                                        borderRadius: 0,\n                                                        colors: {\n                                                        ...theme.colors,\n                                                          primary: '#013D79',\n                                                        },\n                                                      })}\n                                                />\n                                            </div>\n                                            <span className=\"select-arr arrow-position\"><i className=\"icon-arrow-down\"></i></span>\n                                            <div className='league-border col-sm-12' />\n                                        </div>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                        <div className=\"verification-block \">\n                            <Row>\n                                <Col xs={6} className=\"input-label-spacing\">\n                                    <FormGroup\n                                        className='input-label-center input-transparent font-14'\n                                        controlId=\"formBasicText\">\n                                        <FloatingLabel\n                                        autoComplete='off'\n                                            styles={inputStyle}\n                                            id='city'\n                                            name='city'\n                                            placeholder={AppLabels.CITY}\n                                            type='text'\n                                            onChange={this.handleFormChange}\n                                        />\n                                    </FormGroup>\n                                    <span className=\"bordered-span\"></span>\n                                </Col>\n                                <Col xs={6} className=\"input-label-spacing\">\n                                    <FormGroup\n                                        className='input-label-center input-transparent font-14'\n                                        controlId=\"formBasicText\"\n                                    >\n                                        <FloatingLabel\n                                        autoComplete='off'\n                                            styles={inputStyle}\n                                            id='pincode'\n                                            name='pincode'\n                                            maxLength={9}\n                                            placeholder={AppLabels.PIN_CODE}\n                                            type='text'\n                                            onChange={this.handleFormChange}\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </div>                       \n                        <div className=\"order-selected\">\n                            <div className=\"cash-tab\">\n                                <div>{AppLabels.Coins_in_your_wallet}</div>\n                                <div>\n                                    <i className=\"icon-coins\"></i>\n                                    <span className=\"coins-amt\">{ls.get('userBalance').point_balance}</span>\n                                    {AppLabels.coins}\n                                </div>\n                            </div>\n                            <div className=\"cash-tab cash-tab-with-img\">\n                                <img src={productDetail.product_image_url} alt=\"\"/>\n                                <div>{AppLabels.Price}</div>\n                                <div>\n                                    <i className=\"icon-coins\"></i>\n                                    <span className=\"coins-amt\">{productDetail.price}</span>\n                                    {AppLabels.coins}\n                                </div>                                    \n                            </div>\n                            <Button className=\"btn btn-primary btn-rounded m-t-30\" onClick={this.placeOrder} disabled={this.state.placeOrderButton}>{AppLabels.Place_order}</Button>\n                        </div>\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenSourceUrl.jsx",[],"/var/www/html/framework/frontend/src/helper/input-style.jsx",[],"/var/www/html/framework/frontend/src/Modals/MyAlert.jsx",["1614","1615","1616"],"import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport { Modal } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\n\nexport default class MyAlert extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n        };\n\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n\n        const { isMyAlertShow, onMyAlertHide, message, hidemodal } = this.props;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={isMyAlertShow}\n                        dialogClassName=\"custom-modal thank-you-modal confirmation-modal confirmation-modal-contestlist\"\n                        className=\"center-modal\"\n                    //dialogClassName=\"custom-modal thank-you-modal confirmation-modal\"\n                    >\n                        <Modal.Header >\n                            <div className='Confirm-header'> {AppLabels.ALERT} </div>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <React.Fragment>\n                                {/* <div className='devider-line'></div> */}\n                                <div className=\"my-alert-message-text\">\n                                    <span>{message}</span>\n                                </div>\n                            </React.Fragment>\n                        </Modal.Body>\n                        <Modal.Footer className=\"custom-modal-footer dual-btn-footer\">\n                            <a className='my-alert-button-text' onClick={() => onMyAlertHide()}>{AppLabels.OK}</a>\n                            <a className='my-alert-button-text' onClick={() => hidemodal()}>{AppLabels.CANCEL}</a>\n                        </Modal.Footer>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/meta.jsx",[],"/var/www/html/framework/frontend/src/Component/SportsHub/SportsHub.jsx",["1617","1618","1619","1620","1621","1622","1623","1624","1625","1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667"],"import React, { PureComponent } from 'react';\nimport { Tab, Nav, NavItem, Row, Col } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map, _times, _filter, _isEmpty,parseURLDate } from '../../Utilities/Utilities';\nimport { setValue, AppSelectedSport, SELECTED_GAMET, GameType, ReferralData } from '../../helper/Constants';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport Slider from 'react-slick';\nimport { Sports } from \"../../JsonFiles\";\nimport Filter from '../../components/filter';\nimport { getReferralData } from '../../WSHelper/WSCallings';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as Constants from \"../../helper/Constants\";\n\nconst appLang = WSManager.getAppLang();\nclass SportsHub extends PureComponent {\n    constructor(props) {\n        super(props)\n        this.state = {\n            SLIST: [],\n            GLIST: [],\n            HGLIST: [],\n            FilterGLIST: [],\n            FilterHGLIST: [],\n            ACSPORTTAB: 0,\n            filterArray: [],\n            SelectedSport: '',\n            showHubFitlers: false,\n            referalData:'',\n            HOS: {\n                title: '',\n                hideShadow: true,\n                isPrimary: true,\n                filter: true\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.setData()\n        if (!_isEmpty(ReferralData)) {\n            this.setState({\n                referalData: ReferralData.referral_data || \"\",\n            })\n        } else {\n            this.getReferralData()\n        }\n    }\n    componentWillUnmount() {\n        this.enableDisableBack(false);\n     }\n \n     enableDisableBack(flag){\n         let data = {\n             action: 'back',\n             type: flag,\n             targetFunc:'back'\n         }\n         this.sendMessageToApp(data);\n         setTimeout(() => {\n             let push_data = {\n                 action: 'push',\n                 targetFunc: 'push',\n                 type: 'receive',\n             }\n             this.sendMessageToApp(push_data)\n         }, 300);\n     }\n \n     sendMessageToApp(action) {\n         if (window.ReactNativeWebView) {\n             window.ReactNativeWebView.postMessage(JSON.stringify(action));\n         }\n     }\n     handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n            if(e.data.locale != undefined){\n                WSManager.setAppLang(e.data.locale);\n\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            } \n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }   \n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }  \n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            if (e.data.action == 'push' && e.data.type == 'receive') {\n                if(e.data.notif.group_id && e.data.notif.group_id!=null && e.data.notif.group_id!=''){\n                    if(this.state.canRedirect){\n                        this.setState({canRedirect:false})\n                        let pathName = 'group-chat/'+e.data.notif.group_id;\n                       // alert('HUb pathName>>'+JSON.stringify(pathName));\n                        if(pathName && pathName.trim()!=''){\n                            this.props.history.push({ pathname: pathName });\n                        }\n                    }\n                }\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {//deposit promotion\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {// promotion for contes\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {// admin refer a friend\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132' ||\n                    e.data.notif.notification_type == '300') {//124-promotion for fixture 131-match delay  132-lineup announced\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = parseURLDate(e.data.notif.season_scheduled_date);\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" + btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {// custom notification\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else if (e.data.notif.custom_notification_type == 7) {\n                        pathName = 'add-funds';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName && pathName.trim() != '') {\n                    this.props.history.push({ pathname: pathName });\n                } \n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    getReferralData() {\n        getReferralData().then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                if (responseJson.data) {\n                    setValue.setReferralData(responseJson.data)\n                    this.setState({\n                        referalData: responseJson.data.referral_data || \"\",\n                    })\n                }\n            }\n        })\n    }\n\n    setData = () => {\n        const sports_id = Utilities.getUrlSports();\n        const fantasy_list = Utilities.getMasterData().fantasy_list;\n        const sh_list = Utilities.getMasterData().sports_hub;\n        this.setState({\n            SLIST: fantasy_list || [],\n            GLIST: sh_list || [],\n            filterArray: fantasy_list || []\n        }, () => {\n            const FHGLIST = _filter(sh_list, (obj) => {\n                return obj.is_featured == 1;\n            })\n            const FGLIST = _filter(sh_list, (obj) => {\n                return obj.is_featured == 0;\n            })\n            this.setState({\n                HGLIST: FHGLIST,\n                GLIST: FGLIST,\n                FilterHGLIST: FHGLIST,\n                FilterGLIST: FGLIST\n            })\n            setValue.setAppSelectedSport(sports_id);\n            this.setState({ ACSPORTTAB: sports_id })\n            if (AppSelectedSport == null) {\n                this.checkSportID();\n            }\n            this.checkOldUrl()\n        })\n    }\n\n    checkSportID = () => {\n        let interval = setInterval(() => {\n            if (AppSelectedSport != null) {\n                clearInterval(interval)\n                this.setState({ ACSPORTTAB: AppSelectedSport })\n            }\n        }, 100)\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        if (!url.includes(Utilities.getSelectedSportsForUrl())) {\n            window.history.replaceState(\"\", \"\", window.location.pathname + \"#\" + Utilities.getSelectedSportsForUrl());\n        }\n    }\n\n    onTabClick = (item) => {\n        ls.set('selectedSports', item.sports_id);\n        setValue.setAppSelectedSport(item.sports_id);\n        this.setState({ ACSPORTTAB: item.sports_id });\n        this.props.history.replace(window.location.pathname + \"#\" + Utilities.getSelectedSportsForUrl())\n    }\n\n    selectGameType = (item) => {\n\n        let sport = ls.get('selectedSports');\n        let allowedSport = item.allowed_sports || '';\n        if ((allowedSport == '') || (allowedSport.length > 0 && allowedSport.includes(sport))) {\n            Utilities.scrollToTop()\n            if (!SELECTED_GAMET) {\n                setTimeout(() => {\n                    CustomHeader.showSHSCM();\n                }, 100);\n            }\n            WSManager.setPickedGameType(item.game_key);\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        }\n        else {\n            let FSport = allowedSport[0];\n            ls.set('selectedSports', FSport);\n            setValue.setAppSelectedSport(FSport);\n            this.setState({ ACSPORTTAB: FSport });\n            Utilities.scrollToTop()\n            if (!SELECTED_GAMET) {\n                setTimeout(() => {\n                    CustomHeader.showSHSCM();\n                }, 100);\n            }\n\n            WSManager.setPickedGameType(item.game_key);\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        }\n    }\n\n    /** \n   @description show lobby filters \n   */\n    showFilter = () => {\n        this.setState({ showHubFitlers: true })\n    }\n    /** \n   @description hide lobby filters \n   */\n    hideFilter = () => {\n        this.setState({ showHubFitlers: false })\n    }\n\n    filterBySport = (filterBy) => {\n        this.setState({\n            showHubFitlers: false,\n            SelectedSport: filterBy,\n            refreshList: false\n        }, () => {\n            this.setState({\n                refreshList: true\n            })\n            if (filterBy != '') {\n                let spID = filterBy.sports_id\n                let HGLIST = _filter(this.state.HGLIST, (obj) => {\n                    return obj.allowed_sports && obj.allowed_sports.includes(spID);\n                })\n                let GLIST = _filter(this.state.GLIST, (itm) => {\n                    return itm.allowed_sports && itm.allowed_sports.includes(spID);\n                })\n                this.setState({\n                    FilterHGLIST: HGLIST,\n                    FilterGLIST: GLIST\n                })\n                ls.set('selectedSports', spID);\n                setValue.setAppSelectedSport(spID);\n                this.setState({ ACSPORTTAB: spID });\n                this.props.history.replace(window.location.pathname + \"#\" + Utilities.getSelectedSportsForUrl())\n            }\n            else {\n                this.setData()\n            }\n        })\n    }\n\n    renderTopSportsTab = () => {\n        let { SLIST, ACSPORTTAB } = this.state;\n        return (\n            <Tab.Container id='top-sports-slider' onSelect={() => console.log('onSelect')} activeKey={ACSPORTTAB} defaultActiveKey={ACSPORTTAB}>\n                <Row className=\"clearfix\">\n                    <Col className=\"sports-tab-nav\" xs={12}>\n                        <Nav>\n                            {\n                                _Map(SLIST, (item, idx) => {\n                                    return (\n                                        <NavItem key={item.sports_id}\n                                            onClick={() => this.onTabClick(item, idx)}\n                                            eventKey={item.sports_id}>\n                                            <div className=\"animated-tab-div\">\n                                                <i className={\"icon-\" + item.sports_id + \"-ic\"} />\n                                            </div>\n                                        </NavItem>\n                                    )\n                                })\n                            }\n                        </Nav>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        )\n    }\n\n    renderBigcard = (item, idx) => {\n        let renderImg = item.image ? Utilities.getSettingURL(item.image) : Images.DFS_BIG;\n        let avaSports = this.state.SelectedSport == '' ? item.allowed_sports : '';\n        return (\n            <li className={\"card-v big-card\" + (this.state.HGLIST && this.state.HGLIST.length == 1 ? ' big-card-single' : '')} key={idx + item.game_key} onClick={() => this.selectGameType(item)} >\n                <img src={renderImg} alt=\"\" />\n                <div className=\"game-v\">\n                    <p className=\"game-v-title\">{item[appLang + '_title']}</p>\n                    <p className=\"game-v-detail\">{item[appLang + '_desc']}</p>\n                    <span className=\"p-now\">{AL.PLAY}</span>\n                    <div className=\"ava-sport-sec\">\n                        {\n                            avaSports && avaSports.length > 0 &&\n                            <>\n                                {\n                                    _Map(avaSports, (obj, idx) => {\n                                        var sportsId = '';\n                                        if (obj in Sports.url) {\n                                            sportsId = Sports.url[obj + (appLang || '')];\n                                        }\n                                        if (idx < 3) {\n                                            return (\n                                                sportsId != '' &&\n                                                <span className=\"sport-text\" onClick={(e) => this.selectModuleSport(e, item, obj)} key={idx + sportsId}>{sportsId}</span>\n                                            )\n                                        } else {\n                                            return (\n                                                <>\n                                                {\n                                                    idx==3 &&\n                                                    <span key={idx + sportsId} className=\"sport-text\">+{avaSports.length - 3}</span>\n                                                }\n                                                </>\n\n                                            )\n                                        }\n                                    })\n                                }\n                            </>\n                        }\n                    </div>\n                </div>\n            </li>\n        )\n    }\n\n    selectModuleSport = (e, mode, sport) => {\n        e.stopPropagation()\n        if (sport != '') {\n            ls.set('selectedSports', sport);\n            setValue.setAppSelectedSport(sport);\n            this.setState({ ACSPORTTAB: sport });\n            this.props.history.replace(window.location.pathname + \"#\" + Utilities.getSelectedSportsForUrl())\n            Utilities.scrollToTop()\n            if (!SELECTED_GAMET) {\n                setTimeout(() => {\n                    CustomHeader.showSHSCM();\n                }, 100);\n            }\n            WSManager.setPickedGameType(mode.game_key);\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl())\n        }\n    }\n\n    goToScreen = (pathname) => {\n        this.props.history.push(pathname);\n    }\n\n    getReferralValue = () => {\n        var isCoinAllowed = Utilities.getMasterData().allow_coin == \"1\";\n        var coinsAmt = parseInt(this.state.referalData.coins || '0');\n        var realAmt = parseInt(this.state.referalData.real_amount || '0');\n        var bonusAmt = parseInt(this.state.referalData.bonus_amount || '0');\n\n        let text = realAmt > 0 ?\n            (Utilities.getMasterData().currency_code + ' ' + realAmt + ' ' + AL.REAL_CASH) :\n            bonusAmt > 0 ?\n                Utilities.getMasterData().currency_code + ' ' + bonusAmt + ' ' + AL.BONUS_CASH :\n                (isCoinAllowed && coinsAmt > 0) ?\n                    coinsAmt + ' ' + AL.COINS : ''\n        return text\n    }\n\n    renderBannerCard = () => {\n        if (Utilities.getMasterData().allow_hub_banner != 1) {\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().hub_banner;\n        let amountRef = this.getReferralValue()\n        return (\n            bannerImg ?\n                <li onClick={() => this.goToScreen('/refer-friend')} className=\"pickem-prediction-outer-card is-card banner-card card-v\">\n                    <img className=\"img-dfs\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n                </li>\n                : amountRef ?\n                    <li onClick={() => this.goToScreen('/refer-friend')} className=\"pickem-prediction-outer-card is-card banner-card card-v\">\n                        <div className=\"dfs-card\" >\n                            <img className=\"img-dfs-shape\" src={Images.PICKEM_SHAPE_IMG} alt='' />\n                            <div className=\"dfs-c\">\n                                <img className=\"img-dfs\" src={Images.MEN_IMG_REFER} alt='' />\n                                <p>\n                                    {AL.REFER_A_FRIEND_AND_GET}\n                                    {amountRef} {AL.on_your_friends_signup}\n                                    <a href className=\"button\">{AL.REFER_NOW}!</a>\n                                </p>\n                            </div>\n                        </div>\n                    </li>\n                    :\n                    '')\n    }\n\n    renderCard = (item, idx) => {\n        var sportImg = item.game_key === GameType.MultiGame ? Images.MULTI_GAME_IMG : item.game_key === GameType.Free2Play ? Images.FTP_IMG : item.game_key === GameType.Pred ? Images.PRED_IMG : item.game_key === GameType.Pickem ? Images.PICKEM_TOUR_IMG : item.game_key === GameType.OpenPred ? Images.OPEN_PRED_PP : item.game_key === GameType.OpenPredLead ? Images.OPEN_PRED_LEAD : Images.DFS_SIDE_IMG;\n        let avaSports = this.state.SelectedSport == '' ? item.allowed_sports : '';\n        sportImg = item.image ? Utilities.getSettingURL(item.image) : sportImg;\n        return (\n            <li className=\"card-v\" key={item.game_key} onClick={() => this.selectGameType(item)} >\n                <div className=\"game-v\">\n                    <img src={sportImg} alt=\"\" className=\"sport-img\" />\n                    <p className=\"game-v-title\">{item[appLang + '_title']}</p>\n                    <p className=\"game-v-detail\">{item[appLang + '_desc']}</p>\n                    <span className=\"p-now\">{(item.game_key === GameType.Pred || item.game_key === GameType.OpenPred || item.game_key === GameType.OpenPredLead) ? AL.PREDICT : item.game_key === GameType.Pickem ? AL.PICK : (AL.PLAY + '!')}</span>\n                </div>\n                {\n                    avaSports && avaSports.length > 0 &&\n                    <div className=\"ava-sport\">\n                        {\n                            _Map(avaSports, (obj, idx) => {\n                                var sportsId = '';\n                                if (obj in Sports.url) {\n                                    sportsId = Sports.url[obj + (appLang || '')];\n                                }\n                                return (\n                                    idx < 3 ?\n                                        sportsId != '' &&\n                                        <span className=\"sport-text\" onClick={(e) => this.selectModuleSport(e, item, obj)} key={idx + sportsId}>{sportsId}</span>\n                                        :\n                                        <span key={idx + sportsId} className=\"sport-text\" onClick={(e) => this.selectModuleSport(e, '', '')}>+{avaSports.length - 3}</span>\n                                )\n                            })\n                        }\n                    </div>\n                }\n            </li>\n        )\n    }\n\n    render() {\n        const { SLIST, HOS, showHubFitlers, filterArray, SelectedSport, FilterHGLIST, FilterGLIST } = this.state\n        var settings = {\n            touchThreshold: 10,\n            infinite: false,\n            slidesToScroll: 1,\n            slidesToShow: 1,\n            variableWidth: false,\n            initialSlide: 0,\n            dots: false,\n            centerMode: true,\n            className: \"center\",\n            centerPadding: \"20px\",\n            responsive: [\n                {\n                    breakpoint: 500,\n                    settings: {\n                        className: \"center\",\n                        centerPadding: \"20px\",\n                    }\n\n                },\n            ]\n        };\n\n        let FitlerOptions = {\n            showHubFitlers: showHubFitlers,\n            filtered_league_id: SelectedSport\n        }\n        return (\n            <MyContext.Provider >\n                <div className={\"web-container sports-hub-c new-sport-hub \" + (SLIST.length > 1 ? 'web-container-fixed' : 'web-container-no-fixed') + ' sport-hub-scroll'}>\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                    <CustomHeader {...this.props} HeaderOption={HOS} showLobbyFitlers={this.showFilter} />\n                    <Filter\n                        {...this.props}\n                        selectedFSport={SelectedSport}\n                        sportsList={filterArray}\n                        FitlerOptions={FitlerOptions}\n                        hideFilter={this.hideFilter}\n                        filterBySport={this.filterBySport}\n                    ></Filter>\n                    <div className=\"dashboard-container\">\n                        <div className=\"blue-bg-section\">\n                            <img src={Images.BLUE_BG_IMG} alt=\"\" />\n                        </div>\n\n                        <ul className=\"card-container\">\n                            {\n                                FilterHGLIST && FilterHGLIST.length > 1 &&\n                                <Slider {...settings}>\n                                    {\n                                        _Map(FilterHGLIST, (item, idx) => {\n                                            return this.renderBigcard(item, idx)\n                                        })\n                                    }\n                                </Slider>\n                            }\n                            {\n                                FilterHGLIST && FilterHGLIST.length == 1 &&\n                                this.renderBigcard(FilterHGLIST[0], 1)\n                            }\n                            {\n                                _Map(FilterGLIST, (item, idx) => {\n                                    return <React.Fragment key={item.game_key + \"f\"} >\n                                        {this.renderCard(item, idx)}\n                                        {\n                                            idx == 2 &&\n                                            this.renderBannerCard()\n                                        }\n                                    </React.Fragment>\n                                })\n                            }\n                            {\n                                (FilterGLIST.length == 1 || FilterGLIST.length == 2) &&\n                                this.renderBannerCard()\n                            }\n                        </ul>\n                    </div>\n                    {\n                        Utilities.getMasterData().allow_coin == \"1\" && WSManager.loggedIn() && <div className=\"sports-hub-footer-tabs\">\n                            <div className=\"dot-list left\">{\n                                _times(6, (itm) => {\n                                    return (\n                                        <span key={itm} />\n                                    )\n                                })\n                            }\n                            </div>\n                            <div onClick={() => this.props.history.push('/earn-coins')} className=\"isCoin coin-shine cursor-pointer\">\n                                <div className=\"shadow-v\" />\n                                <span className={\"coins-tab-label\" + (AL.EARN_COINS.length > 12 ? ' marque' : '')}>{AL.EARN_COINS}</span>\n                                <span className=\"fcoin\">\n                                    <img src={Images.EARN_COINS} alt=\"\" />\n                                    <>\n                                        <div className=\"spark1\">✦</div>\n                                        <div className=\"spark2\">✦</div>\n                                        <div className=\"spark3\">✦</div>\n                                    </>\n                                </span>\n                            </div>\n                            <div className=\"dot-list right\">{\n                                _times(6, (itm) => {\n                                    return (\n                                        <span key={itm} />\n                                    )\n                                })\n                            }\n                            </div>\n                        </div>\n                    }\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default SportsHub;","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemLeaderboard.jsx",["1668","1669","1670","1671","1672","1673","1674","1675","1676","1677","1678","1679","1680"],"import React from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { NoDataView} from '../CustomComponent';\nimport Images from '../../components/images';\nimport { _times, _Map } from '../../Utilities/Utilities';\nimport { getPickemLeagueFilter, getPickemLeaderboard } from \"../../WSHelper/WSCallings\";\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport Skeleton from 'react-loading-skeleton';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Filter from '../../components/filter';\nimport WSManager from '../../WSHelper/WSManager';\nimport { Utilities } from '../../Utilities/Utilities';\nimport ls from 'local-storage';\nimport Moment from \"react-moment\";\nimport { GameType ,AppSelectedSport} from '../../helper/Constants';\n\n\nclass NewPickemLeaderboard extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            sports_id: AppSelectedSport,\n            PLIST: [],\n            OWNDATA: '',\n            TOPTHREE: [],\n            SPONSORDATA: [],\n            PNO: 1,\n            PSIZE: 20,\n            filterArray: [],\n            HMORE: false,\n            ISLOAD: false,\n            refreshList: true,\n            showLFitlers: false,\n            filterDataBy: 'today',\n            CFilter : '',\n            filterById: '1',\n            OwnUserName: ls.get('profile'),\n            showSponsorData: '',\n            STARTDATE: '',\n            ENDDATE: '',\n            leadStatus: '',\n            filerByTime: [\n                {\n                    value: 'today',\n                    label: AL.TODAY,\n                    prize_cat_id: '1'\n                },\n                {\n                    value: 'this_week',\n                    label: AL.THIS_WEEK,\n                    prize_cat_id: '2'\n                },\n                {\n                    value: 'this_month',\n                    label: AL.THIS_MONTH,\n                    prize_cat_id: '3'\n                },\n            ],\n            filerByPreTime: [\n                {\n                    value: 'yesterday',\n                    label: AL.YESTERDAY,\n                    prize_cat_id: '1'\n                },\n                {\n                    value: 'last_week',\n                    label: AL.LAST_WEEK,\n                    prize_cat_id: '2'\n                },\n                {\n                    value: 'last_month',\n                    label: AL.LAST_MONTH,\n                    prize_cat_id: '3'\n                },\n            ]\n        };\n\n    }\n\n    componentWillMount() {\n        WSManager.setPickedGameType(GameType.Pickem);\n        let url = window.location.href;\n        if (!url.includes('#pickem')) {\n            url = url + \"#pickem\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    componentDidMount() {\n        this.getLeagueFilter();\n        this.getLeaderboardData();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.showLFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    /** \n    @description hide filters \n    */\n    hideFilter = () => {\n        this.setState({ showLFitlers: false })\n    }\n\n    getLeagueFilter = async () => {\n        if (this.state.sports_id == null)\n            return;\n\n        let param = {\n            \"sports_id\": ''\n        }\n\n        this.setState({ isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getPickemLeagueFilter(param);\n        if (api_response_data) {\n            this.setState({\n                filterArray: api_response_data.data.league_list\n            })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n\n    /**\n    * @description - method to get leaderboard list\n    */\n\n    getLeaderboardData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy , TOPTHREE,SPONSORDATA} = this.state;\n        let today = new Date();\n        today = Utilities.getLocalToUtc(today)\n        let param = {\n            \"league_id\": CFilter.league_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy,\n            \"current_date\" : today\n        }\n        if(CFilter.feed_type != ''){\n            param['feed_type'] = CFilter.feed_type;\n        }\n        this.setState({ ISLOAD: true });\n        getPickemLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                let topThree = responseJson.data.top_three || [];\n                let sponserData = responseJson.data.sponsors || [];\n                let startDate = responseJson.data.start_date || '';\n                let endDate = responseJson.data.end_date || '';\n                let status = responseJson.data.status;\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    TOPTHREE: PNO === 1 ? topThree : TOPTHREE,\n                    SPONSORDATA: PNO === 1 ? sponserData : SPONSORDATA ,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1,\n                    STARTDATE: startDate,\n                    ENDDATE: endDate,\n                    leadStatus: status\n                },()=>{\n                    \n                })\n            }\n        })\n    }\n\n\n    getMoreLData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy , TOPTHREE,SPONSORDATA} = this.state;\n        let param = {\n            \"league_id\": CFilter.league_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy\n        }\n        this.setState({ ISLOAD: true });\n        getPickemLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                let topThree = responseJson.data.top_three || [];\n                let sponserData = responseJson.data.sponsors || [];\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    TOPTHREE: PNO === 1 ? topThree : TOPTHREE,\n                    SPONSORDATA: PNO === 1 ? sponserData : SPONSORDATA ,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1\n                },()=>{\n                    \n                })\n            }\n        })\n    }\n\n    renderShimmer = (idx) => {\n        return (\n            <div key={idx} className=\"list-item\">\n                <span className=\"shimmer\">\n                    <Skeleton height={6} width={'90%'} />\n                    <Skeleton height={4} width={'50%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'30%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'40%'} />\n                </span>\n            </div>\n        )\n    }\n\n    renderItem = (item, isown, idx) => {\n        return (\n            <div key={item.user_id + idx} id={item.user_id + idx} className={\"list-item\" + (isown ? ' own-v' : '')}>\n                <span className=\"u-rank\">{item.rank_value}</span>\n                <span className=\"usernm\">\n                    {\n                        isown ?\n                            <React.Fragment>\n                                <div className=\"usrnm-text\">{this.state.OwnUserName.user_name}</div>\n                                <div className=\"you-text\">[{AL.YOU}]</div>\n                            </React.Fragment>\n                            :\n                            item.user_name\n                    }\n                </span>\n                <span className=\"amount\">\n                    {\n                        item.coins ?\n                        <div className=\"val val-section\">\n                            <img src={Images.IC_COIN} alt=\"\" /> {item.coins}\n                        </div>\n                            :\n                        <div className=\"val val-section\">-</div>\n                    }\n                </span>\n            </div>\n        )\n    }\n\n    renderTopUser = (item) =>{\n        const {filterDataBy} = this.state;\n        \n        let itemLength = item ? item.length : 0;\n        let FirstUser = itemLength > 0 ? item[0] : '';\n        let SecondUser = itemLength > 1 ? item[1] : '';\n        let ThirdUser = itemLength > 2 ? item[2] : '';\n\n        return (\n            <React.Fragment>\n                <div className={\"rank-section second-rank\" + (itemLength > 1 ? '' : ' disabled')}>\n                    <div className=\"section-data\">\n                        <div className=\"circle-wrap\">\n                            <span className=\"rank-pos second\">\n                                <span className=\"img-section\"></span>\n                                <span className=\"pos-text\">2</span>\n                            </span>\n                            <div>{item.rank_value}</div>\n                            <div className=\"win\">\n                                {\n                                    SecondUser.coins ?\n                                    <span className=\"coin-span\">\n                                        <img src={Images.IC_COIN} alt=\"\" /> {SecondUser.coins}\n                                    </span>\n                                    :\n                                    <span className=\"coin-span\">-</span>\n                                }\n                                <span className=\"coin-txt\">{AL.COINS}</span>\n                            </div>\n                        </div>\n                        <div className=\"winner-name\">{SecondUser.user_name || 'User Name'}</div>\n                    </div>\n                </div>\n                <div className={\"rank-section first-rank\" + (itemLength > 0 ? '' : ' disabled')}>\n                    <div className=\"section-data\">\n                        <div className=\"circle-wrap\">\n                            <span className=\"rank-pos first\">\n                                <span className=\"img-section\"></span>\n                            <span className=\"pos-text\">1</span>\n                            </span>\n                            <div className=\"win\">\n                                {\n                                    FirstUser.coins ?\n                                    <span className=\"coin-span\">\n                                        <img src={Images.IC_COIN} alt=\"\" /> {FirstUser.coins}\n                                    </span>\n                                    :\n                                    <span className=\"coin-span\">-</span>\n                                }\n                                <span className=\"coin-txt\">{AL.COINS}</span>\n                            </div>\n                        </div>\n                        <div className=\"winner-name\">{FirstUser.user_name || 'User Name'}</div>\n                    </div>\n                </div>\n                <div className={\"rank-section third-rank\" + (itemLength > 2 ? '' : ' disabled')}>\n                    <div className=\"section-data\">\n                        <div className=\"circle-wrap\">\n                            <span className=\"rank-pos third\">\n                                <span className=\"img-section\"></span>\n                                <span className=\"pos-text\">3</span>\n                            </span>\n                            <div className=\"win\">\n                                {\n                                    ThirdUser.coins ?\n                                    <span className=\"coin-span\">\n                                        <img src={Images.IC_COIN} alt=\"\" /> {ThirdUser.coins}\n                                    </span>\n                                        :\n                                    <span className=\"coin-span\">-</span>\n                                }\n                                <span className=\"coin-txt\">{AL.COINS}</span>\n                            </div>\n                        </div>\n                        <div className=\"winner-name\">{ThirdUser.user_name || 'User Name'}</div>\n                    </div>\n                </div>\n                \n            </React.Fragment>\n        )\n    } \n\n    filterLeaderboard = (filterBy) => {\n        console.log('filterBy',filterBy);\n        this.setState({\n            showLFitlers: false,\n            CFilter : filterBy,\n            PLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            OWNDATA: ''\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    handleTimeFilter=(filterBy, id) =>{\n        if(this.state.filterDataBy != filterBy){\n            this.setState({\n                filterDataBy: filterBy,\n                filterById: id,\n                PLIST: [],\n                PNO: 1,\n                PSIZE: 20,\n                OWNDATA: ''\n            }, () => {\n                this.getLeaderboardData();\n            })\n        }\n    }\n\n    render() {\n        const {\n            filterArray,\n            PLIST,\n            OWNDATA,\n            ISLOAD,\n            HMORE,\n            refreshList,\n            CFilter,\n            showLFitlers,\n            filerByTime,\n            filterDataBy,\n            TOPTHREE,\n            SPONSORDATA,\n            filerByPreTime,\n            filterById,\n            STARTDATE,\n            ENDDATE,\n            leadStatus\n        } = this.state;\n\n        let FitlerOptions = {\n            showLFitler: showLFitlers\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"prediction-wrap-v prediction-part-v open-predict-leaderboard is-leaderboard fpp-leaderboard pickem-leaderboard\">\n                        <Filter\n                            {...this.props}\n                            FitlerOptions={FitlerOptions}\n                            hideFilter={this.hideFilter}\n                            filerObj={filterArray}\n                            filterLeaderboard={this.filterLeaderboard}\n                            filterDataBy={CFilter}\n                        />\n                        <div className=\"fixed-ch-view\">                              \n                            <div className=\"filter-time-section\">\n                                <ul className=\"filter-time-wrap\">\n                                    {\n                                        _Map(filerByTime,(item,idx)=>{\n                                            return(\n                                                <li\n                                                    href \n                                                    className={\"filter-time-btn\" + \n                                                        (item.value == filterDataBy ? ' active' : '') + \n                                                        (item.prize_cat_id == 2 && filterById == 2 && STARTDATE ? ' with-date' : '')\n                                                        } \n                                                        onClick={()=>this.handleTimeFilter(item.value, item.prize_cat_id)}\n                                                >\n                                                    {item.label} \n                                                    {\n                                                        (item.prize_cat_id == 2 && filterById == 2) && STARTDATE &&\n                                                        <span>\n                                                            <Moment date={STARTDATE} format={\"D MMM \"} /> \n                                                            -\n                                                            <Moment date={ENDDATE} format={\" D MMM \"} /> \n                                                        </span>\n                                                    }\n                                                </li>\n                                            )\n                                        })\n                                    }\n                                </ul>\n                            </div>\n\n                            <div className=\"previous-data\">\n                                {\n                                    _Map(filerByPreTime,(item,idx)=>{\n                                        return(\n                                            <React.Fragment>\n                                                {\n                                                    filterById === item.prize_cat_id &&\n                                                    <a \n                                                        href \n                                                        className={\"previous-time-btn\" + ((filterDataBy === 'last_week' || filterDataBy === 'last_month' || filterDataBy === 'yesterday') ? ' active' : '')}\n                                                        onClick={()=>this.handleTimeFilter(item.value, item.prize_cat_id)}\n                                                        >\n                                                            <i className=\"icon-arrow-up\"></i>\n                                                            <i className=\"icon-arrow-up\"></i>\n                                                            {item.label}\n                                                    </a>\n                                                }\n                                            </React.Fragment>\n                                        )\n                                    })\n                                }\n                                {\n                                    leadStatus == 0 &&\n                                    <div className=\"leader-status\">\n                                        <span></span>{AL.LIVE}\n                                    </div>\n                                }\n                                {\n                                    leadStatus == 3 &&\n                                    <div className=\"leader-status comp\">\n                                        {AL.COMPLETED}\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"table-view\">\n                            <div className=\"top-three-users\">                                \n                                {\n                                    TOPTHREE && TOPTHREE.length > 0 && \n                                    this.renderTopUser(TOPTHREE)\n                                }\n                                <div className=\"white-section\"></div>\n                            </div>\n                            {\n                                ((PLIST && PLIST.length > 0) || (OWNDATA && OWNDATA.length > 0) || (TOPTHREE && TOPTHREE.length > 0) ) &&\n                                <div className=\"header-v\">\n                                    <span className=\"u-rank\">{AL.RANK}</span>\n                                    <span className=\"usernm\">{AL.USER_NAME}</span>\n                                    <span className=\"amount\">{AL.COINS}</span>\n                                </div>\n                            }\n                        \n                            {\n                                refreshList && OWNDATA && OWNDATA.user_id && this.renderItem(OWNDATA, true, -1)\n                            }\n                            {\n                                PLIST.length > 0 && \n                                <InfiniteScroll\n                                    dataLength={PLIST.length}\n                                    hasMore={!ISLOAD && HMORE}\n                                    next={() => this.getMoreLData()}\n                                >\n                                    <div className=\"list-view\">\n                                        {\n                                            PLIST.map((item, idx) => {\n                                                return this.renderItem(item, false, idx)\n                                            })\n                                        }\n                                    </div>\n                                </InfiniteScroll>\n                            }\n                            {\n                                PLIST.length === 0 && OWNDATA.length === 0 && TOPTHREE.length === 0 && !ISLOAD &&\n                                <div className=\"no-data-leaderboard\">\n                                    <NoDataView\n                                        BG_IMAGE={Images.no_data_bg_image}\n                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                        MESSAGE_1={'Not enough data'}\n                                        MESSAGE_2={'to generate leaderboard'}\n                                    />\n                                </div>\n                            }\n                            {\n                                PLIST.length === 0 && !OWNDATA && !ISLOAD && TOPTHREE.length != 0 &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                    MESSAGE_1={AL.NO_DATA_FOUND}\n                                    MESSAGE_2={AL.NO_DATA_FOR_FILTER}\n                                />\n                            }\n                            {\n                                PLIST.length === 0 && ISLOAD &&\n                                _times(16, (idx) => {\n                                    return this.renderShimmer(idx)\n                                })\n                            }\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default NewPickemLeaderboard;\n","/var/www/html/framework/frontend/src/Component/BecomeAffiliate/index.js",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/MyFPPOpenPredictors.jsx",["1681","1682","1683","1684","1685","1686","1687","1688","1689","1690","1691","1692","1693","1694","1695","1696","1697","1698","1699","1700","1701","1702"],"import React from 'react';\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities, _debounce } from '../../Utilities/Utilities';\nimport { UpcomingFPPOpenPredictors, LiveFPPOpenPredictors, CompletedFPPOpenPredictors } from './index';\nimport { my_contest_config } from '../../JsonFiles';\nimport { getMyFPPOpenPredictionCategory } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../CustomComponent';\nimport Skeleton from 'react-loading-skeleton';\nimport queryString from 'query-string';\nimport Images from '../../components/images';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\nimport OpenPredictorFPPFixture from './OpenPredictorFPPFixture';\nimport Slider from 'react-slick';\nimport Filter from '../../components/filter';\n\n/**\n  * @class MyContest\n  * @description My contest listing of current loggedin user for selected sports\n  * @author Vinfotech\n*/\nclass MyFPPOpenPredictors extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            selectedTab: (this.props.location && this.props.location.state) ? (this.props.location.state.from == 'notification' ? Constants.CONTEST_COMPLETED : Constants.CONTEST_UPCOMING) : Constants.CONTEST_UPCOMING,\n            lcList: [],\n            ucList: [],\n            ccList: [],\n            ShimmerList: [0, 1, 2, 3, 4, 5],\n            sports_id: Constants.AppSelectedSport ? Constants.AppSelectedSport : '',\n            selectedFixture: '',\n            refreshList: true,\n            showMPFitler: false\n        }\n    }\n\n    componentDidMount() {\n        let url = this.props.location.search;\n        let urlParams = queryString.parse(url);\n\n        let contest = urlParams.contest;\n        if (contest in my_contest_config.contest_url) {\n            let sports_id = Constants.AppSelectedSport;\n            this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n        else {\n            if (contest in my_contest_config.contest) {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n            }\n            else {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n            }\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.showMPFitler != nextProps.showLobbyFitlers) {\n            this.setState({ showMPFitler: nextProps.showLobbyFitlers })\n        }\n        if (WSManager.loggedIn() && this.props.history.location.pathname == '/my-contests') {\n\n            if (this.state.sports_id != nextProps.selectedSport) {\n                this.reload(nextProps);\n            }\n            else {\n                var url = this.props.location.search;\n                if(window.location.search != url){\n                    url = window.location.search;\n                }\n                let urlParams = queryString.parse(url);\n                let contest = urlParams.contest;\n                if (contest in my_contest_config.contest_url) {\n                    let sports_id = Constants.AppSelectedSport;\n                    if(my_contest_config.contest_url[contest] != this.state.selectedTab){\n                        this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                            this.getMyCollectionsList(this.state.selectedTab)\n                        })\n                    }else{\n                    this.setState({ sports_id })\n                }\n                }\n                else {\n                    if (contest in my_contest_config.contest) {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n                    }\n                    else {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n                    }\n                }\n            }\n        }\n    }\n\n    /** \n    @description hide filters \n    */\n    hideFilter = () => {\n        this.setState({ showMPFitler: false })\n        this.props.hideFilter()\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        if (this.state.selectedTab !== selectedTab) {\n            window.history.replaceState(\"\", \"\", \"/my-contests?contest=\" + my_contest_config.contest[selectedTab]);\n            this.setState({\n                selectedTab: selectedTab, \n                ucList: [],\n                lcList: [],\n                ccList: []\n            }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            });\n        }\n    }, 300)\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyCollectionsList(status) {\n        var param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"prediction_status\": status,\n        }\n        this.setState({ isLoaderShow: true })\n        getMyFPPOpenPredictionCategory(param).then((responseJson) => {\n            this.setState({ isLoaderShow: false })\n\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let list = responseJson.data.category_list || [];\n                this.setState({\n                    selectedFixture: list.length > 0 ? list[0] : ''\n                },()=>{\n                    setTimeout(() => {\n                        CustomHeader.changeFilter(true, this.state.selectedFixture.category_name )                        \n                    }, 100);                    \n                })\n                switch (this.state.selectedTab) {\n                    case Constants.CONTEST_UPCOMING:\n                        this.setState({ ucList: list })\n                        break;\n                    case Constants.CONTEST_LIVE:\n                        this.setState({ lcList: list })\n                        break;\n                    case Constants.CONTEST_COMPLETED:\n                        this.setState({ ccList: list })\n                        break;\n                    default:\n                        this.setState({ ucList: list })\n                }\n            }\n        })\n    }\n\n    /**\n     * @description This function is called when sports changed from header\n     * @static A static function \n    */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/my-contests\")) {\n            this.setState({ ccList: [], lcList: [], ucList: [], sports_id: nextProps.selectedSport }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n    }\n\n    onSelectFixture = _debounce((fxtr) => {\n        this.setState({\n            selectedFixture: fxtr,\n            refreshList: false\n        }, () => {\n            this.setState({\n                refreshList: true\n            })\n        })\n    }, 300)\n\n    MPFilterSelect = (filterBy) => {\n        this.setState({\n            showMPFitler: false,\n            selectedFixture : filterBy,\n            refreshList: false\n        }, () => {\n            this.setState({\n                refreshList: true\n            })\n        })\n    }\n\n    /**\n     * @description This function render all UI components. It is the React lifecycle methods that called after @see componentWillMount()\n     * @return UI Components\n    */\n    render() {\n        let MESSAGE_1 = this.state.selectedTab == Constants.CONTEST_UPCOMING ? AppLabels.NO_UPCOMING_CONTEST1 : this.state.selectedTab == Constants.CONTEST_LIVE ?\n            AppLabels.NO_LIVE_CONTEST1 : AppLabels.NO_COMPLETED_CONTEST1\n\n        let MESSAGE_2 = this.state.selectedTab == Constants.CONTEST_UPCOMING ? AppLabels.NO_UPCOMING_CONTEST2 : this.state.selectedTab == Constants.CONTEST_LIVE ?\n            AppLabels.NO_LIVE_CONTEST2 : AppLabels.NO_COMPLETED_CONTEST2\n\n        let HeaderOption = {\n            title: AppLabels.MY_CONTEST,\n            notification: true,\n            hideShadow: true,\n            back: true\n        };\n\n        let sliderList = this.state.selectedTab == Constants.CONTEST_UPCOMING ? this.state.ucList : this.state.selectedTab == Constants.CONTEST_LIVE ?\n            this.state.lcList : this.state.ccList\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        let FitlerOptions = {\n            showMPFitler: this.state.showMPFitler\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container open-predict-web-container my-contest-style tab-two-height web-container-fixed prediction-wrap-v\">\n                        {\n                            !this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        {\n                            this.state.refreshList &&\n                            <Filter\n                                {...this.props}\n                                FitlerOptions={FitlerOptions}\n                                hideFilter={this.hideFilter}\n                                filerObj={sliderList}\n                                MPFilterSelect={this.MPFilterSelect}\n                                filterByCat={this.state.selectedFixture}\n                            />\n                        }\n                        <div className={\"tabs-primary \" + (!this.props.hideHeader ? ' mt50' : '')}>\n                            <Tab.Container id='my-contest-tabs' activeKey={this.state.selectedTab} onSelect={() => console.log('clicked')} defaultActiveKey={this.state.selectedTab}>\n                                <Row className=\"clearfix\">\n                                    <Col className=\"top-fixed my-contest-tab circular-tab\" xs={12}>\n                                        <Nav>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_LIVE)} eventKey={Constants.CONTEST_LIVE} className=\"live-contest\"><span className=\"live-indicator\"></span> {AppLabels.LIVE} </NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_UPCOMING)} eventKey={Constants.CONTEST_UPCOMING}>{AppLabels.UPCOMING}</NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_COMPLETED)} eventKey={Constants.CONTEST_COMPLETED}>{AppLabels.COMPLETED}</NavItem>\n                                        </Nav>\n                                    </Col>\n                                    <Col className=\"top-tab-margin\" xs={12}>\n                                        \n                                        <Tab.Content animation>\n                                            <Tab.Pane eventKey={Constants.CONTEST_LIVE}>\n                                                {\n                                                    this.state.lcList.length > 0 && this.state.refreshList && <LiveFPPOpenPredictors {...this.props} selectedFixture={this.state.selectedFixture} />\n                                                }\n                                                {\n                                                    this.state.lcList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.lcList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item) => {\n                                                        return (\n                                                            <Shimmer key={item} idx={item} />\n                                                        )\n                                                    })\n                                                }\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_UPCOMING}>\n                                                {\n                                                    this.state.ucList.length > 0 && this.state.refreshList && <UpcomingFPPOpenPredictors {...this.props} selectedFixture={this.state.selectedFixture} />\n                                                }\n                                                {\n                                                    this.state.ucList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.ucList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item) => {\n                                                        return (\n                                                            <Shimmer key={item} idx={item} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_COMPLETED}>\n                                                {\n                                                    this.state.ccList.length > 0 && this.state.refreshList && <CompletedFPPOpenPredictors {...this.props} selectedFixture={this.state.selectedFixture} />\n                                                }\n                                                {\n                                                    this.state.ccList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.ccList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item) => {\n                                                        return (\n                                                            <Shimmer key={item} idx={item} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                        </Tab.Content>\n                                    </Col>\n                                </Row>\n                            </Tab.Container>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n/**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nconst Shimmer = ({ idx }) => {\n    return (\n        <ul className=\"collection-list-wrapper pos-r pb-0\">\n            {\n                idx === 0 &&\n                <div className=\"shimmer-fixture m-t\">\n                    <Skeleton width={'95%'} height={72} />\n                    <Skeleton width={'95%'} height={72} />\n                </div>\n            }\n            <div className=\"contest-list\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ul>\n    )\n}\n\nexport default MyFPPOpenPredictors","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictionFPPLeaderboard.jsx",["1703","1704","1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716","1717","1718","1719","1720","1721","1722","1723","1724","1725","1726","1727","1728","1729","1730","1731","1732","1733","1734","1735","1736","1737","1738","1739","1740","1741","1742","1743","1744","1745","1746","1747","1748","1749","1750","1751","1752","1753","1754","1755","1756"],"import React from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { NoDataView } from '../CustomComponent';\nimport Images from '../../components/images';\nimport { _times, _Map, _filter } from '../../Utilities/Utilities';\nimport { getFPPFixedPredictionCategory, getFPPFixedPredictionLeaderboard } from \"../../WSHelper/WSCallings\";\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport Skeleton from 'react-loading-skeleton';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Filter from '../../components/filter';\nimport WSManager from '../../WSHelper/WSManager';\nimport { Utilities } from '../../Utilities/Utilities';\nimport ls from 'local-storage';\nimport Moment from \"react-moment\";\nimport { GameType } from '../../helper/Constants';\n\n\nclass OpenPredictionFPPLeaderboard extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            PLIST: [],\n            OWNDATA: '',\n            TOPTHREE: [],\n            SPONSORDATA: [],\n            PNO: 1,\n            PSIZE: 20,\n            categoryList: [],\n            HMORE: false,\n            ISLOAD: false,\n            refreshList: true,\n            showLFitlers: false,\n            filterDataBy: 'today',\n            CFilter : '',\n            filterById: '1',\n            OwnUserName: ls.get('profile'),\n            showSponsorData: '',\n            STARTDATE: '',\n            ENDDATE: '',\n            leadStatus: '',\n            filerByTime: [\n                {\n                    value: 'today',\n                    label: AL.TODAY,\n                    prize_cat_id: '1'\n                },\n                {\n                    value: 'this_week',\n                    label: AL.THIS_WEEK,\n                    prize_cat_id: '2'\n                },\n                {\n                    value: 'this_month',\n                    label: AL.THIS_MONTH,\n                    prize_cat_id: '3'\n                },\n            ],\n            filerByPreTime: [\n                {\n                    value: 'yesterday',\n                    label: AL.YESTERDAY,\n                    prize_cat_id: '1'\n                },\n                {\n                    value: 'last_week',\n                    label: AL.LAST_WEEK,\n                    prize_cat_id: '2'\n                },\n                {\n                    value: 'last_month',\n                    label: AL.LAST_MONTH,\n                    prize_cat_id: '3'\n                },\n            ]\n        };\n\n    }\n\n    componentWillMount() {\n        WSManager.setPickedGameType(GameType.OpenPredLead);\n        let url = window.location.href;\n        if (!url.includes('#open-predictor-leaderboard')) {\n            url = url + \"#open-predictor-leaderboard\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    componentDidMount() {\n        this.getCategory();\n        this.getLeaderboardData();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.showLFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    /** \n    @description hide filters \n    */\n    hideFilter = () => {\n        this.setState({ showLFitlers: false })\n    }\n\n    getCategory = () => {\n        getFPPFixedPredictionCategory().then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    categoryList: responseJson.data\n                })\n            }\n        })\n    }\n\n    /**\n    * @description - method to get leaderboard list\n    */\n\n    getLeaderboardData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy , TOPTHREE,SPONSORDATA} = this.state;\n        let param = {\n            \"category_id\": CFilter.category_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy\n        }\n        this.setState({ ISLOAD: true });\n        getFPPFixedPredictionLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                let topThree = responseJson.data.top_three || [];\n                let sponserData = responseJson.data.sponsors || [];\n                let startDate = responseJson.data.start_date || '';\n                let endDate = responseJson.data.end_date || '';\n                let status = responseJson.data.status;\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    TOPTHREE: PNO === 1 ? topThree : TOPTHREE,\n                    SPONSORDATA: PNO === 1 ? sponserData : SPONSORDATA ,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1,\n                    STARTDATE: startDate,\n                    ENDDATE: endDate,\n                    leadStatus: status\n                },()=>{\n                    this.showSponser()\n                })\n            }\n        })\n    }\n\n\n    getMoreLData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy , TOPTHREE,SPONSORDATA} = this.state;\n        let param = {\n            \"category_id\": CFilter.category_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy\n        }\n        this.setState({ ISLOAD: true });\n        getFPPFixedPredictionLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                let topThree = responseJson.data.top_three || [];\n                let sponserData = responseJson.data.sponsors || [];\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    TOPTHREE: PNO === 1 ? topThree : TOPTHREE,\n                    SPONSORDATA: PNO === 1 ? sponserData : SPONSORDATA ,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1\n                },()=>{\n                    this.showSponser()\n                })\n            }\n        })\n    }\n\n    renderShimmer = (idx) => {\n        return (\n            <div key={idx} className=\"list-item\">\n                <span className=\"shimmer\">\n                    <Skeleton height={6} width={'90%'} />\n                    <Skeleton height={4} width={'50%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'30%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'40%'} />\n                </span>\n            </div>\n        )\n    }\n\n    renderItem = (item, isown, idx) => {\n        const {filterDataBy } = this.state;\n        return (\n            <div key={item.user_id + idx} id={item.user_id + idx} className={\"list-item\" + (isown ? ' own-v' : '')}>\n                <span className=\"u-rank\">{item.rank_value}</span>\n                <span className=\"usernm\">\n                    {\n                        isown ?\n                            <React.Fragment>\n                                <div className=\"usrnm-text\">{this.state.OwnUserName.user_name}</div>\n                                <div className=\"you-text\">[{AL.YOU}]</div>\n                            </React.Fragment>\n                            :\n                            item.user_name\n                    }\n                </span>\n                <span className=\"amount\">\n                    <div className=\"val val-section\">\n                        {item.prize_data && item.prize_data.length > 0 ?\n                            <React.Fragment>\n                                {\n                                    item.prize_data[0].prize_type != 3 &&\n                                        <React.Fragment>\n                                            <span>\n                                                {\n                                                    item.prize_data[0].prize_type == 0\n                                                        ?\n                                                        <i className=\"icon-bonus\"></i>\n                                                        :\n                                                        item.prize_data[0].prize_type == 1 ?\n                                                            Utilities.getMasterData().currency_code\n                                                            :\n                                                            <img src={Images.IC_COIN} alt=\"\" />\n                                                }\n                                            </span>\n                                            <React.Fragment>\n                                                {Utilities.kFormatter(item.prize_data[0].amount)}\n                                            </React.Fragment>\n                                        </React.Fragment>\n                                }\n                                {item.prize_data[0].prize_type == 3 &&\n                                    <React.Fragment>\n                                        <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                            <Tooltip id=\"tooltip\" >\n                                                <strong>{item.prize_data[0].name}</strong>\n                                            </Tooltip>\n                                        }>\n                                            <div className=\"win\"> \n                                                {item.prize_data[0].name}\n                                            </div>\n                                        </OverlayTrigger>\n                                    </React.Fragment>\n                                }\n                            </React.Fragment>\n                            :\n                            <React.Fragment>\n                                {\n                                    (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                    <div className=\"win\">--</div>\n                                    :\n                                    this.showPrize(item.rank_value)\n                                }\n                            </React.Fragment>\n                        }\n                    </div>\n                </span>\n                <span className=\"corrected\">{item.correct_answer}/{item.attempts}</span>\n            </div>\n        )\n    }\n\n    showSponser=()=>{\n        const {SPONSORDATA,filterById } = this.state;\n        let sponsor = _filter(SPONSORDATA, (item) => {\n            return item.prize_category == filterById\n        });\n        this.setState({\n            showSponsorData : sponsor\n        })     \n    }\n\n    showPrize=(data)=>{\n        const {showSponsorData,CFilter} = this.state;\n        let rank = parseInt(data);\n        let tmpSData = showSponsorData && showSponsorData.length > 0 ? showSponsorData[0] : [];\n        let traverse = true;\n        let prize = [];\n        _Map(tmpSData.prize_distribution_detail,(item,idx)=>{\n            let max = parseInt(item.max);\n            let min = parseInt(item.min);\n            if(traverse && ((max > rank && min < rank) || (max == rank) || (min == rank))){\n                prize.push(item);\n                traverse = false;\n            }\n        })\n\n        let item = prize && prize.length > 0 ? prize[0] : '';\n\n        return <React.Fragment>\n            {\n                CFilter == '' && item && item.amount ?\n                    <div className={\"win\" + (item.prize_type == 2 ? ' win-pL3' : '')}>\n                        {\n                            item.prize_type != 3 &&\n                            <React.Fragment>\n                                {\n                                    item.prize_type == 0\n                                        ?\n                                        <span className=\"bns-span\">\n                                            <i className=\"icon-bonus\"></i>\n                                        </span>\n                                        :\n                                        item.prize_type == 1 ?\n                                            <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                            :\n                                            <span className=\"coin-span\">\n                                                <img src={Images.IC_COIN} alt=\"\" />\n                                            </span>\n                                }\n                                <React.Fragment>\n                                    {Utilities.kFormatter(item.amount)}\n                                </React.Fragment>\n                            </React.Fragment>\n                        }\n                        {item.prize_type == 3 &&\n                            <React.Fragment>\n                                <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                    <Tooltip id=\"tooltip\" >\n                                        <strong>{item.amount}</strong>\n                                    </Tooltip>\n                                }>\n                                    <div className=\"win\"> \n                                        {item.amount}\n                                    </div>\n                                </OverlayTrigger>\n                            </React.Fragment>\n                        }\n                    </div>\n                    :\n                <div className=\"win\">\n                    --\n                </div>\n            }\n        </React.Fragment>\n           \n    }\n\n    renderTopUser = (item) =>{\n        const {filterDataBy,CFilter} = this.state;\n        \n        let itemLength = item ? item.length : 0;\n        let FirstUser = itemLength > 0 ? item[0] : '';\n        let SecondUser = itemLength > 1 ? item[1] : '';\n        let ThirdUser = itemLength > 2 ? item[2] : '';\n\n        return (\n            <React.Fragment>\n                <div className={\"rank-section second-rank\" + (itemLength > 1 ? '' : ' disabled')}>\n                    <div className=\"section-data\">\n                        <div className=\"circle-wrap\">\n                            <span className=\"rank-pos second\">\n                                <span className=\"img-section\"></span>\n                                <span className=\"pos-text\">2</span>\n                            </span>\n                            <div>{item.rank_value}</div>\n                            {\n                                CFilter == '' && SecondUser && SecondUser.prize_data && SecondUser.prize_data.length > 0 ?\n                                    <div className={\"win\" + (SecondUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                        {\n                                            SecondUser.prize_data[0].prize_type != 3 &&\n                                            <React.Fragment>\n                                                {\n                                                    SecondUser.prize_data[0].prize_type == 0\n                                                        ?\n                                                        <span className=\"bns-span\">\n                                                            <i className=\"icon-bonus\"></i>\n                                                        </span>\n                                                        :\n                                                        SecondUser.prize_data[0].prize_type == 1 ?\n                                                            <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                                            :\n                                                            <span className=\"coin-span\">\n                                                                <img src={Images.IC_COIN} alt=\"\" />\n                                                            </span>\n                                                }\n                                                <React.Fragment>\n                                                    {Utilities.kFormatter(SecondUser.prize_data[0].amount)}\n                                                </React.Fragment>\n                                            </React.Fragment>\n                                        }\n                                        { SecondUser.prize_data[0].prize_type == 3 &&\n                                            <React.Fragment>\n                                                <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                    <Tooltip id=\"tooltip\" >\n                                                        <strong>{SecondUser.prize_data[0].name}</strong>\n                                                    </Tooltip>\n                                                }>\n                                                    <div className=\"win\"> \n                                                        {SecondUser.prize_data[0].name}\n                                                    </div>\n                                                </OverlayTrigger>\n                                            </React.Fragment>\n                                        }\n                                    </div>\n                                    :\n                                    <React.Fragment>\n                                        {\n                                            (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                            <div className=\"win\">--</div>\n                                            :\n                                            <React.Fragment>{this.showPrize(2)}</React.Fragment>\n                                        }\n                                    </React.Fragment>\n                            }\n                            <div className=\"corrected\">{SecondUser.correct_answer || 0}/{SecondUser.attempts || 0}</div>\n                        </div>\n                        <div className=\"winner-name\">{SecondUser.user_name || 'User Name'}</div>\n                    </div>\n                </div>\n                <div className={\"rank-section first-rank\" + (itemLength > 0 ? '' : ' disabled')}>\n                    <div className=\"section-data\">\n                        <div className=\"circle-wrap\">\n                            <span className=\"rank-pos first\">\n                                <span className=\"img-section\"></span>\n                            <span className=\"pos-text\">1</span>\n                            </span>\n                            {\n                                CFilter == '' && FirstUser && FirstUser.prize_data && FirstUser.prize_data.length > 0 ?\n                                    <div className={\"win\" + (FirstUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                        {\n                                            FirstUser.prize_data[0].prize_type != 3 &&\n                                                <React.Fragment>\n                                                    {\n                                                        FirstUser.prize_data[0].prize_type == 0\n                                                            ?\n                                                            <span className=\"bns-span\">\n                                                                <i className=\"icon-bonus\"></i>\n                                                            </span>\n                                                            :\n                                                            FirstUser.prize_data[0].prize_type == 1 ?\n                                                                <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                                                :\n                                                                <span className=\"coin-span\">\n                                                                    <img src={Images.IC_COIN} alt=\"\" />\n                                                                </span>\n                                                    }\n                                                    <React.Fragment>\n                                                        {Utilities.kFormatter(FirstUser.prize_data[0].amount)}\n                                                    </React.Fragment>\n                                                </React.Fragment>\n                                        }\n                                        { \n                                            FirstUser.prize_data[0].prize_type == 3 &&\n                                            <React.Fragment>\n                                                <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                    <Tooltip id=\"tooltip\" >\n                                                        <strong>{FirstUser.prize_data[0].name}</strong>\n                                                    </Tooltip>\n                                                }>\n                                                    <div className=\"win\"> \n                                                        {FirstUser.prize_data[0].name}\n                                                    </div>\n                                                </OverlayTrigger>\n                                            </React.Fragment>\n                                        }\n                                    </div>\n                                    :\n                                    <React.Fragment>\n                                        {\n                                            (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                            <div className=\"win\">--</div>\n                                            :\n                                            <React.Fragment>{this.showPrize(1)}</React.Fragment>\n                                        }\n                                    </React.Fragment>\n                            }\n                            <div className=\"corrected\">{FirstUser.correct_answer || 0}/{FirstUser.attempts || 0}</div>\n                        </div>\n                        <div className=\"winner-name\">{FirstUser.user_name || 'User Name'}</div>\n                    </div>\n                </div>\n                <div className={\"rank-section third-rank\" + (itemLength > 2 ? '' : ' disabled')}>\n                    <div className=\"section-data\">\n                        <div className=\"circle-wrap\">\n                            <span className=\"rank-pos third\">\n                                <span className=\"img-section\"></span>\n                                <span className=\"pos-text\">3</span>\n                            </span>\n                            {\n                                CFilter == '' && ThirdUser && ThirdUser.prize_data && ThirdUser.prize_data.length > 0 ?\n                                    <div className={\"win\" + (ThirdUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                        {\n                                            ThirdUser.prize_data[0].prize_type != 3 &&\n                                                <React.Fragment>\n                                                    {\n                                                        ThirdUser.prize_data[0].prize_type == 0\n                                                            ?\n                                                            <span className=\"bns-span\">\n                                                                <i className=\"icon-bonus\"></i>\n                                                            </span>\n                                                            :\n                                                            ThirdUser.prize_data[0].prize_type == 1 ?\n                                                                <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                                                :\n                                                                <span className=\"coin-span\">\n                                                                    <img src={Images.IC_COIN} alt=\"\" />\n                                                                </span>\n                                                    }\n                                                    <React.Fragment>\n                                                        {Utilities.kFormatter(ThirdUser.prize_data[0].amount)}\n                                                    </React.Fragment>\n                                                </React.Fragment>\n                                        }\n                                        {\n                                            ThirdUser.prize_data[0].prize_type == 3 &&\n                                                <React.Fragment>\n                                                    <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\" >\n                                                            <strong>{ThirdUser.prize_data[0].name}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <div className=\"win\"> \n                                                            {ThirdUser.prize_data[0].name}\n                                                        </div>\n                                                    </OverlayTrigger>\n                                                </React.Fragment>\n                                        }\n                                    </div>\n                                    :\n                                    <React.Fragment>\n                                        {\n                                            (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                            <div className=\"win\">--</div>\n                                            :\n                                            <React.Fragment>{this.showPrize(3)}</React.Fragment>\n                                        }\n                                    </React.Fragment>\n                            }\n                            <div className=\"corrected\">{ThirdUser.correct_answer || 0}/{ThirdUser.attempts || 0}</div>\n                        </div>\n                        <div className=\"winner-name\">{ThirdUser.user_name || 'User Name'}</div>\n                    </div>\n                </div>\n                \n            </React.Fragment>\n        )\n    } \n\n    showSponsor = (item,idx) =>{\n        const {filterById} = this.state;\n        let data = filterById == item.prize_category ? item : '';\n        return (\n            <React.Fragment>\n                {\n                    data != '' && data.sponsor_name &&\n                        <div className=\"sponsored-section\">\n                            <span className=\"sponsored-text\">{AL.SPONSOR_BY}</span>\n                            <img src={Utilities.getOpenPredFPPURL(item.sponsor_logo)} alt=\"\"/>\n                        </div>\n                }\n            </React.Fragment>\n        )\n    }\n\n    filterLeaderboard = (filterBy) => {\n        this.setState({\n            showLFitlers: false,\n            CFilter : filterBy,\n            PLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            OWNDATA: ''\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    handleTimeFilter=(filterBy, id) =>{\n        this.setState({\n            filterDataBy: filterBy,\n            filterById: id,\n            PLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            OWNDATA: ''\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    render() {\n        const {\n            categoryList,\n            PLIST,\n            OWNDATA,\n            ISLOAD,\n            HMORE,\n            refreshList,\n            CFilter,\n            showLFitlers,\n            filerByTime,\n            filterDataBy,\n            TOPTHREE,\n            SPONSORDATA,\n            filerByPreTime,\n            filterById,\n            STARTDATE,\n            ENDDATE,\n            leadStatus\n        } = this.state;\n\n        let FitlerOptions = {\n            showLFitler: showLFitlers\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"prediction-wrap-v prediction-part-v open-predict-leaderboard is-leaderboard fpp-leaderboard\">\n                        <Filter\n                            {...this.props}\n                            FitlerOptions={FitlerOptions}\n                            hideFilter={this.hideFilter}\n                            filerObj={categoryList}\n                            filterLeaderboard={this.filterLeaderboard}\n                            filterDataBy={CFilter}\n                        />\n                        <div className=\"fixed-ch-view\">                              \n                            <div className=\"filter-time-section\">\n                                <ul className=\"filter-time-wrap\">\n                                    {\n                                        _Map(filerByTime,(item,idx)=>{\n                                            return(\n                                                <li\n                                                    href \n                                                    className={\"filter-time-btn\" + \n                                                        (item.value == filterDataBy ? ' active' : '') + \n                                                        (item.prize_cat_id == 2 && filterById == 2 && STARTDATE ? ' with-date' : '')\n                                                        } \n                                                        onClick={()=>this.handleTimeFilter(item.value, item.prize_cat_id)}\n                                                >\n                                                    {item.label} \n                                                    {\n                                                        (item.prize_cat_id == 2 && filterById == 2) && STARTDATE &&\n                                                        <span>\n                                                            <Moment date={STARTDATE} format={\"D MMM \"} /> \n                                                            -\n                                                            <Moment date={ENDDATE} format={\" D MMM \"} /> \n                                                        </span>\n                                                    }\n                                                </li>\n                                            )\n                                        })\n                                    }\n                                </ul>\n                            </div>\n\n                            <div className=\"previous-data\">\n                                {\n                                    _Map(filerByPreTime,(item,idx)=>{\n                                        return(\n                                            <React.Fragment>\n                                                {\n                                                    filterById === item.prize_cat_id &&\n                                                    <a \n                                                        href \n                                                        className={\"previous-time-btn\" + ((filterDataBy === 'last_week' || filterDataBy === 'last_month' || filterDataBy === 'yesterday') ? ' active' : '')}\n                                                        onClick={()=>this.handleTimeFilter(item.value, item.prize_cat_id)}\n                                                        >\n                                                            <i className=\"icon-arrow-up\"></i>\n                                                            <i className=\"icon-arrow-up\"></i>\n                                                            {item.label}\n                                                    </a>\n                                                }\n                                            </React.Fragment>\n                                        )\n                                    })\n                                }\n                                {\n                                    leadStatus == 0 &&\n                                    <div className=\"leader-status\">\n                                        <span></span>{AL.LIVE}\n                                    </div>\n                                }\n                                {\n                                    leadStatus == 3 &&\n                                    <div className=\"leader-status comp\">\n                                        {AL.COMPLETED}\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"table-view\">\n                            <div className=\"top-three-users\">                                \n                                {\n                                    TOPTHREE && TOPTHREE.length > 0 && this.renderTopUser(TOPTHREE)\n                                }\n                                <div className=\"white-section\"></div>\n                            </div>\n                            {\n                                TOPTHREE && TOPTHREE.length > 0 && SPONSORDATA && SPONSORDATA.length > 0 &&\n                                    SPONSORDATA.map((item,idx)=>{\n                                        return this.showSponsor(item)\n                                    })\n                            }\n                            {\n                                ((PLIST && PLIST.length > 0) || (OWNDATA && OWNDATA.length > 0) || (TOPTHREE && TOPTHREE.length > 0) ) &&\n                                <div className=\"header-v\">\n                                    <span className=\"u-rank\">{AL.RANK}</span>\n                                    <span className=\"usernm\">{AL.USER_NAME}</span>\n                                    <span className=\"amount\">{AL.PRIZE}</span>\n                                    <span className=\"corrected text-capitalize ellipsis-text\">{AL.CORRECTED}</span>\n                                </div>\n                            }\n                        \n                            {\n                                refreshList && OWNDATA && this.renderItem(OWNDATA, true, -1)\n                            }\n                            {\n                                PLIST.length > 0 && <InfiniteScroll\n                                    dataLength={PLIST.length}\n                                    hasMore={!ISLOAD && HMORE}\n                                    next={() => this.getMoreLData()}\n                                >\n                                    <div className=\"list-view\">\n                                        {\n                                            PLIST.map((item, idx) => {\n                                                return this.renderItem(item, false, idx);\n                                            })\n                                        }\n                                    </div>\n                                </InfiniteScroll>\n                            }\n                            {\n                                PLIST.length === 0 && OWNDATA.length === 0 && TOPTHREE.length === 0 && !ISLOAD &&\n                                <div className=\"no-data-leaderboard\">\n                                    <NoDataView\n                                        BG_IMAGE={Images.no_data_bg_image}\n                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                        MESSAGE_1={AL.NOT_ENOUGH_DATA_ON_LEADERBOARD}\n                                    />\n                                </div>\n                            }\n                            {\n                                PLIST.length === 0 && !OWNDATA && !ISLOAD && TOPTHREE.length != 0 &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                    MESSAGE_1={AL.NO_DATA_FOUND}\n                                    MESSAGE_2={AL.NO_DATA_FOR_FILTER}\n                                />\n                            }\n                            {\n                                PLIST.length === 0 && ISLOAD &&\n                                _times(16, (idx) => {\n                                    return this.renderShimmer(idx)\n                                })\n                            }\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default OpenPredictionFPPLeaderboard;\n","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPLobby.jsx",["1757","1758","1759","1760","1761","1762","1763","1764","1765","1766","1767","1768","1769","1770","1771","1772","1773","1774","1775","1776","1777","1778","1779","1780","1781","1782","1783","1784","1785","1786","1787","1788","1789","1790","1791","1792","1793","1794","1795","1796"],"import React from 'react';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { updateDeviceToken, getFPPLobbyOpenPrediction } from \"../../WSHelper/WSCallings\";\nimport { Utilities, parseURLDate, _debounce } from '../../Utilities/Utilities';\nimport { NoDataView, LobbyBannerSlider } from '../CustomComponent';\nimport { OpenPredictorFPPContestList } from '.';\nimport Skeleton from 'react-loading-skeleton';\nimport Slider from \"react-slick\";\nimport ls from 'local-storage';\nimport OpenPredictorFPPFixture from './OpenPredictorFPPFixture';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as Constants from \"../../helper/Constants\";\n\nclass OpenPredictorFPPLobby extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeSlider = this.changeSlider.bind(this)\n        this.state = {\n            ContestList: [],\n            ShimmerList: [1, 2, 3, 4, 5, 6, 7],\n            isListLoading: false,\n            sports_id: Constants.AppSelectedSport,\n            selectedFixture: '',\n            refreshList: true\n        }\n    }\n\n    /**\n     * @description - this is life cycle method of react\n     */\n\n    componentDidMount() {\n        if (window.location.pathname === '/lobby') {\n            WSManager.setFromConfirmPopupAddFunds(false);\n            this.lobbyContestList();\n            this.checkOldUrl();\n            this.handelNativeGoogleLogin()\n            if (!ls.get('isDeviceTokenUpdated') && ls.get('isDeviceTokenUpdated')) {\n\n                let token_data = {\n                    action: 'push',\n                    targetFunc: 'push',\n                    type: 'deviceid',\n                }\n                this.sendMessageToApp(token_data)\n            }\n            setTimeout(() => {\n                let push_data = {\n                    action: 'push',\n                    targetFunc: 'push',\n                    type: 'receive',\n                }\n                this.sendMessageToApp(push_data)\n            }, 300);\n        }\n    }\n\n    componentWillMount = () => {\n        this.enableDisableBack(false)\n        Utilities.scrollToTop()\n    }\n\n    enableDisableBack(flag) {\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc: 'handleLoginReceived'\n            }\n            this.sendMessageToApp(data);\n        }\n    }\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n    }\n\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            this.setState({\n                ContestList: [],\n                sports_id: nextProps.selectedSport,\n            }, () => {\n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.lobbyContestList();\n            })\n        }\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n            if (e.data.locale != undefined) {\n                WSManager.setAppLang(e.data.locale);\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            }\n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }\n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }\n\n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132' ||\n                    e.data.notif.notification_type == '300') {\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = parseURLDate(e.data.notif.season_scheduled_date);\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else if (e.data.notif.custom_notification_type ==7) {\n                        pathName = 'add-funds';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        let sports = '#' + Utilities.getSelectedSportsForUrl();\n        if (!url.includes(sports)) {\n            url = url + sports\n        }\n        if (!url.includes('#open-predictor-leaderboard')) {\n            url = url + \"#open-predictor-leaderboard\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport\n        }\n\n        this.setState({ isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getFPPLobbyOpenPrediction(param);\n        if (api_response_data) {\n            this.setState({\n                ContestList: (api_response_data.category_list || [])\n            })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    goToDFS = () => {\n        WSManager.setPickedGameType(Constants.GameType.DFS);\n        window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n    }\n\n    goToRewards = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push('/leaderboard#open-predictor-leaderboard')\n        }\n    }\n\n    changeSlider(e) {\n        if (this.sliderWrapper.innerSlider.state.currentSlide > (this.state.ContestList.length - 2)) {\n            setTimeout(() => {\n                this.sliderWrapper.slickGoTo((this.state.ContestList.length - 2));\n            }, 10);\n        }\n    }\n\n    onSelectFixture = _debounce((fxtr) => {\n        this.setState({\n            selectedFixture: fxtr,\n            refreshList: false\n        }, () => {\n            this.setState({\n                refreshList: true\n            })\n        })\n    }, 300)\n\n    renderPredictionFixtures = () => {\n        const {\n            ContestList,\n            isListLoading,\n            ShimmerList,\n            selectedFixture,\n            refreshList\n        } = this.state;\n\n        var settings = {\n            infinite: false,\n            slidesToShow: ContestList.length == 2 ? 2 : 5.4,\n            slidesToScroll: 1,\n            variableWidth: false,\n            initialSlide: 0,\n            className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length == 2 ? ' no-border-card' : '') + (ContestList.length > 3 ? ' ' : ' left-slict-slider'),\n            centerMode: false,\n            swipeToSlide: true,\n            responsive: [\n                {\n                    breakpoint: 428,\n                    settings: {\n                        slidesToShow: ContestList.length == 2 ? 2 : 4.2,\n                        className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length > 2 ? ' not-left-slict-slider' : '') + (ContestList.length == 2 ? ' no-border-card' : ''),\n                        \n                    }\n                },\n                {\n                    breakpoint: 400,\n                    settings: {\n                        slidesToShow: ContestList.length == 2 ? 2 : 3.8,\n                        className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length > 2 ? ' not-left-slict-slider' : '') + (ContestList.length == 2 ? ' no-border-card' : ''),\n                    \n                    }\n                },\n                {\n                    breakpoint: 320,\n                    settings: {\n                        slidesToShow: ContestList.length == 2 ? 2 : 3.2,\n                        className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length > 2 ? ' not-left-slict-slider' : '') + (ContestList.length == 2 ? ' no-border-card' : ''),\n                     \n                    }\n                }\n            ],\n            \n        };\n        return (\n            <div >\n                <div className=\"bg-primary\" />\n                {\n                    ContestList.length > 1 && <Slider ref={sliderWrapper => this.sliderWrapper = sliderWrapper} {...settings}>\n                        {\n                            ContestList.map((item, index) => {\n                                return (\n                                    <React.Fragment key={index} >\n                                        <OpenPredictorFPPFixture {...this.props} item={item} onSelect={this.onSelectFixture} isActive={selectedFixture == item} />\n                                    </React.Fragment>\n                                );\n                            })\n                        }\n                    </Slider>\n                }\n                {\n                    ContestList.length > 0 && refreshList && <OpenPredictorFPPContestList {...this.props} goToDFS={this.goToDFS} goToRewards={this.goToRewards} data={{ LobbyData: selectedFixture }} />\n                }\n                <ul className=\"collection-list-wrapper pos-r\">\n                    {\n                        (ContestList.length === 0 && !isListLoading) &&\n                        <NoDataView\n                            BG_IMAGE={Images.no_data_bg_image}\n                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                            MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                        />\n                    }\n                    {\n                        (ContestList.length === 0 && isListLoading) &&\n                        ShimmerList.map((item, index) => {\n                            return (\n                                <React.Fragment key={index} >\n                                    {\n                                        index === 0 &&\n                                        <div className=\"shimmer-fixture\">\n                                            <Skeleton width={'95%'} height={72} />\n                                            <Skeleton width={'95%'} height={72} />\n                                        </div>\n                                    }\n                                    <div className=\"contest-list\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-image predict\">\n                                                    <Skeleton width={24} height={24} />\n                                                </div>\n                                                <div className=\"shimmer-line predict\">\n                                                    <div className=\"m-v-xs\">\n                                                        <Skeleton height={8} width={'70%'} />\n                                                    </div>\n                                                    <Skeleton height={34} />\n                                                    <Skeleton height={34} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view m-0 pt-3\">\n                                                <div className=\"progress-bar-default\">\n                                                    <Skeleton height={8} width={'70%'} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={110} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n        )\n    }\n\n    render() {\n\n        const {\n            BannerList\n        } = this.state\n\n        let bannerLength = BannerList ? BannerList.length : 0;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container no-tab-two-height pb-2 prediction-wrap-v open-predict-web-container\">\n                        <div>\n                            <div className={bannerLength > 0 ? 'banner-v animation' : 'banner-v'}>\n                                {\n                                    bannerLength > 0 && <LobbyBannerSlider BannerList={BannerList} redirectLink={this.redirectLink.bind(this)} />\n                                }\n                            </div>\n                            {\n                                this.renderPredictionFixtures()\n                            }\n\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default OpenPredictorFPPLobby\n","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeaguaNavLeaderBoard.jsx",["1797","1798","1799","1800","1801","1802","1803","1804","1805","1806","1807","1808","1809","1810"],"import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map, _isUndefined } from '../../Utilities/Utilities';\nimport { setValue, AppSelectedSport } from '../../helper/Constants';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport { getMiniLeagueByStatus } from \"../../WSHelper/WSCallings\";\nimport * as Constants from \"../../helper/Constants\";\nimport { NoDataView } from '../CustomComponent';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport LeagueDetails from './LeagueDetails';\n\nclass LeaguaNavLeaderBoard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            LobyyData: !_isUndefined(props.location.state) ? props.location.state.LobyyData : [],\n            isFromLobby: !_isUndefined(props.location.state) ? props.location.state.isFromLobby : true,\n            MiniLeagueList: [],\n            MiniLeagueData: '',\n            showBtmBtn: '',\n            oldScrollOffset: 0,\n            scrollStatus: '',\n\n            showContestDetail: false,\n            HeaderOption: {\n                back: true,\n                title: AL.F2P_LEAGUES,\n                hideShadow: false\n            }\n        };\n        this._timeout = null;\n        this.checkScrollStatus = this.checkScrollStatus.bind(this);\n    }\n\n    checkScrollStatus() {\n        if (this._timeout) { \n            clearTimeout(this._timeout);\n        }\n        this._timeout = setTimeout(() => {\n            this._timeout = null;\n            this.setState({\n                scrollStatus: 'scroll stopped',\n                showBtmBtn: ''\n            });\n        }, 700);\n        if (this.state.scrollStatus !== 'scrolling') {\n            this.setState({\n                scrollStatus: 'scrolling'\n            });\n        }\n    }\n    onScrollList = (event) => {\n        let scrollOffset = window.pageYOffset;\n        this.checkScrollStatus();\n        this.setState({\n            soff: scrollOffset\n        })\n        if (this.state.oldScrollOffset < scrollOffset) {\n            this.setState({\n                showBtmBtn: 'hideBottomBtn',\n                oldScrollOffset: scrollOffset\n            })\n        } else {\n            this.setState({\n                showBtmBtn: '',\n                oldScrollOffset: scrollOffset\n            })\n        }\n    }\n\n    componentWillMount = () => {\n        this.getMiniLeagueByStatusApi();\n        window.addEventListener('scroll', this.onScrollList);\n\n\n    }\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.onScrollList);\n    }\n    getMiniLeagueDetails = (item, LobyyData) => {\n        this.props.history.push({\n            pathname: '/league-details',\n            state: { LobyyData: LobyyData, MiniLeagueData: item }\n        })\n\n    }\n    ContestDetailShow = (item) => {\n        this.setState({\n            showContestDetail: true,\n            MiniLeagueData: item,\n        });\n    }\n    openLeaderBoardLeague = (item) => {\n\n        this.props.history.push({\n            pathname: '/mini-league-leader-board', state: {\n                LobyyData: this.state.LobyyData,\n                MiniLeagueSponser: item,\n                MiniLeagueListItem: item\n            }\n        })\n    }\n    /**\n     * @description method to hide contest detail model\n     */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    getMiniLeagueByStatusApi = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"status\": \"live\",\n            \"page_no\": \"1\",\n            \"page_size\": \"500\"\n        }\n        delete param.limit;\n        var api_response_data = await getMiniLeagueByStatus(param);\n        if (api_response_data) {\n            this.setState({ MiniLeagueList: api_response_data })\n        }\n\n\n\n\n    }\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            isFromLobby: this.state.isFromLobby,\n            title: AL.F2P_LEAGUES,\n            share: true\n        }\n        const { LobyyData, MiniLeagueList, showContestDetail } = this.state;\n        return (\n            <MyContext.Provider >\n                    <div className=\"prediction-wrap-v padding-leagues prediction-part-v open-predict-leaderboard is-leaderboard\">\n                            {\n                                MiniLeagueList.data && MiniLeagueList.data.map((item, index) => {\n                                    return (\n                                        <div className=\"league-list-all\">\n                                            <div className=\"sort-contest-wrapper mt15\">\n                                                <div className=\"league-section no-border\" onClick={() => this.openLeaderBoardLeague(item)}>\n                                                    <div className=\"league-name\">\n                                                        {item.mini_league_name}\n\n                                                    </div>\n                                                    {\n                                                        item.join_count > 0 &&\n                                                        <div className=\"pull-right verity-count\">\n                                                            {AL.JOINED_CAP}\n                                                        </div>\n                                                    }\n\n\n                                                    <p> {item.total_complete + \" / \" + item.season_count + \" Matches\"}</p>\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                    );\n                                })\n                            }\n                            {\n                                MiniLeagueList.data && MiniLeagueList.data.length == 0 &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                    MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                    MESSAGE_2={AppLabels.NO_DATA_VIEW_MESSAGE_ALL_LEAGUE}\n                                    onClick_2={this.joinContest}\n                                />\n\n                            }\n                             <div className={\"roster-footer mb80 pl15 pr15 \" + this.state.showBtmBtn}>\n                            <div className=\"btn-wrap\">\n                                <button onClick={() => this.props.history.push({\n                                    pathname: '/completed-leagues',\n                                    state: { LobyyData: LobyyData, }\n                                })} className=\"btn btn-primary btn-block btm-fix-btn completed-league-preview\">{AL.COMPLETED_LEAGUE}</button>\n                            </div>\n                        </div>\n\n                       \n                    </div>\n                \n            </MyContext.Provider>\n\n\n\n        )\n    }\n}\n\nexport default LeaguaNavLeaderBoard;\n","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictionLeaderboard.jsx",["1811","1812","1813","1814","1815"],"import React from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { NoDataView } from '../CustomComponent';\nimport Images from '../../components/images';\nimport { _times, _debounce, _Map } from '../../Utilities/Utilities';\nimport Slider from \"react-slick\";\nimport { getFixedPredictionCategory, getFixedPredictionLeaderboard } from \"../../WSHelper/WSCallings\";\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport Skeleton from 'react-loading-skeleton';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Filter from '../../components/filter';\nimport OpenPredictorFixture from './OpenPredictorFixture';\nimport WSManager from '../../WSHelper/WSManager';\nimport {GameType} from '../../helper/Constants';\n\n\nclass OpenPredictionLeaderboard extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            PLIST: [],\n            OWNDATA: '',\n            PNO: 1,\n            PSIZE: 20,\n            categoryList: [],\n            HMORE: false,\n            ISLOAD: false,\n            refreshList: true,\n            showLFitlers: false,\n            filterDataBy: 'today',\n            CFilter : '',\n            filerByTime: [\n                {\n                    value: 'today',\n                    label: AL.TODAY\n                },\n                {\n                    value: 'this_week',\n                    label: AL.THIS_WEEK\n                },\n                {\n                    value: 'this_month',\n                    label: AL.THIS_MONTH\n                },\n            ]\n        };\n\n    }\n\n    componentWillMount() {\n        WSManager.setPickedGameType(GameType.OpenPred);\n        let url = window.location.href;\n        if (!url.includes('#open-predictor')) {\n            url = url + \"#open-predictor\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    componentDidMount() {\n        this.getCategory();\n        this.getLeaderboardData();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.showLFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    /** \n    @description hide filters \n    */\n    hideFilter = () => {\n        this.setState({ showLFitlers: false })\n    }\n\n    getCategory = () => {\n        getFixedPredictionCategory().then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    categoryList: responseJson.data\n                })\n            }\n        })\n    }\n\n    /**\n    * @description - method to get leaderboard list\n    */\n\n    getLeaderboardData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy } = this.state;\n        let param = {\n            \"category_id\": CFilter.category_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy\n        }\n        this.setState({ ISLOAD: true });\n        getFixedPredictionLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1\n                })\n            }\n        })\n    }\n\n\n    getMoreLData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy } = this.state;\n        let param = {\n            \"category_id\": CFilter.category_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy\n        }\n        this.setState({ ISLOAD: true });\n        getFixedPredictionLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1\n                })\n            }\n        })\n    }\n\n    renderShimmer = (idx) => {\n        return (\n            <div key={idx} className=\"list-item\">\n                <span className=\"shimmer\">\n                    <Skeleton height={6} width={'90%'} />\n                    <Skeleton height={4} width={'50%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'30%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'40%'} />\n                </span>\n            </div>\n        )\n    }\n\n    renderItem = (item, isown, idx) => {\n        return (\n            <div key={item.user_id + idx} id={item.user_id + idx} className={\"list-item\" + (isown ? ' own-v' : '')}>\n                <span className=\"u-rank\">{item.user_rank}</span>\n                <span>{item.user_name}</span>\n                <span>{item.total_wins}</span>\n                <span className=\"amount\"><img src={Images.IC_COIN} alt=\"\" /><div className=\"val\">{item.win_coins || 0}</div></span>\n            </div>\n        )\n    }\n\n    filterLeaderboard = (filterBy) => {\n        this.setState({\n            showLFitlers: false,\n            CFilter : filterBy,\n            PLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            OWNDATA: ''\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    handleTimeFilter=(filterBy) =>{\n        this.setState({\n            filterDataBy: filterBy,\n            PLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            OWNDATA: ''\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    render() {\n        const {\n            categoryList,\n            PLIST,\n            OWNDATA,\n            ISLOAD,\n            HMORE,\n            refreshList,\n            CFilter,\n            showLFitlers,\n            filerByTime,\n            filterDataBy\n        } = this.state;\n\n        let FitlerOptions = {\n            showLFitler: showLFitlers\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"prediction-wrap-v prediction-part-v open-predict-leaderboard is-leaderboard\">\n                        <div>\n                            <Filter\n                                {...this.props}\n                                FitlerOptions={FitlerOptions}\n                                hideFilter={this.hideFilter}\n                                filerObj={categoryList}\n                                filterLeaderboard={this.filterLeaderboard}\n                                filterDataBy={CFilter}\n                            />\n                            <div className=\"fixed-ch-view\">\n                                <div className=\"filter-time-section\">\n                                    {\n                                        _Map(filerByTime,(item,idx)=>{\n                                            return(\n                                                <a \n                                                    href \n                                                    className={\"filter-time-btn\" + (item.value == filterDataBy ? ' active' : '')}\n                                                    onClick={()=>this.handleTimeFilter(item.value)}>\n                                                    {item.label}\n                                                </a>\n                                            )\n                                        })\n                                    }\n                                </div>\n                                <div className=\"header-v m-t-sm\">\n                                    <span className=\"u-rank\">{AL.RANK}</span>\n                                    <span className=\"usernm\">{AL.USER_NAME}</span>\n                                    <span className=\"usernm text-capitalize ellipsis-text\">{AL.CORRECT_PREDICTIONS}</span>\n                                    <span className=\"amount\">{AL.COINS_WON}</span>\n                                </div>\n                            </div>\n                            {\n                                refreshList && OWNDATA && this.renderItem(OWNDATA, true, -1)\n                            }\n                            {\n                                PLIST.length > 0 && <InfiniteScroll\n                                    dataLength={PLIST.length}\n                                    hasMore={!ISLOAD && HMORE}\n                                    next={() => this.getMoreLData()}\n                                >\n                                    <div className=\"list-view\">\n                                        {\n                                            PLIST.map((item, idx) => {\n                                                return this.renderItem(item, false, idx);\n                                            })\n                                        }\n                                    </div>\n                                </InfiniteScroll>\n                            }\n                            {\n                                PLIST.length === 0 && !OWNDATA && !ISLOAD &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                    MESSAGE_1={AL.NO_DATA_FOUND}\n                                    MESSAGE_2={AL.NO_DATA_FOR_FILTER}\n                                />\n                            }\n                            {\n                                PLIST.length === 0 && ISLOAD &&\n                                _times(16, (idx) => {\n                                    return this.renderShimmer(idx)\n                                })\n                            }\n\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default OpenPredictionLeaderboard;\n","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorLobby.jsx",["1816","1817","1818","1819","1820","1821","1822","1823","1824","1825","1826","1827","1828","1829","1830","1831","1832","1833","1834","1835","1836","1837","1838","1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849","1850","1851","1852","1853","1854","1855"],"import React from 'react';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { updateDeviceToken, getLobbyOpenPrediction } from \"../../WSHelper/WSCallings\";\nimport { Utilities, parseURLDate, _debounce } from '../../Utilities/Utilities';\nimport { NoDataView, LobbyBannerSlider } from '../CustomComponent';\nimport { OpenPredictorContestList } from '.';\nimport Skeleton from 'react-loading-skeleton';\nimport Slider from \"react-slick\";\nimport ls from 'local-storage';\nimport OpenPredictorFixture from './OpenPredictorFixture';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as Constants from \"../../helper/Constants\";\n\nclass OpenPredictorLobby extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeSlider = this.changeSlider.bind(this)\n        this.state = {\n            ContestList: [],\n            ShimmerList: [1, 2, 3, 4, 5, 6, 7],\n            isListLoading: false,\n            sports_id: Constants.AppSelectedSport,\n            selectedFixture: '',\n            refreshList: true\n        }\n    }\n\n    /**\n     * @description - this is life cycle method of react\n     */\n\n    componentDidMount() {\n        if (window.location.pathname === '/lobby') {\n            WSManager.setFromConfirmPopupAddFunds(false);\n            this.lobbyContestList();\n            this.checkOldUrl();\n            this.handelNativeGoogleLogin()\n            if (!ls.get('isDeviceTokenUpdated') && ls.get('isDeviceTokenUpdated')) {\n\n                let token_data = {\n                    action: 'push',\n                    targetFunc: 'push',\n                    type: 'deviceid',\n                }\n                this.sendMessageToApp(token_data)\n            }\n            setTimeout(() => {\n                let push_data = {\n                    action: 'push',\n                    targetFunc: 'push',\n                    type: 'receive',\n                }\n                this.sendMessageToApp(push_data)\n            }, 300);\n        }\n    }\n\n    componentWillMount = () => {\n        this.enableDisableBack(false)\n        Utilities.scrollToTop()\n    }\n\n    enableDisableBack(flag) {\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc: 'handleLoginReceived'\n            }\n            this.sendMessageToApp(data);\n        }\n    }\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n    }\n\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            this.setState({\n                ContestList: [],\n                sports_id: nextProps.selectedSport,\n            }, () => {\n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.lobbyContestList();\n            })\n        }\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n            if (e.data.locale != undefined) {\n                WSManager.setAppLang(e.data.locale);\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            }\n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }\n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }\n            \n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132' ||\n                    e.data.notif.notification_type == '300') {\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = parseURLDate(e.data.notif.season_scheduled_date);\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else if (e.data.notif.custom_notification_type ==7) {\n                        pathName = 'add-funds';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        let sports = '#' + Utilities.getSelectedSportsForUrl();\n        if (!url.includes(sports)) {\n            url = url + sports\n        }\n        if (!url.includes('#open-predictor')) {\n            url = url + \"#open-predictor\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport\n        }\n\n        this.setState({ isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getLobbyOpenPrediction(param);\n        if (api_response_data) {\n            this.setState({\n                ContestList: (api_response_data.category_list || [])\n            })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    goToDFS = () => {\n        WSManager.setPickedGameType(Constants.GameType.DFS);\n        window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n    }\n\n    goToRewards = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push('/rewards')\n        }\n    }\n\n    changeSlider(e) {\n        if (this.sliderWrapper.innerSlider.state.currentSlide > (this.state.ContestList.length - 2)) {\n            setTimeout(() => {\n                this.sliderWrapper.slickGoTo((this.state.ContestList.length - 2));\n            }, 10);\n        }\n    }\n\n    onSelectFixture = _debounce((fxtr) => {\n        this.setState({\n            selectedFixture: fxtr,\n            refreshList: false\n        }, () => {\n            this.setState({\n                refreshList: true\n            })\n        })\n    }, 300)\n\n    renderPredictionFixtures = () => {\n        const {\n            ContestList,\n            isListLoading,\n            ShimmerList,\n            selectedFixture,\n            refreshList\n        } = this.state;\n\n        var settings = {\n            infinite: false,\n            slidesToShow: ContestList.length == 2 ? 2 : 5.4,\n            slidesToScroll: 1,\n            variableWidth: false,\n            initialSlide: 0,\n            className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length > 3 ? ' ' : ' left-slict-slider') + (ContestList.length == 2 ? ' no-border-card' : ''),\n            centerMode: false,\n            swipeToSlide: true,\n            responsive: [\n                {\n                    breakpoint: 428,\n                    settings: {\n                        slidesToShow: ContestList.length == 2 ? 2 : 4.2,\n                        className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length > 2 ? ' not-left-slict-slider' : '') + (ContestList.length == 2 ? ' no-border-card' : ''),\n                        \n                    }\n                },\n                {\n                    breakpoint: 400,\n                    settings: {\n                        slidesToShow: ContestList.length == 2 ? 2 : 3.8,\n                        className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length > 2 ? ' not-left-slict-slider' : '') + (ContestList.length == 2 ? ' no-border-card' : ''),\n                        \n                    }\n                },\n                {\n                    breakpoint: 320,\n                    settings: {\n                        slidesToShow: ContestList.length == 2 ? 2 : 3.2,\n                        className: \"center slick-prediction squz-slick-prediction\" + (ContestList.length === 1 ? ' only-one' : '') + (ContestList.length > 2 ? ' not-left-slict-slider' : '') + (ContestList.length == 2 ? ' no-border-card' : ''),\n                        \n                    }\n                }\n            ],\n            \n        };\n        return (\n            <div >\n                <div className=\"bg-primary\" />\n                {\n                    ContestList.length > 1 && <Slider ref={sliderWrapper => this.sliderWrapper = sliderWrapper} {...settings}>\n                        {\n                            ContestList.map((item, index) => {\n                                return (\n                                    <React.Fragment key={index} >\n                                        <OpenPredictorFixture {...this.props} item={item} onSelect={this.onSelectFixture} isActive={selectedFixture == item} />\n                                    </React.Fragment>\n                                );\n                            })\n                        }\n                    </Slider>\n                }\n                {\n                    ContestList.length > 0 && refreshList && <OpenPredictorContestList {...this.props} goToDFS={this.goToDFS} goToRewards={this.goToRewards} data={{ LobbyData: selectedFixture }} />\n                }\n                <ul className=\"collection-list-wrapper pos-r\">\n                    {\n                        (ContestList.length === 0 && !isListLoading) &&\n                        <NoDataView\n                            BG_IMAGE={Images.no_data_bg_image}\n                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                            MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                        />\n                    }\n                    {\n                        (ContestList.length === 0 && isListLoading) &&\n                        ShimmerList.map((item, index) => {\n                            return (\n                                <React.Fragment key={index} >\n                                    {\n                                        index === 0 &&\n                                        <div className=\"shimmer-fixture\">\n                                            <Skeleton width={'95%'} height={72} />\n                                            <Skeleton width={'95%'} height={72} />\n                                        </div>\n                                    }\n                                    <div className=\"contest-list\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-image predict\">\n                                                    <Skeleton width={24} height={24} />\n                                                </div>\n                                                <div className=\"shimmer-line predict\">\n                                                    <div className=\"m-v-xs\">\n                                                        <Skeleton height={8} width={'70%'} />\n                                                    </div>\n                                                    <Skeleton height={34} />\n                                                    <Skeleton height={34} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view m-0 pt-3\">\n                                                <div className=\"progress-bar-default\">\n                                                    <Skeleton height={8} width={'70%'} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={110} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n        )\n    }\n\n    render() {\n\n        const {\n            BannerList\n        } = this.state\n\n        let bannerLength = BannerList ? BannerList.length : 0;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container no-tab-two-height pb-2 prediction-wrap-v open-predict-web-container\">\n                        <div>\n                            <div className={bannerLength > 0 ? 'banner-v animation' : 'banner-v'}>\n                                {\n                                    bannerLength > 0 && <LobbyBannerSlider BannerList={BannerList} redirectLink={this.redirectLink.bind(this)} />\n                                }\n                            </div>\n                            {\n                                this.renderPredictionFixtures()\n                            }\n\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default OpenPredictorLobby\n","/var/www/html/framework/frontend/src/Component/PredictionModule/MyPredictions.jsx",["1856","1857","1858","1859","1860","1861","1862","1863","1864","1865","1866","1867","1868","1869","1870"],"import React from 'react';\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities, _debounce } from '../../Utilities/Utilities';\nimport { UpcomingPredictions, LivePredictions, CompletedPredictions } from './index';\nimport { my_contest_config } from '../../JsonFiles';\nimport { getPredictionSeason } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../CustomComponent';\nimport Skeleton from 'react-loading-skeleton';\nimport queryString from 'query-string';\nimport Images from '../../components/images';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\n\n/**\n  * @class MyContest\n  * @description My contest listing of current loggedin user for selected sports\n  * @author Vinfotech\n*/\nexport default class MyPredictions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            selectedTab: (this.props.location && this.props.location.state) ? (this.props.location.state.from == 'notification' ? Constants.CONTEST_COMPLETED : Constants.CONTEST_UPCOMING) : Constants.CONTEST_UPCOMING,\n            lcList: [],\n            ucList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            ccList: [],\n            sports_id: Constants.AppSelectedSport ? Constants.AppSelectedSport : ''\n        }\n    }\n\n    componentDidMount() {\n        let url = this.props.location.search;\n        let urlParams = queryString.parse(url);\n\n        let contest = urlParams.contest;\n        if (contest in my_contest_config.contest_url) {\n            let sports_id = Constants.AppSelectedSport;\n            this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n        else {\n            if (contest in my_contest_config.contest) {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n            }\n            else {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n            }\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (WSManager.loggedIn() && this.props.history.location.pathname == '/my-contests') {\n\n            if (this.state.sports_id != nextProps.selectedSport) {\n                this.reload(nextProps);\n            }\n            else {\n                let url = this.props.location.search;\n                let urlParams = queryString.parse(url);\n\n                let contest = urlParams.contest;\n                if (contest in my_contest_config.contest_url) {\n                    let sports_id = Constants.AppSelectedSport;\n                    this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                        this.getMyCollectionsList(this.state.selectedTab)\n                    })\n                }\n                else {\n                    if (contest in my_contest_config.contest) {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n                    }\n                    else {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        if (this.state.selectedTab !== selectedTab) {\n            window.history.replaceState(\"\", \"\", \"/my-contests?contest=\" + my_contest_config.contest[selectedTab]);\n            this.setState({\n                selectedTab: selectedTab, ucList: [],\n                lcList: [],\n                ccList: []\n            }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            });\n        }\n    }, 300)\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyCollectionsList(status) {\n        var param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"match_status\": status,\n        }\n        this.setState({ isLoaderShow: true })\n        getPredictionSeason(param).then((responseJson) => {\n            this.setState({ isLoaderShow: false })\n\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                switch (this.state.selectedTab) {\n                    case Constants.CONTEST_UPCOMING:\n                        this.setState({ ucList: responseJson.data.match_list || [] })\n                        break;\n                    case Constants.CONTEST_LIVE:\n                        this.setState({ lcList: responseJson.data.match_list || [] })\n                        break;\n                    case Constants.CONTEST_COMPLETED:\n                        this.setState({ ccList: responseJson.data.match_list || [] })\n                        break;\n                    default:\n                        this.setState({ ucList: responseJson.data.match_list || [] })\n                }\n            }\n        })\n    }\n\n    /**\n     * @description This function is responsible to remove item from list\n     * @param status Selected Tab\n     * @param index index of item to remove from list\n     */\n    removeFromList = (status, index) => {\n        let list = this.state.ucList;\n        list.splice(index, 1);\n        this.setState({ ucList: list })\n    }\n\n    /**\n     * @description This function is called when sports changed from header\n     * @static A static function \n    */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/my-contests\")) {\n            this.setState({ ccList: [], lcList: [], ucList: [], sports_id: nextProps.selectedSport }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n    }\n\n    /**\n     * @description This function render all UI components. It is the React lifecycle methods that called after @see componentWillMount()\n     * @return UI Components\n    */\n    render() {\n        let MESSAGE_1 = this.state.selectedTab == Constants.CONTEST_UPCOMING ?\n            AppLabels.NO_UPCOMING_CONTEST1 : this.state.selectedTab == Constants.CONTEST_LIVE ?\n                AppLabels.NO_LIVE_CONTEST1 : AppLabels.NO_COMPLETED_CONTEST1\n\n        let MESSAGE_2 = this.state.selectedTab == Constants.CONTEST_UPCOMING ?\n            AppLabels.NO_UPCOMING_CONTEST2 : this.state.selectedTab == Constants.CONTEST_LIVE ?\n                AppLabels.NO_LIVE_CONTEST2 : AppLabels.NO_COMPLETED_CONTEST2\n\n        let HeaderOption = {\n            title: AppLabels.MY_CONTEST,\n            notification: true,\n            hideShadow: true,\n            back: true\n        };\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container my-contest-style tab-two-height web-container-fixed\">\n                        {\n                            !this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        <div className={\"tabs-primary \" + (!this.props.hideHeader ? ' mt50' : '')}>\n                            <Tab.Container id='my-contest-tabs' activeKey={this.state.selectedTab} onSelect={() => console.log('clicked')} defaultActiveKey={this.state.selectedTab}>\n                                <Row className=\"clearfix\">\n                                    <Col className=\"top-fixed my-contest-tab circular-tab\" xs={12}>\n                                        <Nav>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_LIVE)} eventKey={Constants.CONTEST_LIVE} className=\"live-contest\"><span className=\"live-indicator\"></span> {AppLabels.LIVE} </NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_UPCOMING)} eventKey={Constants.CONTEST_UPCOMING}>{AppLabels.UPCOMING}</NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_COMPLETED)} eventKey={Constants.CONTEST_COMPLETED}>{AppLabels.COMPLETED}</NavItem>\n                                        </Nav>\n                                    </Col>\n                                    <Col className=\"top-tab-margin\" xs={12}>\n                                        <Tab.Content animation>\n                                            <Tab.Pane eventKey={Constants.CONTEST_LIVE}>\n                                                <LivePredictions {...this.props} lcList={this.state.lcList} />\n\n                                                {\n                                                    this.state.lcList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.lcList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item, index) => {\n                                                        return (\n                                                            <Shimmer key={index} />\n                                                        )\n                                                    })\n                                                }\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_UPCOMING}>\n\n                                                <UpcomingPredictions {...this.props} ucList={this.state.ucList} removeFromList={this.removeFromList} />\n\n                                                {\n                                                    this.state.ucList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.ucList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item, index) => {\n                                                        return (\n                                                            <Shimmer key={index} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_COMPLETED}>\n                                                <CompletedPredictions {...this.props} ccList={this.state.ccList} />\n\n                                                {\n                                                    this.state.ccList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.ccList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item, index) => {\n                                                        return (\n                                                            <Shimmer key={index} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                        </Tab.Content>\n                                    </Col>\n                                </Row>\n                            </Tab.Container>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n/**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nconst Shimmer = ({ idx }) => {\n    return (\n        <div key={idx} className=\"contest-list m border shadow-none\">\n            <div className=\"shimmer-container\">\n                <div className=\"shimmer-top-view\">\n                    <div className=\"shimmer-line\">\n                        <Skeleton height={9} />\n                        <Skeleton height={6} />\n                        <Skeleton height={4} width={100} />\n                    </div>\n                    <div className=\"shimmer-image\">\n                        <Skeleton width={30} height={30} />\n                    </div>\n                </div>\n                <div className=\"shimmer-bottom-view\">\n                    <div className=\"progress-bar-default w-100\">\n                        <Skeleton height={6} />\n                        <div className=\"d-flex justify-content-between\">\n                            <Skeleton height={4} width={60} />\n                            <Skeleton height={4} width={60} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/MyOpenPredictors.jsx",["1871","1872","1873","1874","1875","1876","1877","1878","1879","1880","1881","1882","1883","1884","1885","1886","1887","1888","1889","1890","1891","1892"],"import React from 'react';\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities, _debounce } from '../../Utilities/Utilities';\nimport { UpcomingOpenPredictors, LiveOpenPredictors, CompletedOpenPredictors } from './index';\nimport { my_contest_config } from '../../JsonFiles';\nimport { getMyOpenPredictionCategory } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../CustomComponent';\nimport Skeleton from 'react-loading-skeleton';\nimport queryString from 'query-string';\nimport Images from '../../components/images';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\nimport OpenPredictorFixture from './OpenPredictorFixture';\nimport Slider from 'react-slick';\nimport Filter from '../../components/filter';\n\n/**\n  * @class MyContest\n  * @description My contest listing of current loggedin user for selected sports\n  * @author Vinfotech\n*/\nclass MyOpenPredictors extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            selectedTab: (this.props.location && this.props.location.state) ? (this.props.location.state.from == 'notification' ? Constants.CONTEST_COMPLETED : Constants.CONTEST_UPCOMING) : Constants.CONTEST_UPCOMING,\n            lcList: [],\n            ucList: [],\n            ccList: [],\n            ShimmerList: [0, 1, 2, 3, 4, 5],\n            sports_id: Constants.AppSelectedSport ? Constants.AppSelectedSport : '',\n            selectedFixture: '',\n            refreshList: true,\n            showMPFitler: false\n        }\n    }\n\n    componentDidMount() {\n        let url = this.props.location.search;\n        let urlParams = queryString.parse(url);\n\n        let contest = urlParams.contest;\n        if (contest in my_contest_config.contest_url) {\n            let sports_id = Constants.AppSelectedSport;\n            this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n        else {\n            if (contest in my_contest_config.contest) {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n            }\n            else {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n            }\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.showMPFitler != nextProps.showLobbyFitlers) {\n            this.setState({ showMPFitler: nextProps.showLobbyFitlers })\n        }\n        if (WSManager.loggedIn() && this.props.history.location.pathname == '/my-contests') {\n\n            if (this.state.sports_id != nextProps.selectedSport) {\n                this.reload(nextProps);\n            }\n            else {\n                var url = this.props.location.search;\n                if(window.location.search != url){\n                    url = window.location.search;\n                }\n                let urlParams = queryString.parse(url);\n                let contest = urlParams.contest;\n                if (contest in my_contest_config.contest_url) {\n                    let sports_id = Constants.AppSelectedSport;\n                    if(my_contest_config.contest_url[contest] != this.state.selectedTab){\n                        this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                            this.getMyCollectionsList(this.state.selectedTab)\n                        })\n                    }else{\n                    this.setState({ sports_id })\n                }\n                }\n                else {\n                    if (contest in my_contest_config.contest) {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n                    }\n                    else {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n                    }\n                }\n            }\n        }\n    }\n\n    /** \n    @description hide filters \n    */\n    hideFilter = () => {\n        this.setState({ showMPFitler: false })\n        this.props.hideFilter()\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        if (this.state.selectedTab !== selectedTab) {\n            window.history.replaceState(\"\", \"\", \"/my-contests?contest=\" + my_contest_config.contest[selectedTab]);\n            this.setState({\n                selectedTab: selectedTab, \n                ucList: [],\n                lcList: [],\n                ccList: []\n            }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            });\n        }\n    }, 300)\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyCollectionsList(status) {\n        var param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"prediction_status\": status,\n        }\n        this.setState({ isLoaderShow: true })\n        getMyOpenPredictionCategory(param).then((responseJson) => {\n            this.setState({ isLoaderShow: false })\n\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let list = responseJson.data.category_list || [];\n                this.setState({\n                    selectedFixture: list.length > 0 ? list[0] : ''\n                },()=>{\n                    setTimeout(() => {\n                        CustomHeader.changeFilter(true, this.state.selectedFixture.category_name )                        \n                    }, 100);                    \n                })\n                switch (this.state.selectedTab) {\n                    case Constants.CONTEST_UPCOMING:\n                        this.setState({ ucList: list })\n                        break;\n                    case Constants.CONTEST_LIVE:\n                        this.setState({ lcList: list })\n                        break;\n                    case Constants.CONTEST_COMPLETED:\n                        this.setState({ ccList: list })\n                        break;\n                    default:\n                        this.setState({ ucList: list })\n                }\n            }\n        })\n    }\n\n    /**\n     * @description This function is called when sports changed from header\n     * @static A static function \n    */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/my-contests\")) {\n            this.setState({ ccList: [], lcList: [], ucList: [], sports_id: nextProps.selectedSport }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n    }\n\n    onSelectFixture = _debounce((fxtr) => {\n        this.setState({\n            selectedFixture: fxtr,\n            refreshList: false\n        }, () => {\n            this.setState({\n                refreshList: true\n            })\n        })\n    }, 300)\n\n    MPFilterSelect = (filterBy) => {\n        this.setState({\n            showMPFitler: false,\n            selectedFixture : filterBy,\n            refreshList: false\n        }, () => {\n            this.setState({\n                refreshList: true\n            })\n        })\n    }\n\n    /**\n     * @description This function render all UI components. It is the React lifecycle methods that called after @see componentWillMount()\n     * @return UI Components\n    */\n    render() {\n        let MESSAGE_1 = this.state.selectedTab == Constants.CONTEST_UPCOMING ? AppLabels.NO_UPCOMING_CONTEST1 : this.state.selectedTab == Constants.CONTEST_LIVE ?\n            AppLabels.NO_LIVE_CONTEST1 : AppLabels.NO_COMPLETED_CONTEST1\n\n        let MESSAGE_2 = this.state.selectedTab == Constants.CONTEST_UPCOMING ? AppLabels.NO_UPCOMING_CONTEST2 : this.state.selectedTab == Constants.CONTEST_LIVE ?\n            AppLabels.NO_LIVE_CONTEST2 : AppLabels.NO_COMPLETED_CONTEST2\n\n        let HeaderOption = {\n            title: AppLabels.MY_CONTEST,\n            notification: true,\n            hideShadow: true,\n            back: true\n        };\n\n        let sliderList = this.state.selectedTab == Constants.CONTEST_UPCOMING ? this.state.ucList : this.state.selectedTab == Constants.CONTEST_LIVE ?\n            this.state.lcList : this.state.ccList\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        let FitlerOptions = {\n            showMPFitler: this.state.showMPFitler\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container open-predict-web-container my-contest-style tab-two-height web-container-fixed prediction-wrap-v\">\n                        {\n                            !this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        {\n                            this.state.refreshList &&\n                            <Filter\n                                {...this.props}\n                                FitlerOptions={FitlerOptions}\n                                hideFilter={this.hideFilter}\n                                filerObj={sliderList}\n                                MPFilterSelect={this.MPFilterSelect}\n                                filterByCat={this.state.selectedFixture}\n                            />\n                        }\n                        <div className={\"tabs-primary \" + (!this.props.hideHeader ? ' mt50' : '')}>\n                            <Tab.Container id='my-contest-tabs' activeKey={this.state.selectedTab} onSelect={() => console.log('clicked')} defaultActiveKey={this.state.selectedTab}>\n                                <Row className=\"clearfix\">\n                                    <Col className=\"top-fixed my-contest-tab circular-tab\" xs={12}>\n                                        <Nav>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_LIVE)} eventKey={Constants.CONTEST_LIVE} className=\"live-contest\"><span className=\"live-indicator\"></span> {AppLabels.LIVE} </NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_UPCOMING)} eventKey={Constants.CONTEST_UPCOMING}>{AppLabels.UPCOMING}</NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_COMPLETED)} eventKey={Constants.CONTEST_COMPLETED}>{AppLabels.COMPLETED}</NavItem>\n                                        </Nav>\n                                    </Col>\n                                    <Col className=\"top-tab-margin\" xs={12}>\n                                        \n                                        <Tab.Content animation>\n                                            <Tab.Pane eventKey={Constants.CONTEST_LIVE}>\n                                                {\n                                                    this.state.lcList.length > 0 && this.state.refreshList && <LiveOpenPredictors {...this.props} selectedFixture={this.state.selectedFixture} />\n                                                }\n                                                {\n                                                    this.state.lcList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.lcList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item) => {\n                                                        return (\n                                                            <Shimmer key={item} idx={item} />\n                                                        )\n                                                    })\n                                                }\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_UPCOMING}>\n                                                {\n                                                    this.state.ucList.length > 0 && this.state.refreshList && <UpcomingOpenPredictors {...this.props} selectedFixture={this.state.selectedFixture} />\n                                                }\n                                                {\n                                                    this.state.ucList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.ucList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item) => {\n                                                        return (\n                                                            <Shimmer key={item} idx={item} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_COMPLETED}>\n                                                {\n                                                    this.state.ccList.length > 0 && this.state.refreshList && <CompletedOpenPredictors {...this.props} selectedFixture={this.state.selectedFixture} />\n                                                }\n                                                {\n                                                    this.state.ccList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.ccList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item) => {\n                                                        return (\n                                                            <Shimmer key={item} idx={item} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                        </Tab.Content>\n                                    </Col>\n                                </Row>\n                            </Tab.Container>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n/**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nconst Shimmer = ({ idx }) => {\n    return (\n        <ul className=\"collection-list-wrapper pos-r pb-0\">\n            {\n                idx === 0 &&\n                <div className=\"shimmer-fixture m-t\">\n                    <Skeleton width={'95%'} height={72} />\n                    <Skeleton width={'95%'} height={72} />\n                </div>\n            }\n            <div className=\"contest-list\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ul>\n    )\n}\n\nexport default MyOpenPredictors","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionLobby.jsx",["1893","1894","1895","1896","1897","1898","1899","1900","1901","1902","1903","1904","1905","1906","1907","1908","1909","1910","1911","1912","1913","1914","1915","1916","1917","1918","1919","1920","1921","1922","1923","1924","1925","1926","1927","1928","1929","1930","1931","1932","1933","1934","1935","1936","1937","1938","1939","1940","1941","1942","1943"],"import React from 'react';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { updateDeviceToken, getLobbyBanner, getLobbyPrediction } from \"../../WSHelper/WSCallings\";\nimport { Utilities, _isEmpty, _Map, BannerRedirectLink, parseURLDate, _debounce,_filter } from '../../Utilities/Utilities';\nimport { NoDataView, LobbyBannerSlider } from '../../Component/CustomComponent';\nimport { PredictionContestList } from '.';\nimport { Row, Col } from 'react-bootstrap';\nimport Slider from \"react-slick\";\nimport ls from 'local-storage';\nimport PredictionFixture from './PredictionFixture';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport CustomHeader from '../../components/CustomHeader';\nimport Filter from '../../components/filter';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as Constants from \"../../helper/Constants\";\nimport Skeleton from 'react-loading-skeleton';\n\nvar bannerData = {}\n\nexport class Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeSlider = this.changeSlider.bind(this)\n        this.state = {\n            OriginalContestList: [],\n            ContestList: [],\n            BannerList: [],\n            ShimmerList: [1, 2, 3, 4, 5, 6, 7],\n            isListLoading: false,\n            showLobbyFitlers: false,\n            league_id: \"\",\n            filterArray: [],\n            sports_id: Constants.AppSelectedSport,\n            canRedirect: true,\n            filterLeagueList: [],\n            selectedFixture: ''\n        }\n    }\n\n    /**\n     * @description - this is life cycle method of react\n     */\n\n    componentDidMount() {\n        if (this.props.location.pathname === '/lobby') {\n            let { sports_id } = this.state;\n            WSManager.setFromConfirmPopupAddFunds(false);\n            let league_id = this.getSportsLeagueId(sports_id, Constants.LOBBY_FILTER_ARRAY);\n            this.setState({ sports_id, league_id, filterArray: Constants.LOBBY_FILTER_ARRAY }, () => {\n                this.lobbyContestList();\n                this.getBannerList();\n            })\n\n            \n            WSManager.googleTrack(WSC.GA_PROFILE_ID, 'fixture');\n            if (WSManager.loggedIn()) {\n                WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n            }\n            this.checkOldUrl();\n        }\n        this.handelNativeGoogleLogin()\n        if (!ls.get('isDeviceTokenUpdated') && ls.get('isDeviceTokenUpdated')) {\n\n            let token_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'deviceid',\n            }\n            this.sendMessageToApp(token_data)\n        }\n        setTimeout(() => {\n            let push_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'receive',\n            }\n            this.sendMessageToApp(push_data)\n        }, 300);\n    }\n\n    componentWillMount = () => {\n        this.enableDisableBack(false)\n        Utilities.scrollToTop()\n    }\n\n    enableDisableBack(flag) {\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc: 'handleLoginReceived'\n            }\n            this.sendMessageToApp(data);\n        }\n    }\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n        if (this.state.showLobbyFitlers !== nextProps.showLobbyFitlers) {\n            this.setState({ showLobbyFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            let league_id = this.getSportsLeagueId(nextProps.selectedSport, this.state.filterArray);\n            this.setState({\n                ContestList: [],\n                league_id: league_id,\n                sports_id: nextProps.selectedSport,\n            }, () => {\n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.lobbyContestList();\n                this.getBannerList();\n                \n            })\n        }\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n            if (e.data.locale != undefined) {\n                WSManager.setAppLang(e.data.locale);\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            }\n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }\n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }\n\n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132' ||\n                    e.data.notif.notification_type == '300') {\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = parseURLDate(e.data.notif.season_scheduled_date);\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else if (e.data.notif.custom_notification_type ==7) {\n                        pathName = 'add-funds';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        let sports = '#' + Utilities.getSelectedSportsForUrl();\n        if (!url.includes(sports)) {\n            url = url + sports\n        }\n        if (!url.includes('#prediction')) {\n            url = url + \"#prediction\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport\n        }\n\n        this.setState({ isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getLobbyPrediction(param);\n        if (api_response_data) {\n\n            this.setState({\n                ContestList: (api_response_data.match_list || []),\n                OriginalContestList: (api_response_data.match_list || []),\n                filterLeagueList: (api_response_data.match_list || []),\n                selectedFixture: (api_response_data.match_list || []).length > 0 ? api_response_data.match_list[0] : ''\n            }, () => {\n                let tmpLeagues = []\n                _Map(this.state.ContestList, (item) => {\n                    let obj = { league_id: item.league_id, league_name: item.league_name }\n                    if (tmpLeagues.filter(e => e.league_id === obj.league_id).length === 0) {\n                        tmpLeagues.push(obj)\n                    }\n                })\n                this.setState({ filterLeagueList: tmpLeagues }, () => {\n                    if (Constants.LOBBY_FILTER_ARRAY.length > 0) {\n                        this.filterLobbyResults({ league_id: Constants.LOBBY_FILTER_ARRAY[0].league_id })\n                    }\n                })\n            })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    getSportsLeagueId(sports_id, filterArray) {\n\n        let league_id = '';\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == sports_id) {\n                league_id = filterArray[i].league_id;\n            }\n        }\n        return league_id;\n    }\n\n    /** \n    @description hide lobby filters \n    */\n    hideFilter = () => {\n        this.setState({ showLobbyFitlers: false })\n        this.props.hideFilterData()\n    }\n\n    /** \n    @description show lobby filters \n    */\n    showFilter = () => {\n        this.setState({ showLobbyFitlers: true })\n    }\n\n    /** \n    @description Apply filters and load data accordingly\n    */\n    filterLobbyResults = (filterObj) => {\n        let league_id = (!_isEmpty(filterObj.league_id) && typeof filterObj.league_id != 'undefined') ? filterObj.league_id : \"\";\n        this.setState({ league_id: league_id }, function () {\n            this.filterFixturesLocally(league_id)\n        })\n\n        let filterArray = this.setFilterArray(league_id);\n        Constants.setValue.setFilter(filterArray);\n        this.setState({ league_id: league_id, showLobbyFitlers: false, filterArray: filterArray })\n        this.props.hideFilterData()\n    }\n\n    filterFixturesLocally(leagueIds) {\n        let allFixtures = this.state.OriginalContestList;\n        if (leagueIds == '') {\n            this.setState({ ContestList: allFixtures })\n        }\n        else {\n            let filteredList = [];\n            for (var i = 0; i < allFixtures.length; i++) {\n                if (leagueIds.includes(allFixtures[i].league_id)) {\n                    filteredList.push(allFixtures[i])\n                }\n\n            }\n\n            this.setState({ ContestList: filteredList })\n        }\n    }\n\n    setFilterArray(league_id) {\n        let { filterArray } = this.state;\n\n        let hasFilter = false;\n        if (filterArray.length > 0) {\n            for (let i = 0; i < filterArray.length; i++) {\n                if (filterArray[i].sports_id == this.state.sports_id) {\n                    hasFilter = true;\n                    filterArray[i].league_id = league_id;\n                }\n            }\n        }\n\n        if (!hasFilter && league_id != \"\") {\n            let filterObj = {\n                'sports_id': this.state.sports_id,\n                'league_id': league_id,\n            }\n            filterArray.push(filterObj);\n        }\n\n        return filterArray;\n    }\n\n    /** \n     * @description api call to get baner listing from server\n    */\n    getBannerList = () => {\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n\n    /** \n     * @description call to parse banner data\n    */\n    parseBannerData = (bdata) => {\n        let refData = '';\n        let temp = [];\n        _Map(this.getSelectedbanners(bdata), (item, idx) => {\n            if (item.banner_type_id == 2) {\n                refData = item;\n            }\n            if (item.banner_type_id == 1) {\n                \n                \n                \n                \n            }\n            else {\n                temp.push(item);\n            }\n        })\n        setTimeout(() => {\n            CustomHeader.showRCM(refData);\n        }, 200);\n        this.setState({ BannerList: temp })\n    }\n\n    /** \n     * @description call to get selected banner data\n    */\n    getSelectedbanners(api_response_data) {\n        let tempBannerList = [];\n        for (let i = 0; i < api_response_data.length; i++) {\n            let banner = api_response_data[i];\n            if (WSManager.getToken() && WSManager.getToken() != '') {\n                if (banner.banner_type_id == Constants.BANNER_TYPE_REFER_FRIEND\n                    || banner.banner_type_id == Constants.BANNER_TYPE_DEPOSITE) {\n                    if (banner.amount > 0)\n                        tempBannerList.push(api_response_data[i]);\n                }\n                else if (banner.banner_type_id == '6') {\n                    \n                }\n                else {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n            else {\n                if (banner.banner_type_id == '6') {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n        }\n\n        return tempBannerList;\n    }\n\n    /**\n     * @description method to redirect user on appopriate screen when user click on banner\n     * @param {*} banner_type_id - id of banner on which clicked\n     */\n    redirectLink = (result) => {\n        BannerRedirectLink(result, this.props)\n    }\n\n    goToDFS = () => {\n        WSManager.setPickedGameType(Constants.GameType.DFS);\n        \n        let gameType = Utilities.getMasterData().sports_hub;\n        let HGLIST = _filter(gameType, (obj) => {\n            return obj.game_key == Constants.GameType.DFS;\n        })\n        let lsSport = ls.get('selectedSports');\n        if(HGLIST[0].allowed_sports.includes(lsSport)){\n            window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n        }\n        else{\n            let sport = HGLIST[0].allowed_sports[0];\n            ls.set('selectedSports', sport);\n            Constants.setValue.setAppSelectedSport(sport);\n            window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n        }\n    }\n\n    goToRewards = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push('/rewards')\n        }\n    }\n\n    changeSlider(e) {\n        if (this.sliderWrapper.innerSlider.state.currentSlide > (this.state.ContestList.length - 2)) {\n            setTimeout(() => {\n                this.sliderWrapper.slickGoTo((this.state.ContestList.length - 2));\n            }, 10);\n        }\n    }\n    onSelectFixture = _debounce((fxtr) => {\n        this.setState({\n            selectedFixture: ''\n        }, () => {\n            this.setState({\n                selectedFixture: fxtr\n            })\n        })\n    }, 300)\n\n    renderPredictionFixtures = () => {\n        const {\n            ContestList,\n            isListLoading,\n            ShimmerList,\n            \n            selectedFixture\n        } = this.state;\n        \n\n        var settings = {\n            infinite: false,\n            slidesToShow: ContestList.length === 1 ? 2 : 3,\n            slidesToScroll: 1,\n            variableWidth: false,\n            initialSlide: 0,\n            className: \"center slick-prediction\" + (ContestList.length === 1 ? ' only-one' : ''),\n            centerMode: false,\n            swipeToSlide: true,\n            responsive: [\n                {\n                    breakpoint: 450,\n                    settings: {\n                        slidesToShow: ContestList.length === 1 ? 1.3 : 2,\n                    }\n                }\n            ],\n            \n        };\n        return (\n            <div >\n                <div className=\"bg-primary\" />\n                {\n                    ContestList.length > 0 && <Slider ref={sliderWrapper => this.sliderWrapper = sliderWrapper} {...settings}>\n                        {\n                            ContestList.map((item, index) => {\n                                return (\n                                    <React.Fragment key={index} >\n                                        <PredictionFixture {...this.props} item={item} onSelect={this.onSelectFixture} isActive={selectedFixture == item} />\n                                    </React.Fragment>\n                                );\n                            })\n                        }\n                    </Slider>\n                }\n                {\n                    selectedFixture.season_game_uid && <PredictionContestList {...this.props} goToDFS={this.goToDFS} goToRewards={this.goToRewards} data={{ LobyyData: selectedFixture }} />\n                }\n                <ul className=\"collection-list-wrapper pos-r\">\n                    {\n                        (ContestList.length === 0 && !isListLoading) &&\n                        <NoDataView\n                            BG_IMAGE={Images.no_data_bg_image}\n                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                            MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                        />\n                    }\n                    {\n                        (ContestList.length === 0 && isListLoading) &&\n                        ShimmerList.map((item, index) => {\n                            return (\n                                <React.Fragment key={index} >\n                                    {\n                                        index === 0 &&\n                                        <div className=\"shimmer-fixture\">\n                                            <Skeleton width={'95%'} height={72} />\n                                            <Skeleton width={'95%'} height={72} />\n                                        </div>\n                                    }\n                                    <div className=\"contest-list\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-image predict\">\n                                                    <Skeleton width={24} height={24} />\n                                                </div>\n                                                <div className=\"shimmer-line predict\">\n                                                    <div className=\"m-v-xs\">\n                                                        <Skeleton height={8} width={'70%'} />\n                                                    </div>\n                                                    <Skeleton height={34} />\n                                                    <Skeleton height={34} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view m-0 pt-3\">\n                                                <div className=\"progress-bar-default\">\n                                                    <Skeleton height={8} width={'70%'} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={110} />\n                                                    </div>\n                                                </div>\n                                                \n                                            </div>\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            )\n                        })\n                    }\n                </ul>\n            </div>\n        )\n    }\n\n    render() {\n\n        const {\n            BannerList,\n            league_id,\n            showLobbyFitlers,\n            filterLeagueList,\n            isListLoading\n        } = this.state\n\n        let FitlerOptions = {\n            showLobbyFitler: showLobbyFitlers,\n            filtered_league_id: league_id\n        }\n\n        let bannerLength = BannerList ? BannerList.length : 0;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container no-tab-two-height pb-2 prediction-wrap-v\">\n                        \n                        <div>\n                            <div className={bannerLength > 0 ? 'banner-v animation' : 'banner-v'}>\n                                {\n                                    bannerLength > 0 && <LobbyBannerSlider BannerList={BannerList} redirectLink={this.redirectLink.bind(this)} />\n                                }\n                            </div>\n                            { !isListLoading &&\n                                this.renderPredictionFixtures()\n                            }\n\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default Lobby\n","/var/www/html/framework/frontend/src/views/ReferFriend.jsx",["1944","1945","1946","1947","1948","1949","1950","1951","1952","1953","1954","1955","1956","1957","1958","1959","1960","1961","1962","1963","1964","1965","1966","1967","1968","1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036"],"import React from 'react';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Tabs, Tab, Label, Row, Col, ProgressBar } from 'react-bootstrap';\nimport { Helmet } from \"react-helmet\";\nimport { Utilities, _Map } from '../Utilities/Utilities';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Images from '../components/images';\nimport MetaData from \"../helper/MetaData\";\nimport Slider from \"react-slick\";\nimport CustomHeader from '../components/CustomHeader';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { getReferralMasterData, getMyReferralList, getMasterDataRef, getUserEarnMoney } from '../WSHelper/WSCallings';\nimport { NoDataView } from '../Component/CustomComponent';\nimport { ShareReferal } from \"../Component/CustomComponent\";\nimport Moment from 'react-moment';\nimport { ReferralSystem} from \"../Modals\";\nimport Skeleton from 'react-loading-skeleton';\n\nvar userProfileDataFromLS = null;\n\nexport default class ReferFriend extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            masterData: [],\n            achvmentData: [],\n            userList: [],\n            UserReferralList: [],\n            copied: false,\n            hasMore: false,\n            isLoaderShow: false,\n            userRefOffset: 1,\n            shareURL: WSC.baseURL + \"signup/?referral=\" + WSManager.getUserReferralCode(),\n            selectedTab: 1,\n            loadingData: false,\n            showReferalSystem: false,\n           \n            isShowDetails: false,\n            activeIndex: 0,\n            profileDetail: WSManager.getProfile(),\n            isEnableRef: true,\n            isDisplayLowerBanner: false,\n            isReferBy: false,\n            refName: '',\n            refAmount: '',\n            refType: '',\n            totalJoined: '',\n            totalRefRealCase: '',\n            totalRefBonusCase: '',\n            totalRefCoins: '',\n            refMasterDataFromService: '',\n            totalBonus: 0,\n            totalCoins: 0,\n            totalRealCase: 0,\n            bannerValue: 0,\n            bannerValueType: '',\n            bannerCountNo: '',\n            isDataLoading: true,\n            userEarnDetail: [],\n            displayAchvments: true,\n            BannerList: ['1', '2', '3']\n        }\n        userProfileDataFromLS = WSManager.getProfile();\n    }\n\n    ShowReferralSystemModal = () => {\n        this.setState({\n            showReferalSystem: true\n        })\n    }\n    HideReferralSystemModal = () => {\n        this.setState({\n            showReferalSystem: false,\n        })\n        if (this.state.profileDetail.is_rc_edit == 1) {\n            return;\n        }\n\n        let passingData = this.state.masterData[16]\n        this.props.history.push('/edit-referral-code', passingData);\n    }\n    HideEditCodeModal = () => {\n        this.setState({\n            showEditCodeModal: false\n        })\n    }\n\n    componentDidMount() {\n        if (this.state.profileDetail.is_rc_edit != 1) {\n           this.ShowReferralSystemModal();\n        }\n    }\n\n    componentWillMount() {\n        this.getRefMasterData();\n    }\n\n    openRefSystem = (e) => {\n        this.setState({\n            showReferalSystem : true\n        })\n    }\n    onCopyCode = () => {\n        Utilities.showToast(AppLabels.MSZ_COPY_CODE, 1000);\n        this.setState({ copied: true })\n    }\n\n    onCopyLink = () => {\n        Utilities.showToast(AppLabels.Link_has_been_copied, 1000);\n        this.setState({ copied: true })\n    }\n\n    goToShare = () => {\n        this.setState({ selectedTab: 1 })\n    }\n\n    // *****************************************CALL MASTER REF DATA*****************************************\n    callRFMasterDataApi = () => {\n        let param = {}\n        getReferralMasterData(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    masterData: responseJson.data,\n                })\n                let achvment = [];\n                let fifthJoin = {\n                    'amount': parseInt(responseJson.data[17].bonus_amount) >= parseInt(responseJson.data[17].coin_amount) && parseInt(responseJson.data[17].bonus_amount) >= parseInt(responseJson.data[17].real_amount) ?\n                        responseJson.data[17].bonus_amount : parseInt(responseJson.data[17].coin_amount) >= parseInt(responseJson.data[17].bonus_amount) && parseInt(responseJson.data[17].coin_amount) >= parseInt(responseJson.data[17].real_amount) ?\n                            responseJson.data[17].coin_amount : responseJson.data[17].real_amount,\n                    'type': parseInt(responseJson.data[17].bonus_amount) >= parseInt(responseJson.data[17].coin_amount) && parseInt(responseJson.data[17].bonus_amount) >= parseInt(responseJson.data[17].real_amount) ?\n                        0 : parseInt(responseJson.data[17].coin_amount) >= parseInt(responseJson.data[17].bonus_amount) && parseInt(responseJson.data[17].coin_amount) >= parseInt(responseJson.data[17].real_amount) ?\n                            1 : 2,\n\n                }\n\n\n                let tenthJoin = {\n                    'amount': parseInt(responseJson.data[18].bonus_amount) >= parseInt(responseJson.data[18].coin_amount) && parseInt(responseJson.data[18].bonus_amount) >= parseInt(responseJson.data[18].real_amount) ?\n                        responseJson.data[18].bonus_amount : parseInt(responseJson.data[18].coin_amount) >= parseInt(responseJson.data[18].bonus_amount) && parseInt(responseJson.data[18].coin_amount) >= parseInt(responseJson.data[18].real_amount) ?\n                            responseJson.data[18].coin_amount : responseJson.data[18].real_amount,\n                    'type': parseInt(responseJson.data[18].bonus_amount) >= parseInt(responseJson.data[18].coin_amount) && parseInt(responseJson.data[18].bonus_amount) >= parseInt(responseJson.data[18].real_amount) ?\n                        0 : parseInt(responseJson.data[18].coin_amount) >= parseInt(responseJson.data[18].bonus_amount) && parseInt(responseJson.data[18].coin_amount) >= parseInt(responseJson.data[18].real_amount) ?\n                            1 : 2,\n                }\n\n                let fiftheenJoin = {\n                    'amount': parseInt(responseJson.data[19].bonus_amount) >= parseInt(responseJson.data[19].coin_amount) && parseInt(responseJson.data[19].bonus_amount) >= parseInt(responseJson.data[19].real_amount) ?\n                        responseJson.data[19].bonus_amount : parseInt(responseJson.data[19].coin_amount) >= parseInt(responseJson.data[19].bonus_amount) && parseInt(responseJson.data[19].coin_amount) >= parseInt(responseJson.data[19].real_amount) ?\n                            responseJson.data[19].coin_amount : responseJson.data[19].real_amount,\n                    'type': parseInt(responseJson.data[19].bonus_amount) >= parseInt(responseJson.data[19].coin_amount) && parseInt(responseJson.data[19].bonus_amount) >= parseInt(responseJson.data[19].real_amount) ?\n                        0 : parseInt(responseJson.data[19].coin_amount) >= parseInt(responseJson.data[19].bonus_amount) && parseInt(responseJson.data[19].coin_amount) >= parseInt(responseJson.data[19].real_amount) ?\n                            1 : 2,\n                }\n                achvment.push(fifthJoin);\n                achvment.push(tenthJoin);\n                achvment.push(fiftheenJoin);\n                if (fifthJoin.amount == 0 && tenthJoin.amount == 0 && fiftheenJoin.amount == 0) {\n                    this.setState({\n                        displayAchvments: false\n                    })\n                }\n\n                this.setState({\n                    achvmentData: achvment\n                })\n                if (this.state.totalJoined == 0 && this.state.isEnableRef == true) {\n                    var tempBannerValue = responseJson.data[0];\n                    if (parseInt(tempBannerValue.real_amount) >= parseInt(tempBannerValue.coin_amount) && parseInt(tempBannerValue.real_amount) >= parseInt(tempBannerValue.bonus_amount)) {\n                        this.setState({\n                            bannerValue: tempBannerValue.real_amount,\n                            bannerValueType: 2,\n                        })\n                    }\n                    if (parseInt(tempBannerValue.coin_amount) >= parseInt(tempBannerValue.real_amount) && parseInt(tempBannerValue.coin_amount) >= parseInt(tempBannerValue.bonus_amount)) {\n                        this.setState({\n                            bannerValue: tempBannerValue.coin_amount,\n                            bannerValueType: 1,\n                        })\n                    }\n                    if (parseInt(tempBannerValue.bonus_amount) >= parseInt(tempBannerValue.coin_amount) && parseInt(tempBannerValue.bonus_amount) >= parseInt(tempBannerValue.real_amount)) {\n                        this.setState({\n                            bannerValue: tempBannerValue.bonus_amount,\n                            bannerValueType: 0,\n                        })\n                    }\n                } else {\n                    if (this.state.totalJoined < 5) {\n                        this.setState({\n                            bannerValue: fifthJoin.amount,\n                            bannerValueType: fifthJoin.type\n                        })\n                    } else if (this.state.totalJoined >= 5 && this.state.totalJoined < 10) {\n                        this.setState({\n                            bannerValue: tenthJoin.amount,\n                            bannerValueType: tenthJoin.type\n                        })\n                    } else if (this.state.totalJoined >= 10 && this.state.totalJoined < 15) {\n                        this.setState({\n                            bannerValue: fiftheenJoin.amount,\n                            bannerValueType: fiftheenJoin.type\n                        })\n                    }\n\n                }\n                this.setState({\n                    isDataLoading: false,\n                })\n            }\n        })\n\n    }\n\n    // *****************************************CALL MASTER DATA*****************************************\n\n    getRefMasterData = () => {\n        let param = {}\n        getMasterDataRef(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                try {\n                    let tempResponse = responseJson.data;\n                    this.setState({\n                        isEnableRef: tempResponse.total_joined > 0 ? false : true,\n                        isDisplayLowerBanner: tempResponse.total_joined != null && tempResponse.total_joined != undefined && tempResponse.total_joined != '' && tempResponse.total_joined == 0 ? true : false,\n                        isReferBy: tempResponse.refer_by != null && tempResponse.refer_by != undefined && tempResponse.refer_by != '' ? true : false,\n                        refMasterDataFromService: tempResponse,\n                        totalBonus: tempResponse.total_bonus_cash,\n                        totalCoins: tempResponse.total_coin_earned,\n                        totalRealCase: tempResponse.total_real_cash,\n                        totalJoined: parseInt(tempResponse.total_joined),\n\n                    }, () => {\n                        if (this.state.isEnableRef) {\n                            let realCase = parseInt(tempResponse.refer_by.user_real_cash);\n                            let bonus = parseInt(tempResponse.refer_by.user_bonus_cash);\n                            let coins = parseInt(tempResponse.refer_by.user_coin);\n                            if (realCase >= bonus && realCase >= coins) {\n                                this.setState({\n                                    refName: tempResponse.refer_by.user_name,\n                                    refAmount: realCase,\n                                    refImage: tempResponse.refer_by.image,\n                                    refType: 2,\n                                })\n                            } else if (bonus > realCase && bonus >= coins) {\n                                this.setState({\n                                    refName: tempResponse.refer_by.user_name,\n                                    refAmount: bonus,\n                                    refImage: tempResponse.refer_by.image,\n                                    refType: 0,\n                                })\n                            } else if (coins > bonus && coins > realCase) {\n                                this.setState({\n                                    refName: tempResponse.refer_by.user_name,\n                                    refAmount: coins,\n                                    refImage: tempResponse.refer_by.image,\n                                    refType: 1,\n                                })\n                            }\n                        } else {\n\n                            let bannerCountNo = tempResponse.total_joined < 5 ? (5 - tempResponse.total_joined) :\n                                tempResponse.total_joined >= 5 && tempResponse.total_joined < 10 ? (10 - tempResponse.total_joined) :\n                                    tempResponse.total_joined >= 10 && tempResponse.total_joined < 15 ? (15 - tempResponse.total_joined) : ''\n\n                            this.setState({\n                                totalJoined: parseInt(tempResponse.total_joined),\n                                totalRefRealCase: tempResponse.total_real_cash,\n                                totalRefBonusCase: tempResponse.total_bonus_cash,\n                                totalRefCoins: tempResponse.total_coin_earned,\n                                bannerCountNo: bannerCountNo,\n                            })\n                        }\n                    })\n                    this.callRFMasterDataApi();\n                } catch (e) {\n                }\n            }\n        })\n    }\n\n    // *****************************************LOAD MORE FUNCTION CALLING*****************************************\n\n    fetchMoreData = () => {\n        if (!this.state.loadingData && this.state.hasMore) {\n            this.callGetMyReferralListApi()\n        }\n    }\n\n    callGetMyReferralListApi() {\n        let param = {\n            'page_no': this.state.userRefOffset,\n            'page_size': 10\n        }\n        this.setState({ loadingData: true })\n        getMyReferralList(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n\n                if (this.state.userRefOffset === 1) {\n                    this.setState({ UserReferralList: responseJson.data })\n                } else {\n                    this.setState({ UserReferralList: [...this.state.UserReferralList, ...responseJson.data] });\n                }\n                this.setState({\n                    hasMore: responseJson.data.length === 10,\n                    userRefOffset: this.state.userRefOffset + 1,\n                    loadingData: false\n                })\n            }\n        })\n    }\n\n    // *****************************************SHOW HIDE TABLE ROW ON CLICK *****************************************\n    showDetail = (item, index) => {\n        this.setState({\n            isShowDetails: this.state.activeIndex == index ? !this.state.isShowDetails : true,\n            activeIndex: index\n        }, () => {\n            // setTimeout(() => {\n            //     this.setState({\n                   \n            //     })\n            // }, 0);\n        })\n    }\n\n    userEarnDetail = (item, index) => {\n        let param = {\n            'user_id': item.friend_id,\n        }\n        this.setState({ loadingData: true })\n        getUserEarnMoney(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    friendDeposit: responseJson.data.friends_deposit,\n                    userEarnDetail: responseJson.data.referral,\n                })\n                this.showDetail(item, index);\n            }\n        })\n\n    }\n\n    callNativeShare(type, url, detail) {\n        let data = {\n            action: 'social_sharing',\n            targetFunc: 'social_sharing',\n            type: type,\n            url: url,\n            detail: detail\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    // ***************************************** DYNAMIC EARN BONUS AND COINS VIEW *****************************************\n\n    UserRefferalList = (userItem, index) => {\n        return <div className=\"list-card-wrapper\" >\n            <div className='data-holder'>\n                <Row className={this.state.isShowDetails && this.state.activeIndex == index ? \"no-wrap\" : 'no-wrap'} onClick={() => { this.userEarnDetail(userItem, index) }}>\n                    <Col sm={6} className='p15'>\n                        <div className=\"left-view-holder\">\n                            <Label className='row-text'>{userItem.user_name} </Label>\n                            <Label className='row-text-sub-title'><Moment format=\"MMM DD,ddd\">\n                                {userItem.added_date}\n                            </Moment></Label>\n                        </div>\n\n                    </Col>\n                    <Col sm={6} className='p15'>\n                        <div className='right-view-holder'>\n                            <div className='span-label icon-label-margin d-f align-t-baseline'>\n                                <Label className={!userItem.total_cash_earned ? \"vhide\" : \"icon-color-blue vshow\" }>{Utilities.getMasterData().currency_code}</Label><Label className='amt-text-14'>{Number(parseFloat(userItem.total_cash_earned || 0).toFixed(2))}</Label><i className={userItem.total_bonus_earned > 0 || userItem.total_coin_earned > 0 ? \"pl3 pr3\" : \"d-none\"}>/</i>\n                                <Label className={!userItem.total_bonus_earned ? \"vhide\" : \"icon-bonus icon-color-blue f-s-12 vshow\"}></Label><Label className='amt-text-14'>{Number(parseFloat(userItem.total_bonus_earned || 0).toFixed(2))}</Label><i className={userItem.total_coin_earned > 0 ? \"pl3 pr3\" : \"d-none\"}>/</i>\n                                <img src={Images.IC_COIN} className={userItem.total_coin_earned > 0 ? 'icon-height-is-12 mt2' : \"d-none\"} /><Label className={userItem.total_coin_earned > 0 ? 'amt-text-14 ml2' : \"d-none\"}>{userItem.total_coin_earned}</Label>\n\n                            </div>\n                            {/* <span className='pr15'><i className={this.state.isShowDetails && this.state.activeIndex == index ? \"icon-arrow-up icon-color-gray f-right cursor-pointer\" : \"icon-arrow-down icon-color-gray f-right cursor-pointer\"}></i></span> */}\n                            <img className={this.state.isShowDetails && this.state.activeIndex == index ? \"f-right cursor-pointer\" : \"f-right cursor-pointer\"} src={this.state.isShowDetails && this.state.activeIndex == index ? Images.THIN_ARROW_UP : Images.THIN_ARROW}/>\n                        </div>\n\n                    </Col>\n                </Row>\n                <Row >\n                    <Col sm={12} className={this.state.isShowDetails && this.state.activeIndex == index ? 'no-wrap-show' : 'no-wrap-hide'}>\n                        <div className='pt20'>\n                            <div className='ref-detail-amount d-f'>\n                                <div className='view-xs center-alingment mb5 mt10'>\n                                    <Label className=\"row-text-sub-title\">{AppLabels.REFERRAL}</Label><br></br>\n                                    <span><Label className=\" f-s-12 primary-icon \">{Utilities.getMasterData().currency_code}</Label></span><Label className='cc'>{Number(parseFloat(userItem.total_cash_earned || 0).toFixed(2))}</Label>\n                                </div>\n                                <div className='line-light-v'></div>\n                                <div className='view-l d-f'>\n                                    <div className='view-s center-alingment'>\n                                        <Label className=\"row-text-sub-title\">{AppLabels.FRIEND_DEPOSIT}</Label><br></br>\n                                        <span> <Label className=\" f-s-12 primary-icon\">{Utilities.getMasterData().currency_code}</Label></span><Label className='amt-text'>{this.state.friendDeposit != undefined ? Number(parseFloat(this.state.friendDeposit.total_cash_earned || 0).toFixed(2)) : 0}</Label>\n                                    </div>\n                                    <div className='view-l d-b'>\n\n                                        <ProgressBar now={this.state.friendDeposit != undefined ? this.state.friendDeposit.total_cash_earned : 0} className='progress-indicator' max={this.state.friendDeposit != undefined ? this.state.friendDeposit.max_earning_amount : ''} />\n                                        <div>\n                                            <span className='direction-l'><i className=\" f-s-10 f-gray\">{Utilities.getMasterData().currency_code} </i><Label className='pro-text'>0</Label></span>\n                                            <span className='direction-r'> <i className=\" f-s-10 f-gray\">{Utilities.getMasterData().currency_code} </i><Label className='pro-text'>{this.state.friendDeposit != undefined ? this.state.friendDeposit.max_earning_amount : ''}</Label></span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='mt5 mb5'>\n                                <Label className='hint-text'>*{AppLabels.GET} {this.state.friendDeposit != undefined ? this.state.friendDeposit.real_amount : '0'}\n                                    {this.state.friendDeposit != undefined ? this.state.friendDeposit.amount_type == 2 ? '%' : '' : ''} {AppLabels.OF_YOUR_FRIEND_DEPOSIT_MAXIMUM} {this.state.friendDeposit != undefined ? this.state.friendDeposit.amount_type == 2 ? <i className=\" f-s-10 font-style-normal\">{Utilities.getMasterData().currency_code}</i> : '' : ''}{this.state.friendDeposit != undefined ? this.state.friendDeposit.max_earning_amount : ''}</Label>\n                            </div>\n                        </div>\n\n\n\n                        {/* Email View  */}\n\n                        {\n                            this.state.userEarnDetail.map((item, index) => {\n                                return (\n                                    <div className={item.total_cash_earned == 0 && item.total_bonus_earned == 0 && item.total_coin_earned == 0 ? 'd-none' : 'mt10 mb5'}>\n                                        <div className={item.affiliate_type == 13 || item.affiliate_type == 17 || item.affiliate_type == 5 || item.affiliate_type == 4 || item.affiliate_type == 10 || item.affiliate_type == 11 || item.affiliate_type == 12 ? 'ref-detail-amount d-f' : 'd-none'}>\n                                            <div className='earn-other-holder'>\n                                                <div className='f-left'>\n                                                    <Label className=\"row-text-sub-title\">{item.affiliate_type == 13 ? AppLabels.EMAIL_VERIFICATION : item.affiliate_type == 17 ? AppLabels.BankVerification : item.affiliate_type == 5 ? AppLabels.replace_PANTOID(AppLabels.PANCARD_VERIFICATION) : item.affiliate_type == 4 ? AppLabels.PHONE_VERIFICATION : item.affiliate_type == 10 ? AppLabels.FIRST_CONTEST : item.affiliate_type == 11 ? AppLabels.FIFTH_CONTEST : item.affiliate_type == 12 ? AppLabels.THENTH_CONTEST : ''}</Label>\n                                                </div>\n                                                <div className='f-right pr10'>\n                                                    <span>\n                                                        {\n                                                            parseInt(item.total_cash_earned) >= parseInt(item.total_bonus_earned) && parseInt(item.total_cash_earned) >= parseInt(item.total_coin_earned) ? <i className=\" icon-color-blue f-s-10 font-style-normal\" >{Utilities.getMasterData().currency_code}</i> :\n                                                                item.total_bonus_earned >= parseInt(item.total_cash_earned) && parseInt(item.total_bonus_earned) >= parseInt(item.total_coin_earned) ? <i className=\"icon-bonus icon-color-blue f-s-10\" /> :\n                                                                    <img src={Images.IC_COIN} className='icon-height-is' />\n                                                        }\n                                                    </span>\n\n                                                    <Label className='amt-text pl5'>{parseInt(item.total_cash_earned) >= parseInt(item.total_bonus_earned) && parseInt(item.total_cash_earned) >= item.total_coin_earned ? item.total_cash_earned\n                                                        : item.total_bonus_earned >= parseInt(item.total_cash_earned) && parseInt(item.total_bonus_earned) >= parseInt(item.total_coin_earned) ? item.total_bonus_earned\n                                                            : item.total_coin_earned}</Label>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n\n\n                    </Col>\n                </Row>\n                <div className=\"line-light\">\n\n                </div>\n\n            </div>\n        </div>\n    }\n\n\n    render() {\n\n        var settings = {\n            infinite: false,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            variableWidth: true,\n            centerPadding: '20px',\n            initialSlide: 0,\n            responsive: [\n                {\n                    breakpoint: 450,\n                    settings: {\n                        slidesToShow: 1,\n                    }\n                },\n                {\n                    breakpoint: 414,\n                    settings: {\n                        slidesToShow: 1,\n                    }\n                }\n            ]\n        };\n        const HeaderOption = {\n            back: this.props.history.length > 1,\n            notification: true,\n            title: AppLabels.REFER_A_FRIEND_C,\n            hideShadow: true,\n        }\n\n        const {\n            masterData,\n            hasMore,\n            isLoaderShow,\n            showReferalSystem,\n            isDataLoading,\n            showEditCodeModal,\n            IsModalHide,\n            IsModalShow,\n            isModalHideEdit,\n            isModalShowEdit,\n        } = this.state\n\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    //   **********************************REFFER FRIEND NEW CODE**************************************\n                    <div className=\"web-container profile-section refer-friend transparent-header web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.referfriend.title}</title>\n                            <meta name=\"description\" content={MetaData.referfriend.description} />\n                            <meta name=\"keywords\" content={MetaData.referfriend.keywords}></meta>\n                        </Helmet>\n                        {!this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        {!isDataLoading && <React.Fragment>\n                            <div>\n                                <div className=\"webcontainer-inner\">\n                                    <div className=\"page-header\">\n                                        <div className='overlay-background'>\n\n                                        </div>\n                                        {this.state.totalJoined > 0 && this.state.totalJoined < 15 ?\n                                            <div>\n                                                <div className=\"banner\">\n                                                    <div className={this.state.bannerValue == 0 ? 'd-none' : ''}>\n                                                        <div>\n                                                            {/* <Label className='special-offer-text'>SPECIAL OFFER</Label> */}\n                                                            <img src={Images.SPECIAL_OFFER} className='special-text-spot'/>\n                                                        </div>\n                                                        <div className='d-f j-c-c'>\n                                                            <Label className='banner-cap-text mt2'>{AppLabels.GET}</Label>&nbsp;&nbsp;\n                                                            <i className={this.state.bannerValueType == 0 ? \"icon-bonus color-dark index-top bonus-icon-style bonus-icon-style-b\" : this.state.bannerValueType == 2 ? \"color-dark index-top bonus-icon-style-rupee\" : ''}>{this.state.bannerValueType == 2 ? Utilities.getMasterData().currency_code : ''}</i> {this.state.bannerValueType == 1 ? <img src={Images.IC_COIN} className='icon-height-is-l' /> : ''}<Label className='banner-value-label index-top pl2'>{this.state.bannerValue}</Label>\n                                                            &nbsp;\n                                                        <Label className='banner-cap-text  mt2'>{this.state.bannerValueType == 0 ? AppLabels.BONUS_CASH_LOWER : this.state.bannerValueType == 1 ? AppLabels.COINS : this.state.bannerValueType == 2 ? AppLabels.REAL_CASH_LOWER : ''}</Label>\n                                                        </div>\n                                                        <Label className='banner-cap-text-s'>{AppLabels.ON}&nbsp;{this.state.bannerCountNo}&nbsp;{AppLabels.MORE_REFERRALS}</Label>\n                                                        {/* <Label className='info-label extra-s-text' onClick={() => { this.openRefSystem() }}><i>{AppLabels.HOW_IT_WORKS}</i></Label> */}\n                                                        <img src={Images.INFO_ICON} alt=\"\" className='info-label' onClick={() => { this.openRefSystem() }} />\n                                                    </div>\n\n                                                </div>\n                                            </div>\n                                            :\n                                            <div>\n                                                <div className=\"banner\">\n\n                                                    <div className={this.state.bannerValue == 0 ? 'mt15' : 'd-none'}>\n                                                        <div className='d-f j-c-c'>\n                                                            <Label className='banner-cap-text  mt2'>{AppLabels.IT_PAY_TO_HAVE}</Label>\n                                                        </div> <Label className='banner-cap-text-s'>{AppLabels.YOU_WILL_EARN_ON_EACH_NEW_SIGN_UP}</Label>\n                                                        {/* <Label className='info-label extra-s-text' onClick={() => { this.openRefSystem() }}><i>{AppLabels.HOW_IT_WORKS}</i></Label> */}\n                                                        <img src={Images.INFO_ICON} alt=\"\" className='info-label' onClick={() => { this.openRefSystem() }} />\n                                                    </div>\n                                                </div>\n                                            </div>\n\n\n                                        }\n\n\n\n                                    </div>\n                                    <div className={!this.state.isDisplayLowerBanner && !this.state.isReferBy ? 'enable-true' : \"referring-you-section xhide\"}>\n                                        <img src={this.state.refImage == null ? Images.DEFAULT_USER : Utilities.getThumbURL(this.state.refImage)} alt=\"\" />\n                                        <h2>\n                                            <span className=\"referby-name to-upper-case\">{this.state.refName != \"\" ? this.state.refName : AppLabels.Your_Friend}</span>&nbsp;\n                                        {AppLabels.REFER_YOU_AND_EARNED}\n                                        </h2>\n                                        <div className='ml2 margin-t-2-'>\n                                            <Label className={this.state.refType == 0 ? \"icon-bonus lower-banner-text-\" : 'd-none'} />\n                                            {\n                                                this.state.refType == 1 ? <img src={Images.IC_COIN} className='icon-height-is icon-refer-lower-banner' /> : ''\n                                            }\n                                            {\n                                                this.state.refType == 2 ? <Label className='lower-banner-text-'>{Utilities.getMasterData().currency_code}</Label> : ''\n                                            }\n                                            <Label className='lower-banner-text-'>{this.state.refAmount}</Label>\n                                        </div>\n\n\n\n                                        {/* <span> <i className=></i>{this.state.refType == 1 ?  : ''}&nbsp; </span> */}\n                                    </div>\n                                    <div className={this.state.isEnableRef ? \"\" : 'enable-true'}>\n                                        <ShareReferal {...this.props} />\n                                    </div>\n\n\n                                </div>\n                            </div>\n                            {/* ************************************WHEN USER EARN BONUS AND CASH *************************** */}\n\n                            <div className={this.state.isEnableRef ? 'enable-true' : \"\"}>\n                                <div className=\"my-referral-section\">\n                                    <div className=\"my-referal-head score-board-shadow-m\">\n                                        <Label className='my-refer-text'>{AppLabels.MY_REFERRALS}</Label>\n                                        <Label className='my-refer-text pull-right pt5'>{this.state.totalJoined} {AppLabels.JOINED}</Label>\n\n                                    </div>\n                                    <div className=\"display-table display-inline-f\">\n                                        <div className={this.state.totalRealCase > 0 ? 'score-board score-border-l mr5 score-board-shadow' : \"d-none\"}>\n                                            <div className='d-f j-c-c mt5'>\n                                                <div>\n                                                    <i className=\"icon-color-blue font-w-900\">{Utilities.getMasterData().currency_code}</i>\n                                                </div>\n\n                                                <Label className='score-amount-text mt5'>{Number(parseFloat(this.state.totalRealCase || 0).toFixed(2))}</Label>\n                                            </div>\n                                            <div>\n                                                <Label className='score-amount-text-sub-title m-l-5-m'>{AppLabels.REAL_CASH}</Label>\n                                            </div>\n                                        </div>\n                                        <div className={this.state.totalBonus > 0 ? 'score-board score-border-m ml5 mr5 score-board-shadow-m' : 'd-none'}>\n                                            <div className='d-f j-c-c mt5'>\n                                                <div>\n                                                    <i className=\"icon-bonus icon-color-blue font-w-900\"></i>\n                                                </div>\n\n                                                <Label className='score-amount-text mt5'>{Number(parseFloat(this.state.totalBonus || 0).toFixed(2))}</Label>\n                                            </div>\n                                            <div>\n                                                <Label className='score-amount-text-sub-title m-l-5-m'> {AppLabels.BONUS_CASH}</Label>\n                                            </div>\n                                        </div>\n                                        <div className={this.state.totalCoins > 0 ? \"score-board score-border-r ml5 score-board-shadow-r\" : 'd-none'}>\n                                            <div className='d-f j-c-c mt5'>\n                                                <div>\n                                                    {/* <i className=\"icon-coins icon-color-blue\"></i>\n                                                 */}\n                                                    <img src={Images.IC_COIN} className='icon-height-is' />\n                                                </div>\n\n                                                <Label className='score-amount-text mt5'>{this.state.totalCoins}</Label>\n                                            </div>\n                                            <div>\n                                                <Label className='score-amount-text-sub-title m-l-5-m'> {AppLabels.COINS}</Label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"pt10\">\n\n                                    <Tabs defaultActiveKey={1}\n                                        id=\"uncontrolled-tab-example\"\n                                        className=\"custom-nav-tabs-profile tabs-two m-t-10 white-back referal-tab-menu\"\n                                        activeKey={this.state.selectedTab}\n                                        onSelect={key => this.setState({ selectedTab: key }, () => {\n                                            if (key === 2 && this.state.UserReferralList.length === 0) {\n                                                this.callGetMyReferralListApi()\n                                            }\n                                        })}>\n\n                                        <Tab eventKey={1} title={AppLabels.SHARE}>\n                                            <div className=\"inner-tab-content\">\n                                                <ShareReferal from={1} {...this.props} />\n                                            </div>\n                                        </Tab>\n                                        <Tab eventKey={2} title={AppLabels.REFERRAL} className='pt0'>\n                                            <InfiniteScroll\n                                                dataLength={this.state.UserReferralList.length}\n                                                className='mb-120'\n                                                hasMore={false}\n                                                scrollableTarget='test'\n                                                loader={\n                                                    isLoaderShow == true &&\n                                                    <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                }>\n                                                <ul className=\"p-0\" id=\"test\">\n                                                    <div className='heading-bar'>\n                                                        <Row className='no-wrap'>\n                                                            <Col sm={6} className=\"pt10 pb10 pl15\">\n                                                                <div className=\"d-f\">\n                                                                    <Label className='pro-text-t'>{AppLabels.USER_NAME}</Label>\n                                                                </div>\n                                                            </Col>\n                                                            <Col sm={6} className=\"pt10 pb10\">\n                                                                <div className=\"d-f j-c-c t-a-c\">\n                                                                    <Label className='pro-text-t'>{AppLabels.TOTAL_EARNING}</Label>\n                                                                </div>\n                                                            </Col>\n                                                        </Row>\n\n                                                    </div>\n                                                    {\n                                                        this.state.UserReferralList.length > 0 && this.state.UserReferralList.map((item, index) => {\n                                                            return (this.UserRefferalList(item, index));\n                                                        })\n                                                    }\n                                                    {\n                                                        this.state.hasMore && <Row>\n                                                            <Col sm={12} className='d-f j-c-c mt10'>\n                                                                <div className='load-more-view' onClick={this.fetchMoreData}>\n                                                                    <Label className='load-more-text'>{AppLabels.LOAD_MORE_RESULTS}</Label>\n                                                                </div>\n                                                            </Col>\n                                                        </Row>\n                                                    }\n                                                </ul>\n                                            </InfiniteScroll>\n                                            {\n                                                this.state.UserReferralList.length == 0 && !this.state.loadingData &&\n                                                <NoDataView\n                                                    BG_IMAGE={Images.no_data_bg_image}\n                                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                    MESSAGE_1={AppLabels.NOT_REFER}\n                                                    MESSAGE_2={''}\n                                                    BUTTON_TEXT={AppLabels.SHARE_NOW}\n                                                    onClick={this.goToShare}\n                                                />\n                                            }\n                                            <div className={this.state.displayAchvments ? 'achvment-slider' : 'd-none'}>\n                                                <Label className='achievment-text'>{AppLabels.ACHIEVEMENTS}</Label>\n                                                <Slider {...settings}>\n\n                                                    {\n                                                        _Map(this.state.achvmentData, (item, index) => {\n                                                            return (\n\n                                                                <div className={item.amount > 0 ? 'inner-view' : 'd-none'}>\n                                                                    <div className='index-top'>\n                                                                        <img src={index == 0 && this.state.totalJoined < 5 ? Images.REFER_LOCK : index == 1 && this.state.totalJoined < 10 && this.state.totalJoined < 15 ? Images.REFER_LOCK : index == 2 && this.state.totalJoined <= 15 ? Images.REFER_LOCK : Images.TICK_IC} className='img-height' />\n                                                                    </div>\n\n                                                                    <div className='ml10 mt5'>\n                                                                        {item.type == 0 ? <i className=\"icon-bonus is-blue font-s-15 line-h-14\"></i> : item.type == 2 ? <i className=\" is-blue font-s-12 line-h-16 font-style-normal\" >{Utilities.getMasterData().currency_code}</i> : item.type == 1 ? <img src={Images.IC_COIN} className='icon-height-is-18 d-inline' /> : ''}<Label className='amt-text-blue-slider'> {item.amount}\n                                                                        </Label> &nbsp;\n                                                                         <Label className='amt-text-slider'>{item.type == 0 ? AppLabels.BONUS_CASH : item.type == 1 ? AppLabels.COINS : AppLabels.REAL_CASH}</Label><br></br>\n                                                                        <Label className='row-text-sub-title'>{index == 0 ? AppLabels.ERNED_FIFITH_REF : index == 1 ? AppLabels.ERNED_TEHTH_REF : AppLabels.ERNED_FIFITHEEN_REF}</Label>\n                                                                    </div>\n                                                                    <div className={index == 0 && this.state.totalJoined < 5 ? \"disable-bg\" : index == 1 && this.state.totalJoined < 10 && this.state.totalJoined < 15 ? \"disable-bg\" : index == 2 && this.state.totalJoined <= 15 ? \"disable-bg\" : Images.TICK_IC}>\n                                                                    </div>\n                                                                </div>\n                                                            )\n                                                        })\n                                                    }\n\n                                                </Slider>\n                                            </div>\n                                        </Tab>\n                                    </Tabs>\n                                </div>\n                                {showReferalSystem &&\n                                    <ReferralSystem IsModalShow={showReferalSystem} IsModalHide={this.HideReferralSystemModal} />\n                                }\n                            </div>\n                        </React.Fragment>}\n                        {\n                            isDataLoading && <div className=\"contest-list shadow-none\">\n                                <Skeleton height={160} width={\"100%\"} />\n                                <div className=\"top-next-sec\">\n                                    <Skeleton height={40} width={100} className='skt-right' />\n                                    <Skeleton height={40} width={100} className='skt-left' />\n                                </div>\n                                <div className='p'  >\n\n                                    <Skeleton height={8} />\n                                    <Skeleton height={6} />\n\n                                </div>\n                                <div className='j-c-c d-f'>\n                                    <div className='mr20'>\n                                        <Skeleton height={50} width={50} />\n                                    </div>\n                                    <div className='mr20'>\n                                        <Skeleton height={50} width={50} />\n                                    </div>\n                                    <div>\n                                        <Skeleton height={50} width={50} />\n                                    </div>\n                                </div>\n                                <div className='p-t-20-p j-c-c d-f'>\n                                    <div >\n                                        <Skeleton height={40} width={100} />\n                                    </div>\n\n                                </div>\n                            </div>\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/Notification.jsx",["2037","2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061"],"import React from 'react';\nimport { Media } from 'react-bootstrap';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities, _Map, _times } from '../Utilities/Utilities';\nimport { Helmet } from \"react-helmet\";\nimport { setValue, NOTIFICATION_DATA, GameType } from '../helper/Constants';\nimport { getNotification } from '../WSHelper/WSCallings';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport ls from 'local-storage';\nimport Skeleton from 'react-loading-skeleton';\nimport CustomHeader from '../components/CustomHeader';\nimport MetaData from \"../helper/MetaData\";\nimport Images from '../components/images';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { NoDataView, MomentDateComponent } from '../Component/CustomComponent';\nimport WSManager from '../WSHelper/WSManager';\n\nvar globalThis = null;\n\nconst NotificationList = ({ context, notificationItem, iconList }) => {\n    let isWinning = notificationItem.notification_type == 3 || notificationItem.notification_type == 183 || notificationItem.notification_type == 223 || notificationItem.notification_type == 241;\n    let cardNotify = notificationItem.notification_type == 181 || notificationItem.notification_type == 251 || notificationItem.notification_type == 252;\n    let Data = JSON.parse(notificationItem.content);\n    let UnReadNoti = notificationItem.notification_status == 1;\n    let addClass = notificationItem.notification_type == 181 ? ' congrats-notify' : notificationItem.notification_type == 251 ? ' refund-notify' : notificationItem.notification_type == 252 ? ' blnt-notify' : '';\n    return <div className={\"list-card\" + (isWinning ? ' winning' : '') + (cardNotify ? ' card-notification' : '') + (addClass) + (UnReadNoti ? ' un-read-notify' : '')} onClick={() => globalThis.gotoDetails(notificationItem)}>\n        {\n            (notificationItem.notification_type == 181 || notificationItem.notification_type == 251 || notificationItem.notification_type == 252) ?\n                <React.Fragment>\n                    <Media>\n                        <Media.Left align=\"middle\">\n                            <i className={(iconList.hasOwnProperty(notificationItem.notification_type) ? iconList[notificationItem.notification_type] : 'icon-mail')}></i>\n                        </Media.Left>\n                        <Media.Body>\n                            <Media.Heading>{notificationItem.subject}</Media.Heading>\n                            <p dangerouslySetInnerHTML={{ __html: globalThis.renderTagMessage(notificationItem) || '--' }}></p>\n                            <Media className=\"btm-info\">\n                                <div className=\"notification-timing\">\n                                    <MomentDateComponent data={{ date: notificationItem.added_date, format: \"D MMM - hh:mm A \" }} />\n                                </div>\n                                <div className=\"notify-won\">\n                                    <div className=\"label\">{AppLabels.YOU_WON}</div>\n                                    <div className=\"value\">\n                                        <img src={Images.IC_COIN} alt=\"\" />\n                                        <span>\n                                            {Data.amount || 0}\n\n                                        </span>\n                                        {/* {\n                                        Data.amount ?\n                                        Data.amount : 0\n                                    } */}\n                                    </div>\n                                </div>\n                            </Media>\n                        </Media.Body>\n                    </Media>\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    {\n                        iconList[notificationItem.notification_type] == 'icon-ruppee' ?\n                            <span className='notification-type-currency'>{Utilities.getMasterData().currency_code}</span> :\n                            <i className={(iconList.hasOwnProperty(notificationItem.notification_type) ? iconList[notificationItem.notification_type] : 'icon-mail')}></i>\n                    }\n\n                    <p dangerouslySetInnerHTML={{ __html: globalThis.renderTagMessage(notificationItem) || '--' }}></p>\n                    <p className=\"notification-timing\">\n                        <MomentDateComponent data={{ date: notificationItem.added_date, format: \"D MMM - hh:mm A \" }} />\n                    </p>\n                </React.Fragment>\n        }\n    </div>\n}\n\nconst Shimmer = () => {\n    return (\n        <div className=\"shimmer-container\">\n            <div className=\"image\">\n                <Skeleton width={30} height={30} />\n            </div>\n\n            <div className=\"shimmer-list\">\n                <Skeleton height={8} />\n                <Skeleton height={6} width={'50%'} />\n                <div className=\"pt-md-1\">\n                    <Skeleton height={4} width={'30%'} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nvar hasMore = false;\nexport default class Notification extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            notificationList: [],\n            isLoadMoreLoaderShow: false,\n            limit: 20,\n            sort_field: \"added_date\",\n            sort_order: \"DESC\",\n            page_no: 1,\n            iconByNotificationType: {\n                '1': 'icon-my-contest',\n                '2': 'icon-trophy-cancelled',\n                '3': 'icon-trophy-ic',\n                '4': 'icon-ruppee',\n                '5': 'icon-mail',\n                '6': 'icon-ruppee',\n                '7': 'icon-ruppee',\n                '8': 'icon-my-contest',\n                '9': 'icon-ruppee',\n                '20': 'icon-trophy-ic',\n                '25': 'icon-ruppee',\n                '26': 'icon-ruppee',\n                '27': 'icon-ruppee',\n                '28': 'icon-ruppee',\n                '33': 'icon-ruppee',\n                '34': 'icon-ruppee',\n                '35': 'icon-ruppee',\n                '36': 'icon-ruppee',\n                '37': 'icon-ruppee',\n                '125': 'icon-trophy-cancelled',\n                '138': 'icon-coins-bal-ic',\n                '139': 'icon-bonus-ic',\n                '140': 'icon-ruppee',\n                '141': 'icon-coins-bal-ic',\n                '183': 'icon-trophy-ic',\n                '223': 'icon-trophy-ic',\n                '241': 'icon-trophy-ic',\n                '181': 'icon-gift',\n                '252': 'icon-thumb',\n                '251': 'icon-info-solid',\n                '411': 'icon-coins-bal-ic',\n                '412': 'icon-ruppee',\n                '413': 'icon-bonus-ic',\n                '414': 'icon-trophy-ic',\n            }\n        }\n    }\n\n    componentDidMount() {\n        let obj = NOTIFICATION_DATA;\n        obj['count'] = 0;\n        setValue.setNotificationCount(obj);\n        this.getUserNotifications();\n        globalThis = this;\n    }\n\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    getUserNotifications() {\n\n        let param = {\n            \"page_no\": this.state.page_no,\n            \"page_size\": this.state.limit,\n        }\n\n        this.setState({ isLoading: true })\n        getNotification(param).then((responseJson) => {\n            this.setState({ isLoading: false })\n\n            if (responseJson.response_code == WSC.successCode) {\n                if (typeof responseJson.data != \"undefined\") {\n                    hasMore = responseJson.data.length === this.state.limit;\n                    let mergeList = [];\n                    if (this.state.page_no > 1) {\n                        mergeList = [...this.state.notificationList, ...responseJson.data]\n                    }\n                    else {\n                        mergeList = responseJson.data;\n                    }\n\n\n                    this.setState({ notificationList: mergeList, page_no: this.state.page_no + 1 })\n                }\n            }\n        })\n    }\n\n    renderTagMessage = rowData => {\n        var msg = rowData.message || '';\n        var content = JSON.parse(rowData.content);\n        if (rowData.notification_type === 3 && content.contest_data && content.contest_data.length > 0) {\n            content = content.contest_data[0];\n        }\n        _Map(Object.keys(content), (key, idx) => {\n            if (key == 'date') {\n                let startDate = Utilities.getUtcToLocal(content.date);\n                let date = Utilities.getFormatedDateTime(startDate, \"DD - MMMM\");\n                msg = msg.replace(\"{{date}}\", '<span>' + date + '</span>');\n            }\n            else {\n                msg = msg.replace(\"{{\" + key + \"}}\", '<span class=\"highlighted-text\">' + content[key] + '</span>');\n            }\n        });\n        if (msg.includes('day_number') && content.custom_data) {\n            let customData = JSON.parse(content.custom_data);\n            msg = msg.replace(\"{{day_number}}\", '<span class=\"highlighted-text\">' + customData.day_number + '</span>');\n        }\n        if (msg.includes('amount') && content.custom_data && content.custom_data.length > 0) {\n            let customData = content.custom_data[0];\n            if (customData.prize_type == 3) {\n                msg = msg.replace(\"{{amount}}\", '<span class=\"highlighted-text\">' + customData.name + '</span>');\n            }\n            else {\n                let showIcon = customData.prize_type;\n                if (showIcon == 0) {\n                    msg = msg.replace(\"{{amount}}\", '<i class=\"icon-bonus\"></i><span class=\"highlighted-text\">' + customData.amount + '</span>');\n                }\n                if (showIcon == 1) {\n                    msg = msg.replace(\"{{amount}}\", '<span>' + Utilities.getMasterData().currency_code + '</span><span class=\"highlighted-text\">' + customData.amount + '</span>');\n                }\n                if (showIcon == 2) {\n                    msg = msg.replace(\"{{amount}}\", '<span class=\"highlighted-text\">' + customData.amount + ' coins </span>');\n                }\n            }\n        }\n        if (msg.includes('start_date') && content.start_date) {\n            let startDate = Utilities.getUtcToLocal(content.start_date);\n            let date = Utilities.getFormatedDateTime(startDate, \"D MMM YYYY\");\n            msg = msg.replace(\"{{start_date}}\", '<span>' + date + '</span>');\n        }\n        return msg;\n    };\n\n    gotoDetails(NotificationData) {\n        if (!NotificationData.notification_type) {\n            return true;\n        }\n\n        let myContestTypes = [\"1\", \"2\", \"3\", \"20\", \"22\", \"23\", \"24\"];\n        let walletTypes = [\"4\", \"6\", \"7\", \"9\", \"25\", \"26\", \"27\", \"28\", \"33\", \"34\", \"35\", \"36\", \"37\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"];\n\n        if (myContestTypes.indexOf(NotificationData.notification_type) > -1) {\n            if (NotificationData.content.sports_id) {\n                ls.set('selectedSports', NotificationData.content.sports_id);\n                setValue.setAppSelectedSport(NotificationData.content.sports_id);\n            }\n            this.props.history.push({ pathname: '/my-contests', state: { from: 'notification' } });\n        }\n\n        if (walletTypes.indexOf(NotificationData.notification_type) > -1) {\n            this.props.history.push({ pathname: '/my-wallet' });\n        }\n    }\n\n\n    fetchMoreData = () => {\n        this.getUserNotifications();\n    }\n\n\n\n    render() {\n\n        const {\n            iconByNotificationType\n        } = this.state;\n\n        const HeaderOption = {\n            back: true,\n            menu: true,\n            title: AppLabels.NOTIFICATIONS,\n            isPrimary: true\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container notification-container transparent-header web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.notification.title}</title>\n                            <meta name=\"description\" content={MetaData.notification.description} />\n                            <meta name=\"keywords\" content={MetaData.notification.keywords}></meta>\n                        </Helmet>\n                        {!this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        <div className=\"webcontainer-inner\">\n                            <div className=\"sticky-blue-header\"></div>\n                            {\n                                this.state.notificationList.length > 0 &&\n                                <InfiniteScroll\n                                    dataLength={this.state.notificationList.length}\n                                    next={this.fetchMoreData.bind(this)}\n                                    hasMore={hasMore}\n                                    scrollableTarget='notification-scroll-list'\n                                >\n                                    {\n\n                                        <div id=\"notification-scroll-list\" className=\"notification-list\">\n                                            {\n                                                this.state.notificationList.length > 0 && this.state.notificationList.map((item, index) => {\n                                                    return (\n                                                        <NotificationList context={this} notificationItem={item} iconList={iconByNotificationType} notificationKey={index} key={\"notificationkey-\" + index} />\n                                                    )\n                                                })\n                                            }\n                                        </div>\n\n                                    }\n\n                                </InfiniteScroll>\n\n                            }\n                            {\n                                this.state.notificationList.length == 0 && !this.state.isLoading &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.no_notification}\n                                    MESSAGE_1={AppLabels.DONT_HAVE_ANY + AppLabels.NOTIFICATION_YET}\n                                    MESSAGE_2=''\n                                    BUTTON_TEXT={AppLabels.GO_BACK_TO_LOBBY}\n                                    onClick={this.goToLobby}\n                                />\n                            }\n\n                            {\n                                this.state.notificationList.length == 0 && this.state.isLoading && <div className=\"shimmer-list-container\">\n                                    {\n                                        _times(15, (index) => {\n                                            return (\n                                                <Shimmer key={\"shimerkey-\" + index} />\n                                            )\n                                        })\n                                    }\n                                </div>\n                            }\n                        </div>\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/Lobby.jsx",["2062","2063","2064","2065","2066","2067","2068","2069","2070","2071","2072","2073","2074","2075","2076","2077","2078","2079","2080","2081","2082","2083","2084","2085","2086","2087","2088","2089","2090","2091","2092","2093","2094","2095","2096","2097","2098","2099","2100","2101","2102","2103","2104","2105","2106","2107","2108","2109","2110","2111","2112","2113","2114","2115","2116"],"import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { updateDeviceToken, getLobbyBanner, getLobbyFixtures } from \"../WSHelper/WSCallings\";\nimport { NavLink } from \"react-router-dom\";\nimport { Utilities, _isEmpty, _filter, _Map, BannerRedirectLink, parseURLDate } from '../Utilities/Utilities';\nimport { CollectionInfoModal, ContestDetailModal } from \"../Modals\";\nimport { NoDataView, LobbyBannerSlider, LobbyShimmer } from '../Component/CustomComponent';\nimport CustomHeader from '../components/CustomHeader';\nimport ls from 'local-storage';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Images from '../components/images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport Filter from '../components/filter';\nimport FixtureContest from \"./FixtureContest\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as Constants from \"../helper/Constants\";\n\nvar bannerData = {}\n\nexport class Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            OriginalContestList: [],\n            ContestList: [],\n            BannerList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            showContestDetail: false,\n            FixtureData: '',\n            isLoaderShow: false,\n            isListLoading: false,\n            offset: 0,\n            showLobbyFitlers: false,\n            league_id: \"\",\n            filterArray: [],\n            sports_id: Constants.AppSelectedSport,\n            showCollectionInfo: false,\n            canRedirect: true\n        }\n    }\n\n    ContestDetailShow = (data) => {\n        this.setState({\n            showContestDetail: true,\n            FixtureData: data\n        });\n    }\n    /**\n    * @description this method to hide contest detail model,\n    */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n    /**\n     * \n     * @description method to display collection info model.\n     */\n    CollectionInfoShow = (event) => {\n        // event.preventDefault();\n        event.stopPropagation();\n        this.setState({\n            showCollectionInfo: true\n        }, () => {\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    CollectionInfoHide = () => {\n        this.setState({\n            showCollectionInfo: false,\n        });\n    }\n    /**\n     * @description this method to to open create contest screen\n     */\n    createContest = () => {\n        this.props.history.push('/create-contest')\n    }\n\n    /**\n     * @description this method to to open Have a league code screen\n     */\n    joinContest = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push({ pathname: '/private-contest' })\n        }\n        else {\n            this.props.history.push({ pathname: '/signup' })\n        }\n    }\n    /**\n     * @description this method will be call when user click join buttonn from contestt detail model screen,\n     * in case user in not logged in then signup/login screen will display\n     * @param data - contest model \n     */\n    onSubmitBtnClick = (data) => {\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/signup' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } else {\n            let dateformaturl = parseURLDate(data.season_scheduled_date);\n            WSManager.clearLineup();\n            let lineupPath = '/lineup/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data } })\n        }\n    }\n\n    /**\n     * @description - this method is to display contest of a fixture on click event\n     * @param data - fixture model\n     */\n    gotoDetails = (data, event) => {\n        event.preventDefault();\n\n        if (Constants.SELECTED_GAMET == Constants.GameType.MultiGame ) {\n            if (data.match_list.length == 1) {\n                data.home = data.match_list[0].home;\n                data.home_flag = data.match_list[0].home_flag;\n                data.away = data.match_list[0].away;\n                data.away_flag = data.match_list[0].away_flag;\n            }\n        }\n\n        let dateformaturl = parseURLDate(data.season_scheduled_date);\n        this.setState({ LobyyData: data })\n\n        let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + data.collection_master_id + '/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n        this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data, lineupPath: contestListingPath } })\n\n    }\n\n    /**\n     * @description - this is life cycle method of react\n     */\n    componentDidMount() {\n        if (this.props.location.pathname == '/lobby') {\n            let { sports_id } = this.state;\n            WSManager.setFromConfirmPopupAddFunds(false);\n            let league_id = this.getSportsLeagueId(sports_id, Constants.LOBBY_FILTER_ARRAY);\n            this.setState({ isLoaderShow: true, sports_id, league_id, filterArray: Constants.LOBBY_FILTER_ARRAY }, () => {\n                this.lobbyContestList(0);\n                this.getBannerList();\n            })\n\n            //Analytics Calling \n            WSManager.googleTrack(WSC.GA_PROFILE_ID, 'fixture');\n            if (WSManager.loggedIn()) {\n                WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n            }\n            this.checkOldUrl();\n        }\n        this.handelNativeGoogleLogin()\n        if (!ls.get('isDeviceTokenUpdated')) {\n\n            let token_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'deviceid',\n            }\n            this.sendMessageToApp(token_data)\n        }\n        setTimeout(() => {\n            let push_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'receive',\n            }\n            this.sendMessageToApp(push_data)\n        }, 300);\n    }\n\n    componentWillMount = () => {\n        this.enableDisableBack(false)\n    }\n\n    enableDisableBack(flag){\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc:'handleLoginReceived'\n            }\n            this.sendMessageToApp(data);\n        }\n    }\n\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            let league_id = this.getSportsLeagueId(nextProps.selectedSport, this.state.filterArray);\n            this.setState({\n                ContestList: [],\n                league_id: league_id,\n                offset: 0,\n                sports_id: nextProps.selectedSport,\n            }, () => {\n                //   Constants.setValue.setisFromConfirmModal(false);\n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.lobbyContestList(0);\n                this.getBannerList();\n                Filter.reloadLobbyFilter();\n            })\n        }\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n\n            if(e.data.locale != undefined){\n                WSManager.setAppLang(e.data.locale);\n\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            } \n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }   \n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }  \n\n\n\n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {//deposit promotion\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {// promotion for contes\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {// admin refer a friend\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132' ||\n                    e.data.notif.notification_type == '300') {//124-promotion for fixture 131-match delay  132-lineup announced\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = parseURLDate(e.data.notif.season_scheduled_date);\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {// custom notification\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else if (e.data.notif.custom_notification_type ==7) {\n                        pathName = 'add-funds';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        if (!url.includes('#') && window.location.pathname === \"/lobby\") {\n            if (Utilities.getSelectedSportsForUrl())\n                window.history.replaceState(\"\", \"\", window.location.pathname + \"#\" + Utilities.getSelectedSportsForUrl());\n        }\n    }\n\n    /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async (offset) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport\n        }\n\n        this.setState({ isLoaderShow: true, isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getLobbyFixtures(param);\n        if (api_response_data) {\n            this.setState({ isLoaderShow: false })\n            if (offset == 0) {\n                let tmpArray = [] \n                _Map(api_response_data,(obj)=>{\n                    if (Utilities.minuteDiffValue({ date: obj.game_starts_in }) < 0) {\n                        tmpArray.push(obj);\n                    }\n                })\n                this.setState({ ContestList: tmpArray, OriginalContestList: tmpArray }, () => {\n                    if (Constants.LOBBY_FILTER_ARRAY.length > 0) {\n                        this.filterLobbyResults({ league_id: Constants.LOBBY_FILTER_ARRAY[0].league_id })\n                    }\n                })\n            } else {\n                let tmpArray = [] \n                _Map(api_response_data,(obj)=>{\n                    if (Utilities.minuteDiffValue({ date: obj.game_starts_in }) < 0) {\n                        tmpArray.push(obj);\n                    }\n                })\n                this.setState({ ContestList: [...this.state.ContestList, ...tmpArray], OriginalContestList: [...this.state.ContestList, ...tmpArray] });\n            }\n            this.setState({ offset: api_response_data.offset })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    getSportsLeagueId(sports_id, filterArray) {\n\n        let league_id = '';\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == sports_id) {\n                league_id = filterArray[i].league_id;\n            }\n        }\n        return league_id;\n    }\n\n    /** \n    @description hide lobby filters \n    */\n    hideFilter = () => {\n        this.setState({ showLobbyFitlers: false })\n        this.props.hideFilterData()\n    }\n\n    /** \n    @description show lobby filters \n    */\n    showFilter = () => {\n        this.setState({ showLobbyFitlers: true })\n    }\n\n    /** \n    @description Apply filters and load data accordingly\n    */\n    filterLobbyResults = (filterObj) => {\n        let league_id = (!_isEmpty(filterObj.league_id) && typeof filterObj.league_id != 'undefined') ? filterObj.league_id : \"\";\n        this.setState({ league_id: league_id }, function () {\n            this.filterFixturesLocally(league_id)\n        })\n\n        let filterArray = this.setFilterArray(league_id);\n        Constants.setValue.setFilter(filterArray);\n        this.setState({ league_id: league_id, showLobbyFitlers: false, offset: 0, filterArray: filterArray })\n        this.props.hideFilterData()\n    }\n\n    filterFixturesLocally(leagueIds) {\n        let allFixtures = this.state.OriginalContestList;\n        if (leagueIds == '') {\n            this.setState({ ContestList: allFixtures })\n        }\n        else {\n            let filteredList = [];\n            for (var i = 0; i < allFixtures.length; i++) {\n                if (leagueIds.includes(allFixtures[i].league_id)) {\n                    filteredList.push(allFixtures[i])\n                }\n\n            }\n\n            this.setState({ ContestList: filteredList })\n        }\n    }\n\n    setFilterArray(league_id) {\n        let { filterArray } = this.state;\n\n        let hasFilter = false;\n        if (filterArray.length > 0) {\n            for (let i = 0; i < filterArray.length; i++) {\n                if (filterArray[i].sports_id == this.state.sports_id) {\n                    hasFilter = true;\n                    filterArray[i].league_id = league_id;\n                }\n            }\n        }\n\n        if (!hasFilter && league_id != \"\") {\n            let filterObj = {\n                'sports_id': this.state.sports_id,\n                'league_id': league_id,\n            }\n            filterArray.push(filterObj);\n        }\n\n        return filterArray;\n    }\n\n    /** \n     * @description api call to get baner listing from server\n    */\n    getBannerList = () => {\n        let sports_id = Constants.AppSelectedSport;\n        \n        if (sports_id == null)\n            return;\n        if (bannerData[sports_id]) {\n            this.parseBannerData(bannerData[sports_id])\n        } else {\n            setTimeout(async () => {\n                this.setState({ isLoaderShow: true })\n                let param = {\n                    \"sports_id\": sports_id\n                }\n                var api_response_data = await getLobbyBanner(param);\n                if (api_response_data) {\n                    bannerData[sports_id] = api_response_data;\n                    this.parseBannerData(api_response_data)\n                }\n                this.setState({ isLoaderShow: false })\n            }, 1500);\n        }\n    }\n\n    /** \n     * @description call to parse banner data\n    */\n    parseBannerData = (bdata) => {\n        let refData = '';\n        let temp = [];\n        _Map(this.getSelectedbanners(bdata), (item, idx) => {\n            if (item.banner_type_id == 2) {\n                refData = item;\n            }\n            if (item.banner_type_id == 1) {\n                let dateObj = Utilities.getUtcToLocal(item.schedule_date)\n                if (Utilities.minuteDiffValue({ date: dateObj }) < 0) {\n                    temp.push(item);\n                }\n            }\n            else {\n                temp.push(item);\n            }\n        })\n        setTimeout(() => {\n            CustomHeader.showRCM(refData);\n        }, 200);\n        this.setState({ BannerList: temp })\n    }\n\n    /** \n     * @description call to get selected banner data\n    */\n    getSelectedbanners(api_response_data) {\n        let tempBannerList = [];\n        for (let i = 0; i < api_response_data.length; i++) {\n            let banner = api_response_data[i];\n            if (WSManager.getToken() && WSManager.getToken() != '') {\n                if (banner.banner_type_id == Constants.BANNER_TYPE_REFER_FRIEND\n                    || banner.banner_type_id == Constants.BANNER_TYPE_DEPOSITE) {\n                    if (banner.amount > 0)\n                        tempBannerList.push(api_response_data[i]);\n                }\n                else if (banner.banner_type_id == '6') {\n                    //TODO for banner type-6 add data\n                }\n                else {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n            else {\n                if (banner.banner_type_id == '6') {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n        }\n\n        return tempBannerList;\n    }\n\n    /**\n     * @description method to redirect user on appopriate screen when user click on banner\n     * @param {*} banner_type_id - id of banner on which clicked\n     */\n    redirectLink = (result) => {\n        BannerRedirectLink(result, this.props)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n        if (this.state.showLobbyFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLobbyFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    timerCompletionCall = (item) => {\n        let fArray = _filter(this.state.ContestList, (obj) => {\n            return item.collection_master_id != obj.collection_master_id\n        })\n        this.setState({\n            ContestList: fArray\n        })\n    }\n\n    goToPREDICTION = () => {\n        WSManager.setPickedGameType(Constants.GameType.Pred);\n        // window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl() + \"#prediction\");\n\n        let gameType = Utilities.getMasterData().sports_hub;\n        let HGLIST = _filter(gameType, (obj) => {\n            return obj.game_key == Constants.GameType.Pred;\n        })\n        let lsSport = ls.get('selectedSports');\n        if(HGLIST[0].allowed_sports.includes(lsSport)){\n            window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl() + \"#prediction\");\n        }\n        else{\n            let sport = HGLIST[0].allowed_sports[0];\n            ls.set('selectedSports', sport);\n            Constants.setValue.setAppSelectedSport(sport);\n            window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl() + \"#prediction\");\n        }\n    }\n\n    renderPREDCard = () => {\n        if(Utilities.getMasterData().allow_sports_prediction_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().sports_prediction_bnr;\n        if (Constants.IS_PREDICTION) {\n            return ( bannerImg ?\n                <li onClick={this.goToPREDICTION} className=\"prd-card-img-only\" >\n                    <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n                </li>\n                :\n                <li onClick={this.goToPREDICTION} className=\"dfs-card prd-card\" >\n                    <img className=\"img-dfs-shape\" src={Images.PRD_SHAPE_IMG} alt='' />\n                    <div className=\"dfs-c\">\n                        <img className=\"img-dfs\" src={Images.PRD_IMG} alt='' />\n                        <p>Play Prediction<br />& Win Coins to Redeem for Exciting Offers & Prizes</p>\n                    </div>\n                </li>\n                )\n        }\n        return ''\n    }\n\n    render() {\n\n        const {\n            showContestDetail,\n            FixtureData,\n            isLoaderShow,\n            showCollectionInfo,\n            BannerList,\n            league_id,\n            showLobbyFitlers,\n            ShimmerList,\n            ContestList,\n            isListLoading,\n        } = this.state\n\n        let FitlerOptions = {\n            showLobbyFitler: showLobbyFitlers,\n            filtered_league_id: league_id\n        }\n\n        let bannerLength = BannerList.length;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"transparent-header web-container tab-two-height pb0\">\n                        <Filter leagueList={league_id} {...this.props} FitlerOptions={FitlerOptions} hideFilter={this.hideFilter} filterLobbyResults={this.filterLobbyResults}></Filter>\n                        <div>\n                            <div className={bannerLength > 0 ? 'banner-v animation' : 'banner-v'}>\n                                {\n                                    bannerLength > 0 && <LobbyBannerSlider BannerList={BannerList} redirectLink={this.redirectLink.bind(this)} />\n                                }\n                            </div>\n                            {\n                                WSManager.loggedIn() && ContestList.length > 0 &&\n                                <div className={\"contest-action\" + (bannerLength == 0 ? ' mt15' : '')}>\n                                    {\n                                        Utilities.getMasterData().private_contest == '1' &&\n                                        <NavLink exact to={\"/create-contest\"} className=\"btn btnStyle btn-rounded small\">\n                                            <span className=\"text-uppercase\">{AppLabels.Create_a_Contest}</span>\n                                        </NavLink>\n                                    }\n                                    <NavLink exact to=\"/private-contest\" className=\"btn btnStyle btn-rounded small\">\n                                        <span className=\"league-code-btn text-uppercase\">\n                                            {AppLabels.JOIN_CONTEST}\n                                        </span>\n                                    </NavLink>\n                                </div>\n                            }\n                            <div className=\"upcoming-lobby-contest\">\n                                {\n                                    ContestList.length > 0 &&\n                                    <div className=\"top-section-heading\">{AppLabels.UPCOMING} {AppLabels.MATCHES}</div>\n                                }\n                                <Row className='mt15'>\n                                    <Col sm={12}>\n                                        <Row>\n                                            <Col sm={12}>\n                                                <InfiniteScroll\n                                                    style={{ overflow: 'hidden !important' }}\n                                                    dataLength={ContestList.length}\n                                                    pullDownToRefresh={false}\n                                                    hasMore={false}\n                                                    scrollableTarget='test'\n                                                    loader={\n                                                        isLoaderShow == true &&\n                                                        <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                    }>\n                                                    <ul className=\"collection-list-wrapper lobby-anim\">\n                                                        {\n                                                            (ContestList.length == 0 && isListLoading) &&\n                                                            ShimmerList.map((item, index) => {\n                                                                return (\n                                                                    <LobbyShimmer key={index} />\n                                                                )\n                                                            })\n                                                        }\n\n                                                        {\n                                                            ContestList.length > 0 &&\n                                                            ContestList.map((item, index) => {\n                                                                return (\n                                                                    <React.Fragment key={item.collection_master_id} >\n                                                                        <FixtureContest\n                                                                            {...this.props}\n\n                                                                            indexKey={item.collection_master_id}\n                                                                            ContestListItem={item}\n                                                                            gotoDetails={this.gotoDetails}\n                                                                            CollectionInfoShow={this.CollectionInfoShow}\n                                                                            IsCollectionInfoHide={this.CollectionInfoHide}\n                                                                            timerCallback={() => this.timerCompletionCall(item)}\n                                                                        />\n                                                                        {\n                                                                            index === 1 && this.renderPREDCard()\n                                                                        }\n                                                                    </React.Fragment>\n                                                                );\n                                                            })\n                                                        }\n                                                        {\n                                                            (ContestList.length < 2 && !isListLoading) && this.renderPREDCard()\n                                                        }\n\n                                                        {\n                                                            (ContestList.length == 0 && !isListLoading) &&\n                                                            <NoDataView\n                                                                BG_IMAGE={Images.no_data_bg_image}\n                                                                CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                                MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                                                MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                                                                onClick_2={this.joinContest}\n                                                            />\n                                                        }\n                                                    </ul>\n                                                </InfiniteScroll>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                            </div>\n\n                        </div>\n                        {showContestDetail &&\n                            <ContestDetailModal IsContestDetailShow={showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={FixtureData} />\n                        }\n                        {showCollectionInfo &&\n                            <CollectionInfoModal IsCollectionInfoShow={showCollectionInfo} IsCollectionInfoHide={this.CollectionInfoHide} />\n                        }\n                        \n                    </div>\n                )}\n            </MyContext.Consumer>\n\n        )\n    }\n}\n\nexport default Lobby\n","/var/www/html/framework/frontend/src/Component/Finance/MyWallet.jsx",["2117","2118","2119","2120","2121","2122","2123","2124","2125","2126","2127","2128","2129","2130","2131","2132","2133","2134","2135","2136","2137","2138","2139","2140","2141","2142","2143","2144","2145","2146","2147","2148","2149"],"import React from 'react';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport { Utilities } from '../../Utilities/Utilities';\nimport { getUserProfile, getUserBalance, withdrawPending } from '../../WSHelper/WSCallings';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport ls from 'local-storage';\nimport MetaData from \"../../helper/MetaData\";\nimport CustomHeader from '../../components/CustomHeader';\nimport { UserWinning, DataCountBlock } from \"../CustomComponent\";\nimport { OnlyCoinsFlow } from '../../helper/Constants';\nimport Images from '../../components/images';\nimport { isIOS } from 'react-device-detect';\nimport {DownloadAppBuyCoinModal} from \"../../Modals\";\n\nexport default class Wallet extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userBalance: \"\",\n            userBalObj: \"\",\n            allowedBonusPercantage: \"\",\n            winningAmt: \"\",\n            profileDetail: WSManager.getProfile(),\n            verificationSteps: '',\n            bonusCash: '',\n            depositAmt: '',\n            coin_balance: '',\n            withdrawStatus: '',\n            allow_withdraw: '',\n            accVerified: this.isAccountVerified(WSManager.getProfile()),\n            wallet_content:'',\n            showDAM : false\n        }\n    }\n\n    componentDidMount() {\n        this.callProfileDetail();\n        this.callUserBalanceApi();\n        this.showRedeemCM(WSManager.getProfile());\n        this.handelBycoinAppEvent();\n\n\n    }\n\n    handelBycoinAppEvent() {\n        window.addEventListener('message', (e) => {\n           if (e.data.action == 'buyCoin' && e.data.type == 'succuss') {\n                this.callUserBalanceApi();\n              }\n            \n        });\n    }\n\n\n    showRedeemCM = (data) => {\n        if (Utilities.getMasterData().allow_coin !== \"0\") {\n            if (data.user_setting && data.user_setting.redeem == \"0\") {\n                CustomHeader.showRedeemCM();\n            }\n        }\n    }\n\n\n    isAccountVerified = (data) => {\n        return (data.pan_verified == \"1\" && data.is_bank_verified == \"1\" && data.email_verified == \"1\" && data.phone_verfied == \"1\") ? true : false\n    }\n\n    goToAddFunds() {\n        this.props.history.push({ pathname: '/add-funds', state: {} })\n    }\n    goToWithdraw() {\n        if (this.state.accVerified) {\n            this.props.history.push({ pathname: '/withdraw', state: { withdrawStatus: this.state.withdrawStatus, isFromWallet: true, allow_withdraw: this.state.allow_withdraw } })\n        }\n    }\n    goToTransList() {\n        this.props.history.push({ pathname: '/transactions', state: {} })\n    }\n    goToContactUs() {\n        this.props.history.push({ pathname: '/contact-us', state: {} })\n    }\n\n    callProfileDetail() {\n        getUserProfile().then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                ls.set('profile', responseJson.data)\n                this.setState({\n                    profileDetail: responseJson.data,\n                    accVerified: this.isAccountVerified(responseJson.data)\n                })\n            }\n        })\n    }\n\n    withdrawPendingApi() {\n        withdrawPending().then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    withdrawStatus: responseJson.data.pending_request,\n                    allow_withdraw: responseJson.data.allow_withdraw\n                })\n            }\n        })\n    }\n\n    initVerificationSteps() {\n\n        let mVerificationSteps = [];\n\n        if (Utilities.getMasterData().login_flow == 0) {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.MOBILE,\n                    'status': 1,\n                    'icon': 'icon-mobile',\n                    'image': '',\n                })\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.EMAIL,\n                    'status': this.state.profileDetail.email_verified,\n                    'icon': 'icon-email2',\n                    'image': '',\n\n                })\n        }\n        else {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.EMAIL,\n                    'status': 1,\n                    'icon': 'icon-email2',\n                    'image': '',\n                })\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.MOBILE,\n                    'status': this.state.profileDetail.phone_verfied,\n                    'icon': 'icon-mobile',\n                    'image': '',\n                })\n        }\n        if (Utilities.getMasterData().allow_pan_flow == 1) {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.replace_PANTOID(AppLabels.PAN),\n                    'status': this.state.profileDetail.pan_verified,\n                    'icon': 'icon-pancard',\n                    'image': this.state.profileDetail.pan_image,\n\n                })\n        }\n        if (Utilities.getMasterData().allow_bank_flow == 1) {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.BANK,\n                    'status': this.state.profileDetail.is_bank_verified,\n                    'icon': 'icon-bank',\n                    'image': this.state.profileDetail.user_bank_detail.bank_document,\n                })\n        }\n        this.setState({ verificationSteps: mVerificationSteps })\n    }\n\n    callUserBalanceApi() {\n        getUserBalance().then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    userBalance: Utilities.getTotalBalance(responseJson.data.user_balance),\n                    winningAmt: responseJson.data.user_balance.winning_amount,\n                    bonusCash: Utilities.getMasterData().currency_code + responseJson.data.user_balance.bonus_amount,\n                    depositAmt: Utilities.getMasterData().currency_code + responseJson.data.user_balance.real_amount,\n                    coin_balance : responseJson.data.user_balance.point_balance,\n                    wallet_content: responseJson.data.wallet_content,\n                    userBalObj: responseJson.data.user_balance\n\n                })\n                WSManager.setBalance(responseJson.data.user_balance);\n            }\n            this.withdrawPendingApi()\n        })\n    }\n\n    goToVerifyAccount() {\n        this.props.history.push({\n            pathname: '/verify-account',\n            state: {\n                email_verified: this.state.profileDetail.email_verified,\n                phone_verfied: this.state.profileDetail.phone_verfied,\n                pan_verified: this.state.profileDetail.pan_verified,\n                is_bank_verified: this.state.profileDetail.is_bank_verified\n            }\n        })\n    }\n\n    coinAction = (coin_balance) => {\n        if(coin_balance == 0){\n            this.props.history.push({ pathname: \"/earn-coins\" });\n        }else{\n            this.props.history.push({ pathname: \"/rewards\" });\n        }\n    }\n\n    goToBuyCoins = () => {\n\n        if (OnlyCoinsFlow == 1 || OnlyCoinsFlow == 2) {\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'openBuyScreen',\n                    targetFunc: 'openBuyScreen'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            } else {\n                this.showDownloadApp();\n                // if (isIOS) {\n                //     let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.ios : {};\n                //     window.open(iosAppDownload.app_url, \"_blank\")\n                // } else {\n                //     let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.android : {};\n                //     window.open(iosAppDownload.app_url, \"_blank\")\n                // }\n            }\n        } else {\n            this.props.history.push({ pathname: \"/buy-coins\", state: { userBalance: this.state.userBalObj } });\n        }\n    }\n\n    showDownloadApp=()=>{\n        this.setState({\n            showDAM : true\n        })\n    }\n\n    hideDownloadApp=()=>{\n        this.setState({\n            showDAM : false\n        })\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            notification: true,\n            title: AppLabels.MY_WALLET,\n            hideShadow: true\n        }\n\n        const { accVerified, withdrawStatus, allow_withdraw, coin_balance, wallet_content, showDAM } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container transparent-header web-container-fixed wallet-wrapper\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.mywallet.title}</title>\n                            <meta name=\"description\" content={MetaData.mywallet.description} />\n                            <meta name=\"keywords\" content={MetaData.mywallet.keywords}></meta>\n                        </Helmet>\n                        {!this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        <div className={\"wallet-header header-with-circle\" + (accVerified || OnlyCoinsFlow == 1 || OnlyCoinsFlow == 2 ? '' : ' wallet-header-with-verify')}>\n                            <div className=\"overlay-white-circle\"></div>\n                            <div className=\"acc-bal\">{ OnlyCoinsFlow == 1 ? <img className=\"coin-img\" src={Images.IC_COIN} alt=\"\" /> : Utilities.getMasterData().currency_code} {(OnlyCoinsFlow == 1 ? Math.ceil(coin_balance) : this.state.userBalance) || '--'}</div>\n                            {\n                                (wallet_content && wallet_content.header)\n                                ? <div className=\"total-bal-text\">{wallet_content.header}</div>\n                                : <div className=\"total-bal-text\">{AppLabels.TOTAL_BALANCE}</div>\n                            }\n                            {\n                                (wallet_content && wallet_content.body)\n                                ? <div className=\"bal-summary\">{wallet_content.body}</div>\n                                : <div className=\"bal-summary\">{AppLabels.WINNINGS} + {AppLabels.BONUS_CASH} + {AppLabels.DEPOSIT}</div>\n                            }\n                            {/* <div className=\"currency-circle\">\n                                <i className=\"icon-no-currency\"/>\n                            </div> */}\n                            <div className=\"add-cash-btn\">\n                                <a href className=\"btn btn-primary btn-rounded\" onClick={() => this.goToAddFunds()}>{AppLabels.ADD_CASH}</a>\n                            </div>\n                        </div>\n                        <div className={\"wallet-body\" + (accVerified ? '' : ' wallet-body-with-verify') + ((OnlyCoinsFlow == 1 || OnlyCoinsFlow == 2) ? ' coin-only-head' : '')}>\n                            {this.state.winningAmt && (OnlyCoinsFlow != 1 && OnlyCoinsFlow != 2) &&\n                                <UserWinning\n                                    winningAmt={this.state.winningAmt}\n                                    goToVerifyAccount={() => this.goToVerifyAccount()}\n                                    StepList={this.state.verificationSteps}\n                                    IsProfileVerifyShow={accVerified}\n                                />\n                            }\n                            {\n                            Utilities.getMasterData().allow_coin == 1 && <DataCountBlock item={\n                                    {\n                                        'icon': 'icon-coins-bal-ic',\n                                        'count': Math.ceil(coin_balance),\n                                        'count_for': AppLabels.COINS_BALANCE,\n                                        'isCoin' : true\n                                    }\n                                }\n                                    onClick={(e) =>{e.stopPropagation();  this.coinAction(coin_balance)}}\n                                    onBuyCoins={(e)=>{e.stopPropagation();this.goToBuyCoins()}}\n                            />\n                            }\n                            {\n                                OnlyCoinsFlow != 1 && <div className=\"bal-summary-wrap m-t-20 m-b-20\">\n                                    <div className=\"display-table-row\">\n                                        <div className={\"cash-summary-with-amt\" + (OnlyCoinsFlow == 2 ? ' p-0' : '')}>\n                                            <DataCountBlock item={\n                                                {\n                                                    'icon': 'icon-bonus1',\n                                                    'count': this.state.bonusCash,\n                                                    'count_for': AppLabels.BONUS_CASH\n                                                }\n                                            }\n                                                countInt={true}\n                                            />\n                                        </div>\n                                        {\n                                            OnlyCoinsFlow != 2 && <div className=\"cash-summary-with-amt\">\n                                                <DataCountBlock item={\n                                                    {\n                                                        'icon': 'icon-deposit',\n                                                        'count': this.state.depositAmt,\n                                                        'count_for': AppLabels.DEPOSIT\n                                                    }\n                                                }\n                                                    countInt={true}\n                                                />\n                                            </div>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                            <div className=\"cash-action\">\n                                {\n                                    (OnlyCoinsFlow != 1 && OnlyCoinsFlow != 2) && <DataCountBlock item={\n                                        {\n                                            'icon': 'icon-add-cash',\n                                            'count': AppLabels.ADD_CASH,\n                                            'count_for': AppLabels.PAY_WITH_DEBIT_CARD_CREDIT_CARD_UPI_MORE,\n                                        }\n                                    }\n                                        onClick={() => this.goToAddFunds()}\n                                        countInt={false}\n                                    />\n                                }\n                                {\n                                    withdrawStatus !== '' && (OnlyCoinsFlow != 1 && OnlyCoinsFlow != 2) &&\n                                    <DataCountBlock item={\n                                        {\n                                            'icon': 'icon-withdraw',\n                                            'count': AppLabels.WITHDRAW_MONEY,\n                                            'count_for': (allow_withdraw !== 0) ? (accVerified ? AppLabels.WITHDRAW_YOUR_WINNINGS_IN_YOUR_ACCOUNT : AppLabels.VERIFY_YOUR_ACCOUNT_FIRST) : AppLabels.YOUR_WITHDRAWAL_REQUEST_IS_PENDING\n                                        }\n                                    }\n                                        onClick={() => this.goToWithdraw()}\n                                        countInt={false}\n                                        showPendingIcon={allow_withdraw === 0}\n                                    />\n                                }\n                                <DataCountBlock item={\n                                    {\n                                        'icon': 'icon-transaction',\n                                        'count': AppLabels.TRANSACTION_HISTORY,\n                                        'count_for': AppLabels.WHERE__HOW_MUCH_SPENT_KNOW_ALL\n                                    }\n                                }\n                                    onClick={() => this.goToTransList()}\n                                    countInt={false}\n                                />\n                                <DataCountBlock item={\n                                    {\n                                        'icon': 'icon-support',\n                                        'count': AppLabels.NEED_HELP,\n                                        'count_for': AppLabels.HRS24_SUPPORT\n                                    }\n                                }\n                                    onClick={() => this.goToContactUs()}\n                                />\n                            </div>\n                        </div>\n                        {\n                            showDAM &&\n                            <DownloadAppBuyCoinModal\n                                hideM={this.hideDownloadApp}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/Profile/MyProfile.jsx",["2150","2151","2152","2153","2154","2155","2156","2157","2158","2159","2160","2161"],"import React from 'react';\nimport { Row, Col } from \"react-bootstrap\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport ls from 'local-storage';\nimport {\n    ProfileQuickView,\n    EditUserNameModal,\n    ApplyPromoCode,\n    EditMobileModal,\n    EditEmailModal\n} from \"../../Modals\";\nimport { UserProfileHeader, MomentDateComponent, DataCountBlock } from '../CustomComponent';\nimport * as Constants from \"../../helper/Constants\";\nimport { getUserProfile, playingExperience } from '../../WSHelper/WSCallings';\nimport { _Map, Utilities, isFooterTab } from '../../Utilities/Utilities';\nimport Images from '../../components/images';\nimport CustomHeader from '../../components/CustomHeader';\n\nvar expData = null;\nvar profileData = null;\n\nexport default class Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showProfileQuickView: false,\n            showPromoCode: false,\n            showEditUserNameModal: false,\n            showEditMobileModal: false,\n            showEditEmailModal: false,\n            code: Constants.DEFAULT_COUNTRY_CODE,\n            profileDetail: ls.get('profile') || '',\n            verificationSteps: '',\n            playingExpdata: '',\n            accVerified: this.isAccountVerified(WSManager.getProfile()),\n        }\n    }\n\n    isAccountVerified = (data) => {\n        var isVerified = data.email_verified == \"1\" && data.phone_verfied == \"1\" ? true : false\n        if(Utilities.getMasterData().allow_bank_flow == 1){\n            isVerified = isVerified && data.is_bank_verified == \"1\"\n        }\n        if(Utilities.getMasterData().allow_pan_flow == 1){\n            isVerified = isVerified && data.pan_verified == \"1\"\n        }\n        return isVerified;\n    }\n\n    componentDidMount() {\n        if (expData && Utilities.minuteDiffValue(expData) < 1) {\n            this.parseExpData(expData.data)\n        }\n        if (this.state.profileDetail) {\n            this.initVerificationSteps()\n        }\n        this.callProfileDetail();\n    }\n    /**\n    * @description method to display profile detail of user\n    */\n    callProfileDetail() {\n        \n        \n        \n        \n        getUserProfile().then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                profileData = { data: responseJson.data, date: Date.now() };\n                this.parseProfileData(responseJson.data);\n            }\n        })\n        \n    }\n    parseProfileData(data) {\n        ls.set('profile', data)\n        this.setState({\n            profileDetail: data,\n            accVerified: this.isAccountVerified(data)\n        }, () => {\n            this.initVerificationSteps();\n            this.showPlayingExperience();\n        })\n    }\n\n    showPlayingExperience() {\n        if (expData && Utilities.minuteDiffValue(expData) < 1) {\n            this.parseExpData(expData.data)\n        } else {\n            playingExperience().then((responseJson) => {\n                if (responseJson && responseJson.response_code == WSC.successCode) {\n                    expData = { data: responseJson.data, date: Date.now() };\n                    this.parseExpData(responseJson.data)\n                }\n            })\n        }\n    }\n    parseExpData(playingExpdata) {\n        this.setState({\n            playingExpdata: [\n                {\n                    'icon': 'icon-badge',\n                    'count': playingExpdata.won_contest,\n                    'count_for': AppLabels.CONTEST_WON\n                },\n                {\n                    'icon': 'icon-tickets',\n                    'count': playingExpdata.total_contest,\n                    'count_for': AppLabels.TOTAL_CONTESTS\n                },\n                {\n                    'icon': 'icon-vs-ic',\n                    'count': playingExpdata.match_counts,\n                    'count_for': AppLabels.MATCHES\n                },\n                {\n                    'icon': 'icon-trophy2-ic',\n                    'count': playingExpdata.league_counts,\n                    'count_for': AppLabels.SERIES\n                }\n            ],\n        })\n    }\n\n    initVerificationSteps() {\n\n        let mVerificationSteps = [];\n\n        if (Utilities.getMasterData().login_flow == 0) {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.MOBILE,\n                    'status': 1,\n                    'icon': Images.MOBILE_ICON,\n                    'image': '',\n                })\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.EMAIL,\n                    'status': this.state.profileDetail.email_verified,\n                    'icon': Images.EMAIL_ICON,\n                    'image': '',\n\n                })\n        }\n        else {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.EMAIL,\n                    'status': 1,\n                    'icon': Images.EMAIL_ICON,\n                    'image': '',\n                })\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.MOBILE,\n                    'status': this.state.profileDetail.phone_verfied,\n                    'icon': Images.MOBILE_ICON,\n                    'image': '',\n                })\n        }\n        if (Utilities.getMasterData().allow_pan_flow == 1) {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.replace_PANTOID(AppLabels.PAN),\n                    'status': this.state.profileDetail.pan_verified,\n                    'icon': Images.PAN_ICON,\n                    'image': this.state.profileDetail.pan_image,\n\n                })\n        }\n        if (Utilities.getMasterData().allow_bank_flow == 1) {\n            mVerificationSteps.push(\n                {\n                    'name': AppLabels.BANK,\n                    'status': this.state.profileDetail.is_bank_verified,\n                    'icon': Images.BANK_ICON,\n                    'image': this.state.profileDetail.user_bank_detail ? this.state.profileDetail.user_bank_detail.bank_document : '',\n                })\n        }\n        this.setState({ verificationSteps: mVerificationSteps })\n    }\n\n    /**\n     * @description method to display user profile quick view\n     */\n    ProfileModalShow = () => {\n        this.setState({\n            showProfileQuickView: true,\n        });\n    }\n    /**\n     * @description method to hide user profile quick view\n     */\n    ProfileModalHide = () => {\n        this.setState({\n            showProfileQuickView: false,\n        });\n    }\n\n    /**\n     * @description method to display input edit modal\n     */\n    PromoCodeShow = () => {\n        this.setState({\n            showPromoCode: true,\n        });\n    }\n    /**\n     * @description method to hide input edit modal\n     */\n    PromoCodeHide = () => {\n        this.setState({\n            showPromoCode: false,\n        });\n    }\n\n    /**\n     * @description method to display username edit modal\n     */\n    EditUserNameModalShow = () => {\n        this.setState({\n            showEditUserNameModal: true,\n        });\n    }\n    /**\n     * @description method to hide username edit modal\n     */\n    EditUserNameModalHide = () => {\n        this.setState({\n            showEditUserNameModal: false,\n            profileDetail: ls.get('profile'),\n        })\n    }\n\n    /**\n     * @description method to display mobile no edit modal\n     */\n    EditMobileModalShow = () => {\n        this.setState({\n            showEditMobileModal: true,\n        });\n    }\n    /**\n     * @description method to hide mobile no edit modal\n     */\n    EditMobileModalHide = () => {\n        this.setState({\n            showEditMobileModal: false,\n        });\n        this.callProfileDetail();\n    }\n\n    /**\n     * @description method to display email edit modal\n     */\n    EditEmailModalShow = () => {\n        this.setState({\n            showEditEmailModal: true,\n        });\n    }\n    /**\n     * @description method to hide email edit modal\n     */\n    EditEmailModalHide = () => {\n        this.setState({\n            showEditEmailModal: false,\n        });\n        this.callProfileDetail();\n    }\n    /**\n     * @description method to open edit profile page\n     */\n    openEditProfile() {\n        this.props.history.push({ pathname: '/edit-profile' })\n    }\n    /**\n     * @description method to open edit profile page\n     */\n    goToVerifyAccount() {\n        this.props.history.push({\n            pathname: '/verify-account',\n            state: {\n                email_verified: this.state.profileDetail.email_verified,\n                phone_verfied: this.state.profileDetail.phone_verfied,\n                pan_verified: this.state.profileDetail.pan_verified,\n                is_bank_verified: this.state.profileDetail.is_bank_verified\n            }\n        })\n    }\n\n    render() {\n        const {\n            showProfileQuickView,\n            showPromoCode,\n            showEditUserNameModal,\n            showEditMobileModal,\n            showEditEmailModal,\n            profileDetail\n        } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"profile-section profile-view-section\">\n                        {\n                            // !isFooterTab('my-profile') &&\n                            <CustomHeader {...this.props} HeaderOption={{\n                                back: !isFooterTab('my-profile') ? true : false,\n                                isPrimary: true,\n                                notification: isFooterTab('my-profile') ? true : false,\n                                // NoLogo: ''\n                            }} />\n                        }\n                        <UserProfileHeader {...this.props}\n                            UserProfileDetail={profileDetail}\n                            IsProfileVerifyShow={true}\n                            IsImgEditable={true}\n                            EditUserNameModalShow={() => this.EditUserNameModalShow()}\n                            goToVerifyAccount={() => this.goToVerifyAccount()}\n                            StepList={this.state.verificationSteps}\n                            accVerified={this.state.accVerified}\n                        />\n\n                        {profileDetail !== '' &&\n                            <div className=\"profile-body\">\n                                {this.state.playingExpdata &&\n                                    <div className=\"section-header\">{AppLabels.PLAYING_EXPERIENCE}</div>\n                                }\n                                <div className=\"playing-exp-block\">\n                                    <div className=\"playing-exp-content\">\n                                        <Row>\n                                            {\n                                                _Map(this.state.playingExpdata, (item, index) => {\n                                                    return (\n                                                        <Col key={index} sm={6} xs={6}>\n                                                            <DataCountBlock item={item} key={index} onClick={() => ''} countInt={true} />\n                                                        </Col>\n                                                    )\n                                                })\n                                            }\n                                        </Row>\n                                    </div>\n                                </div>\n                                <div className=\"section-header\">{AppLabels.PRIMARY_INFO}</div>\n                                <div className=\"primary-info-section\">\n                                    <div className=\"editable-info\">\n                                        <div className=\"info-label\">{AppLabels.MOBILE}</div>\n                                        <div className=\"info-value\">\n                                            {\n                                                !profileDetail.phone_no ? '--' : \n                                            '+' + profileDetail.phone_code + ' ' + profileDetail.phone_no\n                                            }\n                                            <a href id=\"mobileEdit\" onClick={() => this.EditMobileModalShow()}><i className=\"icon-edit\"></i></a>\n                                        </div>\n                                    </div>\n                                    <div className=\"editable-info\">\n                                        <div className=\"info-label\">{AppLabels.EMAIL}</div>\n                                        <div className=\"info-value\">\n                                            {profileDetail.email}\n                                            <a href id=\"emailEdit\" onClick={() => this.EditEmailModalShow()}><i className=\"icon-edit\"></i></a>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"section-header\">{AppLabels.BASIC_INFO}</div>\n                                <div className=\"user-basic-info-section\">\n                                    <a href id=\"basicInfoEdit\" className=\"basic-info-edit\" onClick={() => this.openEditProfile()}>\n                                        <i className=\"icon-edit\"></i>\n                                    </a>\n                                    <div className=\"display-table\">\n                                        <div className=\"editable-info\">\n                                            <div className=\"info-label\">{AppLabels.DOB}</div>\n                                            <div className=\"info-value\">\n                                                {profileDetail.dob ?\n                                                    <MomentDateComponent data={{ date: profileDetail.dob, format: \"MMM DD, YYYY\" }} /> :\n                                                    <span>--</span>\n                                                }\n                                            </div>\n                                        </div>\n                                        <div className=\"editable-info\">\n                                            <div className=\"info-label\">{AppLabels.GENDER}</div>\n                                            <div className=\"info-value text-capitalize\">\n                                                {profileDetail.gender || <span>--</span>}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"display-table\">\n                                        <div className=\"editable-info\">\n                                            <div className=\"info-label\">{AppLabels.SETREET_ADDRESS}</div>\n                                            <div className=\"info-value\">\n                                                {profileDetail.address || <span>--</span>}\n                                            </div>\n                                        </div>\n                                        <div className=\"editable-info\">\n                                            <div className=\"info-label\">{AppLabels.COUNTRY}</div>\n                                            <div className=\"info-value\">\n                                                {profileDetail.country_name || <span>--</span>}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"display-table\">\n                                        <div className=\"editable-info\">\n                                            <div className=\"info-label\">{AppLabels.STATE}</div>\n                                            <div className=\"info-value\">\n                                                {profileDetail.state_name || <span>--</span>}\n                                            </div>\n                                        </div>\n                                        <div className=\"editable-info\">\n                                            <div className=\"info-label\">{AppLabels.CITY}</div>\n                                            <div className=\"info-value\">\n                                                {profileDetail.city || <span>--</span>}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        {\n                            showProfileQuickView &&\n                            <ProfileQuickView\n                                IsProfileModalShow={showProfileQuickView}\n                                IsProfileModalHide={this.ProfileModalHide}\n                            />\n                        }\n                        {\n                            showPromoCode &&\n                            <ApplyPromoCode\n                                IsPromoCodeShow={showPromoCode}\n                                IsPromoCodeHide={this.PromoCodeHide}\n                            />\n                        }\n                        {\n                            showEditUserNameModal &&\n                            <EditUserNameModal\n                                IsEditUserNameShow={showEditUserNameModal}\n                                IsEditUserNameHide={this.EditUserNameModalHide}\n                            />\n                        }\n                        {\n                            showEditMobileModal &&\n                            <EditMobileModal\n                                IsEditMobileShow={showEditMobileModal}\n                                IsEditMobileHide={this.EditMobileModalHide}\n                                onHide={() => this.setState({\n                                    showEditMobileModal: false,\n                                })}\n                            />\n                        }\n                        {\n                            showEditEmailModal &&\n                            <EditEmailModal\n                                {...this.props}\n                                IsEditEmailShow={showEditEmailModal}\n                                IsEditEmailHide={this.EditEmailModalHide}\n                                email={profileDetail.email}\n                                isVerifyMode={false}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Modals/index.js",[],"/var/www/html/framework/frontend/src/Component/CoinsModule/index.js",[],"/var/www/html/framework/frontend/src/Component/SportsHub/index.js",[],"/var/www/html/framework/frontend/src/Component/FreeToPlayModule/index.js",["2162"],"import FreeToPlayLobby from \"./FreeToPlayLobby\";\nimport FreeToPlayFixtureContest from \"./FreeToPlayFixtureContest\";\nimport FreeToPlayList from './FreeToPlayList';\nimport AllPrizes from './AllPrizes';\nimport PrizeSection from './PrizeSection';\nimport HallofFameModal from './HallofFameModal'\nimport AllLeagueList from './AllLeagueList'\nimport CompletedLeagueList from './CompletedLeagueList'\nimport LeagueDetails from './LeagueDetails'\nimport LeaderBoardFreeToPlay from './LeaderBoardFreeToPlay'\nimport UserLeaguePoints   from './UserLeaguePoints'\nimport LandingFreeToPlay from './LandingFreeToPlay'\n\n\nexport {\n    FreeToPlayLobby,\n    FreeToPlayFixtureContest,\n     FreeToPlayList, \n     AllPrizes,\n     LeagueDetails,\n     CompletedLeagueList,\n     LeaderBoardFreeToPlay,\n     HallofFameModal,\n     UserLeaguePoints,\n     PrizeSection,\n     LandingFreeToPlay\n};","/var/www/html/framework/frontend/src/Component/MultiGameModule/index.js",[],"/var/www/html/framework/frontend/src/views/More/index.js",[],"/var/www/html/framework/frontend/src/Component/MyContest/index.js",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ConfirmOpenPredictor.jsx",["2163","2164","2165","2166","2167"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Modal, FormGroup } from 'react-bootstrap';\nimport { inputStyleLeft } from '../../helper/input-style';\nimport { makeOpenPrediction, getUserBalance } from '../../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _handleWKeyDown } from '../../Utilities/Utilities';\nimport FloatingLabel from 'floating-label-react';\nimport Skeleton from 'react-loading-skeleton';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport CustomHeader from '../../components/CustomHeader';\n\nclass ConfirmOpenPredictor extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            bidAmount: '',\n            minCoin: parseInt(Utilities.getMasterData().min_bet_coins || 10),\n            isLoading: false,\n            point_balance: WSManager.getBalance().point_balance || 0\n        }\n    }\n\n    componentWillMount() {\n        document.addEventListener(\"keydown\", _handleWKeyDown, false);\n        getUserBalance().then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    point_balance: responseJson.data.user_balance.point_balance || 0\n                })\n                WSManager.setAllowedBonusPercantage(responseJson.data.allowed_bonus_percantage)\n                WSManager.setBalance(responseJson.data.user_balance);\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", _handleWKeyDown);\n    }\n\n    onChange = (e) => {\n        this.setState({ bidAmount: e.target.value })\n    }\n\n    timerCompletionCall = () => {\n    }\n\n    submitPrediction = () => {\n        const { mHide, cpData, successAction } = this.props.preData;\n        let preBal = parseInt(this.state.point_balance);\n        let bidAmount = cpData.entry_type == 0 ? parseInt(this.state.bidAmount) : parseInt(cpData.entry_fee);\n        let updatedBal = preBal - bidAmount;\n        let param = {\n            \"prediction_master_id\": cpData.prediction_master_id,\n            \"prediction_option_id\": cpData.option_predicted.prediction_option_id,\n            \"bet_coins\": bidAmount\n        }\n        this.setState({ isLoading: true })\n        makeOpenPrediction(param).then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                CustomHeader.updateCoinBalance(updatedBal);\n                let bal = WSManager.getBalance();\n                bal[\"point_balance\"] = updatedBal;\n                WSManager.setBalance(bal);\n                Utilities.showToast(responseJson.message, 3000, Images.PREDICTION_IC);\n                successAction(cpData);\n                this.setState({\n                    isLoading: false\n                }, () => {\n                    mHide();\n                });\n            } else {\n                this.setState({ isLoading: false })\n            }\n        })\n    }\n\n    clickEarnCoins = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push(\"/earn-coins\")\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    render() {\n\n        const { mShow, mHide, cpData } = this.props.preData;\n        const { bidAmount, minCoin, isLoading, point_balance } = this.state;\n\n        let game_starts_in = cpData.deadline_time / 1000;\n        let coin_bal = parseInt(point_balance || 0);\n        let isBtnEnbl = cpData.entry_type == 1 ? (cpData.entry_fee <= coin_bal) : (bidAmount >= minCoin && bidAmount <= coin_bal);\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"modal-pred-confirm\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Body>\n                            <div className=\"container\">\n                                <p className=\"title-pp\">{AL.PLACE_PRE}</p>\n                                <p className=\"desc-pp\">{AL.PRE_MSG}</p>\n                                <div className=\"your-pre\">\n                                    <div className=\"shimmer-v\"><Skeleton duration={2} width={'100%'} height={'100%'} /></div>\n\n                                    <span>{AL.YOUR_PRE}</span>\n                                    <span className=\"option\">{cpData.option_predicted.option}</span>\n                                    {\n                                        <div className=\"match-timing\">\n                                            {\n                                                Utilities.showCountDown({ game_starts_in: game_starts_in })\n                                                    ?\n                                                    <div className=\"countdown time-line\">\n                                                        {\n                                                            game_starts_in && <CountdownTimer\n                                                                timerCallback={this.timerCompletionCall}\n                                                                deadlineTimeStamp={game_starts_in} />\n                                                        }\n                                                    </div>\n                                                    :\n                                                    <span>\n                                                        <MomentDateComponent data={{ date: cpData.deadline_date, format: \"D MMM - hh:mm A \" }} />\n                                                    </span>\n                                            }\n                                        </div>\n                                    }\n                                </div>\n                                {\n                                    cpData.entry_type == 0 &&\n                                    <FormGroup\n                                        className='input-label-center input-transparent'\n                                        controlId=\"formBasicText\"\n                                    >\n                                        <FloatingLabel\n                                            autoComplete='off'\n                                            styles={inputStyleLeft}\n                                            id='amont'\n                                            name='amont'\n                                            value={bidAmount}\n                                            placeholder={`${AL.ENTER_COINS} (${AL.MIN} ${minCoin} ${AL.coins})`}\n                                            type='text'\n                                            maxLength={5}\n                                            onChange={this.onChange}\n                                        />\n                                    </FormGroup>\n                                }\n                                {\n                                    cpData.entry_type == 1 &&\n                                    <div className=\"prediction-fee-section\">\n                                        <div className=\"wrap\">\n                                            <div className=\"label\">{AL.ENTRY_FEE}</div>\n                                            {\n                                                cpData.entry_fee > 0 && <div className=\"value\">\n                                                    <img src={Images.IC_COIN} alt=\"\" />\n                                                    {cpData.entry_fee}\n                                                </div>\n                                            }\n                                            {\n                                                cpData.entry_fee <= 0 && <div className=\"value\">\n                                                    {AL.FREE}\n                                                </div>\n                                            }\n                                        </div>\n                                        <div className=\"wrap\">\n                                            <div className=\"label\">{AL.WINNING}</div>\n                                            <div className=\"value\">\n                                                <img src={Images.IC_COIN} alt=\"\" />\n                                                {cpData.win_prize}\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                                <div className=\"available-bal\"><span>{AL.AVAIL_BAL}</span><span className=\"bal\"><img src={Images.IC_COIN} alt=\"\" />{coin_bal}</span></div>\n                                {\n                                    (coin_bal < minCoin || coin_bal < bidAmount || (cpData.entry_type == 1 && coin_bal < cpData.entry_fee)) && <span className=\"no-coins-msg\">\n                                        {AL.NO_COINS_MSG}<a href onClick={this.clickEarnCoins}>{AL.EARN_COINS.toLowerCase()}</a>\n                                    </span>\n                                }\n                            </div>\n                            <button onClick={this.submitPrediction} className={\"btn btn-m-p\" + ((isBtnEnbl && !isLoading) ? '' : ' disabled')}>{AL.MAKE_PRE}</button>\n                        </Modal.Body>\n                    </Modal>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default ConfirmOpenPredictor;","/var/www/html/framework/frontend/src/Component/PredictionModule/index.js",[],"/var/www/html/framework/frontend/src/Component/PredictionModule/SharePModal.jsx",["2168","2169"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { FacebookShareButton, WhatsappShareButton, EmailShareButton } from 'react-share';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport WSManager from '../../WSHelper/WSManager';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nclass SharePModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            spData: this.props.preData.spData,\n            shareURL: '',\n            shareText: AL.Your_Friend + ' ' + WSManager.getProfile().user_name + ' ' + AL.has_referred_you_on + ' ' + WSC.AppName + \", \" + AL.please_join_and_earn_prizes_text + \" : \\n\\n\"\n        };\n    }\n\n    componentDidMount() {\n        this.createAndSetUrls();\n    }\n\n    createAndSetUrls() {\n        let season_game_uid = this.state.spData.season_game_uid;\n        let prediction_master_id = this.state.spData.prediction_master_id;\n        let mURL = WSC.baseURL + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/prediction-details/\" + season_game_uid + '/' + btoa(prediction_master_id);\n        let refCode = WSManager.getUserReferralCode();\n        let shareURL = mURL + (refCode ? (\"?referral=\" + refCode) : '');\n        this.setState({ shareURL: shareURL });\n    }\n\n    onCopyLink = () => {\n        this.showCopyToast(AL.Link_has_been_copied);\n    }\n\n    showCopyToast = (message) => {\n        Utilities.showToast(message, 2000)\n    }\n\n\n    callNativeShare(type, url, detail) {\n        let data = {\n            action: 'social_sharing',\n            targetFunc: 'social_sharing',\n            type: type,\n            url: url,\n            detail: detail\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    getEmailShareContent() {\n        if (window.ReactNativeWebView) {\n            if (this.state.shareURL != '') {\n                let shareLink = WSManager.getIsIOSApp() ? this.state.shareURL :  encodeURIComponent(this.state.shareURL);\n                let shareText = this.state.shareText + shareLink + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                return shareText\n            }\n            return ''\n        }\n        else {\n            let shareText = this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n            return shareText\n        }\n    }\n\n    render() {\n\n        const { mShow, mHide } = this.props.preData;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"custom-modal thank-you-modal\"\n                        className=\"center-modal\"\n                    >\n\n                        <div className=\"social-linking\">\n                            <div className=\"link-heading\">{AL.INVITE_YOUR_FRIENDS_VIA}</div>\n                            <ul className=\"social-icons\">\n                                <li>\n                                    <CopyToClipboard onCopy={this.onCopyLink} text={this.state.shareURL} className=\"social-circle icon-link\">\n                                        <i className=\"icon-link\"></i>\n                                    </CopyToClipboard>\n                                    <label>{AL.INVITE_LINK}</label>\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-facebook\" onClick={() => this.callNativeShare('facebook', this.state.shareURL, this.state.shareText + this.state.shareURL + + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_FB}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <FacebookShareButton className=\"social-circle icon-facebook\" url={this.state.shareURL} quote={this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName}\n                                            />\n                                            <label>{AL.INVITE_FB}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-whatsapp\" onClick={() => this.callNativeShare('whatsapp', this.state.shareURL, this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <WhatsappShareButton className=\"social-circle icon-whatsapp\"\n                                                url={\n                                                    this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                                                } />\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                                \n                            </ul>\n                        </div>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default SharePModal;","/var/www/html/framework/frontend/src/Component/PredictionModule/ConfirmPrediction.jsx",[],"/var/www/html/framework/frontend/src/Modals/DownloadAppModal.jsx",["2170","2171"],"import React from 'react';\nimport { Row, Col, Checkbox, Modal, FormGroup } from 'react-bootstrap';\nimport { NavLink } from \"react-router-dom\";\nimport { getAppStoreLink } from '../WSHelper/WSCallings';\nimport { CustomPhoneInput } from '../Component/CustomComponent';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { DEFAULT_COUNTRY_CODE } from '../helper/Constants';\nimport { ReCaptcha } from 'react-recaptcha-v3';\n\nexport default class DownloadAppModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: DEFAULT_COUNTRY_CODE,\n            smsChecked: false,\n            posting: false,\n            captchaToken: ''\n        }\n    }\n\n    onCaptchaChange = (value) => {\n        this.setState({\n            captchaToken: value\n        })\n    }\n\n    callDownloadAppApi() {\n        setTimeout(() => {\n            let phone_code_str = \"+\" + this.state.code;\n            let phone_no = this.state.phone.replace(phone_code_str, \"\");\n            let param = {\n                \"phone_no\": phone_no,\n                \"phone_code\": this.state.code\n            }\n            if (process.env.REACT_APP_CAPTCHA_ENABLE == 1) {\n                param['token'] = this.state.captchaToken;\n            }\n            getAppStoreLink(param).then((responseJson) => {\n                if (responseJson.response_code === WSC.successCode) {\n                    this.closePopup()\n                }\n            })\n        }, 200);\n    }\n\n    closePopup = () => {\n        this.setState({ phone: '', smsChecked: false }, () => {\n            this.props.handleClose();\n        })\n    }\n\n    handleOnChange = (value, data) => {\n        this.setState({ code: data.dialCode, phone: value })\n    }\n\n    render() {\n        let { show } = this.props;\n        return (\n            <Modal show={show} onHide={this.closePopup} backdropClassName=\"modal-download-app\" className=\"modal-download-app-dialog\">\n                {\n                            process.env.REACT_APP_CAPTCHA_ENABLE == 1 && !this.state.posting && <ReCaptcha\n                                sitekey={process.env.REACT_APP_CAPTCHA_SITEKEY}\n                                verifyCallback={this.onCaptchaChange}\n                            />\n                        }\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {AppLabels.DOWNLOAD_APP}\n                    </Modal.Title>\n                </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"download-app-body text-center\">\n                            <Row>\n                                <Col xs={12}>\n                                    <FormGroup>\n                                        <CustomPhoneInput\n                                            {...this.props}\n                                            phone={this.state.phone}\n                                            handleOnChange={this.handleOnChange} />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n\n                            <div className=\"text-small m-t-20 sms-checkbox\">\n                                <FormGroup>\n                                    <Checkbox className=\"custom-checkbox\" value=\"\"\n                                        onClick={() => this.setState({\n                                            smsChecked: !this.state.smsChecked\n                                        })}\n                                        name=\"all_leagues\" id=\"all_leagues\">\n                                        <span className=\"auth-txt sm\">\n                                            <NavLink\n                                                target='_blank'\n                                                exact to=\"/terms-condition\">{AppLabels.TERMS_CONDITION}</NavLink>\n                                        </span>\n                                    </Checkbox>\n                                </FormGroup>\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button className={\"btn btn-primary\" + (!this.state.smsChecked || !this.state.phone ? ' click-disabled' : '')}\n                            onClick={() => this.callDownloadAppApi()}>{AppLabels.GET_LINK_NOW}</button>\n                    </Modal.Footer>\n            </Modal>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionCard.jsx",["2172","2173","2174","2175","2176","2177","2178","2179","2180","2181","2182","2183","2184","2185","2186","2187","2188","2189"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { CONTESTS_LIST, CONTEST_COMPLETED, CONTEST_LIVE } from '../../helper/Constants';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Images from '../../components/images';\nimport * as AL from \"../../helper/AppLabels\";\n\nclass PredictionCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n        }\n    }\n\n    onPredictionSelect = (itemIndex, idx, opt) => {\n        const { item, onSelectPredict, onMakePrediction } = this.props.data;\n        onSelectPredict(itemIndex, idx, opt);\n        setTimeout(() => {\n            onMakePrediction(item)\n        }, 50);\n    }\n\n    renderFilledBar = (opt, idx) => {\n        const { item, status, itemIndex } = this.props.data;\n        let predictedPer = item.total_predictions == 0 ? 0 : ((opt.option_total_coins / item.total_pool) * 100).toFixed(2);\n        let isOptSelected = (opt.user_selected_option == opt.prediction_option_id);\n        let userCorrect = (isOptSelected && opt.is_correct == 1);\n        let isCompleted = (status === CONTEST_COMPLETED);\n        return (\n            <React.Fragment key={idx}>\n                <div onClick={() => (status == CONTESTS_LIST && this.onPredictionSelect(itemIndex, idx, opt))} className={\n                    \"prediction-bar\" + (isOptSelected ? ' selected' : '') +\n                    ((status != CONTESTS_LIST && !isCompleted && isOptSelected) ? ' mb-1' : '') +\n                    (isCompleted ? (userCorrect ? ' success' : (isOptSelected ? ' failure' : '')) : '')\n                }>\n                    <div className=\"filled-bar\" style={{ width: predictedPer + '%', animationDelay: (0.05 * idx) + 's' }} />\n                    <p className=\"answer\">{opt.option}</p>\n                    <div className=\"corrected-ans\">\n                        {\n                            isCompleted && <React.Fragment>\n                                {opt.is_correct == 1 && !isOptSelected && <span>{AL.CORRECT_ANS}</span>}\n                                {isOptSelected && <i className={userCorrect ? \"icon-tick\" : \"icon-close\"} />}\n                            </React.Fragment>\n                        }\n                        <p>{predictedPer > 0 ? (predictedPer + '%') : ''}</p>\n                    </div>\n                </div>\n                {\n                    (status != CONTESTS_LIST && !isCompleted && isOptSelected) && <div className=\"estimate-win\">\n                        <p className=\"est-price-pool\"><img src={Images.IC_COIN} alt=\"\" /><span className=\"value\">\n                            {Utilities.kFormatter(item.estimated_winning)}</span> {AL.EST_WIN}\n                            <OverlayTrigger trigger={['hover', 'focus']} placement={'bottom'} overlay={\n                                <Tooltip id=\"tooltip\">\n                                    <strong>{AL.EST_WIN_FORMULA}</strong>\n                                </Tooltip>\n                            }>\n                                <i className=\"icon-info\" />\n                            </OverlayTrigger>\n                        </p>\n                    </div>\n                }\n            </React.Fragment>\n        )\n    }\n\n    viewParticipants = () => {\n        const { item, status } = this.props.data;\n        let prediction_master_id = item.prediction_master_id;\n        let mURL = Utilities.getSelectedSportsForUrl().toLowerCase() + \"/prediction/participants/\" + btoa(prediction_master_id);\n        let isLiveCom = ((status == CONTEST_COMPLETED) || (status == CONTEST_LIVE));\n        this.props.history.push({ pathname: '/' + mURL, state: { isLeader: isLiveCom } });\n    }\n\n    render() {\n        const { item, status, timerCallback, onMakePrediction, shareContest } = this.props.data;\n        let game_starts_in = item.deadline_time / 1000;\n        let betCoin = 0;\n        let isCompleted = (status == CONTEST_COMPLETED);\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <li key={item.prediction_master_id + item.season_game_uid} className={parseInt(item.is_pin) != 0 ? ' pinned':''}>\n                        {status == CONTESTS_LIST && <i onClick={(e) => shareContest(e, item)} className=\"icon-share\" />}\n                        {\n                            parseInt(item.is_pin) != 0 && <div className=\"contest-pin\">\n                                 <img src={Images.pinned_ic} alt=\"\" />\n                            </div>\n                        }\n                        <p className=\"questions\">{item.desc}</p>\n                        {\n                            _Map(item.option, (opt, idx) => {\n                                betCoin = (opt.user_selected_option == opt.prediction_option_id) ? opt.bet_coins : betCoin\n                                return this.renderFilledBar(opt, idx);\n                            })\n                        }\n                        {\n                            status == CONTESTS_LIST && <div className=\"footer-vc\">\n                                <div>\n                                    <div className=\"date-v new-fc\">\n                                        <div className=\"match-timing\">\n                                            {\n                                                Utilities.showCountDown({ game_starts_in: game_starts_in }) ?\n                                                    <span className=\"d-flex\">\n                                                        <div className=\"countdown time-line\">\n                                                            {\n                                                                game_starts_in && <CountdownTimer timerCallback={timerCallback} deadlineTimeStamp={game_starts_in} />\n                                                            }\n                                                        </div>\n                                                    {AL.REMAINING}\n                                                    </span> :\n                                                    <span> <MomentDateComponent data={{ date: item.deadline_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                            }\n                                            \n                                        </div>\n                                    </div>\n                                </div>\n                                {\n                                    item.prize_pool > 0 && <p className=\"price-pool\"><span className=\"price-pool-first\">{AL.WIN}</span><img src={Images.IC_COIN} alt=\"\" />{item.prize_pool}</p>\n                                }\n                                {\n                                    item.prize_pool == 0 && <p className=\"price-pool-first\">{AL.BE_FIRST}</p>\n                                }\n\n                            </div>\n                        }\n                        {\n                            status != CONTESTS_LIST && <div className=\"footer-vc\">\n                                <div>\n                                    <p className=\"price-pool\">{AL.WIN}<img src={Images.IC_COIN} alt=\"\" />{item.prize_pool}</p>\n                                    <div className=\"date-v\">\n                                        <span onClick={this.viewParticipants} className=\"match-timing view-part\">{item.total_predictions} {AL.PREDICTED}</span>\n                                    </div>\n                                </div>\n                                <div className=\"price-container\">\n                                    {\n                                        isCompleted && item.win_coins > 0 && <div className=\"my-pre-date won\">\n                                            <p className=\"price-pool\"><img src={Images.IC_COIN} alt=\"\" />{item.win_coins || 0}</p>\n                                            <div className=\"date-v\">\n                                                <span className=\"match-timing view-part\">{AL.WON}</span>\n                                            </div>\n                                        </div>\n                                    }\n                                    <div className=\"my-pre-date\">\n                                        <p className=\"price-pool\"><img src={Images.IC_COIN} alt=\"\" />{betCoin}</p>\n                                        <div className=\"date-v\">\n                                            <span className=\"match-timing view-part\">{AL.YOUR_BET}</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                    </li>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default PredictionCard;","/var/www/html/framework/frontend/src/components/filter.jsx",["2190","2191","2192","2193","2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204","2205","2206","2207","2208","2209","2210","2211","2212","2213","2214","2215","2216","2217","2218","2219","2220","2221","2222","2223"],"import React, { } from 'react';\nimport { FormGroup, Button, Checkbox, Tabs, Tab } from 'react-bootstrap';\nimport SlidingPane from 'react-sliding-pane';\nimport WSManager from '../WSHelper/WSManager';\nimport Modal from 'react-modal';\nimport {getFilterData} from \"../WSHelper/WSCallings\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { _isEmpty } from \"../Utilities/Utilities\";\nimport { MyContext } from './../InitialSetup/MyProvider';\nimport 'react-sliding-pane/dist/react-sliding-pane.css';\nimport { Range } from 'rc-slider';\nimport { AppSelectedSport } from '../helper/Constants';\nimport CustomHeader from \"../components/CustomHeader\";\nimport { Sports } from \"../JsonFiles\";\nimport * as Constants from \"../helper/Constants\";\n\n\nvar globalThis = null;\nvar filterData = {};\nexport default class Filter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.state = {\n            isPaneOpen: false,\n            isPaneOpenLeft: false,\n            isPaneOpenBottom: true,\n            checkbox: false,\n            isFilterselected: this.props.isFilterselected || false,\n            key: 1,\n            leagueList: this.props.leagueList ? this.props.leagueList : [],\n            f_league_id: [],\n            dataFor: this.props.filterDataBy || '',\n            MPCat: this.props.filterByCat || '',\n            selectedFSport: this.props.selectedFSport || '',\n            pickemSFilter: this.props.FitlerOptions.showPickLFitlers ? this.props.selectedFilter.league_id : '',\n            pickemLFT: this.props.FitlerOptions.showPickLFitlers ? this.props.selectedFilter.feed_type : '',\n            contestListFilterObj: {\n                entryFee: { master_min: 0, master_max: 1000, min: 0, max: 1000 },\n                winnings: { master_min: 0, master_max: 1000, min: 0, max: 1000 },\n                entries: { master_min: 0, master_max: 1000, min: 0, max: 1000 }\n            }\n\n        };\n    }\n\n    handleSelect(key) {\n        this.setState({ key });\n    }\n\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.name]: !JSON.parse(e.target.value)\n        });\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.leagueList != undefined && nextProps.leagueList != this.state.f_league_id){\n            this.setState({f_league_id: nextProps.leagueList})\n        }     \n        if(nextProps.customLeagues != this.props.customLeagues){\n            this.parseFilterResponse({\n                league_list : nextProps.customLeagues || []\n            });\n        }               \n        if(this.state.dataFor != this.props.filterDataBy){\n            this.setState({\n                dataFor: this.props.filterDataBy,\n            });\n        }               \n        if(this.state.MPCat != this.props.filterByCat){\n            this.setState({\n                MPCat: this.props.filterByCat,\n            });\n        }               \n        if(this.state.selectedSport != this.props.selectedSport){\n            this.setState({\n                selectedSport: this.props.selectedSport,\n            });\n        }               \n        if(this.props.FitlerOptions.showPickLFitlers && this.state.pickemSFilter != this.props.selectedFilter.league_id){\n            this.setState({\n                pickemSFilter: this.props.selectedFilter.league_id,\n            });\n        }               \n    }\n\n    componentDidMount() {\n        this.setState({\n            isFilterselected:this.props.isFilterselected  || false\n        })\n        Modal.setAppElement(this.el);\n        globalThis = this;\n        let path = window.location.pathname;\n        if ((window.location.pathname == '/lobby' && Constants.SELECTED_GAMET != Constants.GameType.Pickem) || path.indexOf('/contest-listing')>0) {\n            this.getFilterMasterData();\n        }\n    }\n\n    static reloadLobbyFilter() {\n        globalThis.getFilterMasterData();\n    }\n\n    getFilterMasterData = async () => {\n        if(this.props.customLeagues){\n            this.parseFilterResponse({\n                league_list : this.props.customLeagues || []\n            });\n        }else{\n        let selectedSports = AppSelectedSport;\n        if (filterData[selectedSports]) {\n            this.parseFilterResponse(filterData[selectedSports]);\n        } else {\n            if (selectedSports) {\n                let param = {\n                    \"sports_id\": selectedSports\n                }\n                var api_response_data = await getFilterData(param);\n                 if (api_response_data) {\n                    filterData[selectedSports] = api_response_data;\n                    this.parseFilterResponse(api_response_data);\n                }\n            }\n        }\n    }\n    }\n\n    parseFilterResponse(resp) {\n        let previousObj = this.state.contestListFilterObj;\n        if(this.props.customLeagues && this.props.customLeagues.length>0){\n            this.setState({ leagueList: this.props.customLeagues });\n        } else{\n            this.setState({ leagueList: {} });\n        }\n        if (resp.league_list && resp.league_list.length > 0) {\n            this.setState({ leagueList: resp.league_list })\n        }\n\n        if (resp.winning && typeof resp.winning != 'undefined') {\n            previousObj.winnings.master_min = resp.winning.min;\n            previousObj.winnings.min = resp.winning.min;\n            previousObj.winnings.master_max = resp.winning.max;\n            previousObj.winnings.max = resp.winning.max;\n        }\n\n        if (resp.entry_fee && typeof resp.entry_fee != 'undefined') {\n            previousObj.entryFee.master_min = resp.entry_fee.min;\n            previousObj.entryFee.min = resp.entry_fee.min;\n            previousObj.entryFee.master_max = resp.entry_fee.max;\n            previousObj.entryFee.max = resp.entry_fee.max;\n        }\n\n        if (resp.entries && typeof resp.entries != 'undefined') {\n            previousObj.entries.master_min = resp.entries.min;\n            previousObj.entries.min = resp.entries.min;\n            previousObj.entries.master_max = resp.entries.max;\n            previousObj.entries.max = resp.entries.max;\n        }\n    }\n\n   \n\n    handleLobbyFilter = () => {\n        if(this.props.FitlerOptions.showLFitler || this.props.FitlerOptions.showMPFitler || this.props.FitlerOptions.showPickLFitlers || this.props.FitlerOptions.showHubFitlers){\n            this.setState({ isPaneOpenBottom: true });\n        }else{\n            this.setState({ isPaneOpenBottom: false });\n        }\n       this.props.hideFilter();\n      \n    }\n\n    LobbyFilterSelect = () => {\n        this.setState({ \n            isPaneOpenBottom: true,\n            isFilterselected: true \n        }, function () {            \n            let FilterObj = { league_id: this.state.f_league_id };\n            this.props.filterLobbyResults(FilterObj);\n            CustomHeader.changeFilter( (!_isEmpty(FilterObj.league_id) && typeof FilterObj.league_id != 'undefined') ? true : false,'');            \n        });\n    }\n    PickemLobbyFilterSelect = () => {\n        this.setState({ \n            isPaneOpenBottom: true,\n            isFilterselected: true \n        }, function () {\n            let filterBy = {\n                league_id : this.state.pickemSFilter,\n                feed_type: this.state.pickemLFT\n            };\n            this.props.filterByLeague(filterBy)     \n            CustomHeader.changeFilter(filterBy == '' ? false : true,'');            \n        });\n    }\n\n    LeaderboardFilterSelect=()=>{\n        this.setState({\n            isFilterselected: this.state.dataFor ? true : false,\n            isPaneOpenBottom:true\n        },()=>{\n            let filterBy = this.state.dataFor;\n            let showName = Constants.SELECTED_GAMET === Constants.GameType.Pickem ? filterBy.league_name : filterBy.name;\n            this.props.filterLeaderboard(filterBy);\n            CustomHeader.changeFilter(filterBy != '' ? true : false, showName);\n        })\n    }\n    MPFilterSelect=()=>{\n        this.setState({\n            isPaneOpenBottom:true,\n            isFilterselected: true\n        },()=>{\n            let filterBy = this.state.MPCat;\n            this.props.MPFilterSelect(filterBy);\n            CustomHeader.changeFilter(true,filterBy.category_name);\n        })\n    }\n    SportsFilterSelect=()=>{\n        this.setState({\n            isPaneOpenBottom:true,\n            isFilterselected: this.state.selectedFSport ? true : false\n        },()=>{\n            let filterBy = this.state.selectedFSport;\n            this.props.filterBySport(filterBy);\n            CustomHeader.changeFilter(filterBy == '' ? false : true,filterBy.sports_id);\n        })\n    }\n\n    ResetLobbyFilter = () => {\n        this.setState({ f_league_id: [] });\n        this.setState({ isPaneOpenBottom: true }, function () {\n\n            let selectFilterObj = { league_id: this.state.f_league_id };\n            this.props.filterLobbyResults(selectFilterObj);\n\n        });\n\n    }\n\n    ResetPickemLobbyFilter=()=>{\n        this.setState({\n            pickemSFilter: ''\n        });\n        this.setState({ isPaneOpenBottom: true }, function () {\n            let pickemSFilter = {\n                league_id : this.state.pickemSFilter,\n                feed_type : this.state.pickemLFT\n            } ;\n            this.props.filterByLeague(pickemSFilter);\n            CustomHeader.changeFilter(pickemSFilter == '' ? false : true,'');    \n        });\n    }\n\n    checkLobbyFilterOptions = (filterOption) => {\n        if (this.state.isPaneOpenBottom == false) {\n            if (typeof filterOption.filtered_league_id != 'undefined') {\n                this.setState({ f_league_id: filterOption.filtered_league_id != \"\" ? [].concat(filterOption.filtered_league_id) : [] });\n            }\n            this.setState({ isPaneOpenBottom: true });\n        }\n        return true;\n    }\n\n    handleLeagueSelect = (e) => {\n\n        let league_value = e.target.value;\n\n        let leagues = [].concat(this.state.f_league_id);\n\n        let index = leagues.indexOf(league_value);\n        if (index > -1) {\n            leagues.splice(index, 1);\n        }\n        else {\n            leagues.push(e.target.value);\n        }\n\n\n        this.setState({\n            f_league_id: leagues\n        });\n    }\n    handlePickemLeagueSelect = (value,feedType) => {\n        this.setState({\n            pickemSFilter: value,\n            pickemLFT: feedType,\n        });\n    }\n    handleTimeChange = (e) => {\n        this.setState({\n            dataFor: e\n        })\n    }\n    handleMPCategory = (e) => {\n        this.setState({\n            MPCat: e\n        })\n    }\n    handleSportChange = (e) => {\n        this.setState({\n            selectedFSport: e\n        })\n    }\n    \n\n    AllLeagueSelect = (e) => {\n        this.setState({\n            f_league_id: []\n        });\n    }\n   \n    handleContestListFilter = () => {\n        this.setState({ isPaneOpenBottom: false });\n        this.props.hideFilter();\n    }\n\n    ContestListFilterSelect = () => {\n        \n        this.setState({ \n            isPaneOpenBottom: true,\n            \n        }, function () {\n\n            let FilterObj = {\n                entry_fee_from: this.state.contestListFilterObj.entryFee.min,\n                entry_fee_to: this.state.contestListFilterObj.entryFee.max,\n                participants_from: this.state.contestListFilterObj.entries.min,\n                participants_to: this.state.contestListFilterObj.entries.max,\n                prizepool_from: this.state.contestListFilterObj.winnings.min,\n                prizepool_to: this.state.contestListFilterObj.winnings.max,\n                isApplied:true\n            };\n            this.props.filterContestList(FilterObj);\n\n        });\n\n    }\n\n    ResetContestListFilter = () => {\n\n        CustomHeader.changeFilter(false);\n        this.setState({ f_league_id: \"\",isFilterselected: false });\n        this.setState({ isPaneOpenBottom: true }, function () {\n\n            let previousObj = this.state.contestListFilterObj;\n            previousObj.entryFee.min = previousObj.entryFee.master_min;\n            previousObj.entryFee.max = previousObj.entryFee.master_max;\n\n            previousObj.winnings.min = previousObj.winnings.master_min;\n            previousObj.winnings.max = previousObj.winnings.master_max;\n\n            previousObj.entries.min = previousObj.entries.master_min;\n            previousObj.entries.max = previousObj.entries.master_max;\n\n            this.setState({ contestListFilterObj: previousObj }, function () {\n\n\n            });\n\n\n            let FilterObj = {\n                entry_fee_from: \"\",\n                entry_fee_to: \"\",\n                participants_from: \"\",\n                participants_to: \"\",\n                prizepool_from: \"\",\n                prizepool_to: \"\",\n                isReset:true\n            };\n            this.props.filterContestList(FilterObj);\n\n        });\n\n    }\n\n    checkContestFilterOptions = (filterOption) => {\n        if (this.state.isPaneOpenBottom == false) {\n            this.setState({ key: 1 });\n            let previousObj = this.state.contestListFilterObj;\n            previousObj.entryFee.min = (filterOption.entry_fee_from != \"\") ? filterOption.entry_fee_from : previousObj.entryFee.master_min;\n            previousObj.entryFee.max = (filterOption.entry_fee_to != \"\") ? filterOption.entry_fee_to : previousObj.entryFee.master_max;\n\n            previousObj.winnings.min = (filterOption.prizepool_from != \"\") ? filterOption.prizepool_from : previousObj.winnings.master_min;\n            previousObj.winnings.max = (filterOption.prizepool_to != \"\") ? filterOption.prizepool_to : previousObj.winnings.master_max;\n\n            previousObj.entries.min = (filterOption.participants_from != \"\") ? filterOption.participants_from : previousObj.entries.master_min;\n            previousObj.entries.max = (filterOption.participants_to != \"\") ? filterOption.participants_to : previousObj.entries.master_max;\n\n            this.setState({ contestListFilterObj: previousObj });\n            this.setState({ isPaneOpenBottom: true });\n        }\n        return true;\n    }\n\n    onWinningChange = (rangeValue) => {\n        if (rangeValue) {\n            let previousObj = this.state.contestListFilterObj;\n\n            previousObj.winnings.min = rangeValue[0];\n            previousObj.winnings.max = rangeValue[1];\n            this.setState({ contestListFilterObj: previousObj });\n        }\n    }\n\n    onEntryFeeChange = (rangeValue) => {\n        if (rangeValue) {\n            let previousObj = this.state.contestListFilterObj;\n\n            previousObj.entryFee.min = rangeValue[0];\n            previousObj.entryFee.max = rangeValue[1];\n            this.setState({ contestListFilterObj: previousObj });\n        }\n    }\n\n    onEntriesChange = (rangeValue) => {\n        if (rangeValue) {\n            let previousObj = this.state.contestListFilterObj;\n\n            previousObj.entries.min = rangeValue[0];\n            previousObj.entries.max = rangeValue[1];\n            this.setState({ contestListFilterObj: previousObj });\n        }\n    }\n   \n\n\n    render() {\n\n        const { leagueList, dataFor , MPCat, pickemSFilter, selectedFSport} = this.state;\n        const { FitlerOptions } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"filter-container \">\n                        <div ref={ref => this.el = ref}>\n                        {(FitlerOptions && FitlerOptions.showHubFitlers) && \n                                <React.Fragment>\n                                    <SlidingPane\n                                        isOpen={this.state.isPaneOpenBottom}\n                                        from='bottom'\n                                        width='100%'\n                                        overlayClassName={'filter-custom-overlay bottom-tab-height'}\n                                        onRequestClose={this.handleLobbyFilter}\n                                        >\n                                        <div className=\"filter-header shadow\">\n                                            {AppLabels.Filters}\n                                            <Button \n                                                className=\"done-btn active\" \n                                                onClick={this.SportsFilterSelect}\n                                            >\n                                                    {AppLabels.DONE}\n                                            </Button>\n                                        </div>\n                                        <div className=\"filter-body hub-filter\">\n                                            <ul className='pt10'>\n                                                <li className='pt10 pb10 pl15 pr15'>\n                                                    <FormGroup>\n                                                        <Checkbox className=\"custom-checkbox\" value=\"\" onChange={()=>this.handleSportChange('')} checked={selectedFSport == ''} name=\"all_leagues\" id=\"all_leagues\">\n                                                            <span>{AppLabels.ALL}</span>\n                                                        </Checkbox>\n                                                    </FormGroup>\n                                                </li>\n                                                {\n                                                    this.props.sportsList && this.props.sportsList.map((item, index) => { \n                                                        return (\n                                                            <li className='pt10 pb10 pl15 pr15 bottom-padding' key={\"leagueList\" + index}>\n                                                                <FormGroup>\n                                                                    <Checkbox className=\"custom-checkbox\" value={item.sports_id} onChange={()=>this.handleSportChange(item)}  \n                                                                    checked={selectedFSport && selectedFSport.sports_id == item.sports_id} name=\"lb-filter\" id={item.sports_id}>\n                                                                            <span>\n                                                                            {\n                                                                                Sports.url[item.sports_id + (WSManager.getAppLang() || '')]\n                                                                            }\n                                                                            </span>\n                                                                    </Checkbox>\n                                                                </FormGroup>\n                                                            </li>\n                                                        );\n                                                    })\n                                                }\n                                            </ul>\n                                        </div>\n                                    </SlidingPane>\n                                </React.Fragment>\n                            }\n                            {(Constants.SELECTED_GAMET != Constants.GameType.Pickem) && (FitlerOptions && FitlerOptions.showLobbyFitler) && this.checkLobbyFilterOptions(FitlerOptions) &&\n                                <React.Fragment>\n                                    <SlidingPane\n                                        isOpen={this.state.isPaneOpenBottom}\n                                        from='bottom'\n                                        width='100%'\n                                        overlayClassName={'filter-custom-overlay bottom-tab-height'}\n                                         onRequestClose={this.handleLobbyFilter}\n                                        >\n                                        <div className=\"filter-header shadow\">\n                                            <i className=\"icon-reload\" onClick={this.ResetLobbyFilter}></i>\n                                            {AppLabels.Filters}\n                                            <Button className=\"done-btn active\" onClick={this.LobbyFilterSelect}>{AppLabels.DONE}</Button>\n                                        </div>\n                                        <div className=\"filter-body\">\n\n\n                                            <ul className='pt10'>\n                                                <li className='pt10 pb10 pl15 pr15'>\n                                                    <FormGroup>\n                                                        <Checkbox className=\"custom-checkbox\" value=\"\" onChange={this.AllLeagueSelect} checked={this.state.f_league_id.length == 0} name=\"all_leagues\" id=\"all_leagues\">\n                                                            <span>{AppLabels.ALL}</span>\n                                                        </Checkbox>\n                                                    </FormGroup>\n                                                </li>\n                                                {\n                                                    !_isEmpty(this.props.customLeagues || leagueList)\n                                                        ?\n                                                        (this.props.customLeagues || leagueList).map((item, index) => {                                                            return (\n                                                                <li className='pt10 pb10 pl15 pr15 bottom-padding' key={\"leagueList\" + index}>\n                                                                    <FormGroup>\n                                                                        <Checkbox className=\"custom-checkbox\" value={item.league_id} onChange={this.handleLeagueSelect} checked={this.state.f_league_id.indexOf(item.league_id + \"\") != -1} name=\"lobby_filter_leagues\" id={\"lobbyfilter-\" + item.league_id}>\n                                                                            <span>{item.league_name}</span>\n                                                                        </Checkbox>\n                                                                    </FormGroup>\n                                                                </li>\n                                                            );\n\n\n                                                        })\n\n\n                                                        :\n                                                        <li></li>\n\n                                                }\n\n                                            </ul>\n\n\n                                        </div>\n                                    </SlidingPane>\n                                </React.Fragment>\n                            }\n                            {(Constants.SELECTED_GAMET == Constants.GameType.Pickem) && (FitlerOptions && FitlerOptions.showPickLFitlers) && \n                                <React.Fragment>\n                                    <SlidingPane\n                                        isOpen={this.state.isPaneOpenBottom}\n                                        from='bottom'\n                                        width='100%'\n                                        overlayClassName={'filter-custom-overlay bottom-tab-height'}\n                                         onRequestClose={this.handleLobbyFilter}\n                                        >\n                                        <div className=\"filter-header shadow\">\n                                            <i className=\"icon-reload\" onClick={this.ResetPickemLobbyFilter}></i>\n                                            {AppLabels.Filters}\n                                            <Button className=\"done-btn active\" onClick={this.PickemLobbyFilterSelect}>{AppLabels.DONE}</Button>\n                                        </div>\n                                        <div className=\"filter-body\">\n\n\n                                            <ul className='pt10'>\n                                                <li className='pt10 pb10 pl15 pr15'>\n                                                    <FormGroup>\n                                                        <Checkbox className=\"custom-checkbox\" value=\"\" onChange={()=>this.handlePickemLeagueSelect('','')} checked={pickemSFilter == ''} name=\"all_leagues\" id=\"all_leagues\">\n                                                            <span>{AppLabels.ALL}</span>\n                                                        </Checkbox>\n                                                    </FormGroup>\n                                                </li>\n                                                {\n                                                    this.props.leagueList && this.props.leagueList.length > 0 \n                                                        ?\n                                                        this.props.leagueList.map((item, index) => {                                                            return (\n                                                                <li className='pt10 pb10 pl15 pr15 bottom-padding' key={\"leagueList\" + index}>\n                                                                    <FormGroup>\n                                                                        <Checkbox className=\"custom-checkbox\" value={item.league_id} onChange={()=>this.handlePickemLeagueSelect(item.league_id,item.feed_type)} \n                                                                        checked={pickemSFilter == item.league_id } \n                                                                        name=\"lobby_filter_leagues\" id={\"lobbyfilter-\" + item.league_id}>\n                                                                            <span>{item.league_name}</span>\n                                                                        </Checkbox>\n                                                                    </FormGroup>\n                                                                </li>\n                                                            );\n\n\n                                                        })\n\n\n                                                        :\n                                                        <li></li>\n\n                                                }\n\n                                            </ul>\n\n\n                                        </div>\n                                    </SlidingPane>\n                                </React.Fragment>\n                            }\n                            {(FitlerOptions && FitlerOptions.showLFitler) && \n                                <React.Fragment>\n                                    <SlidingPane\n                                        isOpen={this.state.isPaneOpenBottom}\n                                        from='bottom'\n                                        width='100%'\n                                        overlayClassName={'filter-custom-overlay bottom-tab-height'}\n                                         onRequestClose={this.handleLobbyFilter}\n                                        >\n                                        <div className=\"filter-header shadow\">\n                                            {AppLabels.Filters}\n                                            <Button className=\"done-btn active\" onClick={this.LeaderboardFilterSelect}>{AppLabels.DONE}</Button>\n                                        </div>\n                                        <div className=\"filter-body open-pred\">\n                                            <ul className='pt10'>\n                                                <li className='pt10 pb10 pl15 pr15'>\n                                                    <FormGroup>\n                                                        <Checkbox className=\"custom-checkbox\" value=\"\" onChange={()=>this.handleTimeChange('')} checked={dataFor == ''} name=\"lb-filter\" id=\"all_leagues\">\n                                                            <span>{AppLabels.ALL}</span>\n                                                        </Checkbox>\n                                                    </FormGroup>\n                                                </li>\n                                                \n                                                {\n                                                    this.props.filerObj && this.props.filerObj.map((item, index) => { \n                                                        return (\n                                                            <li className='pt10 pb10 pl15 pr15 bottom-padding' key={\"leagueList\" + index}>\n                                                                <FormGroup>\n                                                                    {\n                                                                        Constants.SELECTED_GAMET === Constants.GameType.Pickem ?\n                                                                        <Checkbox className=\"custom-checkbox\" value={item.league_id} onChange={()=>this.handleTimeChange(item)}  \n                                                                        checked={dataFor.league_id == item.league_id} name=\"lb-filter\" id={item.league_name}>\n                                                                            <span>{item.league_name}</span>\n                                                                        </Checkbox>\n                                                                        :\n                                                                        <Checkbox className=\"custom-checkbox\" value={item.category_id} onChange={()=>this.handleTimeChange(item)}  \n                                                                        checked={dataFor.category_id == item.category_id} name=\"lb-filter\" id={item.name}>\n                                                                            <span>{item.name}</span>\n                                                                        </Checkbox>\n                                                                    }\n                                                                </FormGroup>\n                                                            </li>\n                                                        );\n\n\n                                                    })\n                                                }\n\n                                            </ul>\n\n\n                                        </div>\n                                    </SlidingPane>\n                                </React.Fragment>\n                            }\n                            {(FitlerOptions && FitlerOptions.showMPFitler) && \n                                <React.Fragment>\n                                    <SlidingPane\n                                        isOpen={this.state.isPaneOpenBottom}\n                                        from='bottom'\n                                        width='100%'\n                                        overlayClassName={'filter-custom-overlay bottom-tab-height'}\n                                         onRequestClose={this.handleLobbyFilter}\n                                        >\n                                        <div className=\"filter-header shadow\">\n                                            {AppLabels.Filters}\n                                            <Button \n                                                className=\"done-btn active\" \n                                                onClick={this.MPFilterSelect}\n                                            >\n                                                    {AppLabels.DONE}\n                                            </Button>\n                                        </div>\n                                        <div className=\"filter-body\">\n                                            <ul className='pt10'>\n                                                {\n                                                    this.props.filerObj && this.props.filerObj.map((item, index) => { \n                                                        return (\n                                                            <li className='pt10 pb10 pl15 pr15 bottom-padding' key={\"leagueList\" + index}>\n                                                                <FormGroup>\n                                                                    <Checkbox className=\"custom-checkbox\" value={item.category_id} onChange={()=>this.handleMPCategory(item)}  \n                                                                    checked={MPCat.category_id == item.category_id} name=\"lb-filter\" id={item.category_name}>\n                                                                        <span>{item.category_name}</span>\n                                                                    </Checkbox>\n                                                                </FormGroup>\n                                                            </li>\n                                                        );\n                                                    })\n                                                }\n                                            </ul>\n                                        </div>\n                                    </SlidingPane>\n                                </React.Fragment>\n                            }                           \n                            {(FitlerOptions && FitlerOptions.showContestListFitler) && this.checkContestFilterOptions(FitlerOptions) &&\n                                <React.Fragment>\n                                    <SlidingPane\n                                        isOpen={this.state.isPaneOpenBottom}\n                                        from='bottom'\n                                        width='100%'\n                                        overlayClassName='filter-custom-overlay'\n                                        onRequestClose={this.handleLobbyFilter}>\n                                        <div className=\"filter-header\">\n                                            <i className=\"icon-reload\" onClick={this.ResetContestListFilter}></i>\n                                            {AppLabels.FILTERS}\n                                            <Button className=\"done-btn\" onClick={this.ContestListFilterSelect}>{AppLabels.DONE}</Button>\n                                        </div>\n                                        <div className=\"filter-body\">\n                                            <Tabs\n                                                activeKey={this.state.key}\n                                                onSelect={this.handleSelect}\n                                                id=\"controlled-tab-example\" className=\"custom-nav-tabs tabs-three contest-filter-tab\"\n                                            >\n                                                <Tab eventKey={1} title={AppLabels.WINNINGS}>\n\n                                                    <div className=\"slider-header\">\n                                                        <Range defaultValue={[this.state.contestListFilterObj.winnings.min, this.state.contestListFilterObj.winnings.max]} min={this.state.contestListFilterObj.winnings.master_min} max={this.state.contestListFilterObj.winnings.master_max} onAfterChange={this.onWinningChange} />\n                                                        <div className=\"slider-value text-center\">{AppLabels.WINNINGS}\n                                                            {' '}   {this.state.contestListFilterObj.winnings.min} - {this.state.contestListFilterObj.winnings.max}\n                                                        </div>\n                                                    </div>\n\n                                                </Tab>\n                                                <Tab eventKey={2} title={AppLabels.ENTRY_FEE}>\n                                                    <div className=\"slider-header\">\n                                                        <Range defaultValue={[this.state.contestListFilterObj.entryFee.min, this.state.contestListFilterObj.entryFee.max]} min={this.state.contestListFilterObj.entryFee.master_min} max={this.state.contestListFilterObj.entryFee.master_max} onAfterChange={this.onEntryFeeChange}\n                                                        />\n                                                        <div className=\"slider-value text-center\">{AppLabels.ENTRY_FEE}\n                                                            {' '}  {this.state.contestListFilterObj.entryFee.min} - {this.state.contestListFilterObj.entryFee.max}\n                                                        </div>\n                                                    </div>\n\n                                                </Tab>\n                                                <Tab eventKey={3} title={AppLabels.MAX_ENTRIES}>\n                                                    <div className=\"slider-header\">\n                                                        <Range defaultValue={[this.state.contestListFilterObj.entries.min, this.state.contestListFilterObj.entries.max]} min={this.state.contestListFilterObj.entries.master_min} max={this.state.contestListFilterObj.entries.master_max} onAfterChange={this.onEntriesChange}\n                                                        />\n                                                        <div className=\"slider-value text-center\">\n                                                        {AppLabels.ENTRIES}  {this.state.contestListFilterObj.entries.min} - {this.state.contestListFilterObj.entries.max}\n                                                        </div>\n                                                    </div>\n\n                                                </Tab>\n                                            </Tabs>\n                                        </div>\n                                    </SlidingPane>\n                                </React.Fragment>\n                            }\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/BecomeAffiliate/AffiliateProgram.jsx",["2224","2225","2226"],"import React from 'react';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport { Utilities } from '../../Utilities/Utilities';\nimport { getAffilateUserSummary, getAffilateUserTransaction } from '../../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../CustomComponent';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport MetaData from \"../../helper/MetaData\";\nimport CustomHeader from '../../components/CustomHeader';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\n\nclass AffiliateProgram extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            profileDetail: WSManager.getProfile(),\n            userAffiliateData: '',\n            USERLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            HMORE: false,\n            ISLOAD: false,\n        }\n    }\n\n    componentDidMount() {\n        getAffilateUserSummary().then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                if (responseJson.data && responseJson.data.is_affiliate == 1) {\n                    this.setState({\n                        userAffiliateData: responseJson.data\n                    })\n                } else {\n                    this.props.history.goBack()\n                }\n            }\n        })\n        this.getList()\n    }\n\n    getList() {\n        const { PNO, PSIZE, USERLIST, profileDetail } = this.state;\n        let param = {\n            \"current_page\": PNO,\n            \"items_perpage\": PSIZE,\n            \"user_id\": profileDetail.user_id\n        }\n        this.setState({ ISLOAD: true });\n        getAffilateUserTransaction(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let listTmp = responseJson.data.result || [];\n                this.setState({\n                    USERLIST: PNO == 1 ? listTmp : [...USERLIST, ...listTmp],\n                    HMORE: listTmp.length >= PSIZE ? true : false,\n                    PNO: listTmp.length >= PSIZE ? PNO + 1 : PNO\n                })\n            }\n        })\n    }\n\n    renderBlock = (currency, label, value) => {\n        return (\n            <div className=\"data-block-wrap\">\n                <div className=\"data-count-block text-center\">\n                    <div className={\"count\"}>\n                        {currency} {Utilities.numberWithCommas(value)}\n                    </div>\n                    <div className=\"count-for\">{label}</div>\n                </div>\n            </div>\n        )\n    }\n\n    renderItem = (item, idx) => {\n        return (\n            <li key={item.friend_id + idx} className=\"header-v list-item\">\n                <span className=\"user\">\n                    {item.friend_name}\n                    <div className=\"timing\">\n                        <MomentDateComponent data={{ date: item.date_added, format: \"DD MMM\" }} />, {item.signup_commission > 0 ? AppLabels.SIGNUP : AppLabels.AMOUNT_DEPOSITED}\n                    </div>\n                </span>\n                <span className=\"amount\"><span className=\"curr\">{Utilities.getMasterData().currency_code} </span>{item.friend_amount}</span>\n                <span className=\"commision\"><span className=\"curr\">{Utilities.getMasterData().currency_code} </span>{item.signup_commission > 0 ? item.signup_commission : item.deposit_comission}</span>\n            </li>\n        )\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            notification: true,\n            title: AppLabels.AFFILIATE_PROGRAM,\n            hideShadow: true\n        }\n\n        const { profileDetail, userAffiliateData, USERLIST, ISLOAD, HMORE } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed wallet-wrapper affiliate-wrap\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.AffiliateProgram.title}</title>\n                            <meta name=\"description\" content={MetaData.AffiliateProgram.description} />\n                            <meta name=\"keywords\" content={MetaData.AffiliateProgram.keywords}></meta>\n                        </Helmet>\n                        {!this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        <div className=\"wallet-header header-with-circle\">\n                            <div className=\"profile-view\">\n                                <img src={profileDetail.image ? Utilities.getThumbURL(profileDetail.image) : Images.DEFAULT_AVATAR} alt=\"\" />\n                                <div className=\"name-view\">\n                                    <div className=\"fl-name\">{profileDetail.first_name ? (profileDetail.first_name + ' ' + (profileDetail.last_name || '')) : ''}</div>\n                                    <div className=\"u-name\">{profileDetail.user_name}</div>\n                                </div>\n                            </div>\n                            <div className=\"d-flex\">\n                                <div>\n                                    <div className=\"acc-bal\">{Utilities.getMasterData().currency_code} {userAffiliateData.signup_commission || '0'}</div>\n                                    <div className=\"total-bal-text\">{AppLabels.BONUS_ON}</div>\n                                    <div className=\"bal-summary\">{AppLabels.SIGNUP}</div>\n                                </div>\n                                <div className=\"m-l-md\">\n                                    <div className=\"acc-bal\">{userAffiliateData.deposit_commission || '0'}%</div>\n                                    <div className=\"total-bal-text\">{AppLabels.COMMISION_ON}</div>\n                                    <div className=\"bal-summary\">{AppLabels.DEPOSITE}</div>\n                                </div>\n                            </div>\n                            <div className=\"currency-circle\">\n                                <i className=\"font-style-normal\">%</i>\n                            </div>\n                        </div>\n                        <div className=\"summary-cont\">\n                            <div className=\"bal-summary-wrap mb-3\">\n                                <div className=\"display-table-row\">\n                                    <div className=\"cash-summary-with-amt\">\n                                        {this.renderBlock('', AppLabels.TOTAL_SIGNUP, userAffiliateData.total_signup || '0')}\n                                    </div>\n                                    <div className=\"cash-summary-with-amt\">\n                                        {this.renderBlock(Utilities.getMasterData().currency_code, AppLabels.DEPOSITED_AMOUNT, userAffiliateData.deposit_amount || '0')}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"bal-summary-wrap\">\n                                <div className=\"display-table-row\">\n                                    <div className=\"cash-summary-with-amt p-0\">\n                                        {this.renderBlock(Utilities.getMasterData().currency_code, AppLabels.COMMISION_TILL_DATE, userAffiliateData.commission_amount || '0')}\n                                    </div>\n                                    {/* <div className=\"cash-summary-with-amt\">\n                                        {this.renderBlock(Utilities.getMasterData().currency_code, AppLabels.COMMISION_DUE, userAffiliateData.total_signup || '0')}\n                                    </div> */}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"user-list\">\n                            <div className=\"detail-header\">\n                                <span>{AppLabels.DETAILS}</span>\n                            </div>\n                            <div className=\"header-v\">\n                                <span className=\"user\">{AppLabels.USER}</span>\n                                <span className=\"amount\">{AppLabels.AFF_AMOUNT}</span>\n                                <span className=\"commision\">{AppLabels.COMMISION}</span>\n                            </div>\n                            {\n                                USERLIST.length > 0 && <InfiniteScroll\n                                    dataLength={USERLIST.length}\n                                    hasMore={!ISLOAD && HMORE}\n                                    next={() => this.getList()}\n                                >\n                                    <ul className=\"list-view\">\n                                        {\n                                            USERLIST.map((item, idx) => {\n                                                return this.renderItem(item, false, idx);\n                                            })\n                                        }\n                                    </ul>\n                                </InfiniteScroll>\n                            }\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default AffiliateProgram;","/var/www/html/framework/frontend/src/Component/BecomeAffiliate/BecomeAffiliateModal.jsx",["2227"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Modal } from 'react-bootstrap';\nimport { becomeAffilateUser } from '../../WSHelper/WSCallings';\nimport { Utilities } from '../../Utilities/Utilities';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\n\nclass BecomeAffiliateModal extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            posting: false\n        }\n    }\n\n    becomeAffiliate = () => {\n        if (!this.state.posting) {\n            this.setState({\n                posting: true\n            })\n            let param = {\n                user_id: WSManager.getProfile().user_id\n            }\n            becomeAffilateUser(param).then((responseJson) => {\n                this.setState({\n                    posting: false\n                })\n                if (responseJson.response_code == WSC.successCode) {\n                    this.props.preData.mHide('2');\n                    Utilities.showToast(responseJson.message, 5000);\n                    let lsProfile = WSManager.getProfile();\n                    lsProfile['is_affiliate'] = '2'\n                    WSManager.setProfile(lsProfile);\n                }\n            })\n        }\n    }\n\n    render() {\n        const { mShow, mHide } = this.props.preData;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        bsSize=\"large\"\n                        dialogClassName=\"modal-full-screen\"\n                        className=\"modal-pre-lm\">\n                        <Modal.Body className=\"affiliate-prog\">\n                            <a href onClick={()=>mHide()} className=\"modal-close\">\n                                <i className=\"icon-close\"></i>\n                            </a>\n                            <span className=\"lm-title text-uppercase\">{AL.AFFILIATE_PROGRAM}\n                                <p className=\"lm-desc\">{AL.AFFILIATE_TAGLINE1} {WSC.AppName} {AL.AFFILIATE_TAGLINE2}</p></span>\n                            <div className=\"img-view-c\">\n                                <img alt=\"\" src={Images.INDUS_LEAD} />\n                                <div className=\"text-container\">\n                                    <p className=\"easy-p right-s\">{AL.INDUSTRY_LEADING}</p>\n                                    <p className=\"details\">{AL.INDUSTRY_LEADING_TAGLINE}</p>\n                                </div>\n                            </div>\n                            <img src={Images.DOT_LINE} className=\"line-dashed\" alt=\"\" />\n                            <div className=\"img-view-c m-t-n\">\n                                <div className=\"text-container text-right\">\n                                    <p className=\"easy-p left-s\">{AL.PROMOTION_EASY}</p>\n                                    <p className=\"details\">{AL.PROMOTION_EASY_TAGLINE}</p>\n                                </div>\n                                <img alt=\"\" src={Images.PROMOTION} />\n                            </div>\n                            <img src={Images.DOT_LINE_R} className=\"line-dashed\" alt=\"\" />\n                            <div className=\"img-view-c m-t-n\">\n                                <img alt=\"\" src={Images.TRACKING} />\n                                <div className=\"text-container\">\n                                    <p className=\"easy-p right-s\">{AL.POWERFUL_TRACKING}</p>\n                                    <p className=\"details\">{AL.POWERFUL_TRACKING_TAGLINE}</p>\n                                </div>\n                            </div>\n                            <button onClick={this.becomeAffiliate} className={\"btn btn-primary \" + (this.state.posting ? \"disabled\" : \"\")}>{AL.BECOME_AFFILIATE}</button>\n                        </Modal.Body>\n                    </Modal>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default BecomeAffiliateModal;","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPFixture.jsx",["2228"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities } from '../../Utilities/Utilities';\n\nclass OpenPredictorFPPFixture extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isActive: this.props.isActive || false,\n            isMyContest: this.props.isMyContest || false,\n            isLive: false\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.isActive != this.props.isActive) {\n            this.setState({\n                isActive: nextProps.isActive\n            })\n        }\n    }\n\n    timerCallback = () => {\n        this.setState({\n            isLive: true\n        })\n    }\n\n    onSelect = (e) => {\n        if (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        }\n        const { item, onSelect } = this.props;\n        if (this.state.isActive) {\n            if (!this.state.isMyContest) {\n                onSelect('')\n            }\n        } else {\n            onSelect(item)\n        }\n\n    }\n\n    render() {\n        const { item } = this.props;\n        const { isActive } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <li onClick={this.onSelect} key={item.season_game_uid} className={\"fixture-card-wrapper open-prediction-card-wrapper prediction-card-wrapper squz-pred-card-wrap pointer-cursor\" + (isActive ? ' active-item' : '')}\n                    >\n                        <div className=\"fixture-card-body\">\n                            {/* <img src={Images.TEMP_IMG} alt=\"\"/> */}\n                            <img src={Utilities.getCategoryURL(item.image)} alt=\"\" />\n                            <div className=\"match-info-section\">\n                                <div className=\"category-name\">\n                                    {item.name || item.category_name}\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default OpenPredictorFPPFixture;","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorFixture.jsx",["2229"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities } from '../../Utilities/Utilities';\n\nclass OpenPredictorFixture extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isActive: this.props.isActive || false,\n            isMyContest: this.props.isMyContest || false,\n            isLive: false\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.isActive != this.props.isActive) {\n            this.setState({\n                isActive: nextProps.isActive\n            })\n        }\n    }\n\n    timerCallback = () => {\n        this.setState({\n            isLive: true\n        })\n    }\n\n    onSelect = (e) => {\n        if (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        }\n        const { item, onSelect } = this.props;\n        if (this.state.isActive) {\n            if (!this.state.isMyContest) {\n                onSelect('')\n            }\n        } else {\n            onSelect(item)\n        }\n\n    }\n\n    render() {\n        const { item } = this.props;\n        const { isActive } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <li onClick={this.onSelect} key={item.season_game_uid} className={\"fixture-card-wrapper open-prediction-card-wrapper prediction-card-wrapper squz-pred-card-wrap pointer-cursor\" + (isActive ? ' active-item' : '')}\n                    >\n                        <div className=\"fixture-card-body\">\n                            {/* <img src={Images.TEMP_IMG} alt=\"\"/> */}\n                            <img src={Utilities.getCategoryURL(item.image)} alt=\"\" />\n                            <div className=\"match-info-section\">\n                                <div className=\"category-name\">\n                                    {item.name || item.category_name}\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default OpenPredictorFixture;","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionFixture.jsx",["2230","2231","2232"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { MATCH_TYPE, AppSelectedSport } from '../../helper/Constants';\nimport { Utilities, parseURLDate } from '../../Utilities/Utilities';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Images from '../../components/images';\nimport * as AL from \"../../helper/AppLabels\";\n\nclass PredictionFixture extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isActive: this.props.isActive || false,\n            isLive: false\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.isActive != this.props.isActive) {\n            this.setState({\n                isActive: nextProps.isActive\n            })\n        }\n    }\n\n    timerCallback = () => {\n        this.setState({\n            isLive: true\n        })\n    }\n\n    onSelect = (e) => {\n        if (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        }\n        const { item, onSelect } = this.props;\n        if (this.state.isActive) {\n            // onSelect('')\n        } else {\n            onSelect(item)\n        }\n\n    }\n\n    render() {\n        const { item } = this.props;\n        const { isActive, isLive } = this.state;\n        let game_starts_in = item.game_starts_in;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <li onClick={this.onSelect} key={item.season_game_uid} className={\"fixture-card-wrapper prediction-card-wrapper pointer-cursor\" + (isActive ? ' active-item' : '')}>\n\n                        <div className=\"fixture-card-body display-table\">\n                            <div className=\"match-info-section\">\n                                <div className=\"section-left\">\n                                    <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"home-team-flag\" />\n                                </div>\n                                <div className=\"section-middle\">\n                                    <div className=\"team-n-m\">\n                                        <span className=\"team-home\">{item.home}</span>\n                                        <span className=\"vs-text\">{AL.VERSES}</span>\n                                        <span className=\"team-away\">{item.away}</span>\n                                    </div>\n                                    {\n                                        (Utilities.showCountDown({ game_starts_in: game_starts_in }) && !isLive) ?\n                                            <div className=\"countdown time-line\">\n                                                {item.game_starts_in && (Utilities.minuteDiffValue({ date: item.game_starts_in }) <= 0) && <CountdownTimer timerCallback={this.timerCallback} deadlineTimeStamp={item.game_starts_in} />}\n                                            </div> :\n                                            (Utilities.minuteDiffValue({ date: game_starts_in }) < 0) && <div className=\"match-timing\">\n                                                <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A\" }} /></span>\n                                            </div>\n                                    }\n                                    {\n                                        item.league_name &&\n                                        <div className=\"match-timing league-n\">\n                                            <div className=\"leag-name\">{item.league_name || item.league_abbr}</div>\n                                            {\n                                                AppSelectedSport === '7' && <div> - {MATCH_TYPE[item.format]}</div>\n                                            }\n                                        </div>\n                                    }\n                                    {\n                                        (Utilities.minuteDiffValue({ date: game_starts_in }) > 0 || isLive) && <span className=\"status-live\">\n                                            <span className=\"live-indicator\" />\n                                            <span className=\"status-text\">{AL.LIVE}</span>\n                                        </span>\n                                    }\n                                </div>\n                                <div className=\"section-right\">\n                                    <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"away-team-flag\" />\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default PredictionFixture;","/var/www/html/framework/frontend/src/views/FixtureContest.jsx",["2233","2234","2235","2236"],"import React from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities } from '../Utilities/Utilities';\nimport CountdownTimer from './CountDownTimer';\nimport { MatchCard, MomentDateComponent } from \"../Component/CustomComponent\";\n\n\nexport default class FixtureContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeSlider = this.changeSlider.bind(this)\n\n        this.state = {\n            allowCollection: Utilities.getMasterData().allow_collection,\n            slideIndex: 0\n        }\n    }\n\n    FixtureListFunction = (item) => {\n        return (\n            <div className=\"collection-list\">\n                <div className=\"display-table\">\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                        <div className=\"team-block\">\n                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                            <span className=\"verses\">{AppLabels.VS}</span>\n                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                        </div>\n                        <div className=\"match-timing\">\n                            {\n                                Utilities.showCountDown(item) ?\n                                    <div className=\"countdown time-line\">\n                                        {item.game_starts_in && <CountdownTimer\n                                            deadlineTimeStamp={item.game_starts_in}\n                                            timerCallback={this.props.timerCallback}\n                                        />}\n                                    </div> :\n                                    <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} /></span>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    changeSlider(e) {\n        if (this.sliderWrapper.innerSlider.state.currentSlide > 1) {\n            setTimeout(() => {\n                this.sliderWrapper.slickGoTo(1);\n            }, 10);\n        }\n    }\n\n    gotoDetails = (ContestListItem, event) => {\n        this.props.gotoDetails(ContestListItem, event);\n    }\n\n    render() {\n        const { ContestListItem, indexKey, timerCallback } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <li key={indexKey} style={{position: 'relative'}}>\n                        {\n                            (ContestListItem.playing_announce == \"1\" || ContestListItem.delay_minute > \"0\") &&\n                            <div className=\"match-delay-info\">\n                                    {\n                                        ContestListItem.playing_announce == \"1\" && \n                                        <span >{AppLabels.LINEUP_OUT}</span>\n                                    }\n                                    {\n                                        ContestListItem.playing_announce ==\"1\" && ContestListItem.delay_minute \n                                        > \"0\" &&\n                                            <span className=\"seperator-class\"> | </span>\n                                    }\n                                    {\n                                        ContestListItem.delay_minute > \"0\" &&\n                                        <span>\n                                            <OverlayTrigger trigger={['click']} placement=\"left\" overlay={\n                                                <Tooltip id=\"tooltip\" className={\"tooltip-featured\" + (ContestListItem.delay_message != '' ? ' display-tooltip' : ' hide-tooltip')}>\n                                                    <strong> {ContestListItem.delay_message} </strong>\n                                                </Tooltip>\n                                            }>\n                                            <span  onClick={(e)=>e.stopPropagation()} className=\"cursor-pointer\">{AppLabels.DELAYED} {ContestListItem.delay_text}</span>\n                                            </OverlayTrigger>\n                                        </span>\n                                    }\n                                </div>\n                            \n                        }\n\n                        <MatchCard item={ContestListItem} gotoDetails={this.gotoDetails} fixtureCardLg={true} timerCallback={timerCallback}/>\n\n                    </li>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Modals/DownloadAppBuyCoin.jsx",["2237","2238"],"import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport { Modal } from 'react-bootstrap';\nimport * as AL from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities } from '../Utilities/Utilities';\nimport { PlayStoreLink } from '../helper/Constants';\nimport Images from '../components/images';\n\nexport default class DownloadAppBuyCoinModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n        };\n\n    }\n\n    componentDidMount() {\n    }\n\n    DownloadApp=(isIos)=>{\n        if (isIos) {\n            let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.ios : {};\n            window.open(iosAppDownload.app_url, \"_blank\")\n        } else {\n            let iosAppDownload = PlayStoreLink;\n            window.open(iosAppDownload, \"_blank\")\n        }\n        setTimeout(() => {\n            this.props.hideM()            \n        }, 200);\n    }\n\n    render() {\n        const { hideM } = this.props;\n\n        return (\n            <Modal\n                show={true}\n                onHide={hideM}\n                dialogClassName=\"custom-modal header-circular-modal overflow-hidden\"\n                className=\"center-modal\"\n            >\n                <Modal.Header >\n                    <div className=\"modal-img-wrap\">\n                        <div className=\"wrap\">\n                            <i className=\"icon-mobile\"></i>   \n                        </div>\n                    </div>\n                </Modal.Header>\n\n                <Modal.Body >\n                    <div className=\"webcontainer-inner mt-0\">  \n                        <h2>{AL.DOWNLOAD_MOBILE_APP}</h2>\n                        <p>{AL.MOBILE_APP_DESC}</p>\n                    </div>\n                    <div className=\"text-center\">\n                        <a href onClick={()=>this.DownloadApp(true)} className=\"download-anchor\">\n                            <img src={Images.DOWNLOAD_APPSTORE_BTN} alt=\"\"/>\n                        </a>\n                    </div>\n                    <div className=\"text-center\">\n                        <a href onClick={()=>this.DownloadApp()} className=\"download-anchor\">\n                            <img src={Images.DOWNLOAD_PLAYSTORE_BTN} alt=\"\"/>\n                        </a>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/CoinsModule/RedeemSuccess.jsx",[],"/var/www/html/framework/frontend/src/Component/SportsHub/SHCoachMarks.jsx",[],"/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LandingFreeToPlay.jsx",["2239","2240","2241","2242","2243","2244","2245","2246","2247","2248","2249","2250","2251","2252","2253","2254","2255","2256","2257","2258","2259","2260","2261","2262","2263","2264","2265","2266","2267","2268","2269","2270","2271","2272","2273","2274","2275","2276","2277","2278","2279","2280","2281","2282","2283","2284","2285","2286","2287","2288","2289","2290","2291","2292","2293","2294","2295","2296","2297","2298","2299","2300","2301","2302","2303","2304","2305","2306","2307"],"import React from 'react';\n\nimport { updateDeviceToken, getLobbyBanner,getUserBalance, getAppNotificationCount,getLobbyFreeToPlay } from \"../../WSHelper/WSCallings\";\nimport { LobbyBannerSlider, LobbyShimmer } from '../../Component/CustomComponent';\nimport { Row, Col } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { NavLink } from \"react-router-dom\";\nimport { Utilities, _isEmpty, _filter, _Map, BannerRedirectLink, parseURLDate } from '../../Utilities/Utilities';\nimport ls from 'local-storage';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Slider from \"react-slick\";\nimport Skeleton from 'react-loading-skeleton';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as Constants from \"../../helper/Constants\";\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport Filter from '../../components/filter';\nimport HallofFameModal from './HallofFameModal';\nimport ContestDetailModal from '../../Modals/ContestDetail';\nimport { NoDataView } from '../CustomComponent';\nimport CustomHeader from '../../components/CustomHeader';\nimport FreeToPlayFixtureContest from './FreeToPlayFixtureContest';\nimport AllLeagueList from './AllLeagueList';\nimport ConfirmationPopup from '../../Modals/ConfirmationPopup';\nimport FreeToPlayLobby from './FreeToPlayLobby';\nimport HowToPlayModal from './HowToPlayModal';\n\nvar bannerData = {}\nvar lastBlanceCallDate = {};\n\n\nexport class LandingFreeToPlay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mTotalBalance: \"\",\n            notificationData: Constants.NOTIFICATION_DATA,\n            userCoinBalnc: (WSManager.getBalance().point_balance || 0),\n            OriginalContestList: [],\n            ContestList: [],\n            BannerList: [],\n            MiniLeagueList: [],\n\n            ShimmerList: [1, 2, 3, 4, 5],\n            showContestDetail: false,\n            FixtureData: '',\n            isLoaderShow: false,\n            isListLoading: false,\n            offset: 0,\n            showLobbyFitlers: false,\n            league_id: \"\",\n            filterArray: [],\n            sports_id: Constants.AppSelectedSport,\n            showCollectionInfo: false,\n            viewLeaugeSheduled: false,\n             MiniLeague:'',\n            canRedirect: true\n\n        }\n        Utilities.scrollToTop()\n\n    }\n\n    ContestDetailShow = (data) => {\n        this.setState({\n            showContestDetail: true,\n            FixtureData: data\n        });\n    }\n    \n    /**\n    * @description this method to hide contest detail model,\n    */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n    /**\n     * \n     * @description method to display collection info model.\n     */\n    CollectionInfoShow = () => {\n        \n        \n        this.setState({\n            showCollectionInfo: true,\n        }, () => {\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    CollectionInfoHide = () => {\n        this.setState({\n            showCollectionInfo: false,\n        });\n    }\n\n\n    /**\n     * @description this method to to open create contest screen\n     */\n    createContest = () => {\n        this.props.history.push('/create-contest')\n    }\n\n    /**\n     * @description this method to to open Have a league code screen\n     */\n    joinContest = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push({ pathname: '/private-contest' })\n        }\n        else {\n            this.props.history.push({ pathname: '/signup' })\n        }\n    }\n    /**\n     * @description this method will be call when user click join buttonn from contestt detail model screen,\n     * in case user in not logged in then signup/login screen will display\n     * @param data - contest model \n     */\n    onSubmitBtnClick = (data) => {\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: ' ' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } else {\n            let dateformaturl = parseURLDate(data.season_scheduled_date);\n            WSManager.clearLineup();\n            let lineupPath = '/lineup/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data } })\n        }\n    }\n\n    /**\n     * @description - this method is to display contest of a fixture on click event\n     * @param data - fixture model\n     */\n    gotoDetails = (data, event) => {\n        event.preventDefault();\n\n        if (Constants.SELECTED_GAMET == Constants.GameType.Free2Play) {\n            let dateformaturl = parseURLDate(data.season_scheduled_date);\n            this.setState({ LobyyData: data })\n\n            if(data.obj_type == \"fixture\"){\n                let gameType = Constants.SELECTED_GAMET;\n                let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/free-to-play/' + data.collection_master_id + '/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl + \"/\" + gameType + \"/\" + data.season_game_uid + \"/\" + data.contest_id;\n                this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data, lineupPath: contestListingPath } })\n            }\n            else{\n                 this.props.history.push({   pathname: '/mini-league-fixture/'+data.mini_league_id+ '/'+ data.mini_league_name, state: { MiniLeague: data}})\n               }\n        }\n        else {\n            if (Constants.SELECTED_GAMET == 5) {\n                if (data.match_list.length == 1) {\n                    data.home = data.match_list[0].home;\n                    data.home_flag = data.match_list[0].home_flag;\n                    data.away = data.match_list[0].away;\n                    data.away_flag = data.match_list[0].away_flag;\n                }\n            }\n\n            let dateformaturl = parseURLDate(data.season_scheduled_date);\n            this.setState({ LobyyData: data })\n\n            let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + data.collection_master_id + '/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n            this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data, lineupPath: contestListingPath } })\n\n        }\n\n    }\n\n    gotoLeaderBoard = (data, event) => {\n        event.stopPropagation();\n\n         this.CollectionInfoShow(data)\n    }\n\n\n    /**\n     * @description - this is life cycle method of react\n     */\n    componentDidMount() {\n\n        if (this.props.location.pathname == '/lobby') {\n            let { sports_id } = this.state;\n            WSManager.setFromConfirmPopupAddFunds(false);\n            let league_id = this.getSportsLeagueId(sports_id, Constants.LOBBY_FILTER_ARRAY);\n            this.setState({ isLoaderShow: true, sports_id, league_id, filterArray: Constants.LOBBY_FILTER_ARRAY }, () => {\n                this.lobbyContestList(0);\n                this.getBannerList();\n            })\n\n            \n            WSManager.googleTrack(WSC.GA_PROFILE_ID, 'fixture');\n            if (WSManager.loggedIn()) {\n                WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n            }\n            this.checkOldUrl();\n        }\n        this.handelNativeGoogleLogin()\n        if (!(ls.get('isDeviceTokenUpdated') && ls.get('isDeviceTokenUpdated'))) {\n\n            let token_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'deviceid',\n            }\n            this.sendMessageToApp(token_data)\n        }\n        setTimeout(() => {\n            let push_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'receive',\n            }\n            this.sendMessageToApp(push_data)\n        }, 300);\n\n        if (WSManager.loggedIn()) {\n            \n            \n            \n            \n            \n            \n\n            setTimeout(() => {\n                this.getAPiNotificationCount();\n            }, 2500);\n\n\n\n\n        }\n\n    }\n\n    componentWillMount = () => {\n        this.enableDisableBack(false)\n        WSManager.setPickedGameType(Constants.GameType.Free2Play)\n    }\n\n\n\n\n    enableDisableBack(flag) {\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc: 'handleLoginReceived'\n            }\n            this.sendMessageToApp(data);\n        }\n    }\n\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    goToScreen = (pathname) => {\n        this.props.history.push(pathname);\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        let sports = '#' + Utilities.getSelectedSportsForUrl();\n        if (!url.includes(sports)) {\n            url = url + sports\n        }\n        if (!url.includes('#freeToPlay')) {\n            url = url + \"#freeToPlay\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            let league_id = this.getSportsLeagueId(nextProps.selectedSport, this.state.filterArray);\n            this.setState({\n                ContestList: [],\n                MiniLeagueList: [],\n                league_id: league_id,\n                offset: 0,\n                sports_id: nextProps.selectedSport,\n            }, () => {\n                \n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.lobbyContestList(0);\n                this.getBannerList();\n                Filter.reloadLobbyFilter();\n            })\n        }\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n\n            if (e.data.locale != undefined) {\n                WSManager.setAppLang(e.data.locale);\n\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            }\n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }\n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }\n\n\n\n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132') {\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = parseURLDate(e.data.notif.season_scheduled_date);\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" + btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n      /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async (offset) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport\n        }\n\n        this.setState({ isLoaderShow: true, isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getLobbyFreeToPlay(param);\n        if (api_response_data) {\n            this.setState({ isLoaderShow: false })\n            if (offset == 0) {\n                this.setState({ ContestList: api_response_data, OriginalContestList: api_response_data }, () => {\n                    if (Constants.LOBBY_FILTER_ARRAY.length > 0) {\n                        this.filterLobbyResults({ league_id: Constants.LOBBY_FILTER_ARRAY[0].league_id })\n                    }\n                })\n            } else {\n                this.setState({ ContestList: [...this.state.ContestList, ...api_response_data], OriginalContestList: [...this.state.ContestList, ...api_response_data] });\n            }\n            this.setState({ offset: api_response_data.offset })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n   \n\n    getSportsLeagueId(sports_id, filterArray) {\n\n        let league_id = '';\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == sports_id) {\n                league_id = filterArray[i].league_id;\n            }\n        }\n        return league_id;\n    }\n\n    /** \n    @description hide lobby filters \n    */\n    hideFilter = () => {\n        this.setState({ showLobbyFitlers: false })\n        this.props.hideFilterData()\n    }\n\n    /** \n    @description show lobby filters \n    */\n    showFilter = () => {\n        this.setState({ showLobbyFitlers: true })\n    }\n\n    /** \n    @description Apply filters and load data accordingly\n    */\n    filterLobbyResults = (filterObj) => {\n        let league_id = (!_isEmpty(filterObj.league_id) && typeof filterObj.league_id != 'undefined') ? filterObj.league_id : \"\";\n        this.setState({ league_id: league_id }, function () {\n            this.filterFixturesLocally(league_id)\n        })\n\n        let filterArray = this.setFilterArray(league_id);\n        Constants.setValue.setFilter(filterArray);\n        this.setState({ league_id: league_id, showLobbyFitlers: false, offset: 0, filterArray: filterArray })\n        this.props.hideFilterData()\n    }\n\n    filterFixturesLocally(leagueIds) {\n        let allFixtures = this.state.OriginalContestList;\n        if (leagueIds == '') {\n            this.setState({ ContestList: allFixtures })\n        }\n        else {\n            let filteredList = [];\n            for (var i = 0; i < allFixtures.length; i++) {\n                if (leagueIds.includes(allFixtures[i].league_id)) {\n                    filteredList.push(allFixtures[i])\n                }\n\n            }\n\n            this.setState({ ContestList: filteredList })\n        }\n    }\n\n    setFilterArray(league_id) {\n        let { filterArray } = this.state;\n\n        let hasFilter = false;\n        if (filterArray.length > 0) {\n            for (let i = 0; i < filterArray.length; i++) {\n                if (filterArray[i].sports_id == this.state.sports_id) {\n                    hasFilter = true;\n                    filterArray[i].league_id = league_id;\n                }\n            }\n        }\n\n        if (!hasFilter && league_id != \"\") {\n            let filterObj = {\n                'sports_id': this.state.sports_id,\n                'league_id': league_id,\n            }\n            filterArray.push(filterObj);\n        }\n\n        return filterArray;\n    }\n\n    /** \n     * @description api call to get baner listing from server\n    */\n    getBannerList = () => {\n        let sports_id = Constants.AppSelectedSport;\n\n        if (sports_id == null)\n            return;\n        if (bannerData[sports_id]) {\n            this.parseBannerData(bannerData[sports_id])\n        } else {\n            setTimeout(async () => {\n                this.setState({ isLoaderShow: true })\n                let param = {\n                    \"sports_id\": sports_id\n                }\n                var api_response_data = await getLobbyBanner(param);\n                if (api_response_data) {\n                    bannerData[sports_id] = api_response_data;\n                    this.parseBannerData(api_response_data)\n                }\n                this.setState({ isLoaderShow: false })\n            }, 1500);\n        }\n    }\n\n    /** \n     * @description call to parse banner data\n    */\n    parseBannerData = (bdata) => {\n        let refData = '';\n        let temp = [];\n        _Map(this.getSelectedbanners(bdata), (item, idx) => {\n            if (item.banner_type_id == 2) {\n                refData = item;\n            }\n            if (item.banner_type_id == 1) {\n                let dateObj = Utilities.getUtcToLocal(item.schedule_date)\n                if (Utilities.minuteDiffValue({ date: dateObj }) < 0) {\n                    temp.push(item);\n                }\n            }\n            else {\n                temp.push(item);\n            }\n        })\n        setTimeout(() => {\n            CustomHeader.showRCM(refData);\n        }, 200);\n        this.setState({ BannerList: temp })\n    }\n\n    /** \n     * @description call to get selected banner data\n    */\n    getSelectedbanners(api_response_data) {\n        let tempBannerList = [];\n        for (let i = 0; i < api_response_data.length; i++) {\n            let banner = api_response_data[i];\n            if (WSManager.getToken() && WSManager.getToken() != '') {\n                if (banner.banner_type_id == Constants.BANNER_TYPE_REFER_FRIEND\n                    || banner.banner_type_id == Constants.BANNER_TYPE_DEPOSITE) {\n                    if (banner.amount > 0)\n                        tempBannerList.push(api_response_data[i]);\n                }\n                else if (banner.banner_type_id == '6') {\n                    \n                }\n                else {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n            else {\n                if (banner.banner_type_id == '6') {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n        }\n\n        return tempBannerList;\n    }\n\n    /**\n     * @description method to redirect user on appopriate screen when user click on banner\n     * @param {*} banner_type_id - id of banner on which clicked\n     */\n    redirectLink = (result) => {\n        BannerRedirectLink(result, this.props)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        \n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n        if (this.state.showLobbyFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLobbyFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    timerCompletionCall = (item) => {\n        let fArray = _filter(this.state.ContestList, (obj) => {\n            return item.collection_master_id != obj.collection_master_id\n        })\n        this.setState({\n            ContestList: fArray\n        })\n    }\n\n    goToPREDICTION = () => {\n        this.props.history.push({ pathname: '/all-leagues', state: { \n            FixturedContest: this.state.FixtureData, \n            LobyyData: this.state.ContestList,\n            MiniLeagueList:this.state.MiniLeagueList\n        } })\n        }\n\n    renderPREDCard = () => {\n        if (Constants.IS_PREDICTION) {\n            return (\n                <li onClick={this.goToPREDICTION} className=\"leader-board-card prd-card\" >\n                    <img className=\"img-leader-board-shape\" src={Images.trophy_ic} alt='' />\n                    <div className=\"dfs-c\">\n\n                        <p>{AppLabels.F2P_HALL_OF_FAME_MSG}</p>\n                    </div>\n                </li>\n            )\n        }\n        return ''\n    }\n\n\n\n\n\n\n    getAPiNotificationCount() {\n\n        let minuts = Constants.NOTIFICATION_DATA.date ? Utilities.minuteDiffValue(Constants.NOTIFICATION_DATA) : 0;\n        if ((minuts === 0 || minuts > 0.7)) {\n            getAppNotificationCount().then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    if (typeof responseJson.data != \"undefined\") {\n                        let obj = { date: Date.now(), count: responseJson.data }\n                        Constants.setValue.setNotificationCount(obj);\n                        this.setState({ notificationData: obj })\n                    }\n                }\n            })\n        }\n    }\n\n\n    callUserBalanceApi() {\n        if (!lastBlanceCallDate.date || Utilities.minuteDiffValue(lastBlanceCallDate) > 1) {\n            lastBlanceCallDate['date'] = Date.now();\n            getUserBalance().then((responseJson) => {\n                if (responseJson && responseJson.response_code == WSC.successCode) {\n                    WSManager.setAllowedBonusPercantage(responseJson.data.allowed_bonus_percantage)\n                    WSManager.setBalance(responseJson.data.user_balance);\n                    let tempBalance = Utilities.getTotalUserBalance((responseJson.data.user_balance.bonus_amount || 0), (responseJson.data.user_balance.real_amount || 0), (responseJson.data.user_balance.winning_amount || 0))\n                    this.setState({ mTotalBalance: Utilities.kFormatter(tempBalance), userCoinBalnc: responseJson.data.user_balance.point_balance });\n                }\n            })\n        } else {\n            let lsbalance = WSManager.getBalance() || {};\n            let tempBalance = Utilities.getTotalUserBalance((lsbalance.bonus_amount || 0), (lsbalance.real_amount || 0), (lsbalance.winning_amount || 0))\n            this.setState({ mTotalBalance: Utilities.kFormatter(tempBalance), userCoinBalnc: (lsbalance.point_balance || 0) });\n        }\n    }\n\n     /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async (offset) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport\n        }\n\n        this.setState({ isLoaderShow: true, isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getLobbyFreeToPlay(param);\n        if (api_response_data) {\n        \n            this.setState({ isLoaderShow: false })\n            if (offset == 0) {\n                this.setState({ ContestList: api_response_data, OriginalContestList: api_response_data }, () => {\n                    if (Constants.LOBBY_FILTER_ARRAY.length > 0) {\n                        this.filterLobbyResults({ league_id: Constants.LOBBY_FILTER_ARRAY[0].league_id })\n                    }\n                })\n            } else {\n                this.setState({ ContestList: [...this.state.ContestList, ...api_response_data], OriginalContestList: [...this.state.ContestList, ...api_response_data] });\n            }\n            this.setState({ offset: api_response_data.offset })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    render() {\n        const {\n            showContestDetail,\n            FixtureData,\n            isLoaderShow,\n            showCollectionInfo,\n            viewLeaugeSheduled,\n            BannerList,\n            league_id,\n            showLobbyFitlers,\n            ShimmerList,\n            ContestList,\n            MiniLeagueList,\n            isListLoading,\n            pageLanding,\n            showLobby,\n            hallOfFameItem,\n        } = this.state\n\n        let FitlerOptions = {\n            showLobbyFitler: showLobbyFitlers,\n            filtered_league_id: league_id\n        }\n\n        let bannerLength = BannerList.length;\n\n        return (\n\n            <MyContext.Provider >\n                <div className=\"Ftp-web-container Ftp-all-prizes no-padding\">\n\n                    <div className=\"Ftp-contest\">\n                        <div className=\"Ftp-header\">\n                            <div className='row-container'>\n                            <div className='section-left'>\n                                <a onClick={() => this.goToScreen('/my-wallet')} href className=\"header-action\">\n                                    <i className=\"icon-wallet-ic\"></i>\n                                </a>\n                            </div>\n                               \n\n                                <div className='section-middle'>\n                                    <img alt=\"\" src={Images.WHITE_BRAND_LOGO}></img>\n                                </div>\n\n                                <div xs={2} className='pull-right'>\n                                    <a href className=\"header-action\" onClick={() => this.goToScreen('/notification')}>\n                                        <i className=\"icon-alarm-new\">\n                                            {\n                                                (this.state.notificationData && this.state.notificationData.count > 0) &&\n                                                <div style={{ textAlign: 'center', fontSize: 9, fontFamily: 'Geominist-Bold', position: 'absolute', top: -8, padding: '4px 0px', left: 8, height: 17, width: 17, borderRadius: \"100%\", backgroundColor: 'red', color: '#fff' }}>\n                                                    <span>{this.state.notificationData.count > 99 ? '99+' : this.state.notificationData.count}</span>\n                                                </div>\n                                            }\n                                        </i>\n                                    </a>\n\n                                </div>\n                            </div>\n                            {/* <div className=\"overlay-white-circle\"></div> */}\n                        </div>\n                        <div className=\"sponser-by-section padding-landing\">\n                            <div className=\"sponser-by-landing-page\" onClick={()=> this.CollectionInfoShow()}>\n                                <span>{AppLabels.FREE_TO_PLAY}</span>\n                                <div className=\"text-how-to-play\">{AppLabels.HOW_TO_PLAY_FREE}</div>\n\n                                <div className=\"span-img\">\n                                    <i style={{ marginRight:'5px'}} className=\"icon-info\"></i>\n\n                                </div>\n\n\n                                \n                            </div>\n                        </div>\n\n\n                    </div>\n                      <div className=\"transparent-header web-container tab-two-height pb0\">\n                        <div>\n                           \n                        \n                            <Row className='mt15'>\n                                <Col sm={12}>\n                                    <Row>\n                                        <Col sm={12}>\n                                            <InfiniteScroll\n                                                style={{ overflow: 'hidden !important',paddingLeft:'5px',paddingRight:'5px' }}\n                                                dataLength={ContestList.length}\n                                                pullDownToRefresh={false}\n                                                hasMore={false}\n                                                scrollableTarget='test'\n                                                loader={\n                                                    isLoaderShow == true &&\n                                                    <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                }>\n                                                <ul className=\"collection-list-wrapper lobby-anim mt15\">\n                                                    {\n                                                        (ContestList.length == 0 && isListLoading) &&\n                                                        ShimmerList.map((item, index) => {\n                                                            return (\n                                                                <LobbyShimmer key={index} />\n                                                            )\n                                                        })\n                                                    }\n\n                                                    {\n                                                        ContestList.length > 0 &&\n                                                        ContestList.map((item, index) => {\n                                                            return (\n                                                                \n                                                                <React.Fragment key={item.collection_master_id} >\n                                                                    \n                                                                    <FreeToPlayFixtureContest\n                                                                        {...this.props}\n\n                                                                        indexKey={item.collection_master_id}\n                                                                        ContestListItem={item}\n                                                                        gotoDetails={this.gotoDetails}\n                                                                        gotoLeaderBoard={this.gotoLeaderBoard}\n                                                                        isFromFreeToPlayLandingPage={true}\n                                                                        timerCallback={() => this.timerCompletionCall(item)}\n                                                                    />\n                                                                    {/* {\n                                                                        index === 1 && this.renderPREDCard()\n                                                                    } */}\n                                                                </React.Fragment>\n                                                            );\n                                                        })\n                                                    }\n                                                    {/* {\n                                                        (ContestList.length < 2 && !isListLoading) && this.renderPREDCard()\n                                                    } */}\n\n                                                    {\n                                                        (ContestList.length == 0 && !isListLoading) &&\n                                                        <NoDataView\n                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                                            MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                                                            onClick_2={this.joinContest}\n                                                        />\n                                                    }\n                                                </ul>\n                                            </InfiniteScroll>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </div>\n                        {showContestDetail &&\n                            <ContestDetailModal IsContestDetailShow={showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={FixtureData} />\n                        }\n                        {showCollectionInfo &&\n                            <HowToPlayModal  IsCollectionInfoShow={this.CollectionInfoShow} IsCollectionInfoHide={this.CollectionInfoHide} />\n                        }\n                       \n\n                    </div>\n                  \n                   \n                   \n                </div>\n              \n            </MyContext.Provider>\n\n           \n\n        )\n    }\n}\n\nexport default LandingFreeToPlay","/var/www/html/framework/frontend/src/Component/MultiGameModule/MultiGameFixtureContest.jsx",["2308","2309","2310","2311","2312","2313","2314","2315","2316"],"import React from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport Slider from \"react-slick\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport { MATCH_TYPE } from '../../helper/Constants';\nimport { MomentDateComponent } from \"../../Component/CustomComponent\";\nimport * as Constants from \"../../helper/Constants\";\n\n\nexport default class FixtureContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeSlider = this.changeSlider.bind(this)\n\n        this.state = {\n            allowCollection: Utilities.getMasterData().allow_collection,\n            slideIndex: 0\n        }\n    }\n\n    FixtureListFunction = (item) => {\n        return (\n            <div className=\"collection-list\">\n                <div className=\"display-table\">\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                        <div className=\"team-block\">\n                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                            <span className=\"verses\">{AppLabels.VS}</span>\n                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                        </div>\n                        <div className=\"match-timing\">\n                            {\n                                Utilities.showCountDown(item) ?\n                                    <div className=\"countdown time-line\">\n                                        {item.game_starts_in && <CountdownTimer\n                                            deadlineTimeStamp={item.game_starts_in}\n                                            timerCallback={this.props.timerCallback}\n                                        />}\n                                    </div> :\n                                    <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} /></span>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    changeSlider(e) {\n        if (this.sliderWrapper.innerSlider.state.currentSlide > 1) {\n            setTimeout(() => {\n                this.sliderWrapper.slickGoTo(1);\n            }, 10);\n        }\n    }\n\n    gotoDetails = (ContestListItem, event) => {\n        this.props.gotoDetails(ContestListItem, event);\n    }\n\n    render() {\n        const { ContestListItem, CollectionInfoShow, indexKey, timerCallback } = this.props;\n        const { allowCollection } = this.state;\n        var settings = {\n            infinite: false,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            variableWidth: false,\n            centerPadding: '100px 0 5px',\n            initialSlide: 0,\n            className: \"center\",\n            centerMode: true,\n            responsive: [\n                {\n                    breakpoint: 767,\n                    settings: {\n                        slidesToShow: 1,\n                    }\n                },\n                {\n                    breakpoint: 414,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '60px 0 10px',\n                    }\n                },\n                {\n                    breakpoint: 320,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '20px 0 10px',\n                        afterChange: '',\n                    }\n                }\n            ]\n        };\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div key={indexKey} className={`${Constants.SELECTED_GAMET == Constants.GameType.MultiGame ? \"fixture-list-content\" : ''}`} style={{position: 'relative'}}>\n                        {\n                            (ContestListItem.playing_announce == \"1\" || ContestListItem.delay_minute > \"0\") &&\n                            <div className=\"match-delay-info\">\n                                    {\n                                        ContestListItem.playing_announce == \"1\" && \n                                        <span >{AppLabels.LINEUP_OUT}</span>\n                                    }\n                                    {\n                                        ContestListItem.playing_announce ==\"1\" && ContestListItem.delay_minute \n                                        > \"0\" &&\n                                            <span className=\"seperator-class\"> | </span>\n                                    }\n                                    {\n                                        ContestListItem.delay_minute > \"0\" &&\n                                        <span>\n                                            <OverlayTrigger trigger={['click']} placement=\"left\" overlay={\n                                                <Tooltip id=\"tooltip\" className={\"tooltip-featured\" + (ContestListItem.delay_message != '' ? ' display-tooltip' : ' hide-tooltip')}>\n                                                    <strong> {ContestListItem.delay_message} </strong>\n                                                </Tooltip>\n                                            }>\n                                            <span  onClick={(e)=>e.stopPropagation()} className=\"cursor-pointer\">{AppLabels.DELAYED} {ContestListItem.delay_text}</span>\n                                            </OverlayTrigger>\n                                        </span>\n                                    }\n                                </div>\n                            \n                        }\n\n                        {ContestListItem.match_list.length == 1 &&\n                            <div onClick={(event) => this.props.gotoDetails(ContestListItem, event)}>\n                                {\n                                    ContestListItem.match_list.map((item, idx) => {\n                                        return (\n                                            <div key={idx} className=\"collection-list\" >\n                                                <div className=\"display-table\">\n                                                    <div className=\"display-table-cell text-right v-mid w20\">\n                                                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                                                    </div>\n                                                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                                                        <div className=\"team-block\">\n                                                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                                                            <span className=\"verses\">{AppLabels.VS}</span>\n                                                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                                                        </div>\n                                                        <div className=\"match-timing\">\n                                                            {\n                                                                Utilities.showCountDown(item) ?\n                                                                    <div className=\"countdown time-line\">\n                                                                        {item.game_starts_in && <CountdownTimer timerCallback={timerCallback} deadlineTimeStamp={item.game_starts_in} currentDateTimeStamp={item.today} />}\n                                                                    </div> :\n                                                                    <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                                            }\n                                                        </div>\n\n                                                    </div>\n                                                    <div className=\"display-table-cell text-left v-mid w20\">\n                                                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        )\n                                    })\n                                }\n                                <div className=\"collection-list-footer\">\n                                    <div className=\"match-type\">\n                                        {ContestListItem.league_name || ContestListItem.league_abbr} - {MATCH_TYPE[ContestListItem.match_list[0].format]}\n                                    </div>\n                                    {process.env.REACT_APP_LOBBY_WINNING_ENABLE == 1 && ContestListItem.total_prize_pool > 0 ?\n                                        <div className=\"collection-list-prize-pool\">{AppLabels.WINNINGS}&nbsp;<span> {Utilities.getMasterData().currency_code + ContestListItem.total_prize_pool}</span></div> : <div className=\"collection-list-prize-pool\">{AppLabels.PRACTICE}</div>\n                                    }\n                                </div>\n                            </div>\n                        }\n                        { ContestListItem.match_list&&ContestListItem.match_list.length > 1 &&\n                            <React.Fragment>\n                                <div className=\"collection-wrap\" onClick={(event) => this.props.gotoDetails(ContestListItem, event)}>\n                                    \n                                    <div className=\"collection-header\">\n                                        <i className=\"icon-info collection-info-icon cursor-pointer\" onClick={CollectionInfoShow}></i>\n                                        <div className=\"collection-header-left\">\n                                            <h1>{ContestListItem.collection_name}</h1>\n                                            <div className=\"collection-count\">\n                                            <span className=\"collection-league-name\">{ContestListItem.league_name}</span>\n                                            <span className=\"dot-divider\"></span>\n                                             {ContestListItem.match_list.length} {AppLabels.MATCHES_SM}\n                                            </div>\n                                        </div>\n                                        {process.env.REACT_APP_LOBBY_WINNING_ENABLE == 1 && ContestListItem.total_prize_pool > 0 ?\n                                            <div className=\"collection-list-prize-pool\">{AppLabels.WINNINGS}&nbsp;<span> {Utilities.getMasterData().currency_code + ContestListItem.total_prize_pool}</span></div> : <div className=\"collection-list-prize-pool\"></div>\n                                        }\n                                    </div>\n                                    <div className=\"collection-body\">\n                                        <Slider ref={sliderWrapper => this.sliderWrapper = sliderWrapper} {...settings}\n                                            slideIndex={this.state.slideIndex}>\n                                            {ContestListItem.match_list &&ContestListItem.match_list.map((item, index) => {\n                                                return (\n                                                    <React.Fragment key={index}>\n                                                        {<div className=\"collection-list-slider\">\n                                                                {this.FixtureListFunction(item)}\n                                                            </div>\n                                                        }\n                                                    </React.Fragment>\n                                                );\n                                            })\n\n                                            }\n                        \n                                        </Slider>\n                                    </div>\n                                </div>\n                            </React.Fragment>\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/MultiGameModule/MultiGameContest.jsx",["2317","2318","2319","2320","2321","2322","2323","2324","2325","2326","2327","2328","2329","2330","2331","2332","2333","2334","2335","2336"],"import React from 'react';\nimport { ProgressBar } from 'react-bootstrap';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport CountdownTimer from '../../views/CountDownTimer';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport ContestDetailModal from '../../Modals/ContestDetail';\nimport {createBrowserHistory} from 'history';\nimport {Utilities} from '../../Utilities/Utilities';\nimport CustomHeader from '../../components/CustomHeader';\nimport {Sports} from \"../../JsonFiles\";\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport Slider from \"react-slick\";\nimport {getPublicContestDetailMultiGame } from '../../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../../Component/CustomComponent';\nimport * as Constants from \"../../helper/Constants\";\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\nvar globalThis = null;\n\nexport default class MultiGameContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contestData: '',\n            showContestDetail: false,\n            FixtureData: '',\n            referredCodeForSignup: '',\n            allowCollection: Utilities.getMasterData().allow_collection,\n        }\n    }\n    componentWillMount() {\n        WSManager.setShareContestJoin(true);\n        WSManager.setPickedGameType(Constants.GameType.MultiGame);\n        this.checkOldUrlPattern();\n        this.checkForUserRefferal();\n    }\n\n    /**\n     * @description this method is used to replace old url pattern to new eg. from \"/7/contest-listing\" to \"/cricket/contest-listing\"\n     */\n    checkOldUrlPattern=()=> {\n        \n        let sportsId = this.props.match.params.sportsId;\n        if(!(sportsId in Sports)){\n            if(sportsId in Sports.url){\n                let sportsId = this.props.match.params.sportsId;\n                let contest_unique_id = this.props.match.params.contest_unique_id;\n                this.props.history.replace(\"/\"+ Sports.url[sportsId]+\"/contest/\"+contest_unique_id);\n                return;\n            }\n        }\n    }\n\n    checkForUserRefferal() {\n        if (parsed.referral != \"\") {\n            WSManager.setReferralCode(parsed.referral)\n        }\n    }\n\n    getPublicContest(data) {\n        let param = {\n            \"contest_unique_id\": data.contest_unique_id\n\n        }\n        getPublicContestDetailMultiGame(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n\n                this.setState({\n                    contestData: responseJson.data\n                })\n                if (responseJson.data.total_user_joined == responseJson.data.size) {\n                    Utilities.showToast(AppLabels.Entry_for_the_contest, 3000);\n                }\n            }\n        })     \n\n        \n    }\n\n\n    componentDidMount() {\n        globalThis = this;\n        const matchParam = this.props.match.params\n        this.getPublicContest(matchParam)\n    }\n\n    ContestDetailShow = (data) => {\n        this.setState({\n            FixtureData: data,\n            showContestDetail: true,\n        });\n    }\n\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    onSubmitBtnClick = (data) => {\n        WSManager.clearLineup();\n        let urlData = data;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n        let lineupPath = ''\n        if(urlData.home){\n            lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n        }\n        else{\n            let pathurl = Utilities.replaceAll(urlData.collection_name,' ','_');\n            lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n        }\n        \n        if (WSManager.loggedIn()) {\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data,from:'share_contest' ,isFrom:'shareContest',resetIndex: 1 } })\n        }\n        else {\n            this.props.history.push({\n                pathname: '/signup', state: {\n                    joinContest: true,\n                    lineupPath: lineupPath.toLowerCase(),\n                    FixturedContest: this.state.FixtureData,\n                    LobyyData: data\n                }\n            })\n        }\n\n    }\n\n\n    ShowProgressBar = (join, total) => {\n        return join * 100 / total;\n    }\n\n    getContestWinnerCount(prizeDistributionDetail) {\n        if (prizeDistributionDetail && prizeDistributionDetail.length > 0) {\n            if ((prizeDistributionDetail[prizeDistributionDetail.length - 1].max) > 1) {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \"+AppLabels.WINNERS\n            } else {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \"+AppLabels.WINNER\n            }\n        }\n    }\n\n    FixtureListFunction = (item) =>{\n        return (\n            <div className=\"collection-list\">\n                <div className=\"display-table\">\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                        <div className=\"team-block\">\n                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                            <span className=\"verses\">{AppLabels.VS}</span>\n                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                        </div>\n                        <div className=\"match-timing\">\n                            {\n                                Utilities.showCountDown(item) ?\n                                    <div className=\"countdown time-line\">\n                                        {item.game_starts_in && <CountdownTimer deadlineTimeStamp={item.game_starts_in} currentDateTimeStamp={item.today} />}\n                                    </div> :\n                                    <span> <MomentDateComponent data={{date:item.season_scheduled_date,format:\"D MMM - hh:mm A \"}} /></span>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        globalThis = this;\n        const {\n            contestData,\n            showContestDetail,\n            FixtureData,\n            allowCollection\n        } = this.state;\n\n        const HeaderOption = {\n            \n            \n            \n            back: false,\n            filter: false,\n            \n            title: AppLabels.Contest\n        }\n\n        var settings = {\n            infinite: false,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            variableWidth: false,\n            centerPadding: '100px 0 5px',\n            initialSlide: 0,\n            className: \"center\",\n            centerMode: true,\n            responsive: [\n                {\n                    breakpoint: 767,\n                    settings: {\n                        slidesToShow: 1,\n                    }\n                },\n                {\n                    breakpoint: 414,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '60px 0 10px',\n                    }\n                },\n                {\n                    breakpoint: 320,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '20px 0 10px',\n                        afterChange: '',\n                    }\n                }\n            ]\n        };\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"web-container header-margin web-container-fixed share-contest-wrapper\" + (Constants.SELECTED_GAMET == Constants.GameType.MultiGame  && contestData && contestData.match_list&&contestData.match_list.length > 1 ? ' share-collection-wrapper' : ' ')}>\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <meta name=\"keywords\" content={MetaData.sharedcontest.keywords} />\n\n                            <title>{MetaData.sharedcontest.title}</title>\n                            <meta name=\"description\" content={contestData ? contestData.collection_name+\" | \"+contestData.contest_name : MetaData.sharedcontest.description} />                            \n                            <meta property=\"og:title\" content={contestData ? contestData.contest_name : MetaData.sharedcontest.title}></meta>\n                            <link rel=\"canonical\" href={window.location.href} />\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                            <div className=\"contest-card contest-card-wrapper\">\n                                <div className=\"contest-card-header \">\n                                    <ul className={Constants.SELECTED_GAMET== Constants.GameType.MultiGame  ? \"fixture-list-content\" : \"\"}>\n                                        {Constants.SELECTED_GAMET!=Constants.GameType.MultiGame  &&\n                                            <React.Fragment>\n                                                <li className=\"team-left-side\">\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.home_flag ? Utilities.teamFlagURL(contestData.home_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                    <span className=\"team-name\">{contestData.home}</span> \n                                                </li>\n                                                <li className=\"progress-middle\">\n                                                    <div className=\"team-content pb10 public-contest\">\n                                                        <p>{contestData.league_name}</p>\n                                                        {\n                                                            Utilities.showCountDown(contestData) ?\n\n                                                                <div className=\"share-contest-countdown\">\n                                                                    {contestData.game_starts_in && <CountdownTimer deadlineTimeStamp={contestData.game_starts_in} />}\n                                                                </div> :\n                    \n                                                                <span className=\"share-contest-time-date\"> \n                                                                    <MomentDateComponent data={{date:contestData.season_scheduled_date,format:\"D MMM - hh:mm A \"}} /> \n                                                                </span>\n\n                                                        }\n                                                    </div>\n                                                </li>\n                                                <li className=\"team-right-side\">\n                                                    <span className=\"team-name\">{contestData.away}</span>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.away_flag ? Utilities.teamFlagURL(contestData.away_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                </li>\n                                            </React.Fragment>\n                                        }\n                                        { Constants.SELECTED_GAMET==Constants.GameType.MultiGame  && contestData &&contestData.match_list&& contestData.match_list.length == 1 &&\n                                            <React.Fragment>\n                                                <li className=\"team-left-side\">\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.match_list ? Utilities.teamFlagURL(contestData.match_list[0].home_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                    <span className=\"team-name\">{contestData.match_list[0].home}</span> \n                                                </li>\n                                                <li className=\"progress-middle\">\n                                                    <div className=\"team-content pb10 public-contest\">\n                                                        <p>{contestData.match_list[0].league_name}</p>\n                                                        {\n                                                            Utilities.showCountDown(contestData) && contestData.today ?\n\n                                                                <div className=\"share-contest-countdown\">\n                                                                    {contestData.game_starts_in && <CountdownTimer deadlineTimeStamp={contestData.game_starts_in} currentDateTimeStamp={contestData.today} />}\n                                                                </div> :\n                    \n                                                                <span className=\"share-contest-time-date\"> \n                                                                {contestData.match_list&&contestData.match_list[0].league_name}\n                                                                </span>\n\n                                                        }\n                                                    </div>\n                                                </li>\n                                                <li className=\"team-right-side\">\n                                                    <span className=\"team-name\">{contestData.match_list[0].away}</span>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.match_list ? Utilities.teamFlagURL(contestData.match_list[0].away_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                </li>\n                                            </React.Fragment>\n                                        }\n                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame  && contestData && contestData.match_list&& contestData.match_list.length > 1 &&\n                                            <li className=\"progress-middle progress-middle-fullwidth \">\n                                                <div className=\"team-content pb10\">\n                                                    <p>{contestData.collection_name}</p>\n                                                    <div className=\"collection-match-info\">\n                                                        {contestData.match_list.length} {AppLabels.MATCHES}\n                                                        <span className=\"circle-divider\"></span>\n                                                        {\n                                                            Utilities.showCountDown(contestData) && contestData.today ?\n\n                                                                <div className=\"share-contest-countdown\">\n                                                                    {contestData.game_starts_in && <CountdownTimer deadlineTimeStamp={contestData.game_starts_in} currentDateTimeStamp={contestData.today} />}\n                                                                </div> :\n                    \n                                                                <span className=\"share-contest-time-date\"> \n                                                                {contestData.match_list&&contestData.match_list[0].league_name}\n\n                                                                </span>\n\n                                                        }\n                                                    </div>\n                                                </div>\n                                                <div className=\"collection-body\">\n                                                    <Slider ref={sliderWrapper => this.sliderWrapper = sliderWrapper} {...settings} \n                                                            slideIndex={this.state.slideIndex}\n                                                    >\n                                                        {contestData.match_list && contestData.match_list.map((item, index) => {\n                                                                return (\n                                                                    <React.Fragment>\n                                                                        <div className=\"collection-list-slider\">\n                                                                            {this.FixtureListFunction(item)}\n                                                                        </div>\n                                                                    </React.Fragment>\n                                                                );\n                                                            })\n                                                        }                                                        \n                                                    </Slider>\n                                                </div>\n                                            </li>\n                                        }\n                                    </ul>\n                                </div>\n\n\n                                <div className=\"contest-list contest-card-body\" >\n                                    <div className=\"contest-list-header\">\n                                        <div className=\"contest-heading\">\n                                           \n                                            {contestData.multiple_lineup > 0 &&\n\n                                                <span className=\"featured-icon\" onClick={(e)=>e.stopPropagation()}>m</span>\n                                            }\n                                            {\n                                                parseInt(contestData.total_user_joined) >= parseInt(contestData.minimum_size) &&\n                                                <span className=\"featured-icon\" onClick={(e)=>e.stopPropagation()}>g</span>\n\n                                            }\n                                            {/* -----assured code here----*/}\n                                            <h3 className=\"win-type\">\n                                                <span >\n                                                    <span className=\"text-uppercase \" >\n                                                        {AppLabels.WIN}\n                                                                    </span>\n                                                    {(contestData.prize_type == 0) &&\n                                                        <span><i className=\"icon-bonus\"></i> {contestData.prize_pool == \"0\" ? AppLabels.PRACTICE : contestData.prize_pool}</span>\n                                                    }\n\n                                                    {(contestData.prize_type == 1) &&\n                                                        <span>\n                                                            <span className=\"currency-span\">{Utilities.getMasterData().currency_code}</span>\n                                                            {contestData.prize_pool == \"0\" ? AppLabels.PRACTICE : contestData.prize_pool}</span>\n                                                    }\n\n\n                                                    {contestData.prize_type == 2 &&\n                                                        <span>\n                                                            <img src={Images.COINS} alt=\"\" className=\"beans-img\" />\n                                                            {contestData.prize_pool == \"0\" ? AppLabels.PRACTICE : contestData.prize_pool}\n                                                        </span>\n                                                    }\n                                                </span>\n                                               \n\n                                            </h3>\n                                            {\n                                                contestData.max_bonus_allowed != '0' &&\n                                                <div className=\"text-small-italic\">\n                                                    {contestData.max_bonus_allowed}{'% '}{AppLabels.BONUS}\n                                                </div>\n                                            }\n                                        </div>\n                                        <div className=\"display-table\">\n                                            <div className=\"progress-bar-default display-table-cell v-mid\" >\n                                                <ProgressBar now={globalThis.ShowProgressBar(contestData.total_user_joined, contestData.size)} className={parseInt(contestData.total_user_joined) >= parseInt(contestData.minimum_size) ? ' ' : 'danger-area'} />\n                                                <div className=\"progress-bar-value\" >\n                                                    <span className=\"user-joined\">{contestData.total_user_joined}</span><span className=\"total-entries\"> / {contestData.size} {AppLabels.ENTRIES}</span>\n                                                    <span className=\"min-entries\">{AppLabels.MIN} {contestData.minimum_size}</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"display-table-cell v-mid position-relative entry-criteria pl15\" >\n                                                {parseInt(contestData.total_user_joined) < parseInt(contestData.size) && <button onClick={() => this.ContestDetailShow(contestData)} \n                                                className=\"white-base btnStyle btn-rounded btn btn-primary \">\n                                                    {(contestData.prize_type == 0) &&\n                                                        <React.Fragment>\n                                                            <span> <i className=\"icon-bonus\"></i> </span>{contestData.entry_fee}\n                                                        </React.Fragment>\n                                                    }\n\n                                                    {(contestData.prize_type == 1) &&\n                                                        <React.Fragment> \n                                                            <span className=\"currency-span\">{Utilities.getMasterData().currency_code}</span>\n                                                            {contestData.entry_fee}\n                                                        </React.Fragment>\n                                                    }\n\n\n                                                    {contestData.prize_type == 2 &&\n                                                        <React.Fragment> \n                                                            <img src={Images.COINS} alt=\"\" className=\"beans-img\" />\n                                                            {contestData.entry_fee}\n                                                        </React.Fragment>\n                                                    }\n                                                </button>}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <button className=\"btn-block btn-primary bottom btn btn-default\" onClick={() => this.props.history.push('/lobby')}>{AppLabels.GO_TO_LOBBY}</button>\n                            {showContestDetail &&\n                                <ContestDetailModal showPCError={true} LobyyData={contestData} IsContestDetailShow={showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={FixtureData}  />\n                            }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/MultiGameModule/MultiGameLobby.jsx",["2337","2338","2339","2340","2341","2342","2343","2344","2345","2346","2347","2348","2349","2350","2351","2352","2353","2354","2355","2356","2357","2358","2359","2360","2361","2362","2363","2364","2365","2366","2367","2368","2369","2370","2371","2372","2373","2374","2375","2376","2377","2378","2379","2380","2381","2382","2383","2384","2385","2386","2387","2388","2389","2390","2391","2392","2393","2394","2395","2396","2397","2398","2399","2400","2401","2402","2403","2404","2405","2406","2407","2408"],"import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { updateDeviceToken, getLobbyBanner, getLobbyMultiGame } from \"../../WSHelper/WSCallings\";\nimport { NavLink } from \"react-router-dom\";\nimport { Utilities, _isEmpty, _filter, _Map } from '../../Utilities/Utilities';\nimport ls from 'local-storage';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Slider from \"react-slick\";\nimport Skeleton from 'react-loading-skeleton';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as Constants from \"../../helper/Constants\";\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport Filter from '../../components/filter';\nimport CollectionInfoModal from \"../../Modals/CollectionInfo\";\nimport ContestDetailModal from '../../Modals/ContestDetail';\nimport { NoDataView } from '../CustomComponent';    \nimport CustomHeader from '../../components/CustomHeader';\nimport MultiGameFixtureContest from './MultiGameFixtureContest';\nvar bannerData = {}\n\n/**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nconst Shimmer = () => {\n    return (\n        <div className=\"collection-list\">\n            <div className=\"display-table row\">\n                <div className=\"display-table-cell text-center v-mid\">\n                    <Skeleton width={54} height={54} />\n                </div>\n                <div className=\"display-table-cell text-center v-mid pt-2\">\n                    <Skeleton height={8} />\n                    <Skeleton height={6} width={'70%'} />\n                </div>\n                <div className=\"display-table-cell text-center v-mid\">\n                    <Skeleton width={54} height={54} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport class Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            OriginalContestList: [],\n            ContestList: [],\n            BannerList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            showContestDetail: false,\n            FixtureData: '',\n            contestListHasMore: false,\n            isLoaderShow: false,\n            isListLoading: false,\n            offset: 0,\n            showLobbyFitlers: false,\n            league_id: \"\",\n            filterArray: [],\n            sports_id: Constants.AppSelectedSport,\n            apiName: '',\n            showCollectionInfo: false,\n            canRedirect: true,\n            filterLeagueList:[]\n        }\n    }\n\n    /**\n     * @description this method to show contest detail on click on featured contest,\n     * @param data - contest model \n     */\n    ContestDetailShow = (data) => {\n        this.setState({\n            showContestDetail: true,\n            FixtureData: data\n        });\n    }\n    /**\n    * @description this method to hide contest detail model,\n    */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n    /**\n     * \n     * @description method to display collection info model.\n     */\n    CollectionInfoShow = (event) => {\n        \n        event.stopPropagation();\n        this.setState({\n            showCollectionInfo: true\n        }, () => {\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    CollectionInfoHide = () => {\n        this.setState({\n            showCollectionInfo: false,\n        });\n    }\n    /**\n     * @description this method to to open create contest screen\n     */\n    createContest = () => {\n        this.props.history.push('/create-contest')\n    }\n\n    /**\n     * @description this method to to open Have a league code screen\n     */\n    joinContest = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push({ pathname: '/private-contest' })\n        }\n        else {\n            this.props.history.push({ pathname: '/signup' })\n        }\n    }\n    /**\n     * @description this method will be call when user click join buttonn from contestt detail model screen,\n     * in case user in not logged in then signup/login screen will display\n     * @param data - contest model \n     */\n    onSubmitBtnClick = (data) => {\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/signup' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } else {\n            let dateformaturl = Utilities.getUtcToLocal(data.season_scheduled_date);\n            dateformaturl = new Date(dateformaturl);\n            dateformaturl = new Date(dateformaturl);\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n            WSManager.clearLineup();\n            let lineupPath = '/lineup/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data } })\n        }\n    }\n\n    /**\n     * @description - this method is to display contest of a fixture on click event\n     * @param data - fixture model\n     */\n    gotoDetails = (data, event) => {\n        event.preventDefault();\n\n        if (Constants.SELECTED_GAMET== Constants.GameType.MultiGame ) {\n            if (data.match_list.length == 1) {\n                data.home = data.match_list[0].home;\n                data.home_flag = data.match_list[0].home_flag;\n                data.away = data.match_list[0].away;\n                data.away_flag = data.match_list[0].away_flag;\n            }\n        }\n\n        let dateformaturl = Utilities.getUtcToLocal(data.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n        this.setState({ LobyyData: data })\n\n        let collectionName = Utilities.replaceAll(data.collection_name, ' ', '_');\n        let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + data.collection_master_id + '/' + collectionName + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n        this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data, lineupPath: contestListingPath } })\n\n    }\n\n    /**\n     * @description - this is life cycle method of react\n     */\n    componentDidMount() {\n        if (this.props.location.pathname == '/lobby') {\n            let { sports_id } = this.state;\n\n            \n            WSManager.setFromConfirmPopupAddFunds(false);\n            let league_id = this.getSportsLeagueId(sports_id, Constants.LOBBY_FILTER_ARRAY);\n            this.setState({ isLoaderShow: true, sports_id, league_id, filterArray: Constants.LOBBY_FILTER_ARRAY }, () => {\n                this.lobbyContestList(0);\n                this.getBannerList();\n\n            })\n\n            \n            WSManager.googleTrack(WSC.GA_PROFILE_ID, 'fixture');\n            if (WSManager.loggedIn()) {\n                WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n            }\n            this.checkOldUrl();\n        }\n        this.handelNativeGoogleLogin()\n        if (!(ls.get('isDeviceTokenUpdated') && ls.get('isDeviceTokenUpdated'))) {\n\n            let token_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'deviceid',\n            }\n            this.sendMessageToApp(token_data)\n        }\n        setTimeout(() => {\n            let push_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'receive',\n            }\n            this.sendMessageToApp(push_data)\n        }, 300);\n    }\n\n    componentWillMount = () => {\n        this.enableDisableBack(false)\n    }\n\n    enableDisableBack(flag) {\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc: 'handleLoginReceived'\n            }\n            this.sendMessageToApp(data);\n        }\n    }\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n            if (e.data.locale != undefined) {\n                WSManager.setAppLang(e.data.locale);\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            }\n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }\n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }\n            \n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132' ||\n                    e.data.notif.notification_type == '300') {\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = Utilities.getUtcToLocal(e.data.notif.season_scheduled_date);\n                    dateformaturl = new Date(dateformaturl);\n                    let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n                    let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n                    dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else if (e.data.notif.custom_notification_type ==7) {\n                        pathName = 'add-funds';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        let sports = '#' + Utilities.getSelectedSportsForUrl();\n        if (!url.includes(sports)) {\n            url = url + sports\n        }\n        if (!url.includes('#multigame')) {\n            url = url + \"#multigame\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async (offset) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport\n        }\n\n        this.setState({ isLoaderShow: true, isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getLobbyMultiGame(param);\n        if (api_response_data) {\n            this.setState({ isLoaderShow: false })\n            if (offset == 0) {\n                let tmpArray = [] \n                _Map(api_response_data,(obj)=>{\n                    if (Utilities.minuteDiffValue({ date: obj.game_starts_in ? obj.game_starts_in : obj.match_list[0].game_starts_in}) < 0) {\n                        tmpArray.push(obj);\n                    }\n                })\n                this.setState({ ContestList: tmpArray, \n                    OriginalContestList: tmpArray\n                }, () => {\n\n                    let tmpLeagues = []\n                    _Map(this.state.ContestList, (item) => {\n                        let obj = { league_id: item.league_id, league_name: item.league_name }\n                        if (tmpLeagues.filter(e => e.league_id === obj.league_id).length === 0) {\n                            tmpLeagues.push(obj)\n                        }\n                    })\n                    this.setState({ filterLeagueList: tmpLeagues }, () => {\n                        if (Constants.LOBBY_FILTER_ARRAY.length > 0) {\n                            this.filterLobbyResults({ league_id: Constants.LOBBY_FILTER_ARRAY[0].league_id })\n                        }\n                    })\n                })\n            } else {\n                let tmpArray = [] \n                _Map(api_response_data,(obj)=>{\n                    if (Utilities.minuteDiffValue({ date: obj.game_starts_in }) < 0) {\n                        tmpArray.push(obj);\n                    }\n                })\n                this.setState({ ContestList: [...this.state.ContestList, ...tmpArray], OriginalContestList: [...this.state.ContestList, ...tmpArray] });\n            }\n            this.setState({ contestListHasMore: api_response_data.is_load_more || false })\n            this.setState({ offset: api_response_data.offset })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    getSportsLeagueId(sports_id, filterArray) {\n\n        let league_id = '';\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == sports_id) {\n                league_id = filterArray[i].league_id;\n            }\n        }\n        return league_id;\n    }\n\n\n    /**\n     * @description - method to get fixtures listing  with next page data\n     */\n    fetchMoreContestData = () => {\n        this.lobbyContestList(this.state.offset);\n    }\n\n    /** \n    @description hide lobby filters \n    */\n    hideFilter = () => {\n        this.setState({ showLobbyFitlers: false })\n        this.props.hideFilterData()\n    }\n    /** \n    @description show lobby filters \n    */\n    showFilter = () => {\n        this.setState({ showLobbyFitlers: true })\n    }\n    /** \n    @description Apply filters and load data accordingly\n    */\n    filterLobbyResults = (filterObj) => {\n        let league_id = (!_isEmpty(filterObj.league_id) && typeof filterObj.league_id != 'undefined') ? filterObj.league_id : \"\";\n        this.setState({ league_id: league_id }, function () {\n            \n            this.filterFixturesLocally(league_id)\n        })\n\n        let filterArray = this.setFilterArray(league_id);\n        Constants.setValue.setFilter(filterArray);\n        this.setState({ league_id: league_id, showLobbyFitlers: false, offset: 0, filterArray: filterArray })\n        this.props.hideFilterData()\n    }\n\n    filterFixturesLocally(leagueIds) {\n        let allFixtures = this.state.OriginalContestList;\n        if (leagueIds == '') {\n            this.setState({ ContestList: allFixtures })\n        }\n        else {\n            let filteredList = [];\n            for (var i = 0; i < allFixtures.length; i++) {\n                if (leagueIds.includes(allFixtures[i].league_id)) {\n                    filteredList.push(allFixtures[i])\n                }\n\n            }\n\n            this.setState({ ContestList: filteredList })\n        }\n    }\n\n    setFilterArray(league_id) {\n        let { filterArray } = this.state;\n\n        let hasFilter = false;\n        if (filterArray.length > 0) {\n            for (let i = 0; i < filterArray.length; i++) {\n                if (filterArray[i].sports_id == this.state.sports_id) {\n                    hasFilter = true;\n                    filterArray[i].league_id = league_id;\n                }\n            }\n        }\n\n        if (!hasFilter && league_id != \"\") {\n            let filterObj = {\n                'sports_id': this.state.sports_id,\n                'league_id': league_id,\n            }\n            filterArray.push(filterObj);\n        }\n\n        return filterArray;\n    }\n\n    /**\n     * \n     * @description method to refresh page contest when user pull down to refresh screen\n     */\n    async handleRefresh() {\n        this.setState({\n            offset: 0,\n            isLoaderShow: true\n        }, () => {\n            this.lobbyContestList(0);\n            this.getBannerList();\n        })\n    }\n\n    /** \n     * @description api call to get baner listing from server\n    */\n   getBannerList = () => {\n    let sports_id = Constants.AppSelectedSport;\n    \n    if (sports_id == null)\n        return;\n    if (bannerData[sports_id]) {\n        this.parseBannerData(bannerData[sports_id])\n    } else {\n        setTimeout(async () => {\n            this.setState({ isLoaderShow: true })\n            let param = {\n                \"sports_id\": sports_id\n            }\n            var api_response_data = await getLobbyBanner(param);\n            if (api_response_data) {\n                bannerData[sports_id] = api_response_data;\n                this.parseBannerData(api_response_data)\n            }\n            this.setState({ isLoaderShow: false })\n        }, 1500);\n    }\n}\n\nparseBannerData = (bdata) => {\n    let refData = '';\n    let temp = [];\n    _Map(this.getSelectedbanners(bdata), (item, idx) => {\n        if (item.banner_type_id == 2) {\n            refData = item;\n        }\n        if (item.banner_type_id == 1) {\n            \n            \n            \n            \n        }\n        else {\n            temp.push(item);\n        }\n    })\n    setTimeout(() => {\n        CustomHeader.showRCM(refData);\n    }, 200);\n    this.setState({ BannerList: temp })\n}\n\n    getSelectedbanners(api_response_data) {\n        let tempBannerList = [];\n        for (let i = 0; i < api_response_data.length; i++) {\n            let banner = api_response_data[i];\n            if (WSManager.getToken() && WSManager.getToken() != '') {\n                if (banner.banner_type_id == Constants.BANNER_TYPE_REFER_FRIEND\n                    || banner.banner_type_id == Constants.BANNER_TYPE_DEPOSITE) {\n                    if (banner.amount > 0)\n                        tempBannerList.push(api_response_data[i]);\n                }\n                else if (banner.banner_type_id == '6') {\n                    \n                }\n                else {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n            else {\n                if (banner.banner_type_id == '6') {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n        }\n\n        return tempBannerList;\n    }\n\n    /**\n     * @description method to redirect user on appopriate screen when user click on banner\n     * @param {*} banner_type_id - id of banner on which clicked\n     */\n    redirectLink = (result) => {\n        \n        \n        if (result.banner_type_id == 1) {\n            let dateformaturl = Utilities.getUtcToLocal(result.schedule_date);\n            dateformaturl = new Date(dateformaturl);\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n            let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + result.collection_master_id + '/' + result.home + \"-vs-\" + result.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n            this.props.history.push({ pathname: contestListingPath });\n        }\n        else if (result.banner_type_id == 2) {\n            this.props.history.push({ pathname: '/refer-friend' });\n        }\n        else if (result.banner_type_id == 3) {\n            this.props.history.push({ pathname: '/add-funds' });\n        }\n        else if (result.banner_type_id == 4) {\n            window.open(result.target_url, \"_blank\")\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n        this.setState({ showLobbyFitlers: nextProps.showLobbyFitlers })\n\n    }\n\n    timerCompletionCall = (item) => {\n        let fArray = _filter(this.state.ContestList, (obj) => {\n            return item.collection_master_id != obj.collection_master_id\n        })\n        this.setState({\n            ContestList: fArray\n        })\n    }\n\n    render() {\n        var settings = {\n            touchThreshold: 10,\n            infinite: true,\n            slidesToScroll: 1,\n            slidesToShow: 1,\n            variableWidth: false,\n            initialSlide: 0,\n            dots: false,\n            autoplay:true,\n            autoplaySpeed:5000,\n            centerMode: this.state.BannerList.length == 1 ? false : true,\n            responsive: [\n                {\n                    breakpoint: 500,\n                    settings: {\n                        className: \"center\",\n                        centerPadding: \"20px\",\n                    }\n\n                },\n                {\n                    breakpoint: 360,\n                    settings: {\n                        className: \"center\",\n                        centerPadding: \"15px\",\n                    }\n\n                }\n            ]\n        };\n        const {\n            showContestDetail,\n            FixtureData,\n            contestListHasMore,\n            isLoaderShow,\n            showCollectionInfo\n        } = this.state\n        let FitlerOptions = {\n            showLobbyFitler: this.state.showLobbyFitlers,\n            filtered_league_id: this.state.league_id\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"transparent-header web-container tab-two-height pb0\">\n                        <Filter leagueList={this.state.league_id} {...this.props} FitlerOptions={FitlerOptions} hideFilter={this.hideFilter} filterLobbyResults={this.filterLobbyResults} customLeagues={this.state.filterLeagueList} ></Filter>\n                        <div >\n                              <Row>\n                                <Col sm={12}>\n                                    <div className={this.state.BannerList.length == 1 ? 'single-banner-wrap' : ''}>\n                                        <Slider {...settings}>\n                                            {this.state.BannerList.map((item, index) => {\n                                                return (\n                                                    <div className=\"banner-container\" key={index}>\n                                                        {item.banner_type_id == '1' || item.banner_type_id == '6' || item.banner_type_id == '4' ?\n                                                            <div className='banner-item'>\n                                                                <img alt='' onClick={() => this.redirectLink(item)} src={Utilities.getBannerURL(item.image)} />\n                                                            </div>\n                                                            :\n                                                            <div className='banner-item'>\n                                                                <img alt='' className='banner-logo' src={item.banner_type_id == '2' ? Images.REFER_FRIEND_SM : item.banner_type_id == '3' ? Images.BANNER_ADD_FUND : ''} ></img>\n                                                                <div onClick={() => this.redirectLink(item)} className='info-container'>\n                                                                    <div className='title-style'>{item.name}</div>\n                                                                    <div className='message-style'>\n                                                                        {item.banner_type_id == '2' ? AppLabels.GET + ' ' : item.banner_type_id == '3' ? ' ' + AppLabels.Earn + ' ' : ''}\n                                                                        <span className='highlighted-text'>{item.currency_type == 'INR' ? (Utilities.getMasterData().currency_code) : (item.currency_type == 'Bonus' ? <i className=\"icon-bonus bonus-ic\"></i> : '')}\n                                                                            {item.amount}</span>\n                                                                        {item.currency_type == 'Coin' ? \" \" + AppLabels.Coin : ''}\n                                                                        {item.banner_type_id == '2' ? ' ' + AppLabels.on_your_friends_signup : item.banner_type_id == '3' ? ' ' + AppLabels.on_your_first_cash_contest : ''}\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        }\n                                                    </div>);\n                                            })\n                                            }\n                                        </Slider>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <div className={\"collection-info-section\" + ( this.state.BannerList.length === 0 ?' m-t-10' : '')} onClick={this.CollectionInfoShow}>\n                                        <span>{AppLabels.COLLECTION}</span>\n                                        <i className=\"icon-info\"></i>\n                                    </div>\n\n                            {WSManager.loggedIn() && this.state.ContestList.length > 0 &&\n                                <div className={\"contest-action\" + (this.state.BannerList.length == 0 ? ' mt15' : '')}>\n                                    {Utilities.getMasterData().private_contest == '1' && Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                        <NavLink exact to={\"/create-contest\"} className=\"btn btnStyle btn-rounded small\">\n                                            <span className=\"text-uppercase\">{AppLabels.Create_a_Contest}</span>\n                                        </NavLink>\n                                    }\n                                    {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                        <NavLink exact to=\"/private-contest\" className=\"btn btnStyle btn-rounded small\">\n                                        <span className=\"league-code-btn text-uppercase\">\n                                            {AppLabels.JOIN_CONTEST}\n                                        </span>\n                                    </NavLink>\n                                    }\n                                    \n                                </div>\n                            }\n\n                            <Row className='mt15'>\n                                <Col sm={12}>\n                                    <Row>\n                                        <Col sm={12}>\n                                            <InfiniteScroll\n                                                style={{ overflow: 'hidden !important' }}\n                                                pullDownToRefresh={false}\n                                                pullDownToRefreshThreshold={500}\n                                                refreshFunction={() => this.handleRefresh()}\n                                                pullDownToRefreshContent={\n                                                    <h3 style={{ textAlign: 'center', fontSize: 14 }}>{}</h3>\n                                                }\n                                                releaseToRefreshContent={\n                                                    <h3 style={{ textAlign: 'center', fontSize: 14 }}>{}</h3>\n                                                }\n                                                dataLength={this.state.ContestList.length}\n                                                next={this.fetchMoreContestData.bind(this)}\n                                                hasMore={contestListHasMore}\n                                                scrollableTarget='test'\n                                                loader={\n                                                    isLoaderShow == true &&\n                                                    <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                }>\n                                                <div className=\"collection-list-wrapper\">\n                                                    {\n\n                                                        (this.state.ContestList.length == 0 && this.state.isListLoading) ?\n                                                            this.state.ShimmerList.map((item, index) => {\n                                                                return (\n                                                                    <Shimmer key={index} />\n                                                                )\n                                                            })\n                                                            :\n\n                                                            this.state.ContestList.length > 0 ?\n                                                                this.state.ContestList.map((item, index) => {\n                                                                    return (<MultiGameFixtureContest\n                                                                        {...this.props}\n                                                                        key={item.collection_master_id}\n                                                                        indexKey={item.collection_master_id}\n                                                                        ContestListItem={item}\n                                                                        gotoDetails={this.gotoDetails}\n                                                                        CollectionInfoShow={this.CollectionInfoShow}\n                                                                        IsCollectionInfoHide={this.CollectionInfoHide}\n                                                                        timerCallback={() => this.timerCompletionCall(item)}\n                                                                    />);\n                                                                })\n                                                                :\n                                                                (this.state.ContestList.length == 0 && !this.state.isListLoading) &&\n                                                                <NoDataView\n                                                                    BG_IMAGE={Images.no_data_bg_image}\n                                                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                                    MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                                                    MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                                                                    \n                                                                    \n                                                                    \n                                                                    onClick_2={this.joinContest}\n                                                                />\n                                                    }\n                                                </div>\n                                            </InfiniteScroll>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </div>\n                        {showContestDetail &&\n                            <ContestDetailModal IsContestDetailShow={showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={FixtureData} />\n                        }\n                        {showCollectionInfo &&\n                            <CollectionInfoModal IsCollectionInfoShow={showCollectionInfo} IsCollectionInfoHide={this.CollectionInfoHide} />\n                        }\n                        {\n                            \n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n\n        )\n    }\n\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            let league_id = this.getSportsLeagueId(nextProps.selectedSport, this.state.filterArray);\n            this.setState({\n                ContestList: [],\n                league_id: league_id,\n                offset: 0,\n                sports_id: nextProps.selectedSport,\n            }, () => {\n                \n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.lobbyContestList(0);\n                this.getBannerList();\n                Filter.reloadLobbyFilter();\n            })\n        }\n    }\n}\n\nexport default Lobby\n","/var/www/html/framework/frontend/src/Component/MyContest/MyContest.jsx",["2409","2410","2411","2412","2413","2414","2415","2416","2417","2418","2419","2420","2421","2422","2423","2424","2425","2426","2427","2428","2429","2430","2431","2432","2433","2434","2435","2436","2437","2438","2439","2440","2441","2442","2443","2444","2445","2446","2447","2448","2449","2450","2451","2452","2453","2454"],"import React from 'react';\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities, _isUndefined, _isEmpty, _debounce, parseURLDate } from '../../Utilities/Utilities';\nimport { LiveContest, CompletedContest, UpcomingContest } from '../MyContest';\nimport { my_contest_config } from '../../JsonFiles';\nimport { joinContest, getUserLineUps, getMyCollection, getMyCollectionMultiGame, getMyContestFreeToPlay,joinContestNetworkfantasy } from '../../WSHelper/WSCallings';\nimport ls from 'local-storage';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport TeamViewModal from '../../Modals/MyContestTeamView';\nimport * as Constants from \"../../helper/Constants\";\nimport ContestDetailModal from '../../Modals/ContestDetail';\nimport ShareContestModal from '../../Modals/ShareContestModal';\nimport SwitchTeam from '../../Modals/SwitchTeamModal';\nimport Skeleton from 'react-loading-skeleton';\nimport ConfirmationPopup from '../../Modals/ConfirmationPopup';\nimport Thankyou from '../../Modals/Thankyou';\nimport queryString from 'query-string';\nimport FieldViewRight from \"../../views/FieldViewRight\";\nimport CustomHeader from '../../components/CustomHeader';\nimport { NoDataView } from '../CustomComponent';\n\n/**\n  * @class MyContest\n  * @description My contest listing of current loggedin user for selected sports\n  * @author Vinfotech\n*/\nexport default class MyContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            showTeamView: false,\n            selectedTab: (this.props.location && this.props.location.state) ? (this.props.location.state.from == 'notification' ? Constants.CONTEST_COMPLETED : Constants.CONTEST_UPCOMING) : Constants.CONTEST_UPCOMING,\n            liveContestList: [],\n            upcomingContestList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            completedContestList: [],\n            showContestDetail: false,\n            FixtureData: '',\n            FixtureContestData: '',\n            showSharContestModal: false,\n            showSwitchTeamModal: false,\n            userTeamListSend: [],\n            showThankYouModal: false,\n            sports_id: Constants.AppSelectedSport ? Constants.AppSelectedSport : '',\n            allowCollection: Utilities.getMasterData().allow_collection,\n            LobyyData: '',\n            ConfirmationIsFrom: '',\n            lineupArr: [],\n            sideView: false,\n            fieldViewRightData: [],\n            rootitem: []\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ sideView: false })\n        let url = this.props.location.search;\n        let urlParams = queryString.parse(url);\n\n        let contest = urlParams.contest;\n        if (contest in my_contest_config.contest_url) {\n            let { sports_id } = this.state;\n            sports_id = Constants.AppSelectedSport;\n\n            this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n        else {\n            if (contest in my_contest_config.contest) {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n            }\n            else {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n            }\n            this.setState({ sports_id: Constants.AppSelectedSport }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (WSManager.loggedIn() && this.props.history.location.pathname == '/my-contests') {\n\n            if (this.state.sports_id != nextProps.selectedSport) {\n                this.reload(nextProps);\n            }\n            else {\n                let url = this.props.location.search;\n                let urlParams = queryString.parse(url);\n\n                let contest = urlParams.contest;\n                if (contest in my_contest_config.contest_url) {\n                    let { sports_id } = this.state;\n                    sports_id = Constants.AppSelectedSport;\n                       let tmpSelectedTab = my_contest_config.contest_url[contest];\n                    if (this.state.selectedTab != tmpSelectedTab || this.state.sports_id != Constants.AppSelectedSport) {\n\n                        this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                            this.getMyCollectionsList(this.state.selectedTab)\n                        })\n                    }\n                }\n                else {\n                    if (contest in my_contest_config.contest) {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n                    }\n                    else {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n                    }\n                }\n            }\n        }\n    }\n\n    sideViewHide = () => {\n        this.setState({\n            sideView: false,\n        })\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    /**\n     * @description This function is called from Thankyou Modal\n     * @see Thankyou Modal\n    */\n    seeMyContest = () => {\n        this.setState({ showThankYouModal: false }, () => {\n            this.getMyCollectionsList(this.state.selectedTab)\n        })\n    }\n\n    /**\n     * @description This function is called to get user lineup from server\n     * @param event user click event\n     * @param CollectionData Root item or Fixture item of Fixture list\n     * @param childItem Contest list item comes in Fixture item\n     * @param teamItem Team list item comes in Contest item\n     * @param showPopup bollean value to display confirmation popup\n    */\n    getUserLineUpListApi = (event, CollectionData, childItem, teamItem, showPopup) => {\n\n        if (event != null) {\n            event.stopPropagation();\n        }\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"collection_master_id\": CollectionData.collection_master_id,\n        }\n\n        this.setState({ isLoaderShow: true })\n        getUserLineUps(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    userTeamListSend: responseJson.data\n                })\n            }\n            if (responseJson && responseJson.data && responseJson.data.length > 0) {\n                let tempList = [];\n                responseJson.data.map((data, key) => {\n                    tempList.push({ value: data, label: data.team_name })\n                    return '';\n                })\n\n                this.setState({ userTeamListSend: tempList, showConfirmationPopUp: showPopup, FixtureData: CollectionData, FixtureContestData: childItem });\n            }\n            else {\n                this.joinContest(CollectionData, childItem, teamItem)\n            }\n            if (!showPopup) {\n                this.setState({\n                    FixtureData: childItem,\n                    showContestDetail: true,\n                });\n            }\n        })\n    }\n\n    /**\n     * @description call this to display confirmation popup\n     * @param data unused here\n     * @see ConfirmationPopup\n    */\n    ConfirmatioPopUpShow = (data) => {\n        this.setState({\n            showConfirmationPopUp: true,\n        });\n    }\n\n    /**\n     * @description call this to hide confirmation popup\n     * @param data unused here\n     * @see ConfirmationPopup\n    */\n    ConfirmatioPopUpHide = () => {\n        this.setState({\n            showConfirmationPopUp: false,\n        });\n    }\n\n    /**\n     * @description This function is responsible to call lineup class with formated url data \n     * @param dataFromConfirmFixture Contest list item\n     * @param dataFromConfirmLobby Fixture list item\n     * @see ConfirmationPopup\n    */\n    createTeamAndJoin = (dataFromConfirmFixture, dataFromConfirmLobby) => {\n        WSManager.clearLineup();\n        let urlData = '';\n\n        if (this.state.ConfirmationIsFrom == '') {\n            urlData = this.state.FixtureData;\n        }\n        else {\n            urlData = this.state.LobyyData;\n        }\n        let lengthMatchList = urlData.match_list ? urlData.match_list.length : 0\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        dateformaturl = dateformaturl.getDate() + '-' + (dateformaturl.getMonth() + 1) + '-' + dateformaturl.getFullYear();\n\n        if (lengthMatchList == 0) {\n            this.props.history.push({ pathname: '/lineup/' + urlData.home.toLowerCase() + \"-vs-\" + urlData.away.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: dataFromConfirmFixture, LobyyData: this.state.LobyyData ? this.state.LobyyData : dataFromConfirmLobby, resetIndex: 1, collection_master_id: urlData.collection_master_id } })\n        }\n        else if (lengthMatchList == 1) {\n            this.props.history.push({ pathname: '/lineup/' + urlData.match_list[0].home.toLowerCase() + \"-vs-\" + urlData.match_list[0].away.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: dataFromConfirmFixture, LobyyData: this.state.LobyyData ? this.state.LobyyData : dataFromConfirmLobby, resetIndex: 1, collection_master_id: urlData.collection_master_id } })\n        }\n        else {\n            let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n            this.props.history.push({ pathname: '/lineup/' + pathurl + \"-\" + dateformaturl, state: { FixturedContest: dataFromConfirmFixture, LobyyData: this.state.LobyyData ? this.state.LobyyData : dataFromConfirmLobby, resetIndex: 1, collection_master_id: urlData.collection_master_id } })\n        }\n    }\n\n    /**\n     * @description This function is responsible to call lineup class with formated url data \n     * @param dataFromConfirmPopUp state of Confirmatio popup\n     * @see ConfirmationPopup\n    */\n\n    ConfirmEvent = (dataFromConfirmPopUp) => {\n        if (dataFromConfirmPopUp.selectedTeam.lineup_master_id != null && dataFromConfirmPopUp.selectedTeam.lineup_master_id == \"\" || dataFromConfirmPopUp.selectedTeam == \"\") {\n            Utilities.showToast(AppLabels.SELECT_NAME_FIRST, 1000);\n        } else {\n            var currentEntryFee = 0;\n            currentEntryFee = dataFromConfirmPopUp.entryFeeOfContest;\n            if (\n                (dataFromConfirmPopUp.FixturedContestItem.currency_type == 2 && (parseInt(currentEntryFee) <= parseInt(dataFromConfirmPopUp.balanceAccToMaxPercent))) ||\n                (dataFromConfirmPopUp.FixturedContestItem.currency_type != 2 && (parseFloat(currentEntryFee) <= parseFloat(dataFromConfirmPopUp.balanceAccToMaxPercent)))\n            ) {\n                this.CallJoinGameApi(dataFromConfirmPopUp);\n            }\n            else {\n                if (dataFromConfirmPopUp.FixturedContestItem.currency_type == 2) {\n                    if (Constants.EnableBuyCoin) {\n                        WSManager.setFromConfirmPopupAddFunds(true);\n                        WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                        WSManager.setPaymentCalledFrom(\"mycontest\")\n                        this.props.history.push({ pathname: '/buy-coins', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true, state: { isFrom: 'mycontest' } });\n\n\n                    }\n                    else{\n                        // Utilities.showToast('Not enough coins', 1000);\n                        this.props.history.push({ pathname:'/earn-coins', state: {isFrom : 'lineup-flow'}})\n                    }\n                    // Utilities.showToast('Not enough coins', 1000);\n                    // WSManager.setFromConfirmPopupAddFunds(true);\n                    // WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                    // WSManager.setPaymentCalledFrom(\"ContestListing\")\n                    // this.props.history.push({ pathname: '/buy-coins', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true });\n                }\n\n                else {\n                    WSManager.setFromConfirmPopupAddFunds(true);\n                    WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                    WSManager.setPaymentCalledFrom(\"mycontest\")\n                    this.props.history.push({ pathname: '/add-funds', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true });\n                }\n\n            }\n        }\n    }\n\n    /**\n     * @description This function is responsible to call Join contest API \n     * @param dataFromConfirmPopUp state of Confirmatio popup\n     * @see ConfirmationPopup\n    */\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        let param = {\n            \"contest_id\": dataFromConfirmPopUp.FixturedContestItem.contest_id,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        this.setState({ isLoaderShow: true })\n        let IsNetworkContest = this.state.FixtureData.is_network_collection == 1;\n        if(IsNetworkContest){\n            joinContestNetworkfantasy(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.ConfirmatioPopUpHide();\n                    setTimeout(() => {\n                        this.ThankYouModalShow()\n                    }, 300);\n                    WSManager.clearLineup();\n                } else {\n                    Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n                }\n            })\n        }\n        else{\n            joinContest(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.ConfirmatioPopUpHide();\n                    setTimeout(() => {\n                        this.ThankYouModalShow()\n                    }, 300);\n                    WSManager.clearLineup();\n                } else {\n                    Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n                }\n            })\n        }\n     \n    }\n\n    /**\n     * @description This function is used to display Thank you popup\n     * @param data unused here\n     * @see Thankyou\n    */\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    /**\n     * @description This function is used to hide Thank you popup\n     * @param data unused here\n     * @see Thankyou\n    */\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n    /**\n     * @deprecated This functions is deprecated\n     * @description This is used to display player on lineup on TeamViewModal\n     * @see TeamViewModal\n     */\n    ShowTeamView = () => {\n        this.setState({\n            showTeamView: true,\n        });\n    }\n\n    /**\n     * @deprecated This functions is deprecated\n     * @description This is used to hide TeamViewModal (player on lineup)\n     * @see TeamViewModal\n     */\n    HideTeamView = () => {\n        this.setState({\n            showTeamView: false,\n        });\n    }\n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        window.history.replaceState(\"\", \"\", \"/my-contests?contest=\" + my_contest_config.contest[selectedTab]);\n        this.setState({ selectedTab: selectedTab }, () => {\n            this.getMyCollectionsList(this.state.selectedTab)\n        });\n    }, 300)\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyCollectionsList = async (status) => {\n        this.setState({ sideView: false })\n        var param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"status\": status,\n        }\n        this.setState({ isLoaderShow: true })\n\n        let apiStatus = Constants.SELECTED_GAMET == Constants.GameType.MultiGame ? getMyCollectionMultiGame : Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? getMyContestFreeToPlay : getMyCollection\n        var responseJson = await apiStatus(param);\n        this.setState({ isLoaderShow: false })\n\n\n        if (responseJson && responseJson.response_code == WSC.successCode) {\n            switch (this.state.selectedTab) {\n                case Constants.CONTEST_UPCOMING:\n                    this.setState({ upcomingContestList: responseJson.data })\n                    break;\n                case Constants.CONTEST_LIVE:\n                    this.setState({ liveContestList: responseJson.data })\n                    break;\n                case Constants.CONTEST_COMPLETED:\n                    this.setState({ completedContestList: responseJson.data })\n                    break;\n                default:\n                    this.setState({ upcomingContestList: responseJson.data })\n            }\n        }\n\n    }\n\n    /**\n     * @description This function is responsible to open leaderboard page for selected contest\n     * @param e click event\n     * @param childItem Contest list item\n     * @param rootItem Fixture list item\n     * @see Leaderboard\n     */\n    openLeaderboard = (e, childItem, rootItem) => {\n        if (e) {\n            e.stopPropagation()\n        }\n\n        this.props.history.push({\n            pathname: '/' + Utilities.getSelectedSportsForUrl().toLowerCase() + '/leaderboard',\n            state: {\n                rootItem: rootItem,\n                contestItem: childItem,\n                status: this.state.selectedTab,\n            }\n\n        })\n    }\n\n    /**\n     * @description This function opens lineup page with formated data to join contest\n     * @param data Fixture (root) data\n     * @see ContestDetailModal\n     */\n    onSubmitBtnClick = (data) => {\n\n        if (this.state.userTeamListSend != null && !_isUndefined(this.state.userTeamListSend) && this.state.userTeamListSend.length > 0) {\n\n            this.ContestDetailHide();\n            setTimeout(() => {\n                this.setState({ showConfirmationPopUp: true, FixtureData: this.state.FixtureData, ConfirmationIsFrom: 'contestdetail' })\n            }, 200);\n        } else {\n            let urlData = data;\n            let dateformaturl = parseURLDate(urlData.season_scheduled_date);\n            let lineupPath = '/lineup/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, from: \"contestJoin\", LobyyData: urlData, resetIndex: 1 } })\n        }\n    }\n\n    /**\n     * @description This function opens a detailed page for contest on modal\n     * @param data contest item\n     * @see ContestDetailModal\n     */\n    ContestDetailShow = (childItem, data) => {\n        if ((parseInt(childItem.user_joined_count) < parseInt(childItem.multiple_lineup)) && (parseInt(childItem.size) > parseInt(childItem.total_user_joined))) {\n\n            this.setState({\n                FixtureData: childItem,\n                showContestDetail: true,\n                LobyyData: data\n            }, () => {\n                if (this.state.selectedTab == Constants.CONTEST_UPCOMING) {\n                    this.getUserLineUpListApi(null, childItem, childItem, \"teamItem\", false)\n                }\n            });\n        }\n        else {\n            this.setState({\n                FixtureData: childItem,\n                showContestDetail: true,\n                LobyyData: data\n            });\n        }\n    }\n\n    /**\n     * @description This function hides contest detail\n     * @see ContestDetailModal\n     */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    /**\n     * @description This function responsible to open lineup screen for team with url formated data\n     * @param rootitem Fixture Item\n     * @param contestItem Contest Item\n     * @param teamitem Team Item\n     * @param isEdit is lineup editable or not\n     * @param isFromtab from which the lineup is called\n     * @see FieldView\n     */\n    openLineup = (rootitem, contestItem, teamitem, isEdit, isFromtab, sideView) => {\n        const { allowCollection } = this.state;\n        this.setState({\n            sideView: sideView,\n            fieldViewRightData: teamitem,\n            rootitem: rootitem\n        })\n        let urlData = rootitem;\n        let dateformaturl = parseURLDate(urlData.season_scheduled_date);\n        let homePlayerCount = 0;\n        let awayPlayerCount = 0;\n\n        if (typeof this.state.lineupArr != 'undefined' && this.state.lineupArr.length > 0) {\n            this.state.lineupArr.map((lineupItem, lineupIndex) => {\n                if (Constants.SELECTED_GAMET != Constants.GameType.MultiGame) {\n                    if (lineupItem.team_abbreviation == urlData.home || lineupItem.team_abbr == urlData.home) {\n                        homePlayerCount = homePlayerCount + 1;\n                    }\n                    else {\n                        awayPlayerCount = awayPlayerCount + 1;\n                    }\n                }\n                else {\n                    if (lineupItem.team_abbreviation == urlData.match_list[0].home || lineupItem.team_abbr == urlData.match_list[0].home) {\n                        homePlayerCount = homePlayerCount + 1;\n                    }\n                    else {\n                        awayPlayerCount = awayPlayerCount + 1;\n                    }\n                }\n\n\n            });\n        }\n\n        ls.set('home_player_count', homePlayerCount);\n        ls.set('away_player_count', awayPlayerCount);\n        ls.set('Lineup_data', this.state.lineupArr);\n\n        let lineupPath = '';\n        if (sideView == false || isEdit == true) {\n            if (isEdit == false) {\n                if (urlData.home) {\n                    let fieldViewPath = '/field-view/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: fieldViewPath.toLowerCase(), state: { team: teamitem, contestItem: contestItem, rootitem: rootitem, isEdit: isEdit, from: 'MyContest', isFromtab: isFromtab, isFrom: 'MyContest', resetIndex: 1 } });\n                }\n                else {\n                    let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                    let fieldViewPath = '/field-view/' + pathurl + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: fieldViewPath.toLowerCase(), state: { team: teamitem, contestItem: contestItem, rootitem: rootitem, isEdit: isEdit, from: 'MyContest', isFromtab: isFromtab, isFrom: 'MyContest', resetIndex: 1 } });\n                }\n            }\n            else if (Constants.SELECTED_GAMET != Constants.GameType.MultiGame) {\n                lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? urlData : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: urlData, isFromMyTeams: true, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: 1, teamitem: teamitem, collection_master_id: contestItem.collection_master_id, league_id: contestItem.league_id } });\n            }\n            else {\n                let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? urlData : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: this.state.rootDataItem, isFromMyTeams: true, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: 1, teamitem: teamitem, collection_master_id: contestItem.collection_master_id, league_id: contestItem.league_id } });\n            }\n        }\n    }\n\n    /**\n     * @description This function is responsible to remove item from list\n     * @param status Selected Tab\n     * @param index index of item to remove from list\n     */\n    removeFromList = (status, index) => {\n\n        let key = my_contest_config.tab_state_key[this.state.selectedTab];\n        let list = this.state[key];\n        list.splice(index, 1);\n        this.setState({ [key]: list })\n    }\n\n    /**\n     * @description This function is responsible to open lineup to join contest with formatted URL data\n     * @param item Fixture item\n     * @see FieldView\n     */\n    joinContest(rootitem, contestItem, teamitem) {\n\n        let urlData = rootitem;\n        let dateformaturl = parseURLDate(urlData.season_scheduled_date);\n        let lineupPath = '';\n\n        if (urlData.home) {\n            lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: contestItem, from: \"contestJoin\", team: teamitem, rootDataItem: rootitem } })\n        }\n        else {\n            let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n            lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: contestItem, from: \"contestJoin\", team: teamitem, rootDataItem: rootitem } })\n        }\n    }\n\n    /**\n     * @description This function opens the Switch Team Modal\n     * @param fixtureData Fixture item\n     * @param contestData Contest item\n     * @param teamData Team item\n     * @see SwitchTeam\n     */\n    switchTeamModalShow = (fixtureData, contestData, teamData) => {\n        this.setState({\n            showSwitchTeamModal: true,\n        }, () => {\n            this.switchTeamRef.setData(fixtureData, contestData, teamData)\n        });\n    }\n\n    /**\n     * @description This function hides the Switch Team Modal\n     * @param isSuccess Whether switch api respond success or not\n     * @see SwitchTeam\n     */\n    switchTeamModalHide = (isSuccess) => {\n        if (isSuccess) {\n            this.getMyCollectionsList(this.state.selectedTab)\n        }\n        this.setState({\n            showSwitchTeamModal: false,\n        });\n    }\n\n    /**\n     * @description This function shows the ShareContestModal\n     * @param data not used\n     * @see ShareContestModal\n     */\n    shareContestModalShow = (data) => {\n        this.setState({\n            showSharContestModal: true,\n        });\n    }\n\n    /**\n     * @description This function hides the ShareContestModal\n     * @param data not used\n     * @see ShareContestModal\n     */\n    shareContestModalHide = () => {\n        this.setState({\n            showSharContestModal: false,\n        });\n    }\n\n    /**\n     * @description This function overloaded @see shareContestModalShow() and shows the ShareContestModal\n     * @param shareContestEvent Click event\n     * @param FixturedContestItem Contest item\n     * @see ShareContestModal\n     */\n    shareContest = (shareContestEvent, FixturedContestItem) => {\n        shareContestEvent.stopPropagation();\n        this.setState({ showSharContestModal: true, FixtureData: FixturedContestItem })\n    }\n\n    /**\n     * @description This function is called when sports changed from header\n     * @static A static function \n    */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/my-contests\")) {\n            this.setState({ completedContestList: [], liveContestList: [], upcomingContestList: [], sports_id: nextProps.selectedSport }, () => {\n                this.getMyCollectionsList(this.state.selectedTab)\n            })\n        }\n    }\n\n\n    /**\n     * @description This function render all UI components. It is the React lifecycle methods that called after @see componentWillMount()\n     * @return UI Components\n    */\n    render() {\n        const {\n            showTeamView,\n            showSharContestModal,\n            showSwitchTeamModal,\n            showConfirmationPopUp,\n            showThankYouModal\n        } = this.state;\n\n        let MESSAGE_1 = this.state.selectedTab == Constants.CONTEST_UPCOMING ?\n            AppLabels.NO_UPCOMING_CONTEST1\n            :\n            this.state.selectedTab == Constants.CONTEST_LIVE ?\n                AppLabels.NO_LIVE_CONTEST1\n                :\n                AppLabels.NO_COMPLETED_CONTEST1\n\n        let MESSAGE_2 = this.state.selectedTab == Constants.CONTEST_UPCOMING ?\n            AppLabels.NO_UPCOMING_CONTEST2\n            :\n            this.state.selectedTab == Constants.CONTEST_LIVE ?\n                AppLabels.NO_LIVE_CONTEST2\n                :\n                AppLabels.NO_COMPLETED_CONTEST2\n\n        let HeaderOption = {\n            title: AppLabels.MY_CONTEST,\n            notification: true,\n            hideShadow: true,\n            back: true\n\n        };\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container my-contest-style tab-two-height web-container-fixed\">\n                        {!this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        <div className={\"tabs-primary \" + (!this.props.hideHeader ? ' mt50' : '')}>\n                            <Tab.Container id='my-contest-tabs' activeKey={this.state.selectedTab} onSelect={() => console.log('clicked')} defaultActiveKey={this.state.selectedTab}>\n                                <Row className=\"clearfix\">\n                                    <Col className=\"top-fixed my-contest-tab circular-tab\" xs={12}>\n                                        <Nav>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_LIVE)} eventKey={Constants.CONTEST_LIVE} className=\"live-contest\"><span className=\"live-indicator\"></span> {AppLabels.LIVE} </NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_UPCOMING)} eventKey={Constants.CONTEST_UPCOMING}>{AppLabels.UPCOMING}</NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_COMPLETED)} eventKey={Constants.CONTEST_COMPLETED}>{AppLabels.COMPLETED}</NavItem>\n                                        </Nav>\n                                    </Col>\n                                    <Col className=\"top-tab-margin\" xs={12}>\n                                        <Tab.Content animation>\n                                            <Tab.Pane eventKey={Constants.CONTEST_LIVE}>\n                                                <LiveContest liveContestList={this.state.liveContestList} ContestDetailShow={this.ContestDetailShow} openLeaderboard={this.openLeaderboard} allowCollection={this.state.allowCollection} />\n\n                                                {\n                                                    this.state.liveContestList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.liveContestList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item, index) => {\n                                                        return (\n                                                            <Shimmer key={index} />\n                                                        )\n                                                    })\n                                                }\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_UPCOMING}>\n\n                                                <UpcomingContest upcomingContestList={this.state.upcomingContestList} removeFromList={this.removeFromList}\n                                                    ContestDetailShow={this.ContestDetailShow} getUserLineUpListApi={this.getUserLineUpListApi}\n                                                    shareContest={this.shareContest} switchTeamModalShow={this.switchTeamModalShow} openLineup={this.openLineup}\n                                                    allowCollection={this.state.allowCollection} />\n\n                                                {\n                                                    this.state.upcomingContestList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.upcomingContestList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item, index) => {\n                                                        return (\n                                                            <Shimmer key={index} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_COMPLETED}>\n                                                <CompletedContest completedContestList={this.state.completedContestList} ContestDetailShow={this.ContestDetailShow} openLeaderboard={this.openLeaderboard} allowCollection={this.state.allowCollection} />\n\n                                                {\n                                                    this.state.completedContestList.length == 0 && !this.state.isLoaderShow &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                        MESSAGE_2={''}\n                                                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                        onClick={this.goToLobby}\n                                                    />\n                                                }\n\n                                                {\n                                                    this.state.completedContestList.length == 0 && this.state.isLoaderShow &&\n                                                    this.state.ShimmerList.map((item, index) => {\n                                                        return (\n                                                            <Shimmer key={index} />\n                                                        )\n                                                    })\n                                                }\n\n                                            </Tab.Pane>\n                                        </Tab.Content>\n                                    </Col>\n                                </Row>\n                            </Tab.Container>\n\n                            {\n                                true &&\n                                <TeamViewModal IsTeamViewShow={showTeamView} IsTeamViewHide={this.HideTeamView} />\n                            }\n                            {this.state.showContestDetail &&\n                                <ContestDetailModal {...this.props} contestStatus={this.state.selectedTab} IsContestDetailShow={this.state.showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={this.state.FixtureData} LobyyData={this.state.LobyyData} />\n                            }\n\n                            {showSharContestModal &&\n                                <ShareContestModal IsShareContestModalShow={this.shareContestModalShow} IsShareContestModalHide={this.shareContestModalHide} FixturedContestItem={this.state.FixtureData} />\n                            }\n\n                            {showSwitchTeamModal &&\n                                <SwitchTeam ref={ref => this.switchTeamRef = ref} mHistory={this.props.history} IsSwitchTeamModalShow={this.switchTeamModalShow} IsSwitchTeamModalHide={this.switchTeamModalHide} />\n                            }\n\n                            {showConfirmationPopUp &&\n                                <ConfirmationPopup IsConfirmationPopupShow={showConfirmationPopUp} IsConfirmationPopupHide={this.ConfirmatioPopUpHide} TeamListData={this.state.userTeamListSend} FixturedContest={this.state.FixtureContestData} ConfirmationClickEvent={this.ConfirmEvent} CreateTeamClickEvent={this.createTeamAndJoin} lobbyDataToPopup={this.state.FixtureData} fromContestListingScreen={true} createdLineUp={''} />\n                            }\n\n                            {showThankYouModal &&\n                                <Thankyou from={'MyContest'} ThankyouModalShow={this.ThankYouModalShow} ThankYouModalHide={this.ThankYouModalHide} goToLobbyClickEvent={this.goToLobby} seeMyContestEvent={this.seeMyContest} />\n                            }\n\n                            {this.state.sideView &&\n                                <FieldViewRight\n                                    SelectedLineup={this.state.lineupArr.length ? this.state.lineupArr : []}\n                                    MasterData={this.state.masterData}\n                                    LobyyData={this.state.LobyyData}\n                                    FixturedContest={this.state.FixturedContest}\n                                    isFrom={this.state.isFrom}\n                                    isFromUpcoming={true}\n                                    rootDataItem={this.state.rootDataItem}\n                                    team={this.state.team}\n                                    team_name={this.state.teamName}\n                                    resetIndex={1}\n                                    TeamMyContestData={this.state.fieldViewRightData}\n                                    isFromMyTeams={this.state.isFromMyTeams}\n                                    ifFromSwitchTeamModal={this.state.ifFromSwitchTeamModal}\n                                    rootitem={this.state.rootitem}\n                                    sideViewHide={this.sideViewHide}\n                                />\n                            }\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n/**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nconst Shimmer = ({ idx }) => {\n    return (\n        <div key={idx} className=\"contest-list m border shadow-none\">\n            <div className=\"shimmer-container\">\n                <div className=\"shimmer-top-view\">\n                    <div className=\"shimmer-line\">\n                        <Skeleton height={9} />\n                        <Skeleton height={6} />\n                        <Skeleton height={4} width={100} />\n                    </div>\n                    <div className=\"shimmer-image\">\n                        <Skeleton width={30} height={30} />\n                    </div>\n                </div>\n                <div className=\"shimmer-bottom-view\">\n                    <div className=\"progress-bar-default w-100\">\n                        <Skeleton height={6} />\n                        <div className=\"d-flex justify-content-between\">\n                            <Skeleton height={4} width={60} />\n                            <Skeleton height={4} width={60} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","/var/www/html/framework/frontend/src/Component/MyContest/UpcomingContest.jsx",["2455","2456","2457","2458","2459","2460","2461","2462","2463","2464","2465","2466","2467","2468","2469","2470","2471","2472","2473","2474","2475","2476","2477","2478","2479","2480","2481","2482","2483"],"import React from 'react';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { ProgressBar } from 'react-bootstrap';\nimport { getMyContest ,getMiniLeagueMyContest} from '../../WSHelper/WSCallings';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport CollectionSlider from \"../../views/CollectionSlider\";\nimport * as Constants from \"../../helper/Constants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport Skeleton from 'react-loading-skeleton';\nimport { MomentDateComponent } from '../CustomComponent';\nimport Images from '../../components/images';\n\n\nexport default class UpcomingContest extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            upcomingContestList: [],\n            loadingIndex: -1\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item, idx) {\n        if (item.isExpanded) {\n            let upcomingContestList = this.state.upcomingContestList;\n            item['isExpanded'] = false;\n            upcomingContestList[idx] = item;\n            this.setState({ upcomingContestList })\n        } else {\n            if (item.contest && item.contest.length > 0) {\n                let upcomingContestList = this.state.upcomingContestList;\n                item['isExpanded'] = true;\n                upcomingContestList[idx] = item;\n                this.setState({ upcomingContestList })\n            } else {\n                var param = {\n                    \"sports_id\": Constants.AppSelectedSport,\n                    \"status\": 0,\n                    \"collection_master_id\": item.collection_master_id\n                }\n                this.setState({ loadingIndex: idx })\n                let apiStatus = Constants.SELECTED_GAMET == Constants.GameType.Free2Play ?  getMiniLeagueMyContest : getMyContest\n                   apiStatus(param).then((responseJson) => {\n                    this.setState({ loadingIndex: -1 })\n\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        let upcomingContestList = this.state.upcomingContestList;\n                        item['contest'] = responseJson.data;\n                        item['isExpanded'] = true;\n                        upcomingContestList[idx] = item;\n                        this.setState({ upcomingContestList })\n                    }\n                })\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.upcomingContestList !== nextProps.upcomingContestList) {\n            this.setState({ upcomingContestList: nextProps.upcomingContestList })\n        }\n    }\n    getPrizeAmount = (prize_data) => {\n        let prize_text = \"Prizes\";\n        let is_tie_breaker = 0;\n        let prizeAmount = { 'real': 0, 'bonus': 0, 'point': 0 };\n        return (\n            <React.Fragment>\n                {\n                    prize_data && prize_data.map(function (lObj, lKey) {\n                        var amount = 0;\n                        if (lObj.max_value) {\n                            amount = parseFloat(lObj.max_value);\n                        } else {\n                            amount = parseFloat(lObj.amount);\n                        }\n                        if (lObj.prize_type == 3) {\n                            is_tie_breaker = 1;\n                        }\n                        if (lObj.prize_type == 0) {\n                            prizeAmount['bonus'] = parseFloat(prizeAmount['bonus']) + amount;\n                        } else if (lObj.prize_type == 2) {\n                            prizeAmount['point'] = parseFloat(prizeAmount['point']) + amount;\n                        } else {\n                            prizeAmount['real'] = parseFloat(prizeAmount['real']) + amount;\n                        }\n                    })\n                }\n                {\n                    is_tie_breaker == 0 && prizeAmount.real > 0 ?\n                    <span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}{parseFloat(prizeAmount.real).toFixed(0)}</span>\n                    : is_tie_breaker == 0 && prizeAmount.bonus > 0 ? <span className=\"contest-prizes\" ><i className=\"icon-bonus\" width=\"13px\" height=\"14px\" />{parseFloat(prizeAmount.bonus).toFixed(0)}</span>\n                    :is_tie_breaker == 0 && prizeAmount.point > 0 ? <span style={{ display: 'inlineBlock' }}> <img style={{ marginTop: '2px' }} src={Images.IC_COIN} width=\"12px\" height=\"12px\" />{parseFloat(prizeAmount.point).toFixed(0)}</span>\n                    : AppLabels.PRIZES\n                }\n            </React.Fragment>\n        )\n\n\n     }\n\n    render() {\n        let { removeFromList, ContestDetailShow, getUserLineUpListApi, shareContest, switchTeamModalShow, openLineup} = this.props;\n\n        return (\n            <div>\n                {\n                    this.state.upcomingContestList.length > 0 &&\n                    _Map(this.state.upcomingContestList, (item, idx) => {\n                        return (\n                            <div key={idx} className={\"contest-card upcoming-contest-card-new\" + (Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list && item.match_list.length > 1 ? ' contest-card-with-collection' : '')}>\n                                <div onClick={() => this.getMyContestList(item, idx)} className={\"contest-card-header pointer-cursor\" + (item.isExpanded ? ' pb15' : '')}>\n                                    <ul>\n                                        {(!item.match_list || item.match_list.length < 2) && <li className=\"team-left-side\">\n                                            {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                <React.Fragment>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={item.home_flag ? Utilities.teamFlagURL(item.home_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                    <div className=\"contest-details-action\">\n                                                        <div className=\"contest-details-first-div\">{item.home}</div>\n                                                    </div>\n                                                </React.Fragment>\n                                            }\n                                            {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.season_game_count>1 &&\n                                                <React.Fragment>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={item.match_list ? Utilities.teamFlagURL(item.match_list[0].home_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                    <div className=\"contest-details-action\">\n                                                        <div className=\"contest-details-first-div\">{item.match_list ?item.match_list[0].home:''}</div>\n                                                    </div>\n                                                </React.Fragment>\n                                            }\n                                            {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.season_game_count<=1 &&\n                                                <React.Fragment>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={item.home_flag ? Utilities.teamFlagURL(item.home_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                    <div className=\"contest-details-action\">\n                                                        <div className=\"contest-details-first-div\">{item.home}</div>\n                                                    </div>\n                                                </React.Fragment>\n                                            }\n                                        </li>\n                                        }\n                                        <li className=\"progress-middle\">\n                                            <div className=\"team-content\">\n                                                {(!item.match_list || item.match_list.length < 2) &&\n                                                    <React.Fragment>\n                                                        <p>\n                                                            {item.league_name} \n                                                            {Constants.AppSelectedSport === '7' &&\n                                                                <React.Fragment>- {Constants.MATCH_TYPE[item.format]}</React.Fragment>\n                                                            }\n                                                        </p>\n                                                        {\n                                                            Utilities.showCountDown(item) ?\n                                                                <span>\n                                                                    {item.game_starts_in && <CountdownTimer timerCallback={() => removeFromList(Constants.CONTEST_UPCOMING, idx)} deadlineTimeStamp={item.game_starts_in} />}\n                                                                </span>\n                                                                :\n                                                                <span className=\"time-line-date\"> <MomentDateComponent data={{date:item.season_scheduled_date,format:\"D MMM - hh:mm A\"}} /> </span>\n                                                        }\n                                                    </React.Fragment>\n                                                }\n                                                {(Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list && item.match_list.length > 1) &&\n                                                    <React.Fragment>\n                                                        <p className=\"collection_name\">{item.collection_name}</p>\n                                                        <div className=\"collection-match-info\">\n                                                            {item.match_list.length} {AppLabels.MATCHES_SM}\n                                                            <span className=\"circle-divider\"></span>\n                                                            {item.league_name}\n                                                        </div>\n                                                    </React.Fragment>\n                                                }\n                                            </div>\n                                        </li>\n                                      \n                                      {(!item.match_list || item.match_list.length < 2) && <li className=\"team-right-side\">\n                                        \n                                            {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                <React.Fragment>\n                                                    <div className=\"contest-details-action\">\n                                                        <div className=\"contest-details-first-div\">{item.away}</div>\n                                                    </div>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={item.away_flag ? Utilities.teamFlagURL(item.away_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                </React.Fragment>\n                                            }\n                                            {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.season_game_count>1 &&\n                                                <React.Fragment>\n                                                    <div className=\"contest-details-action\">\n                                                        <div className=\"contest-details-first-div\">{item.match_list?item.match_list[0].away:''}</div>\n                                                    </div>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={item.match_list ? Utilities.teamFlagURL(item.match_list?item.match_list[0].away_flag:'') : \"\"} alt=\"\" />\n                                                    </div>\n                                                </React.Fragment>\n                                            }\n                                            {Constants.SELECTED_GAMET == Constants.GameType.MultiGame  && item.season_game_count<=1 &&\n                                                <React.Fragment>\n                                                    <div className=\"contest-details-action\">\n                                                        <div className=\"contest-details-first-div\">{item.away}</div>\n                                                    </div>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={item.away_flag ? Utilities.teamFlagURL(item.away_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                </React.Fragment>\n                                            }\n                                            \n                                        </li>\n                                        }\n                                    </ul>\n                                </div>\n                                {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item && item.match_list && item.match_list.length > 1 &&\n                                    <div onClick={() => this.getMyContestList(item, idx)} className=\"mycontest-collection-wrapper\">\n                                        <CollectionSlider contestSliderData={item} collectionInfo={false} isFrom={'UpcomingContest'} />\n                                    </div>\n                                }\n                                {\n\n                                    item.isExpanded && _Map(item.contest, (childItem, idx) => {\n\n                                        return (\n                                            <div key={idx} className={\"contest-card-body xmb20 ml15 mr15 \" + (idx !== 0 ? \"mt15\" : '')}>\n                                                <div className=\"contest-card-body-header cursor-pointer\" onClick={() => ContestDetailShow(childItem, item)}>\n                                                    <div className=\"contest-details\">\n                                                        <div className=\"contest-details-action\">\n                                                            {\n                                                                childItem.contest_title ?\n                                                                <h4>{childItem.contest_title}</h4>\n                                                                :\n                                                                <h4><span className=\"text-capitalize\">{AppLabels.WIN} </span>\n                                                                <span>\n                                                                            {this.getPrizeAmount(childItem.prize_distibution_detail)}\n                                                                        </span>\n                                                                </h4>\n                                                            }\n                                                            {\n                                                                childItem.max_bonus_allowed != '0' &&\n                                                                <span className=\"text-small text-italic-bold mt5\">               \n                                                                    {childItem.max_bonus_allowed}{'% '}{AppLabels.BONUS}\n                                                                </span>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"contest-progress-block\">\n                                                        <div className={\"progress-bar-default\" + (((parseInt(childItem.user_joined_count) < parseInt(childItem.multiple_lineup)) && (parseInt(childItem.size) > parseInt(childItem.total_user_joined))) ? '' : ' full-width-progress-bar')}>\n                                                            <ProgressBar className={parseInt(childItem.total_user_joined) >= parseInt(childItem.minimum_size) ? '' : 'danger-area'} now={((100 / childItem.minimum_size) * childItem.total_user_joined)} />\n                                                            <div className=\"progress-bar-value\">\n                                                                <span className=\"total-output\">{childItem.total_user_joined}</span> / <span className=\"total-entries\">{childItem.size} {AppLabels.ENTRIES}</span>\n                                                                <span className=\"min-entries\">{AppLabels.MIN} {childItem.minimum_size}</span>\n                                                            </div>\n\n                                                        </div>\n                                                        {\n                                                            ((parseInt(childItem.user_joined_count) < parseInt(childItem.multiple_lineup)) && (parseInt(childItem.size) > parseInt(childItem.total_user_joined))) &&\n                                                            <button onClick={(event) => getUserLineUpListApi(event, item, childItem, \"teamItem\", true)} className=\"btn btn-primary pull-right width100\">    {AppLabels.JOIN} \n                                                            {\n                                                                    childItem.entry_fee > 0 ? \n                                                                    <>\n                                                                        {\n                                                                            childItem.currency_type == 2 ?\n                                                                            <img className=\"img-coin\" alt='' src={Images.IC_COIN} />\n                                                                            :\n                                                                            Utilities.getMasterData().currency_code\n                                                                        }\n                                                                        {childItem.entry_fee}\n                                                                    </>\n                                                                    : AppLabels.FREE + ' '\n                                                                } \n\n                                                            </button>\n                                                        }\n\n                                                    </div>\n\n                                                    {parseInt(childItem.total_user_joined) < parseInt(childItem.size) && Constants.SELECTED_GAMET != Constants.GameType.MultiGame && <a className=\"share-contest\" href>\n                                                   \n                                                   {Constants.SELECTED_GAMET != Constants.GameType.Free2Play &&\n                                                    <i className=\"icon-share\" onClick={(shareContestEvent) => shareContest(shareContestEvent, childItem)}></i>\n                                                   }\n                                                     \n                                                    </a>}\n                                                    { \n                                                        parseInt(childItem.total_user_joined) >= parseInt(childItem.minimum_size) &&\n                                                        <span className=\"featured-icon\">G</span>\n                                                    }\n                                                    { \n                                                        childItem.multiple_lineup > 1 &&\n                                                        <span className=\"featured-icon\">m</span>\n                                                    }\n                                                    { \n                                                        childItem.is_private_contest == 1 &&\n                                                        <span className=\"featured-icon\">p</span>\n                                                    }\n\n\n\n                                                </div>\n                                                <ul className=\"contest-listing upcoming\">\n                                                    {\n                                                        _Map(childItem.teams, (teamItem, idx) => {\n\n                                                            return (\n                                                                <li key={idx}>\n                                                                    <div className=\"cell-block\">\n                                                                        <a className=\"completed-user-link user-link cursor-default no-hover\" href>{teamItem.team_name}</a>\n                                                                    </div>\n                                                                    <div className=\"cell-block contest-details-right\">\n                                                                    {\n                                                                        Constants.SELECTED_GAMET != Constants.GameType.Free2Play &&\n                                                                        <a href onClick={() => switchTeamModalShow(item, childItem, teamItem)}>\n                                                                            <i className=\"icon-switch-team\"></i>\n                                                                            <span className='fs8 mt5'>{AppLabels.SWITCH_TEAM}</span>\n                                                                        </a>\n                                                                    }\n                                                                       \n                                                                        <a onClick={() => openLineup(item, childItem, teamItem, true, Constants.CONTEST_UPCOMING)}>\n                                                                            <i className=\"icon-edit-line\"></i>\n                                                                            <span className='fs8 mt5'>{AppLabels.EDIT_TEAM}</span>\n                                                                        </a>\n                                                                        <a className=\"visible-for-mobile\" onClick={() => openLineup(item, childItem, teamItem, false, Constants.CONTEST_UPCOMING, false)}>\n                                                                            <i className=\"icon-ground\"></i>\n                                                                            <span className='fs8 mt5'>{AppLabels.VIEW_TEAM}</span>\n                                                                        </a>\n\n                                                                        <a className=\"visible-for-desktop\" onClick={() => openLineup(item, childItem, teamItem, false, Constants.CONTEST_UPCOMING, true)}>\n                                                                            <i className=\"icon-ground\"></i>\n                                                                            <span className='fs8 mt5'>{AppLabels.VIEW_TEAM}</span>\n                                                                        </a>\n                                                                    </div>\n                                                                </li>\n                                                            )\n                                                        })\n                                                    }\n                                                </ul>\n                                            </div>\n                                        );\n                                    })\n                                }\n                                {\n\n                                    (this.state.loadingIndex === idx) && <div className=\"contest-list m border shadow-none\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-line\">\n                                                    <Skeleton height={9} />\n                                                    <Skeleton height={6} />\n                                                    <Skeleton height={4} width={100} />\n                                                </div>\n                                                <div className=\"shimmer-image\">\n                                                    <Skeleton width={30} height={30} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view\">\n                                                <div className=\"progress-bar-default w-100\">\n                                                    <Skeleton height={6} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={60} />\n                                                        <Skeleton height={4} width={60} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n}","/var/www/html/framework/frontend/src/Component/MyContest/LiveContest.jsx",["2484","2485","2486","2487","2488","2489","2490","2491","2492","2493","2494","2495","2496","2497","2498","2499","2500","2501","2502","2503","2504","2505","2506","2507","2508","2509","2510","2511","2512","2513","2514","2515","2516","2517"],"import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { SportsIDs } from \"../../JsonFiles\";\nimport { _Map, Utilities } from '../../Utilities/Utilities';\nimport { AppSelectedSport } from '../../helper/Constants';\nimport { getMyContest, getMiniLeagueMyContest } from '../../WSHelper/WSCallings';\nimport CollectionSlider from \"../../views/CollectionSlider\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport Skeleton from 'react-loading-skeleton';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as Constants from \"../../helper/Constants\";\nimport Images from '../../components/images';\n\n\n\nexport default class LiveContest extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            liveContestList: [],\n            loadingIndex: -1,\n            prizeList: []\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item, idx) {\n        if (item.isExpanded) {\n            let liveContestList = this.state.liveContestList;\n            item['isExpanded'] = false;\n            liveContestList[idx] = item;\n            this.setState({ liveContestList })\n        } else {\n            if (item.contest && item.contest.length > 0) {\n                let liveContestList = this.state.liveContestList;\n                item['isExpanded'] = true;\n                liveContestList[idx] = item;\n                this.setState({ liveContestList })\n            } else {\n                var param = {\n                    \"sports_id\": AppSelectedSport,\n                    \"status\": 1,\n                    \"collection_master_id\": item.collection_master_id\n                }\n                this.setState({ loadingIndex: idx })\n                let apiStatus = Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? getMiniLeagueMyContest : getMyContest\n\n                apiStatus(param).then((responseJson) => {\n                    this.setState({ loadingIndex: -1 })\n\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        let liveContestList = this.state.liveContestList;\n                        item['contest'] = responseJson.data;\n                        item['isExpanded'] = true;\n                        liveContestList[idx] = item;\n                        this.setState({ liveContestList })\n                        this.setState({ prizeList: responseJson.prize_distibution_detail })\n                    }\n                })\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.liveContestList !== nextProps.liveContestList) {\n            this.setState({ liveContestList: nextProps.liveContestList })\n        }\n    }\n\n    getPrizeAmount = (prize_data) => {\n        let prize_text = \"Prizes\";\n        let is_tie_breaker = 0;\n        let prizeAmount = { 'real': 0, 'bonus': 0, 'point': 0 };\n        return (\n            <React.Fragment>\n                {\n                    prize_data && prize_data.map(function (lObj, lKey) {\n                        var amount = 0;\n                        if (lObj.max_value) {\n                            amount = parseFloat(lObj.max_value);\n                        } else {\n                            amount = parseFloat(lObj.amount);\n                        }\n                        if (lObj.prize_type == 3) {\n                            is_tie_breaker = 1;\n                        }\n                        if (lObj.prize_type == 0) {\n                            prizeAmount['bonus'] = parseFloat(prizeAmount['bonus']) + amount;\n                        } else if (lObj.prize_type == 2) {\n                            prizeAmount['point'] = parseFloat(prizeAmount['point']) + amount;\n                        } else {\n                            prizeAmount['real'] = parseFloat(prizeAmount['real']) + amount;\n                        }\n                    })\n                }\n                {\n                    is_tie_breaker == 0 && prizeAmount.real > 0 ?\n                    <span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}{parseFloat(prizeAmount.real).toFixed(0)}</span>\n                    : is_tie_breaker == 0 && prizeAmount.bonus > 0 ? <span className=\"contest-prizes\" ><i className=\"icon-bonus\" width=\"13px\" height=\"14px\" />{parseFloat(prizeAmount.bonus).toFixed(0)}</span>\n                    :is_tie_breaker == 0 && prizeAmount.point > 0 ? <span style={{ display: 'inlineBlock' }}> <img style={{ marginTop: '3px' }} src={Images.IC_COIN} width=\"12px\" height=\"12px\" />{parseFloat(prizeAmount.point).toFixed(0)}</span>\n                    : AppLabels.PRIZES\n                }\n            </React.Fragment>\n        )\n\n\n     }\n\n    render() {\n        let { ContestDetailShow, openLeaderboard } = this.props;\n        return (\n            <div>\n                {\n                    this.state.liveContestList.length > 0 &&\n                    _Map(this.state.liveContestList, (item, idx) => {\n                        return (\n                            <div key={idx} className={\"contest-card live-contest-card live-contest-card-new\" + (Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list && item.match_list.length > 1 ? ' contest-card-with-collection' : '')}>\n                                <div onClick={() => this.getMyContestList(item, idx)} className={\"contest-card-header pointer-cursor\" + (item.isExpanded ? ' pb15' : '')}>\n\n                                    <ul>\n                                        {\n                                            (!item.match_list || item.match_list.length < 2) &&\n                                            <React.Fragment>\n                                                <li className=\"team-left-side\">\n                                                    <div className=\"team-content-img\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <img src={item.home_flag ? Utilities.teamFlagURL(item.home_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame &&\n                                                            <img src={item.match_list ? Utilities.teamFlagURL(item.match_list[0].home_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                    </div>\n                                                    <div className=\"contest-details-action\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.home}</div>\n                                                                {\n                                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                                        item.score_data && item.score_data[1] ?\n                                                                            <div className=\"contest-details-sec-div\">\n                                                                                {item.score_data[1].home_team_score}-{(item.score_data[1].home_wickets) ? item.score_data[1].home_wickets : 0}\n                                                                                <span className=\"gray-color-class\"> {(item.score_data[1].home_overs) ? item.score_data[1].home_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                                                {\n                                                                                    item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                                                    {item.score_data[2].home_team_score}-{(item.score_data[2].home_wickets) ? item.score_data[2].home_wickets : 0}\n                                                                                    <span className=\"gray-color-class\"> {(item.score_data[2].home_overs) ? item.score_data[2].home_overs : 0} </span>\n                                                                                    </div>\n                                                                                }\n                                                                                </div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">{0}-{0}<span className=\"gray-color-class\"> 0 </span></div>\n                                                                        :\n                                                                        (item.score_data) ?\n                                                                            <div className=\"contest-details-sec-div\">{item.score_data.home_score}</div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                                }\n                                                            </React.Fragment>\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.match_list ? item.match_list[0].home : \"\"}</div>\n                                                                {\n                                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                                        item.match_list && item.match_list[0].score_data[1] ?\n                                                                            <div className=\"contest-details-sec-div\">\n                                                                                {item.match_list[0].score_data[1].home_team_score}-{(item.match_list[0].score_data[1].home_wickets)\n                                                                                    ?\n                                                                                    item.match_list[0].score_data[1].home_wickets : 0}\n                                                                                <span className=\"gray-color-class\">\n                                                                                    {(item.match_list[0].score_data[1].home_overs) ? item.match_list[0].score_data[1].home_overs : 0}\n                                                                                </span>\n                                                                            </div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">\n                                                                                {0}-{0}\n                                                                                <span className=\"gray-color-class\"> 0 </span>\n                                                                            </div>\n                                                                        :\n                                                                        (item.match_list) ?\n                                                                            <div className=\"contest-details-sec-div\">{item.match_list[0].score_data.home_score}</div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                                }\n                                                            </React.Fragment>\n                                                        }\n                                                    </div>\n                                                </li>\n                                                <li className=\"progress-middle\">\n                                                    <div className=\"progress-middle-div\">\n                                                        <p>{item.league_name}</p>\n                                                        <span className=\"progress-span\">\n                                                            {AppLabels.IN_PROGRESS}\n                                                        </span>\n                                                    </div>\n                                                </li>\n                                                <li className=\"team-right-side\">\n                                                    <div className=\"contest-details-action\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.away}</div>\n                                                                {\n                                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                                        item.score_data && item.score_data[1] ?\n                                                                            <div className=\"contest-details-sec-div\">\n                                                                                {item.score_data[1].away_team_score}-{(item.score_data[1].away_wickets) ? item.score_data[1].away_wickets : 0}\n                                                                                <span className=\"gray-color-class\"> {(item.score_data[1].away_overs) ? item.score_data[1].away_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                                                {\n                                                                                    item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                                                    {item.score_data[2].away_team_score}-{(item.score_data[2].away_wickets) ? item.score_data[2].away_wickets : 0}\n                                                                                    <span className=\"gray-color-class\"> {(item.score_data[2].away_overs) ? item.score_data[2].away_overs : 0} </span>\n                                                                                    </div>\n                                                                                }\n                                                                                </div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">{0}-{0}<span className=\"gray-color-class\"> 0 </span></div>\n                                                                        :\n                                                                        (item.score_data) ?\n                                                                            <div className=\"contest-details-sec-div\">{item.score_data.away_score}</div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                                }\n                                                            </React.Fragment>\n\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.match_list ? item.match_list[0].away : \"\"}</div>\n                                                                {\n                                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                                        item.match_list && item.match_list.score_data ?\n                                                                            <div className=\"contest-details-sec-div\">\n                                                                                {item.match_list[0].score_data[1].away_team_score}-{(item.match_list[0].score_data[1].away_wickets) ? item.match_list[0].score_data[1].away_wickets : 0}<span className=\"gray-color-class\"> {(item.match_list[0].score_data[1].away_overs) ? item.match_list[0].score_data[1].away_overs : 0}</span></div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">{0}-{0}<span className=\"gray-color-class\"> 0 </span></div>\n                                                                        :\n                                                                        (item.match_list) ?\n                                                                            <div className=\"contest-details-sec-div\">{item.match_list[0].score_data.away_score}</div>\n                                                                            :\n                                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                                }\n                                                            </React.Fragment>\n\n                                                        }\n\n                                                    </div>\n                                                    <div className=\"team-content-img\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <img src={item.away_flag ? Utilities.teamFlagURL(item.away_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame &&\n                                                            <img src={item.match_list ? Utilities.teamFlagURL(item.match_list[0].away_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                    </div>\n                                                </li>\n                                            </React.Fragment>\n                                        }\n                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                            <li className=\"progress-middle\">\n                                                <div className=\"team-content\">\n                                                    <p className=\"collection_name\">{item.collection_name}</p>\n                                                    <div className=\"collection-match-info\">\n                                                        {item.match_list.length} {AppLabels.MATCHES_SM}\n                                                        <span className=\"circle-divider\"></span>\n                                                        {item.league_name}\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        }\n                                    </ul>\n                                </div>\n                                {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                    <div onClick={() => this.getMyContestList(item, idx)} className=\"mycontest-collection-wrapper\">\n                                        <CollectionSlider contestSliderData={item} collectionInfo={false} isFrom={'LiveContest'} />\n                                    </div>\n                                }\n                                <div className=\"contest-card-body-wrapper\">\n                                    {item.isExpanded &&\n                                        <div className=\"m-b-15\">\n                                            {\n                                                item.custom_message != '' && item.custom_message != null &&\n                                                <Alert variant=\"warning\" className=\"alert-warning msg-alert-container\">\n                                                    <div className=\"msg-alert-wrapper\">\n                                                        <span className=\"\"><i className=\"icon-megaphone\"></i></span>\n                                                        <span>{item.custom_message}</span>\n                                                    </div>\n                                                </Alert>\n\n                                            }\n                                        </div>\n                                    }\n                                    {\n                                        item.isExpanded && _Map(item.contest, (childItem, idx) => {\n                                            return (\n                                                <div key={idx} className={\"contest-card-body xmb20 \" + (idx != 0 ? \"mt15\" : '')}>\n\n                                                    <div className=\"contest-card-body-header cursor-pointer\" onClick={() => ContestDetailShow(childItem, item)}>\n                                                        <div className=\"contest-details\">\n\n                                                            <div className=\"contest-details-action\">\n                                                                {\n                                                                    childItem.contest_title ?\n                                                                    <h4>{childItem.contest_title}</h4>\n                                                                    :\n                                                                    <h4><span className=\" text-capitalize\">{AppLabels.WIN} </span>\n                                                                        <span>\n                                                                            {this.getPrizeAmount(childItem.prize_distibution_detail)}\n                                                                        </span>\n                                                                    </h4>\n                                                                }\n                                                                {\n                                                                    childItem.max_bonus_allowed != '0' &&\n                                                                        <ul className=\"list-inner\">\n\n                                                                            <li className='f-red'>\n                                                                                {childItem.max_bonus_allowed}{'% '}{AppLabels.BONUS}\n                                                                            </li>\n                                                                        </ul>\n                                                                }\n                                                            </div>\n                                                        </div>\n                                                        <div onClick={(e) => openLeaderboard(e, childItem, item)} className=\"contest-details-right absolute\">\n                                                            <a>\n                                                                <i className=\"icon-standings f-sm\"></i>\n                                                                <span>{AppLabels.STANDINGS}</span>\n                                                            </a>\n                                                        </div>\n                                                    </div>\n\n                                                    <div>\n                                                        <table className=\"contest-listing-table\">\n                                                            <thead>\n                                                                <tr>\n                                                                    <th><span>{AppLabels.Team}</span></th>\n                                                                    <th><span>{AppLabels.Pts}</span></th>\n                                                                    <th><span className=\"rank-label\">{AppLabels.RANK}</span></th>\n                                                                </tr>\n                                                            </thead>\n                                                            <tbody>\n                                                                {\n                                                                    _Map(childItem.teams, (teamItem, idx) => {\n                                                                        return (\n                                                                            <tr key={teamItem.lineup_master_id}>\n                                                                                <td className=\"team-name\">\n                                                                                    {teamItem.team_name}\n                                                                                </td>\n                                                                                <td>{teamItem.total_score}</td>\n                                                                                <td className={\"contest-rank\" + (teamItem.is_winner == 1 ? ' success' : '')}>\n                                                                                    <a>\n                                                                                        <span>\n                                                                                            {\n                                                                                                teamItem.is_winner == 1 &&\n                                                                                                <i className=\"icon-trophy-ic\"></i>\n                                                                                            }\n                                                                                        </span>\n                                                                                        {teamItem.game_rank}\n                                                                                    </a>\n                                                                                </td>\n                                                                            </tr>\n                                                                        )\n                                                                    })\n                                                                }\n                                                            </tbody>\n                                                        </table>\n                                                    </div>                                                </div>\n                                            )\n                                        })\n                                    }\n                                    {\n\n                                        (this.state.loadingIndex === idx) && <div className=\"contest-list m border shadow-none\">\n                                            <div className=\"shimmer-container\">\n                                                <div className=\"shimmer-top-view\">\n                                                    <div className=\"shimmer-line\">\n                                                        <Skeleton height={9} />\n                                                        <Skeleton height={6} />\n                                                        <Skeleton height={4} width={100} />\n                                                    </div>\n                                                    <div className=\"shimmer-image\">\n                                                        <Skeleton width={30} height={30} />\n                                                    </div>\n                                                </div>\n                                                <div className=\"shimmer-bottom-view\">\n                                                    <div className=\"progress-bar-default w-100\">\n                                                        <Skeleton height={6} />\n                                                        <div className=\"d-flex justify-content-between\">\n                                                            <Skeleton height={4} width={60} />\n                                                            <Skeleton height={4} width={60} />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n}","/var/www/html/framework/frontend/src/Component/MyContest/CompletedContest.jsx",["2518","2519","2520","2521","2522","2523","2524","2525","2526","2527","2528","2529","2530","2531","2532","2533","2534","2535","2536","2537","2538","2539","2540","2541","2542","2543","2544","2545","2546","2547","2548","2549","2550","2551","2552","2553","2554","2555","2556","2557","2558","2559","2560","2561","2562"],"import React from 'react';\nimport CollectionSlider from \"../../views/CollectionSlider\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { Utilities, _Map, _isEmpty } from '../../Utilities/Utilities';\nimport { SportsIDs } from \"../../JsonFiles\";\nimport { AppSelectedSport, MATCH_TYPE } from '../../helper/Constants';\nimport * as Constants from \"../../helper/Constants\";\nimport { getMyContest, getMiniLeagueMyContest } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport { MomentDateComponent } from '../CustomComponent';\nimport Images from '../../components/images';\n\n\nexport default class CompletedContest extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            sports_id: Constants.AppSelectedSport,\n            completedContestList: [],\n            loadingIndex: -1\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item, idx) {\n        if (item.isExpanded) {\n            let completedContestList = this.state.completedContestList;\n            item['isExpanded'] = false;\n            completedContestList[idx] = item;\n            this.setState({ completedContestList })\n        } else {\n            if (item.contest && item.contest.length > 0) {\n                let completedContestList = this.state.completedContestList;\n                item['isExpanded'] = true;\n                completedContestList[idx] = item;\n                this.setState({ completedContestList })\n            } else {\n                var param = {\n                    \"sports_id\": AppSelectedSport,\n                    \"status\": 2,\n                    \"collection_master_id\": item.collection_master_id\n                }\n                this.setState({ loadingIndex: idx })\n                let apiStatus = Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? getMiniLeagueMyContest : getMyContest\n\n                apiStatus(param).then((responseJson) => {\n                    this.setState({ loadingIndex: -1 })\n\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        let completedContestList = this.state.completedContestList;\n                        item['contest'] = responseJson.data;\n                        item['isExpanded'] = true;\n                        completedContestList[idx] = item;\n                        this.setState({ completedContestList })\n                    }\n                })\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.completedContestList !== nextProps.completedContestList) {\n            this.setState({ completedContestList: nextProps.completedContestList })\n        }\n    }\n    getPrizeAmount = (prize_data) => {\n        let prize_text = \"Prizes\";\n        let is_tie_breaker = 0;\n        let prizeAmount = { 'real': 0, 'bonus': 0, 'point': 0 };\n        return (\n            <React.Fragment>\n                {\n                    prize_data && prize_data.map(function (lObj, lKey) {\n                        var amount = 0;\n                        if (lObj.max_value) {\n                            amount = parseFloat(lObj.max_value);\n                        } else {\n                            amount = parseFloat(lObj.amount);\n                        }\n                        if (lObj.prize_type == 3) {\n                            is_tie_breaker = 1;\n                        }\n                        if (lObj.prize_type == 0) {\n                            prizeAmount['bonus'] = parseFloat(prizeAmount['bonus']) + amount;\n                        } else if (lObj.prize_type == 2) {\n                            prizeAmount['point'] = parseFloat(prizeAmount['point']) + amount;\n                        } else {\n                            prizeAmount['real'] = parseFloat(prizeAmount['real']) + amount;\n                        }\n                    })\n                }\n                {\n                    is_tie_breaker == 0 && prizeAmount.real > 0 ?\n                        <span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}{parseFloat(prizeAmount.real).toFixed(0)}</span>\n                        : is_tie_breaker == 0 && prizeAmount.bonus > 0 ? <span className=\"contest-prizes\" ><i className=\"icon-bonus\" width=\"13px\" height=\"14px\" />{parseFloat(prizeAmount.bonus).toFixed(0)}</span>\n                            : is_tie_breaker == 0 && prizeAmount.point > 0 ? <span style={{ display: 'inlineBlock' }}> <img style={{ marginTop: '3px' }} src={Images.IC_COIN} width=\"12px\" height=\"12px\" />{parseFloat(prizeAmount.point).toFixed(0)}</span>\n                                : AppLabels.PRIZES\n                }\n                \n            </React.Fragment>\n        )\n\n\n    }\n\n    render() {\n        let { ContestDetailShow, openLeaderboard } = this.props;\n        return (\n            <div>\n                {\n                    this.state.completedContestList.length > 0 &&\n\n                    _Map(this.state.completedContestList, (item, idx) => {\n\n                        return (\n                            <div key={idx} className={\"contest-card completed-contest-card-new\" + (Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list && item.match_list.length > 1 ? ' contest-card-with-collection' : '')}>\n                                <div onClick={() => this.getMyContestList(item, idx)} className={\"contest-card-header pointer-cursor\" + (item.isExpanded ? ' pb12' : '')}>\n                                    <ul>\n                                        {(!item.match_list || item.match_list.length < 2) &&\n                                            <React.Fragment>\n                                                <li className=\"team-left-side\">\n\n                                                    <div className=\"team-content-img\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <img src={item.home_flag ? Utilities.teamFlagURL(item.home_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame &&\n                                                            <img src={item.match_list ? Utilities.teamFlagURL(item.match_list[0].home_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                    </div>\n                                                    <div className=\"contest-details-action\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.home}</div>\n                                                                {\n                                                                    (item.score_data && item.score_data[1] && AppSelectedSport == SportsIDs.cricket) ?\n                                                                    <div className=\"contest-details-sec-div\">\n                                                                    {item.score_data[1].home_team_score}-{(item.score_data[1].home_wickets) ? item.score_data[1].home_wickets : 0}\n                                                                    <span className=\"gray-color-class\"> {(item.score_data[1].home_overs) ? item.score_data[1].home_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                                    {\n                                                                        item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                                        {item.score_data[2].home_team_score}-{(item.score_data[2].home_wickets) ? item.score_data[2].home_wickets : 0}\n                                                                        <span className=\"gray-color-class\"> {(item.score_data[2].home_overs) ? item.score_data[2].home_overs : 0} </span>\n                                                                        </div>\n                                                                    }\n                                                                    </div>\n                                                                        :\n                                                                        (item.score_data) &&\n                                                                        <div className=\"contest-details-sec-div\">{item.score_data.home_score}</div>\n                                                                }\n                                                            </React.Fragment>\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.match_list[0].home}</div>\n                                                                {\n                                                                    (item.match_list[0].score_data && item.match_list[0].score_data[1] && AppSelectedSport == SportsIDs.cricket) ?\n                                                                        <div className=\"contest-details-sec-div\">\n                                                                            {item.match_list[0].score_data[1].home_team_score}-{(item.match_list[0].score_data[1].home_wickets) ? item.match_list[0].score_data[1].home_wickets : 0}\n                                                                            <span className=\"gray-color-class\">\n                                                                                {(item.match_list[0].score_data[1].home_overs) ? item.match_list[0].score_data[1].home_overs : 0}\n                                                                            </span>\n                                                                        </div>\n                                                                        :\n                                                                        (item.match_list[0].score_data) &&\n                                                                        <div className=\"contest-details-sec-div\">{item.match_list[0].score_data.home_score}</div>\n                                                                }\n                                                            </React.Fragment>\n                                                        }\n                                                    </div>\n                                                </li>\n                                                <li className=\"progress-middle\">\n\n                                                    <div className=\"progress-middle-div\">\n                                                        <div className=\"team-content\">\n                                                            <p>\n                                                                {item.league_name}\n                                                                {\n                                                                    AppSelectedSport === '7' &&\n                                                                    <React.Fragment>- {MATCH_TYPE[item.format]}</React.Fragment>\n                                                                }\n                                                            </p>\n                                                            <span className=\"time-line primary-color\"> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A\" }} /> </span>\n\n                                                        </div>\n                                                    </div>\n                                                </li>\n                                                <li className=\"team-right-side\">\n\n                                                    <div className=\"contest-details-action\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.away}</div>\n                                                                {\n                                                                    (item.score_data && item.score_data[1] && AppSelectedSport == SportsIDs.cricket) ?\n                                                                    <div className=\"contest-details-sec-div\">\n                                                                    {item.score_data[1].away_team_score}-{(item.score_data[1].away_wickets) ? item.score_data[1].away_wickets : 0}\n                                                                    <span className=\"gray-color-class\"> {(item.score_data[1].away_overs) ? item.score_data[1].away_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                                    {\n                                                                        item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                                        {item.score_data[2].away_team_score}-{(item.score_data[2].away_wickets) ? item.score_data[2].away_wickets : 0}\n                                                                        <span className=\"gray-color-class\"> {(item.score_data[2].away_overs) ? item.score_data[2].away_overs : 0} </span>\n                                                                        </div>\n                                                                    }\n                                                                    </div>\n                                                                        :\n                                                                        (item.score_data) &&\n                                                                        <div className=\"contest-details-sec-div\">{item.score_data.away_score}</div>\n                                                                }\n                                                            </React.Fragment>\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                                            <React.Fragment>\n                                                                <div className=\"contest-details-first-div\">{item.match_list[0].away}</div>\n                                                                {\n                                                                    (item.match_list[0].score_data && item.match_list[0].score_data[1] && AppSelectedSport == SportsIDs.cricket) ?\n                                                                        <div className=\"contest-details-sec-div\">\n                                                                            {item.match_list[0].score_data[1].away_team_score}-{(item.match_list[0].score_data[1].away_wickets) ? item.match_list[0].score_data[1].away_wickets : 0}\n                                                                            <span className=\"gray-color-class\">\n                                                                                {(item.match_list[0].score_data[1].away_overs) ? item.match_list[0].score_data[1].away_overs : 0}\n                                                                            </span>\n                                                                        </div>\n                                                                        :\n                                                                        (item.match_list[0].score_data) &&\n                                                                        <div className=\"contest-details-sec-div\">\n                                                                            {item.match_list[0].score_data.away_score}\n                                                                        </div>\n                                                                }\n                                                            </React.Fragment>\n                                                        }\n\n                                                    </div>\n                                                    <div className=\"team-content-img\">\n                                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                                            <img src={item.away_flag ? Utilities.teamFlagURL(item.away_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame &&\n                                                            <img src={item.match_list ? Utilities.teamFlagURL(item.match_list[0].away_flag) : \"\"} alt=\"\" />\n                                                        }\n                                                    </div>\n                                                </li>\n                                            </React.Fragment>\n                                        }\n                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                            <li className=\"progress-middle\">\n                                                <div className=\"team-content\">\n                                                    <p className=\"collection_name\">{item.collection_name}</p>\n                                                    <div className=\"collection-match-info\">\n                                                        {item.match_list.length} {AppLabels.MATCHES_SM}\n                                                        <span className=\"circle-divider\"></span>\n                                                        {item.league_name}\n                                                        <span className=\"circle-divider\"></span>\n                                                        <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A\" }} />\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        }\n                                    </ul>\n                                </div>\n                                {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && item.match_list.length > 1 &&\n                                    <div onClick={() => this.getMyContestList(item, idx)} className=\"mycontest-collection-wrapper\">\n                                        <CollectionSlider contestSliderData={item} collectionInfo={false} isFrom={'CompletedContest'} />\n                                    </div>\n                                }\n\n                                {\n\n                                    item.isExpanded && _Map(item.contest, (childItem, idx) => {\n                                        return (\n                                            <div key={idx} className={\"contest-card-body xmb20 ml15 mr15 \" + (idx != 0 ? \"mt15\" : '')}>\n                                                <div className=\"contest-card-body-header cursor-pointer\" onClick={() => ContestDetailShow(childItem, item)}>\n                                                    <div className=\"contest-details\">\n                                                        <div className=\"contest-details-action\">\n                                                            {\n                                                                childItem.contest_title ?\n                                                                <h4>{childItem.contest_title}</h4>\n                                                                :\n                                                                <h4><span className=\" text-capitalize\">{AppLabels.WIN} </span>\n                                                                    <span>\n                                                                        {this.getPrizeAmount(childItem.prize_distibution_detail)}\n                                                                    </span>\n                                                                </h4>\n                                                            }\n                                                            {\n                                                                childItem.max_bonus_allowed != '0' &&\n                                                                <ul className=\"list-inner\">\n                                                                    <li className='f-red'>\n                                                                        {childItem.max_bonus_allowed}{'% '}{AppLabels.BONUS}\n                                                                    </li>\n                                                                </ul>\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                    <div onClick={(e) => openLeaderboard(e, childItem, item)} className=\"contest-details-right absolute\">\n                                                        <a>\n                                                            <i className=\"icon-standings f-sm\"></i>\n                                                            <span>{AppLabels.STANDINGS}</span>\n                                                        </a>\n                                                        {\n                                                            item.status == 2 && item.status_overview == 4 && childItem.status != 3 && \n                                                            <div className=\"review-text\">{AppLabels.WINNING_REFLECT_SHORTLY}</div>\n                                                        }\n                                                    </div>\n                                                </div>\n                                                <div>\n                                                    <table className=\"contest-listing-table\">\n                                                        <thead>\n                                                            <tr>\n                                                                <th><span>{AppLabels.Team}</span></th>\n                                                                <th>{<span>{AppLabels.WON}</span>}</th>\n                                                                <th className=\"contest-rank-th\"><span className=\"rank-label\">{AppLabels.RANK}</span></th>\n                                                            </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                            {\n                                                                _Map(childItem.teams, (teamItem, idx) => {\n                                                                    return (\n                                                                        <tr key={teamItem.lineup_master_id}>\n                                                                            <td className=\"team-name\">\n                                                                                {teamItem.team_name}\n                                                                            </td>\n                                                                            {\n                                                                                teamItem.is_winner == 1 && teamItem.prize_data != null && !_isEmpty(teamItem.prize_data)\n                                                                                    ?\n                                                                                    <td className=\"text-left winning-td\" style={{ display: 'flex' }}>\n                                                                                        {\n\n                                                                                            _Map(teamItem.prize_data, (prizeItem, idx) => {\n\n                                                                                                return (\n\n                                                                                                    <div>\n                                                                                                        {\n                                                                                                            (prizeItem.prize_type == 0) ?\n                                                                                                                <div className='winning'>\n                                                                                                                    <span className=\"contest-prizes\" >\n                                                                                                                        {<i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>}\n                                                                                                                        {teamItem.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}\n                                                                                                                    </span>\n                                                                                                                </div>\n                                                                                                                :\n                                                                                                                (prizeItem.prize_type == 1) ?\n                                                                                                                    <div className='winning'>\n\n                                                                                                                        {<span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}\n                                                                                                                        {teamItem.prize_data.length === idx + 1 ? parseFloat(prizeItem.amount).toFixed(2) : parseFloat(prizeItem.amount).toFixed(2) + \"/\"}</span> }\n                                                                                                                        \n                                                                                                                    </div>\n                                                                                                                    :\n                                                                                                                    (prizeItem.prize_type == 2) ?\n                                                                                                                        <div className='winning'>\n                                                                                                                            {<span className=\"contest-prizes\" style={{ display: 'flex' }}>\n                                                                                                                                <img src={Images.IC_COIN} width=\"15px\" height=\"15px\" style={{position: 'Relative', top: 1}} />\n                                                                                                                                {teamItem.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}</span>}\n\n                                                                                                                        </div>\n                                                                                                                        :\n                                                                                                                        (prizeItem.prize_type == 3) ?\n                                                                                                                            <div className='winning'>\n                                                                                                                                {<span className=\"contest-prizes\" style={{ display: 'inlineBlock' }}>{teamItem.prize_data.length === idx + 1 ? prizeItem.name : prizeItem.name + \"/\"}</span>}\n\n                                                                                                                            </div> : ''\n\n                                                                                                        }\n\n                                                                                                    </div>\n                                                                                                )\n\n\n                                                                                            })\n                                                                                        }\n\n                                                                                    </td>\n                                                                                    :\n                                                                                    <td className=\"text-left\">\n                                                                                        {\n                                                                                            teamItem.won_prize <= 0 && <div className='winning text-center'>--</div>\n                                                                                        }\n                                                                                        {\n                                                                                            (childItem.prize_type == 0) && teamItem.won_prize > 0 &&\n                                                                                            <div className='winning'>\n                                                                                                {childItem.prize_pool != \"0\" && <i style={{ display: 'inlineBlock', position: 'relative', top: -1, marginRight: 3 }} className=\"icon-bonus\"></i>}\n                                                                                                {teamItem.won_prize || '0'}\n                                                                                            </div>\n                                                                                        }\n                                                                                        {\n                                                                                            (childItem.prize_type == 1) && teamItem.won_prize > 0 &&\n                                                                                            <div className=''>\n                                                                                                {childItem.prize_pool != \"0\" && <span style={{ marginLeft: 5, marginRight: 5, }}>{Utilities.getMasterData().currency_code}</span>}\n                                                                                                {teamItem.won_prize || '0'}\n                                                                                            </div>\n                                                                                        }\n                                                                                    </td>\n                                                                            }\n\n\n                                                                            <td className={\"contest-rank\" + (teamItem.is_winner == 1 ? ' success' : '')}>\n                                                                                <a>\n                                                                                    <span>\n                                                                                        {\n                                                                                            teamItem.is_winner == 1 &&\n                                                                                            <i className=\"icon-trophy-ic\"></i>\n                                                                                        }\n                                                                                    </span>\n                                                                                    {teamItem.game_rank}\n                                                                                </a>\n                                                                            </td>\n                                                                        </tr>\n                                                                    )\n                                                                })\n                                                            }\n\n                                                        </tbody>\n                                                    </table>\n                                                </div>\n                                            </div>\n                                        )\n                                    })\n                                }\n                                {\n\n                                    (this.state.loadingIndex === idx) && <div className=\"contest-list m border shadow-none\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-line\">\n                                                    <Skeleton height={9} />\n                                                    <Skeleton height={6} />\n                                                    <Skeleton height={4} width={100} />\n                                                </div>\n                                                <div className=\"shimmer-image\">\n                                                    <Skeleton width={30} height={30} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view\">\n                                                <div className=\"progress-bar-default w-100\">\n                                                    <Skeleton height={6} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={60} />\n                                                        <Skeleton height={4} width={60} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n}","/var/www/html/framework/frontend/src/views/More/More.jsx",["2563","2564","2565","2566","2567","2568","2569","2570","2571","2572","2573","2574","2575","2576","2577","2578","2579","2580","2581","2582","2583","2584","2585","2586","2587","2588","2589","2590"],"import React, { } from 'react';\nimport { NavLink, } from \"react-router-dom\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport { MyContext } from './../../InitialSetup/MyProvider';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport Select from 'react-select';\nimport { changeLanguageString } from \"../../helper/AppLabels\";\nimport { withTranslation } from \"react-i18next\";\nimport * as Constants from \"../../helper/Constants\";\nimport { Utilities, isFooterTab, sendMessageToApp } from '../../Utilities/Utilities';\nimport { SelectLanguage } from \"../../Component/CustomComponent\";\nimport { BecomeAffiliateModal } from '../../Component/BecomeAffiliate';\nimport { Tooltip, OverlayTrigger } from 'react-bootstrap';\n\nclass More extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            subMenuOpen: false,\n            profile: WSManager.getProfile(),\n            userBalance: WSManager.getBalance(),\n            allowLanguage: Constants.ALLOW_LANG,\n            androidAppVersion: '-',\n            showBecomeAM: false,\n            is_affiliate: WSManager.getProfile().is_affiliate\n\n        }\n    }\n\n    getAppLang() {\n        // Retrieves the app language  \n        return localStorage.getItem('i18nextLng');\n    }\n\n\n    userLogout = () => {\n        WSManager.logout();\n    }\n\n    redirectTo = (path) => {\n        this.props.history.push(path);\n    }\n\n    handleChange = (selectedLang) => {\n        if (this.props.i18n.language != selectedLang.value) {\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale:selectedLang.value,\n                    targetFunc:'handleLanguageChange'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n            this.props.i18n.changeLanguage(selectedLang.value);\n            WSManager.setAppLang(selectedLang.value);\n            changeLanguageString();\n            window.location.reload();\n        }\n    };\n\n    getLanguageFromCode(code) {\n        let allLang = this.state.allowLanguage;\n        for (let i = 0; i < allLang.length; i++) {\n            if (code == allLang[i].value) {\n                return allLang[i].label;\n            }\n        }\n    }\n\n    componentDidMount() {\n        WSManager.setIsFromPayment(false)\n            setTimeout(() => {\n            let app_version = {\n                action: 'app_version',\n                targetFunc: 'app_version',\n                type: 'android',\n            }\n            sendMessageToApp(app_version)\n            this.handelNativeData()\n        }, 300);\n\n    }\n\n    handelNativeData() {\n        window.addEventListener('message', (e) => {\n            if (e.data.action === 'app_version' && e.data.type === 'android') {\n                Utilities.setAndroidAppVersion('' + e.data.version)\n                this.setState({ androidAppVersion: e.data.version })\n            }\n        });\n    }\n\n    updateNativeApp() {\n        let app_version = {\n            action: 'app_download',\n            targetFunc: 'app_download',\n            type: 'android',\n            data: Utilities.getMasterData().app_version.android\n        }\n        sendMessageToApp(app_version)\n    }\n\n    handleUpdateFeature = () => {\n        if(WSManager.getIsIOSApp()){\n        }else if (Utilities.getMasterData().app_version.android.current_ver != this.state.androidAppVersion) {\n            return <div className='update-btn' onClick={() => this.updateNativeApp()}>{AppLabels.UPDATE}</div>\n        }\n    }          \n\n    becomeAffiliate = () => {\n        if (this.state.is_affiliate == 0 || this.state.is_affiliate == 4) {\n            this.setState({\n                showBecomeAM: true\n            })\n        } else if(this.state.is_affiliate == 1) {\n            this.props.history.push('/affiliate-program');\n        }\n    }\n\n    hideBecomeAM = (value) => {\n        this.setState({\n            showBecomeAM: false, is_affiliate: value ? value : this.state.is_affiliate\n        })\n    }\n\n    render() {\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container more-screen-container white-bg container-height pt20\">\n                        {this.state.allowLanguage && this.state.allowLanguage.length > 1 &&\n                            <div className=\"language-section\">\n                                <SelectLanguage boxView={true} />\n                            </div>\n                        }\n                        <ul className=\"drawer-menu-list\">\n                        { \n                            Constants.SELECTED_GAMET != Constants.GameType.MultiGame && \n                            Constants.SELECTED_GAMET != Constants.GameType.Free2Play && \n                            Utilities.getMasterData().private_contest === '1' && \n                            Constants.SELECTED_GAMET != Constants.GameType.Pred && \n                            Constants.SELECTED_GAMET != Constants.GameType.OpenPred &&\n                            Constants.SELECTED_GAMET != Constants.GameType.OpenPredLead &&\n                            Constants.SELECTED_GAMET != Constants.GameType.Pickem &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to={\"/create-contest\"}>\n                                        <i className=\"ic icon-trophy\"></i>\n                                        {AppLabels.Create_a_Contest}\n                                    </NavLink>\n                                </li>\n                            }\n                            {!isFooterTab('my-contests') &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/my-contests\">\n                                        <i className=\"ic icon-cup\"></i>\n                                        {AppLabels.MY_CONTEST}\n                                    </NavLink>\n                                </li>\n                            }\n                            {!isFooterTab('my-profile') &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/my-profile\">\n                                        <i className=\"ic icon-profile\"></i>\n                                        {AppLabels.PROFILE}\n                                    </NavLink>\n                                </li>\n                            }\n                            { !isFooterTab('my-wallet') &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/my-wallet\">\n                                        <i className=\"ic icon-Wallet\"></i>\n                                        {AppLabels.MY_WALLET}\n                                    </NavLink>\n                                </li>\n                            }\n                            {!isFooterTab('refer-friend') &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/refer-friend\">\n                                        <i className=\"ic icon-add-user\"></i>\n                                        {AppLabels.REFER_A_FRIEND_LOWER}\n                                    </NavLink>\n                                </li>\n                            }\n                            {Utilities.getMasterData().affiliate_module == '1' && this.state.is_affiliate != 3 &&\n                                <li onClick={this.becomeAffiliate} className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"#\">\n                                        <i className=\"ic icon-ic-affiliate font-22\"></i>\n                                        {this.state.is_affiliate == 1 ? AppLabels.AFFILIATE_PROGRAM : AppLabels.BECOME_AFFILIATE}\n                                        {(this.state.is_affiliate == 2 || this.state.is_affiliate == 4) && <OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" overlay={\n                                            <Tooltip id=\"tooltip\" className=\"m-l-n\">\n                                                <strong>{this.state.is_affiliate == 2 ? AppLabels.REQ_PENDING : this.state.is_affiliate == 4 ? AppLabels.REQ_CANCELED : ''}</strong>\n                                            </Tooltip>\n                                        }>\n                                            <i className={\"ic arrow-right \" + (this.state.is_affiliate == 2 ? 'icon-info-down warning' : this.state.is_affiliate == 4 ? 'icon-cross-circular reject' : '')}></i>\n                                        </OverlayTrigger>}\n                                    </NavLink>\n                                </li>\n                            }\n                            {/* {Utilities.getMasterData().allow_coin == \"1\" && !isFooterTab('earn-coins') &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/earn-coins\">\n                                        <i className=\"ic icon-coins-bal-ic\"></i>\n                                        {AppLabels.HOW_TO_EARN}\n                                    </NavLink>\n                                </li>\n                            } */}\n                            {Utilities.getMasterData().allow_coin == \"1\" &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/what-is-new\">\n                                        <i className=\"ic icon-megaphone font-22\"></i>\n                                        {AppLabels.WHATSNEW}\n                                    </NavLink>\n                                </li>\n                            }\n                            {Utilities.getMasterData().login_flow == '1' &&\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/change-password\">\n                                        <i className=\"ic icon-add-user\"></i>\n                                        {AppLabels.CHANGE_PASSWORD}\n                                    </NavLink>\n                                </li>\n                            }\n\n\n\n\n                            <li onClick={() => this.setState({ subMenuOpen: !this.state.subMenuOpen })} className={'drawer-menu-item' + (this.state.subMenuOpen ? ' bottom-border-hide' : '')}>\n                                <NavLink exact to=\"#\">\n                                    <i className=\"ic icon-more-large\"></i>\n                                    {AppLabels.OTHERS}\n                                    <i className={\"ic arrow-right \" + (this.state.subMenuOpen ? 'icon-arrow-up' : 'icon-arrow-down')}></i>\n                                </NavLink>\n                            </li>\n\n                            <ul className={this.state.subMenuOpen ? 'sub-menu-open' : 'sub-menu-close'}>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/about-us\">\n                                        <i className=\"ic icon-ic-info fs24\"></i>\n                                        {AppLabels.ABOUT_US}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/faq\">\n                                        <i className=\"ic icon-question\"></i>\n                                        {AppLabels.FAQS}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/terms-condition\">\n                                        <i className=\"ic icon-file\"></i>\n                                        {AppLabels.TERMS_CONDITION}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/rules-and-scoring\">\n                                        <i className=\"ic icon-rules\"></i>\n                                        {AppLabels.RULES_AND_SCORING}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/privacy-policy\">\n                                        <i className=\"ic icon-lock\"></i>\n                                        {AppLabels.PRIVACY_POLICY}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/contact-us\">\n                                        <i className=\"ic icon-envelop\"></i>\n                                        {AppLabels.CONTACT_US}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/legality\">\n                                        <i className=\"ic icon-legality-ic\"></i>\n                                        {AppLabels.LEGALITY}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/offers\">\n                                        <i className=\"ic icon-offers\"></i>\n                                        {AppLabels.OFFERS}\n                                    </NavLink>\n                                </li>\n                                <li className=\"drawer-menu-item\">\n                                    <NavLink exact to=\"/how-it-works\">\n                                        <i className=\"ic icon-question\"></i>\n                                        {AppLabels.HOW_IT_WORKS}\n                                    </NavLink>\n                                </li>\n                                {\n                                    window.navigator.userAgent.toLowerCase().includes('android') && navigator.userAgent.toLowerCase() != 'android-app' &&\n                                    <li className=\"drawer-menu-item\">\n                                        <a href={Constants.APP_DOWNLOAD_LINK_ANDROID}>\n                                            <i className=\"ic icon-ic-download\"></i>\n                                            {AppLabels.DOWNLOAD_APP}\n                                        </a>\n                                    </li>\n                                }\n                            </ul>\n\n                        </ul>\n\n                        <div className='more-footer'>\n                            <div className='change-lang-container hide'>\n                                <span className='change-language-label'>{AppLabels.CHANGE_LANGUAGE}</span>\n                                <div className=\"language-dropdown-wrapper dark-theme\">\n                                    <div className=\"change-language-container dark-theme\">\n                                        <Select\n                                            onChange={this.handleChange}\n                                            options={this.state.allowLanguage}\n                                            classNamePrefix=\"secondary\"\n                                            className=\"select-secondary minusML10\"\n                                            arrowRenderer={this.arrowRenderer}\n                                            value={WSManager.getAppLang()}\n                                            placeholder={WSManager.getAppLang() ? this.getLanguageFromCode(WSManager.getAppLang()) : AppLabels.CHANGE_LANGUAGE}\n                                            isSearchable={false}\n                                            isClearable={false}\n                                            menuPlacement={'top'}\n                                            theme={(theme) => ({\n                                                ...theme,\n                                                borderRadius: 0,\n                                                colors: {\n                                                    ...theme.colors,\n                                                    primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                },\n                                            })}\n                                        />\n                                    </div>\n                                    <span className=\"select-arr\"><i className=\"icon-arrow-down\"></i></span>\n                                </div>\n                            </div>\n                            <div className=\"drawer-footer\">\n                            {\n                                Constants.SELECTED_GAMET != Constants.GameType.Pred && Constants.SELECTED_GAMET != Constants.GameType.MultiGame && Constants.SELECTED_GAMET != Constants.GameType.OpenPred && Constants.SELECTED_GAMET != Constants.GameType.Free2Play &&\n                                <span onClick={() => this.redirectTo('/private-contest')}>\n                                    <span className=\"league-code-btn\">\n                                        <i className=\"icon-league-code\" />\n                                        { AppLabels.HAVE_A_LEAGUE_CODE}\n                                    </span>\n                                </span>\n                            }\n                                \n                                <a href onClick={this.userLogout} className=\"logout-btn\">\n                                    <i className=\"icon-logout\" />\n                                    {AppLabels.LOGOUT}\n                                </a>\n                            </div>\n                            <div className='bottom-container'>\n                                {window.ReactNativeWebView &&\n                                    <div className={\"app-version-container \"}>\n                                        <div className='version-name'>Version {this.state.androidAppVersion}</div>\n                                        {this.handleUpdateFeature()}\n                                    </div>\n                                }\n                                {\n                                    Constants.IS_BRAND_ENABLE && <div className={\"developed-by-container \" + (window.ReactNativeWebView ? \" text-right\" : \"\")}>\n                                        <span>{AppLabels.DEVELOPED_BY} <img alt='' src={Images.VINFOTECH_BRAND} /> {AppLabels.VINFOTECH}</span>\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                        {\n                            this.state.showBecomeAM && <BecomeAffiliateModal {...this.props} preData={{\n                                mShow: this.state.showBecomeAM,\n                                mHide: this.hideBecomeAM\n                            }} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default withTranslation()(More)","/var/www/html/framework/frontend/src/Component/PredictionModule/PredictionLearnMore.jsx",[],"/var/www/html/framework/frontend/src/Component/PredictionModule/CompletedPredictions.jsx",["2591","2592","2593"],"import React from 'react';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { AppSelectedSport, MATCH_TYPE } from '../../helper/Constants';\nimport { getMyPrediction } from '../../WSHelper/WSCallings';\nimport { SportsIDs } from \"../../JsonFiles\";\nimport Skeleton from 'react-loading-skeleton';\nimport PredictionCard from './PredictionCard';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nexport default class CompletedPredictions extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ccList: [],\n            loadingIndex: -1\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item, idx) {\n        if (item.isExpanded) {\n            let ccList = this.state.ccList;\n            item['isExpanded'] = false;\n            ccList[idx] = item;\n            this.setState({ ccList })\n        } else {\n            if (item.contest && item.contest.length > 0) {\n                let ccList = this.state.ccList;\n                item['isExpanded'] = true;\n                ccList[idx] = item;\n                this.setState({ ccList })\n            } else {\n                var param = {\n                    \"season_game_uid\": item.season_game_uid,\n                    \"status\": Constants.CONTEST_COMPLETED\n                }\n                this.setState({ loadingIndex: idx })\n                getMyPrediction(param).then((responseJson) => {\n                    this.setState({ loadingIndex: -1 })\n\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        let ccList = this.state.ccList;\n                        item['contest'] = responseJson.data.predictions || [];\n                        item['isExpanded'] = true;\n                        ccList[idx] = item;\n                        this.setState({ ccList })\n                    }\n                })\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.ccList !== nextProps.ccList) {\n            this.setState({ ccList: nextProps.ccList })\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {\n                    this.state.ccList.length > 0 &&\n\n                    _Map(this.state.ccList, (item, idx) => {\n\n                        return (\n                            <div key={idx} className={\"prediction-wrap-v contest-card completed-contest-card-new\" + (item.isExpanded ? ' pb0' : '')}>\n                                <div onClick={() => this.getMyContestList(item, idx)} className={\"contest-card-header pointer-cursor\" + (item.isExpanded ? ' pb15' : '')}>\n                                    <ul>\n                                        <li className=\"team-left-side\">\n\n                                            <div className=\"team-content-img\">\n                                                <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" />\n                                            </div>\n                                            <div className=\"contest-details-action\">\n\n                                                <div className=\"contest-details-first-div\">{item.home}</div>\n                                                {\n                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                        item.score_data && item.score_data[1] ?\n                                                        <div className=\"contest-details-sec-div\">\n                                                        {item.score_data[1].home_team_score}-{(item.score_data[1].home_wickets) ? item.score_data[1].home_wickets : 0}\n                                                        <span className=\"gray-color-class\"> {(item.score_data[1].home_overs) ? item.score_data[1].home_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                        {\n                                                            item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                            {item.score_data[2].home_team_score}-{(item.score_data[2].home_wickets) ? item.score_data[2].home_wickets : 0}\n                                                            <span className=\"gray-color-class\"> {(item.score_data[2].home_overs) ? item.score_data[2].home_overs : 0} </span>\n                                                            </div>\n                                                        }\n                                                        </div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">{0}-{0}<span className=\"gray-color-class\"> 0 </span></div>\n                                                        :\n                                                        (item.score_data) ?\n                                                            <div className=\"contest-details-sec-div\">{item.score_data.home_score}</div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                }\n                                            </div>\n                                        </li>\n                                        <li className=\"progress-middle\">\n\n                                            <div className=\"progress-middle-div\">\n                                                <div className=\"team-content\">\n                                                    <p>\n                                                        {item.league_name}\n                                                        {\n                                                            AppSelectedSport === '7' &&\n                                                            <React.Fragment>- {MATCH_TYPE[item.format]}</React.Fragment>\n                                                        }\n                                                    </p>\n                                                    <span className=\"time-line primary-color\"> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A\" }} /> </span>\n\n                                                </div>\n                                            </div>\n                                        </li>\n                                        <li className=\"team-right-side\">\n\n                                            <div className=\"contest-details-action\">\n                                                <div className=\"contest-details-first-div\">{item.away}</div>\n                                                {\n                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                        item.score_data && item.score_data[1] ?\n                                                        <div className=\"contest-details-sec-div\">\n                                                        {item.score_data[1].away_team_score}-{(item.score_data[1].away_wickets) ? item.score_data[1].away_wickets : 0}\n                                                        <span className=\"gray-color-class\"> {(item.score_data[1].away_overs) ? item.score_data[1].away_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                        {\n                                                            item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                            {item.score_data[2].away_team_score}-{(item.score_data[2].away_wickets) ? item.score_data[2].away_wickets : 0}\n                                                            <span className=\"gray-color-class\"> {(item.score_data[2].away_overs) ? item.score_data[2].away_overs : 0} </span>\n                                                            </div>\n                                                        }\n                                                        </div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">{0}-{0}<span className=\"gray-color-class\"> 0 </span></div>\n                                                        :\n                                                        (item.score_data) ?\n                                                            <div className=\"contest-details-sec-div\">{item.score_data.away_score}</div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                }\n\n                                            </div>\n                                            <div className=\"team-content-img\">\n                                                <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" />\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n\n\n                                {\n                                    item.isExpanded && <ul className=\"list-pred my-pre\">\n                                        {item.contest.map((childItem, indx) => {\n                                            return <PredictionCard\n                                                {...this.props}\n                                                key={indx}\n                                                data={{\n                                                    itemIndex: indx,\n                                                    item: childItem,\n                                                    status: Constants.CONTEST_COMPLETED\n                                                }} />;\n                                        })}\n                                    </ul>\n                                }\n                                {\n\n                                    (this.state.loadingIndex === idx) && <div className=\"contest-list m border shadow-none\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-line\">\n                                                    <Skeleton height={9} />\n                                                    <Skeleton height={6} />\n                                                    <Skeleton height={4} width={100} />\n                                                </div>\n                                                <div className=\"shimmer-image\">\n                                                    <Skeleton width={30} height={30} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view\">\n                                                <div className=\"progress-bar-default w-100\">\n                                                    <Skeleton height={6} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={60} />\n                                                        <Skeleton height={4} width={60} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/PredictionModule/LivePredictions.jsx",["2594","2595","2596","2597"],"import React from 'react';\nimport { SportsIDs } from \"../../JsonFiles\";\nimport { _Map, Utilities } from '../../Utilities/Utilities';\nimport { AppSelectedSport, CONTEST_LIVE, MATCH_TYPE, CONTEST_UPCOMING } from '../../helper/Constants';\nimport { getMyPrediction } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport PredictionCard from './PredictionCard';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\n\nexport default class LivePredictions extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            lcList: [],\n            loadingIndex: -1\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item, idx) {\n        if (item.isExpanded) {\n            let lcList = this.state.lcList;\n            item['isExpanded'] = false;\n            lcList[idx] = item;\n            this.setState({ lcList })\n        } else {\n            if (item.contest && item.contest.length > 0) {\n                let lcList = this.state.lcList;\n                item['isExpanded'] = true;\n                lcList[idx] = item;\n                this.setState({ lcList })\n            } else {\n                var param = {\n                    \"season_game_uid\": item.season_game_uid,\n                    \"status\": CONTEST_LIVE\n                }\n                this.setState({ loadingIndex: idx })\n                getMyPrediction(param).then((responseJson) => {\n                    this.setState({ loadingIndex: -1 })\n\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        let lcList = this.state.lcList;\n                        item['contest'] = responseJson.data.predictions || [];\n                        item['isExpanded'] = true;\n                        lcList[idx] = item;\n                        this.setState({ lcList })\n                    }\n                })\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.lcList !== nextProps.lcList) {\n            this.setState({ lcList: nextProps.lcList })\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {\n                    this.state.lcList.length > 0 &&\n                    _Map(this.state.lcList, (item, idx) => {\n                        return (\n                            <div key={idx} className={\"prediction-wrap-v contest-card live-contest-card live-contest-card-new\" + (item.isExpanded ? ' pb0' : '')}>\n                                <div onClick={() => this.getMyContestList(item, idx)} className={\"contest-card-header pointer-cursor\" + (item.isExpanded ? ' pb15' : '')}>\n                                    <ul>\n                                        <li className=\"team-left-side\">\n                                            <div className=\"team-content-img\">\n                                                <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" />\n                                            </div>\n                                            <div className=\"contest-details-action\">\n                                                <div className=\"contest-details-first-div\">{item.home}</div>\n                                                {\n                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                        item.score_data && item.score_data[1] ?\n                                                        <div className=\"contest-details-sec-div\">\n                                                        {item.score_data[1].home_team_score}-{(item.score_data[1].home_wickets) ? item.score_data[1].home_wickets : 0}\n                                                        <span className=\"gray-color-class\"> {(item.score_data[1].home_overs) ? item.score_data[1].home_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                        {\n                                                            item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                            {item.score_data[2].home_team_score}-{(item.score_data[2].home_wickets) ? item.score_data[2].home_wickets : 0}\n                                                            <span className=\"gray-color-class\"> {(item.score_data[2].home_overs) ? item.score_data[2].home_overs : 0} </span>\n                                                            </div>\n                                                        }\n                                                        </div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">{0}-{0}<span className=\"gray-color-class\"> 0 </span></div>\n                                                        :\n                                                        (item.score_data) ?\n                                                            <div className=\"contest-details-sec-div\">{item.score_data.home_score}</div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                }\n                                            </div>\n                                        </li>\n                                        <li className=\"progress-middle\">\n                                            <div className=\"progress-middle-div\">\n                                                <p>\n                                                    {item.league_name}\n                                                    {\n                                                        AppSelectedSport === '7' &&\n                                                        <React.Fragment>- {MATCH_TYPE[item.format]}</React.Fragment>\n                                                    }\n                                                </p>\n                                                <span className=\"progress-span\">\n                                                    {AppLabels.IN_PROGRESS}\n                                                </span>\n                                            </div>\n                                        </li>\n                                        <li className=\"team-right-side\">\n                                            <div className=\"contest-details-action\">\n                                                <div className=\"contest-details-first-div\">{item.away}</div>\n                                                {\n                                                    AppSelectedSport == SportsIDs.cricket ?\n                                                        item.score_data && item.score_data[1] ?\n                                                        <div className=\"contest-details-sec-div\">\n                                                        {item.score_data[1].away_team_score}-{(item.score_data[1].away_wickets) ? item.score_data[1].away_wickets : 0}\n                                                        <span className=\"gray-color-class\"> {(item.score_data[1].away_overs) ? item.score_data[1].away_overs : 0} {item.score_data[2] ? ' & ' : ''} </span>\n                                                        {\n                                                            item.score_data[2] && <div className=\"contest-details-sec-div second-inning\">\n                                                            {item.score_data[2].away_team_score}-{(item.score_data[2].away_wickets) ? item.score_data[2].away_wickets : 0}\n                                                            <span className=\"gray-color-class\"> {(item.score_data[2].away_overs) ? item.score_data[2].away_overs : 0} </span>\n                                                            </div>\n                                                        }\n                                                        </div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">{0}-{0}<span className=\"gray-color-class\"> 0 </span></div>\n                                                        :\n                                                        (item.score_data) ?\n                                                            <div className=\"contest-details-sec-div\">{item.score_data.away_score}</div>\n                                                            :\n                                                            <div className=\"contest-details-sec-div\">0</div>\n                                                }\n                                            </div>\n                                            <div className=\"team-content-img\">\n                                                <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" />\n                                            </div>\n                                        </li>\n\n                                    </ul>\n                                </div>\n                                {\n                                    item.isExpanded && <ul className=\"list-pred my-pre\">\n                                        {item.contest.map((childItem, indx) => {\n                                            return <PredictionCard\n                                                {...this.props}\n                                                key={indx}\n                                                data={{\n                                                    itemIndex: indx,\n                                                    item: childItem,\n                                                    status: CONTEST_LIVE\n                                                }} />;\n                                        })}\n                                    </ul>\n                                }\n                                {\n\n                                    (this.state.loadingIndex === idx) && <div className=\"contest-list m border shadow-none\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-line\">\n                                                    <Skeleton height={9} />\n                                                    <Skeleton height={6} />\n                                                    <Skeleton height={4} width={100} />\n                                                </div>\n                                                <div className=\"shimmer-image\">\n                                                    <Skeleton width={30} height={30} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view\">\n                                                <div className=\"progress-bar-default w-100\">\n                                                    <Skeleton height={6} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={60} />\n                                                        <Skeleton height={4} width={60} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div >\n        )\n    }\n\n}","/var/www/html/framework/frontend/src/Component/PredictionModule/UpcomingPredictions.jsx",["2598"],"import React from 'react';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { getMyPrediction } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport PredictionCard from './PredictionCard';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nexport default class UpcomingPredictions extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ucList: [],\n            loadingIndex: -1\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item, idx) {\n        if (item.isExpanded) {\n            let ucList = this.state.ucList;\n            item['isExpanded'] = false;\n            ucList[idx] = item;\n            this.setState({ ucList })\n        } else {\n            if (item.contest && item.contest.length > 0) {\n                let ucList = this.state.ucList;\n                item['isExpanded'] = true;\n                ucList[idx] = item;\n                this.setState({ ucList })\n            } else {\n                var param = {\n                    \"season_game_uid\": item.season_game_uid,\n                    \"status\": Constants.CONTEST_UPCOMING\n                }\n                this.setState({ loadingIndex: idx })\n                getMyPrediction(param).then((responseJson) => {\n                    this.setState({ loadingIndex: -1 })\n\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        let ucList = this.state.ucList;\n                        item['contest'] = responseJson.data.predictions || [];\n                        item['isExpanded'] = true;\n                        ucList[idx] = item;\n                        this.setState({ ucList })\n                    }\n                })\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.ucList !== nextProps.ucList) {\n            this.setState({ ucList: nextProps.ucList })\n        }\n    }\n\n\n    render() {\n        let { removeFromList } = this.props;\n\n        return (\n            <div>\n                {\n                    this.state.ucList.length > 0 &&\n                    _Map(this.state.ucList, (item, idx) => {\n                        return (\n                            <div key={idx} className={\"prediction-wrap-v contest-card upcoming-contest-card-new\" + (item.isExpanded ? ' pb0' : '')}>\n                                <div onClick={() => this.getMyContestList(item, idx)} className={\"contest-card-header pointer-cursor\" + (item.isExpanded ? ' pb15' : '')}>\n                                    <ul>\n                                        <li className=\"team-left-side\">\n                                            <div className=\"team-content-img\">\n                                                <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" />\n                                            </div>\n                                            <div className=\"contest-details-action\">\n                                                <div className=\"contest-details-first-div\">{item.home}</div>\n                                            </div>\n                                        </li>\n                                        <li className=\"progress-middle\">\n                                            <div className=\"team-content\">\n                                                <p>\n                                                    {item.league_name}\n                                                    {Constants.AppSelectedSport === '7' &&\n                                                        <React.Fragment>- {Constants.MATCH_TYPE[item.format]}</React.Fragment>\n                                                    }\n                                                </p>\n                                                {\n                                                    Utilities.showCountDown(item) ?\n                                                        <span>\n                                                            {item.game_starts_in && <CountdownTimer timerCallback={() => removeFromList(Constants.CONTEST_UPCOMING, idx)} deadlineTimeStamp={item.game_starts_in} />}\n                                                        </span>\n                                                        :\n                                                        <span className=\"time-line-date\"> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A\" }} /> </span>\n                                                }\n\n                                            </div>\n                                        </li>\n                                        <li className=\"team-right-side\">\n\n                                            <div className=\"contest-details-action\">\n                                                <div className=\"contest-details-first-div\">{item.away}</div>\n                                            </div>\n                                            <div className=\"team-content-img\">\n                                                <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" />\n                                            </div>\n\n                                        </li>\n                                    </ul>\n                                </div>\n                                {\n                                    item.isExpanded && <ul className=\"list-pred my-pre\">\n                                        {item.contest.map((childItem, indx) => {\n                                            return <PredictionCard\n                                                {...this.props}\n                                                key={indx}\n                                                data={{\n                                                    itemIndex: indx,\n                                                    item: childItem,\n                                                    status: Constants.CONTEST_UPCOMING\n                                                }} />;\n                                        })}\n                                    </ul>\n                                }\n                                {\n\n                                    (this.state.loadingIndex === idx) && <div className=\"contest-list m border shadow-none\">\n                                        <div className=\"shimmer-container\">\n                                            <div className=\"shimmer-top-view\">\n                                                <div className=\"shimmer-line\">\n                                                    <Skeleton height={9} />\n                                                    <Skeleton height={6} />\n                                                    <Skeleton height={4} width={100} />\n                                                </div>\n                                                <div className=\"shimmer-image\">\n                                                    <Skeleton width={30} height={30} />\n                                                </div>\n                                            </div>\n                                            <div className=\"shimmer-bottom-view\">\n                                                <div className=\"progress-bar-default w-100\">\n                                                    <Skeleton height={6} />\n                                                    <div className=\"d-flex justify-content-between\">\n                                                        <Skeleton height={4} width={60} />\n                                                        <Skeleton height={4} width={60} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/CustomComponent/Particles.jsx",["2599"],"import React, { createRef } from 'react';\nvar COLORS = ['#2ecc71', '#3498db', '#e67e22', '#e67e22', '#e74c3c'];\nvar TOP_OFFSET = window.innerHeight;\nvar LEFT_OFFSET = 300;\n\nconst generateWholeNumber = (min, max) => min + Math.floor(Math.random() * (max - min));\n\nconst generateRandomColor = () => COLORS[generateWholeNumber(0, COLORS.length)];\n\nclass Particles extends React.PureComponent {\n\n    render() {\n        let { count: n } = this.props;\n        const particles = [];\n        const types = [SquiggleParticle, CircularParticle, CircularParticle];\n\n        while (n--) {\n            const Particle = types[generateWholeNumber(0, 3)];\n            particles.push(\n                <Particle key={n} />\n            );\n        }\n\n        return (\n            <div className='particles'>\n                {particles}\n            </div>\n        );\n    }\n}\n\nexport default Particles;\n\nclass CircularParticle extends React.PureComponent {\n\n    static SIZE_RANGE = [5, 10];\n    static ROTATION_RANGE = [0, 45];\n    circleRef = createRef();\n\n    constructor(props) {\n        super(props);\n        const { SIZE_RANGE, ROTATION_RANGE } = CircularParticle;\n        const size = generateWholeNumber(...SIZE_RANGE);\n        this.style = {\n            backgroundColor: generateRandomColor(),\n            width: size,\n            height: size,\n            borderRadius: size,\n            transform: `rotateZ(${generateWholeNumber(...ROTATION_RANGE)}deg)`,\n            left: generateWholeNumber(0, window.innerWidth),\n            top: generateWholeNumber(-TOP_OFFSET, 0)\n        };\n    }\n\n    componentDidMount() {\n        const { left } = this.style;\n        const { ROTATION_RANGE } = CircularParticle;\n        setTimeout(() => {\n            const node = this.circleRef.current;\n            node.style.top = window.innerHeight + generateWholeNumber(0, TOP_OFFSET) + 'px';\n            node.style.left = left + generateWholeNumber(-LEFT_OFFSET, LEFT_OFFSET) + 'px';\n        }, 0);\n    }\n\n    render() {\n\n        return (\n            <div ref={this.circleRef} className='particle' style={this.style} />\n        );\n    }\n}\n\nclass SquiggleParticle extends React.PureComponent {\n\n    static SIZE_RANGE = [15, 45];\n    static ROTATION_RANGE = [-15, 15];\n    svgREF = createRef();\n\n    constructor(props) {\n        super(props);\n        const size = generateWholeNumber(...SquiggleParticle.SIZE_RANGE);\n        this.style = {\n            fill: generateRandomColor(),\n            width: size,\n            height: size,\n            transform: `rotateZ(${generateWholeNumber(...SquiggleParticle.ROTATION_RANGE)}deg)`,\n            left: generateWholeNumber(0, window.innerWidth),\n            top: generateWholeNumber(-TOP_OFFSET, 0)\n        };\n    }\n\n    componentDidMount() {\n        const { left } = this.style;\n        const { ROTATION_RANGE } = SquiggleParticle;\n        setTimeout(() => {\n            const node = this.svgREF.current;\n            node.style.top = window.innerHeight + generateWholeNumber(0, TOP_OFFSET) + 'px';\n            node.style.left = left + generateWholeNumber(-LEFT_OFFSET, LEFT_OFFSET) + 'px';\n            node.style.transform = `rotateZ(${generateWholeNumber(...ROTATION_RANGE)}deg)`;\n        }, 0);\n    }\n\n    render() {\n        return (\n            <svg\n                ref={this.svgREF}\n                className='particle'\n                style={this.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 512 512\">\n                <path fill={this.style.fill} d=\"M428.127,0l-12.716,10.062l12.718-10.06c8.785,11.101,19.716,24.917,19.716,51.051 s-10.932,39.951-19.716,51.053c-7.382,9.331-12.716,16.072-12.716,30.927c0,14.854,5.334,21.594,12.716,30.925   c8.784,11.101,19.716,24.917,19.716,51.05c0,26.135-10.931,39.949-19.715,51.051c-7.383,9.331-12.717,16.072-12.717,30.927   c0,14.855,5.332,21.593,12.711,30.919l-25.435,20.124c-8.781-11.097-19.708-24.909-19.708-51.042 c0-26.135,10.931-39.949,19.715-51.051c7.383-9.331,12.717-16.072,12.717-30.927c0-14.855-5.335-21.595-12.717-30.926 c-8.784-11.101-19.715-24.916-19.715-51.049s10.931-39.95,19.715-51.051c7.383-9.331,12.717-16.072,12.717-30.928 c0-14.855-5.335-21.596-12.718-30.927L428.127,0z\" />\n            </svg>\n        );\n    }\n}\n\n","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/HowToPlayModal.jsx",["2600","2601","2602"],"import React from 'react';\nimport { Modal, Button, Label } from 'react-bootstrap';\nimport Images from '../../components/images';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport * as AppLabels from \"../../helper/AppLabels\";\n\nexport default class HowToPlayModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            show: false,\n        };\n    }\n\n    render() {\n        const { IsCollectionInfoShow, IsCollectionInfoHide } = this.props;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsCollectionInfoShow} onHide={() => IsCollectionInfoHide()} bsSize=\"large\" dialogClassName=\"how-to-play-modal\" className=\"center-modal\">\n                            <Modal.Header closeButton>\n                            </Modal.Header>\n                            <Modal.Body>\n\n                                <div >\n                                    <div>\n                                        <div>\n                                            <Label className='how-to_play_label'>{AppLabels.MORE_ABOUT_FREE_TO_PLAY} </Label>\n                                        </div>\n                                    </div>\n                                    <div style={{ marginTop: '15%', paddingBottom:'15%' }}>\n                                        <div className='parallelogram-outer-white'>\n                                            <div className='parallelogram-outer-full-white'>\n                                                <div className='plan-bg'>\n                                                    <Label className='text-blue'>{AppLabels.PARTICIPATE_FOR_FREE}</Label><br></br>\n                                                </div>\n                                                <div style={{ marginTop: '12px' }} className='plan-bg'>\n                                                    <Label className='how-to-play-detail'>{AppLabels.CREATE_YOUR_TEAM_AND_JOIN}</Label><br></br>\n                                                </div>\n                                            </div>\n                                            <img src={Images.IC1} className='ic1'></img>\n                                        </div>\n                                        <div className='parallelogram-outer-r-white'>\n                                            <img src={Images.IC2} className='ic2'></img>\n                                            <div className='parallelogram-outer-r-full-white'>\n\n                                                <div className='parallelogram-outer-full-white'>\n                                                    <div className='plan-bg-r'>\n                                                        <Label className='text-blue-right'>{AppLabels.BE_PART_OF_HALL_OF_FAME}</Label><br></br>\n                                                    </div>\n                                                    <div style={{ marginTop: '12px' }} className='plan-bg-r'>\n                                                        <Label className='create-your-team-and'>{AppLabels.JOIN_ALL_MATCHES}</Label><br></br>\n                                                        {/* <Label className='create-your-team-and'>totally free </Label> */}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className='parallelogram-outer-white'>\n                                            <img src={Images.IC3} className='ic3'></img>\n                                            <div className='parallelogram-outer-full-white'>\n                                                <div className='plan-bg'>\n                                                    <Label className='text-blue'>{AppLabels.WIN_EXCITING_PRIZES_FREE_TO_PLAY}</Label><br></br>\n                                                </div>\n                                                <div style={{ marginTop: '20px' }} className='plan-bg'>\n                                                    <Label className='how-to-play-detail'>{AppLabels.PRIZES_WILL_BE_FOR_CONTEST}</Label><br></br>\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <Button onClick={() => IsCollectionInfoHide()} className=\" btn-primary button-got-it\"> {AppLabels.GOT_IT}</Button>\n\n                            </Modal.Body>\n                        </Modal>\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/FreeToPlayLobby.jsx",["2603","2604","2605","2606","2607","2608","2609","2610","2611","2612","2613","2614","2615","2616","2617","2618","2619","2620","2621","2622","2623","2624","2625","2626","2627","2628","2629","2630","2631","2632","2633","2634","2635","2636","2637","2638","2639","2640","2641","2642","2643","2644","2645","2646","2647","2648","2649","2650","2651","2652","2653","2654","2655","2656","2657"],"import React from 'react';\nimport { LobbyBannerSlider, LobbyShimmer } from '../../Component/CustomComponent';\nimport { Row, Col } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { updateDeviceToken, getLobbyBanner, getLobbyFreeToPlay, getMiniLeagueUpcomingFixture, getAppNotificationCount } from \"../../WSHelper/WSCallings\";\nimport { Utilities, _isEmpty, _filter, _Map, BannerRedirectLink, parseURLDate } from '../../Utilities/Utilities';\nimport ls from 'local-storage';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as Constants from \"../../helper/Constants\";\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport Filter from '../../components/filter';\nimport HallofFameModal from './HallofFameModal';\nimport ContestDetailModal from '../../Modals/ContestDetail';\nimport { NoDataView } from '../CustomComponent';\nimport CustomHeader from '../../components/CustomHeader';\nimport FreeToPlayFixtureContest from './FreeToPlayFixtureContest';\n\nvar bannerData = {}\n\n\nexport class FreeToPlayLobby extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notificationData: Constants.NOTIFICATION_DATA,\n            userCoinBalnc: (WSManager.getBalance().point_balance || 0),\n            OriginalContestList: [],\n            ContestList: [],\n            BannerList: [],\n            MiniLeagueList: [],\n\n            ShimmerList: [1, 2, 3, 4, 5],\n            showContestDetail: false,\n            FixtureData: '',\n            isLoaderShow: false,\n            isListLoading: false,\n            offset: 0,\n            showLobbyFitlers: false,\n            league_id: \"\",\n            filterArray: [],\n            sports_id: Constants.AppSelectedSport,\n            showCollectionInfo: false,\n            viewLeaugeSheduled: false,\n            mini_league_id: this.props.match.params.mini_league_id,\n\n            canRedirect: true\n        }\n\n    }\n    \n    ContestDetailShow = (data) => {\n        this.setState({\n            showContestDetail: true,\n            FixtureData: data\n        });\n    }\n    /**\n    * @description this method to hide contest detail model,\n    */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n    /**\n     * \n     * @description method to display collection info model.\n     */\n    CollectionInfoShow = (item) => {\n        \n        \n        this.setState({\n            showCollectionInfo: true,\n            hallOfFameItem: item\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    CollectionInfoHide = (isViewSheduled, item) => {\n        this.setState({ showCollectionInfo: false, viewLeaugeSheduled: isViewSheduled }, () => {\n            if (this.state.viewLeaugeSheduled) {\n                this.props.history.push({ pathname: '/sheduled-fixture/' + item.mini_league_uid + \"/\" + item.mini_league_name })\n\n            }\n        })\n    }\n\n\n    /**\n     * @description this method to to open create contest screen\n     */\n    createContest = () => {\n        this.props.history.push('/create-contest')\n    }\n\n    /**\n     * @description this method to to open Have a league code screen\n     */\n    joinContest = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push({ pathname: '/private-contest' })\n        }\n        else {\n            this.props.history.push({ pathname: '/signup' })\n        }\n    }\n    /**\n     * @description this method will be call when user click join buttonn from contestt detail model screen,\n     * in case user in not logged in then signup/login screen will display\n     * @param data - contest model \n     */\n    onSubmitBtnClick = (data) => {\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: ' ' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } else {\n            let dateformaturl = parseURLDate(data.season_scheduled_date);\n            WSManager.clearLineup();\n            let lineupPath = '/lineup/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data } })\n        }\n    }\n\n    /**\n     * @description - this method is to display contest of a fixture on click event\n     * @param data - fixture model\n     */\n    gotoDetails = (data, event) => {\n        event.preventDefault();\n\n        if (Constants.SELECTED_GAMET == Constants.GameType.Free2Play) {\n            let dateformaturl = parseURLDate(data.season_scheduled_date);\n            this.setState({ LobyyData: data })\n\n            let gameType = Constants.SELECTED_GAMET;\n            let contestListingPath = '/' + Utilities.getSelectedSportsForUrl().toLowerCase() + '/free-to-play/' + data.collection_master_id + '/' + data.home + \"-vs-\" + data.away + \"-\" + dateformaturl + \"/\" + gameType + \"/\" + data.season_game_uid + \"/\" + data.contest_id;\n            this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data, lineupPath: contestListingPath } })\n\n        }\n\n\n    }\n    getAPiNotificationCount() {\n\n        let minuts = Constants.NOTIFICATION_DATA.date ? Utilities.minuteDiffValue(Constants.NOTIFICATION_DATA) : 0;\n        if ((minuts === 0 || minuts > 0.7)) {\n            getAppNotificationCount().then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    if (typeof responseJson.data != \"undefined\") {\n                        let obj = { date: Date.now(), count: responseJson.data }\n                        Constants.setValue.setNotificationCount(obj);\n                        this.setState({ notificationData: obj })\n                    }\n                }\n            })\n        }\n    }\n\n\n    gotoLeaderBoard = (data, event) => {\n        event.stopPropagation();\n\n        this.CollectionInfoShow(data)\n    }\n\n    /**\n     * @description - this is life cycle method of react\n     */\n    componentDidMount() {\n        Utilities.scrollToTop()\n\n        \n\n        \n        \n\n        let { sports_id } = this.state;\n        WSManager.setFromConfirmPopupAddFunds(false);\n        let league_id = this.getSportsLeagueId(sports_id, Constants.LOBBY_FILTER_ARRAY);\n        this.setState({ isLoaderShow: true, sports_id, league_id, filterArray: Constants.LOBBY_FILTER_ARRAY }, () => {\n            this.lobbyContestList(0);\n            this.getBannerList();\n        })\n\n        \n        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'fixture');\n        if (WSManager.loggedIn()) {\n            WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n        }\n        this.handelNativeGoogleLogin()\n        if (!ls.get('isDeviceTokenUpdated')) {\n\n            let token_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'deviceid',\n            }\n            this.sendMessageToApp(token_data)\n        }\n        setTimeout(() => {\n            let push_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'receive',\n            }\n            this.sendMessageToApp(push_data)\n        }, 300);\n    }\n\n    componentWillMount = () => {\n        this.enableDisableBack(false)\n        WSManager.setPickedGameType(Constants.GameType.Free2Play)\n    }\n\n    enableDisableBack(flag) {\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'back',\n                type: flag,\n                targetFunc: 'handleLoginReceived'\n            }\n            this.sendMessageToApp(data);\n        }\n    }\n\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            let league_id = this.getSportsLeagueId(nextProps.selectedSport, this.state.filterArray);\n            this.setState({\n                ContestList: [],\n                MiniLeagueList: [],\n                league_id: league_id,\n                offset: 0,\n                sports_id: nextProps.selectedSport,\n            }, () => {\n                \n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.lobbyContestList(0);\n                this.getBannerList();\n                Filter.reloadLobbyFilter();\n            })\n        }\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n\n            if (e.data.locale != undefined) {\n                WSManager.setAppLang(e.data.locale);\n            }\n            if (e.data.UserProfile != undefined) {\n                WSManager.setProfile(e.data.UserProfile);\n            }\n            if (e.data.LoginSessionKey != '' && e.data.LoginSessionKey != undefined) {\n                WSManager.setToken(e.data.LoginSessionKey);\n            }\n            if (e.data.isMobileApp != '' && e.data.isMobileApp != undefined) {\n                WSManager.setIsMobileApp(e.data.isMobileApp);\n            }\n\n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132' ||\n                    e.data.notif.notification_type == '300') {\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = parseURLDate(e.data.notif.season_scheduled_date);\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(Constants.SELECTED_GAMET);\n                }\n                else if (e.data.notif.notification_type == '135') {\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else if (e.data.notif.custom_notification_type ==7) {\n                        pathName = 'add-funds';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n    checkOldUrl() {\n        \n        \n        \n        \n        \n\n        let url = window.location.href;\n        let sports = '#' + Utilities.getSelectedSportsForUrl();\n        if (!url.includes(sports)) {\n            url = url + sports\n        }\n        if (!url.includes('#freeToPlay')) {\n            url = url + \"#freeToPlay\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    lobbyContestList = async (offset) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n        let param;\n        if (this.state.mini_league_id) {\n            param = {\n                \"sports_id\": Constants.AppSelectedSport,\n                \"mini_league_id\": this.state.mini_league_id\n            }\n        }\n        else {\n            param = {\n                \"sports_id\": Constants.AppSelectedSport,\n            }\n        }\n\n\n\n\n        this.setState({ isLoaderShow: true, isListLoading: true })\n        delete param.limit;\n        let apiStatus = this.state.mini_league_id ? getMiniLeagueUpcomingFixture(param) : getLobbyFreeToPlay(param)\n        var api_response_data = await apiStatus;\n        if (api_response_data) {\n            this.setState({ isLoaderShow: false })\n            if (offset == 0) {\n                this.setState({ ContestList: this.state.mini_league_id ? api_response_data.data : api_response_data, OriginalContestList: this.state.mini_league_id ? api_response_data.data : api_response_data }, () => {\n                    if (Constants.LOBBY_FILTER_ARRAY.length > 0) {\n                        this.filterLobbyResults({ league_id: Constants.LOBBY_FILTER_ARRAY[0].league_id })\n                    }\n                })\n            } else {\n                this.setState({ ContestList: [...this.state.ContestList, ...this.state.mini_league_id ? api_response_data.data : api_response_data], OriginalContestList: [...this.state.ContestList, ...this.state.mini_league_id ? api_response_data.data : api_response_data] });\n            }\n            this.setState({ offset: api_response_data.offset })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n\n\n\n\n    \n\n    getSportsLeagueId(sports_id, filterArray) {\n\n        let league_id = '';\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == sports_id) {\n                league_id = filterArray[i].league_id;\n            }\n        }\n        return league_id;\n    }\n\n    /** \n    @description hide lobby filters \n    */\n    hideFilter = () => {\n        this.setState({ showLobbyFitlers: false })\n        this.props.hideFilterData()\n    }\n\n    /** \n    @description show lobby filters \n    */\n    showFilter = () => {\n        this.setState({ showLobbyFitlers: true })\n    }\n\n    /** \n    @description Apply filters and load data accordingly\n    */\n    filterLobbyResults = (filterObj) => {\n        let league_id = (!_isEmpty(filterObj.league_id) && typeof filterObj.league_id != 'undefined') ? filterObj.league_id : \"\";\n        this.setState({ league_id: league_id }, function () {\n            this.filterFixturesLocally(league_id)\n        })\n\n        let filterArray = this.setFilterArray(league_id);\n        Constants.setValue.setFilter(filterArray);\n        this.setState({ league_id: league_id, showLobbyFitlers: false, offset: 0, filterArray: filterArray })\n        this.props.hideFilterData()\n    }\n\n    filterFixturesLocally(leagueIds) {\n        let allFixtures = this.state.OriginalContestList;\n        if (leagueIds == '') {\n            this.setState({ ContestList: allFixtures })\n        }\n        else {\n            let filteredList = [];\n            for (var i = 0; i < allFixtures.length; i++) {\n                if (leagueIds.includes(allFixtures[i].league_id)) {\n                    filteredList.push(allFixtures[i])\n                }\n\n            }\n\n            this.setState({ ContestList: filteredList })\n        }\n    }\n\n    setFilterArray(league_id) {\n        let { filterArray } = this.state;\n\n        let hasFilter = false;\n        if (filterArray.length > 0) {\n            for (let i = 0; i < filterArray.length; i++) {\n                if (filterArray[i].sports_id == this.state.sports_id) {\n                    hasFilter = true;\n                    filterArray[i].league_id = league_id;\n                }\n            }\n        }\n\n        if (!hasFilter && league_id != \"\") {\n            let filterObj = {\n                'sports_id': this.state.sports_id,\n                'league_id': league_id,\n            }\n            filterArray.push(filterObj);\n        }\n\n        return filterArray;\n    }\n\n    /** \n     * @description api call to get baner listing from server\n    */\n    getBannerList = () => {\n        let sports_id = Constants.AppSelectedSport;\n\n        if (sports_id == null)\n            return;\n        if (bannerData[sports_id]) {\n            this.parseBannerData(bannerData[sports_id])\n        } else {\n            setTimeout(async () => {\n                this.setState({ isLoaderShow: true })\n                let param = {\n                    \"sports_id\": sports_id\n                }\n                var api_response_data = await getLobbyBanner(param);\n                if (api_response_data) {\n                    bannerData[sports_id] = api_response_data;\n                    this.parseBannerData(api_response_data)\n                }\n                this.setState({ isLoaderShow: false })\n            }, 1500);\n        }\n    }\n\n    /** \n     * @description call to parse banner data\n    */\n    parseBannerData = (bdata) => {\n        let refData = '';\n        let temp = [];\n        _Map(this.getSelectedbanners(bdata), (item, idx) => {\n            if (item.banner_type_id == 2) {\n                refData = item;\n            }\n            if (item.banner_type_id == 1) {\n                let dateObj = Utilities.getUtcToLocal(item.schedule_date)\n                if (Utilities.minuteDiffValue({ date: dateObj }) < 0) {\n                    temp.push(item);\n                }\n            }\n            else {\n                temp.push(item);\n            }\n        })\n        setTimeout(() => {\n            CustomHeader.showRCM(refData);\n        }, 200);\n        this.setState({ BannerList: temp })\n    }\n\n    /** \n     * @description call to get selected banner data\n    */\n    getSelectedbanners(api_response_data) {\n        let tempBannerList = [];\n        for (let i = 0; i < api_response_data.length; i++) {\n            let banner = api_response_data[i];\n            if (WSManager.getToken() && WSManager.getToken() != '') {\n                if (banner.banner_type_id == Constants.BANNER_TYPE_REFER_FRIEND\n                    || banner.banner_type_id == Constants.BANNER_TYPE_DEPOSITE) {\n                    if (banner.amount > 0)\n                        tempBannerList.push(api_response_data[i]);\n                }\n                else if (banner.banner_type_id == '6') {\n                    \n                }\n                else {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n            else {\n                if (banner.banner_type_id == '6') {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n        }\n\n        return tempBannerList;\n    }\n\n    /**\n     * @description method to redirect user on appopriate screen when user click on banner\n     * @param {*} banner_type_id - id of banner on which clicked\n     */\n    redirectLink = (result) => {\n        BannerRedirectLink(result, this.props)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n        if (this.state.showLobbyFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLobbyFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    timerCompletionCall = (item) => {\n        let fArray = _filter(this.state.ContestList, (obj) => {\n            return item.collection_master_id != obj.collection_master_id\n        })\n        this.setState({\n            ContestList: fArray\n        })\n    }\n\n    goToPREDICTION = () => {\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        this.props.history.push({\n            pathname: '/all-leagues', state: {\n                FixturedContest: this.state.FixtureData,\n                isFromLobby: false,\n                LobyyData: this.state.ContestList,\n                MiniLeagueList: this.state.MiniLeagueList\n            }\n        })\n    }\n\n    renderPREDCard = () => {\n        if (Constants.IS_PREDICTION) {\n            return (\n                <li onClick={this.goToPREDICTION} className=\"leader-board-card prd-card\" >\n                    <img className=\"img-leader-board-shape\" src={Images.trophy_ic} alt='' />\n                    <div className=\"dfs-c\">\n\n                        <p>{AppLabels.F2P_HALL_OF_FAME_MSG}</p>\n                    </div>\n                </li>\n            )\n        }\n        return ''\n    }\n    goToScreen = (pathname) => {\n        this.props.history.push(pathname);\n    }\n\n    render() {\n\n        const {\n            showContestDetail,\n            FixtureData,\n            isLoaderShow,\n            showCollectionInfo,\n            viewLeaugeSheduled,\n            BannerList,\n            league_id,\n            showLobbyFitlers,\n            ShimmerList,\n            ContestList,\n            MiniLeagueList,\n            isListLoading,\n            hallOfFameItem,\n        } = this.state\n\n        let FitlerOptions = {\n            showLobbyFitler: showLobbyFitlers,\n            filtered_league_id: league_id\n        }\n\n        let bannerLength = BannerList.length;\n        const HeaderOption = {\n            back: true,\n            title: this.props.match.params.league_name ? this.props.match.params.league_name : AppLabels.F2P_LEAGUES,\n            share: true\n        }\n\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"transparent-header web-container tab-two-height pb0 mt40\">\n                        <div>\n                            <div className=\"Ftp-contest\">\n                                <div className=\"Ftp-header-lobby\">\n                                    <div className='row-container'>\n                                        <div className='section-left' key={this.props.match.params.season_game_uid} onClick={() => this.props.history.push('/lobby')} >\n                                            <a href class=\"header-action\">\n                                                <i class=\"icon-left-arrow\"></i>\n                                            </a>\n                                        </div>\n\n\n                                        <div class=\"app-header-text\">{this.props.match.params.league_name}</div>\n\n                                        <div xs={2} className='pull-right'>\n                                            <a href className=\"header-action\" onClick={() => this.goToScreen('/notification')}>\n                                                <i className=\"icon-alarm-new\">\n                                                    {\n                                                        (this.state.notificationData && this.state.notificationData.count > 0) &&\n                                                        <div style={{ textAlign: 'center', fontSize: 9, fontFamily: 'Geominist-Bold', position: 'absolute', top: -8, padding: '4px 0px', left: 8, height: 17, width: 17, borderRadius: \"100%\", backgroundColor: 'red', color: '#fff' }}>\n                                                            <span>{this.state.notificationData.count > 99 ? '99+' : this.state.notificationData.count}</span>\n                                                        </div>\n                                                    }\n                                                </i>\n                                            </a>\n\n                                        </div>\n                                    </div>\n                                </div>\n                                {\n                                   \n                                    <div className=\"sponser-by-section-lobby\">\n                                        <div className=\"sponser-by-inner-section-lobby\">\n                                        </div>\n                                    </div>\n                                }\n\n\n                            </div>\n                        </div>\n                        <div>\n                            <div className={bannerLength > 0 ? 'banner-v animation m-t-45' : 'banner-v m-t-40'}>\n                                {\n                                    bannerLength > 0 && <LobbyBannerSlider BannerList={BannerList} redirectLink={this.redirectLink.bind(this)} />\n                                }\n                            </div>\n\n\n                            <Row className='mt2'>\n                                <Col sm={12}>\n                                    <Row>\n                                        <Col sm={12}>\n                                            <InfiniteScroll\n                                                style={{ overflow: 'hidden !important' }}\n                                                dataLength={ContestList.length}\n                                                pullDownToRefresh={false}\n                                                hasMore={false}\n                                                scrollableTarget='test'\n                                                loader={\n                                                    isLoaderShow == true &&\n                                                    <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                }>\n                                                <ul className=\"collection-list-wrapper lobby-anim\">\n                                                    {\n                                                        (ContestList.length == 0 && isListLoading) &&\n                                                        ShimmerList.map((item, index) => {\n                                                            return (\n                                                                <LobbyShimmer key={index} />\n                                                            )\n                                                        })\n                                                    }\n\n                                                    {\n                                                        ContestList.length > 0 &&\n                                                        ContestList.map((item, index) => {\n                                                            return (\n                                                                <React.Fragment key={item.collection_master_id} >\n                                                                    <FreeToPlayFixtureContest\n                                                                        {...this.props}\n\n                                                                        indexKey={item.collection_master_id}\n                                                                        ContestListItem={item}\n                                                                        gotoDetails={this.gotoDetails}\n                                                                        gotoLeaderBoard={this.gotoLeaderBoard}\n\n                                                                        CollectionInfoShow={this.CollectionInfoShow}\n                                                                        IsCollectionInfoHide={this.CollectionInfoHide}\n                                                                        timerCallback={() => this.timerCompletionCall(item)}\n                                                                    />\n                                                                    {\n                                                                        index === 1 && this.renderPREDCard()\n                                                                    }\n                                                                </React.Fragment>\n                                                            );\n                                                        })\n                                                    }\n                                                    {\n                                                        (ContestList.length < 2 && !isListLoading) && this.renderPREDCard()\n                                                    }\n\n                                                    {\n                                                        (ContestList.length == 0 && !isListLoading) &&\n                                                        <NoDataView\n                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                                            MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                                                            onClick_2={this.joinContest}\n                                                        />\n                                                    }\n                                                </ul>\n                                            </InfiniteScroll>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </div>\n                        {showContestDetail &&\n                            <ContestDetailModal IsContestDetailShow={showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={FixtureData} />\n                        }\n                        {showCollectionInfo &&\n                            <HallofFameModal item={this.state.hallOfFameItem} IsCollectionInfoShow={this.CollectionInfoShow} IsCollectionInfoHide={this.CollectionInfoHide} />\n                        }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n\n        )\n    }\n}\n\nexport default FreeToPlayLobby","/var/www/html/framework/frontend/src/Modals/ContestDetail.jsx",["2658","2659","2660","2661","2662","2663","2664","2665","2666","2667","2668","2669","2670","2671","2672","2673","2674","2675","2676","2677","2678","2679","2680","2681","2682","2683","2684","2685","2686","2687","2688","2689","2690","2691","2692","2693","2694","2695","2696","2697","2698","2699","2700","2701","2702","2703","2704","2705","2706","2707","2708","2709","2710","2711","2712","2713","2714","2715","2716","2717","2718","2719","2720","2721","2722","2723","2724","2725","2726","2727","2728","2729","2730","2731","2732","2733","2734","2735","2736","2737","2738","2739","2740","2741","2742","2743","2744","2745","2746","2747","2748","2749","2750","2751","2752","2753","2754","2755","2756","2757","2758","2759","2760","2761","2762","2763","2764","2765","2766","2767","2768","2769","2770","2771","2772","2773","2774","2775","2776","2777","2778","2779","2780","2781","2782","2783","2784","2785","2786","2787","2788","2789","2790","2791","2792","2793","2794","2795","2796","2797","2798","2799","2800","2801","2802","2803","2804","2805","2806","2807","2808","2809","2810","2811","2812","2813","2814","2815","2816","2817","2818"],"import React from 'react';\nimport ls from 'local-storage';\nimport { Button, Modal, Tabs, Tab, Table, ProgressBar, Panel, Row, Col } from 'react-bootstrap';\nimport Images from '../components/images';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport CountdownTimer from '../views/CountDownTimer';\nimport { Utilities, _Map, _filter } from '../Utilities/Utilities';\nimport * as Constants from \"../helper/Constants\";\nimport util from 'util';\nimport { SportsIDs } from \"../JsonFiles\";\nimport CollectionInfoModal from \"../Modals/CollectionInfo\";\nimport { getContestDetails, getContestDetailsMultiGame, getUserContestJoinCount, getContestUserList, getFixtureMiniLeague, getMiniLeagueDetails,getContestDetailsNetworkfantasy,getContestUserListNetworkfantasy,getUserContestJoinCountNetworkfantasy } from '../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../Component/CustomComponent';\nimport { MATCH_TYPE } from \"../helper/Constants\";\nimport { NoDataView } from '../Component/CustomComponent';\n\n\n\nvar masterDataResponse = null;\nvar fantasyListArray = null;\nvar selectedSportsVar = null;\nvar isTimerOver = false;\n\nvar hasMore = false;\n\nexport default class ContestDetailModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n            prizeList: [],\n            ContestDetail: \"\",\n            merchandiseList: [],\n            MiniLeagueList: [],\n            miniLeagueprizeList: [],\n            miniLeagueMerchandiseList: [],\n            bonus_scoring_rules: [],\n            normal_scoring_rules: [],\n            strike_scoring_rules: [],\n            economy_scoring_rules: [],\n            pitching_scoring_rules: [],\n            hitting_scoring_rules: [],\n            prizeDistributionDetail: [],\n            isMiniLeaguePrize: '',\n            MiniLeagueData: '',\n            MiniLeagueSponser: '',\n            userList: [],\n            contestBtnVisible: true,\n            playerCount: 0,\n            joinBtnVisibility: false,\n            isJoinPlus: false,\n            isLoadMoreLoaderShow: false,\n            isLoading: false,\n            limit: 20,\n            sportsSelected: Constants.AppSelectedSport,\n            userJoinCount: WSManager.loggedIn() ? -1 : 0,\n            contestStatus: this.props.contestStatus,\n            allowCollection: Utilities.getMasterData().allow_collection,\n            showCollectionInfo: false,\n            total_user_joined: this.props.OpenContestDetailFor ? this.props.OpenContestDetailFor.total_user_joined : 0,\n            page_no: 1,\n            maxcurrentStatus: true,\n            season_game_uid: '',\n            showError: false,\n            isPrivateContest: 0,\n            showMaxToggle: true\n        };\n    }\n\n    convertIntoWhole = (x) => {\n        var no = Math.round(x)\n        return no;\n    }\n\n\n    ShowProgressBar = (join, total) => {\n        return join * 100 / total;\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n    isMaximumSelected = (isSelected) => {\n        this.setState({ maxcurrentStatus: isSelected });\n    }\n\n\n\n    /**\n    * \n    * @description method to display collection info model.\n    */\n    CollectionInfoShow = (event) => {\n        // event.preventDefault();\n        event.stopPropagation();\n        this.setState({\n            showCollectionInfo: true\n        }, () => {\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    CollectionInfoHide = () => {\n        this.setState({\n            showCollectionInfo: false,\n        });\n    }\n\n    componentDidMount() {\n\n        this.ContestDetail(this.props.OpenContestDetailFor);\n        this.getMasterDataFromLS();\n        if (Constants.SELECTED_GAMET == Constants.GameType.Free2Play) {\n            { this.props.LobyyData.season_game_uid && this.getFixtureMiniLeagueApi(); }\n        }\n    }\n\n    NormalScoringFilter(data) {\n        _filter(data, function (o) {\n            return data.scoring_category_name === 'normal'\n        });\n    }\n\n    getMasterDataFromLS() {\n        selectedSportsVar = Constants.AppSelectedSport;\n        masterDataResponse = Utilities.getMasterData()\n        if (masterDataResponse && masterDataResponse != null) {\n            fantasyListArray = masterDataResponse.fantasy_list;\n            for (var obj of fantasyListArray) {\n                if (selectedSportsVar == obj.sports_id) {\n                    this.setState({\n                        playerCount: obj.team_player_count\n                    })\n                    break;\n                }\n            }\n        }\n    }\n\n    ContestDetail = async (data) => {\n        var param = {\n            \"contest_id\": data.contest_id,\n        }\n        this.setState({ isLoading: true })\n        var api_response_data = await ((this.props.OpenContestDetailFor && this.props.OpenContestDetailFor.is_network_contest && this.props.OpenContestDetailFor.is_network_contest == 1) ? getContestDetailsNetworkfantasy(param) : Constants.SELECTED_GAMET == Constants.GameType.MultiGame ? getContestDetailsMultiGame(param) : getContestDetails(param));\n\n        if (api_response_data) {\n            this.setState({ isLoading: false })\n\n            let normal_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '14' || o.master_scoring_category_id == '18' ||\n                    o.master_scoring_category_id == '19' || o.master_scoring_category_id == '20' ||\n                    o.master_scoring_category_id == '23' || o.master_scoring_category_id == '24' ||\n                    o.master_scoring_category_id == '25' || o.master_scoring_category_id == '27';\n            })\n            let bonus_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '15' || o.master_scoring_category_id == '26';\n            })\n            let strike_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '17';\n            })\n            let economy_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '16';\n            })\n            let pitching_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '21';\n            })\n            let hitting_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '22';\n            })\n\n            if (this.props.activeTabIndex == 4) {\n                this.getUserList(this.props.OpenContestDetailFor, 0);\n            }\n            this.setState({\n                season_game_uid: api_response_data.season_game_uid,\n                ContestDetail: api_response_data,\n                normal_scoring_rules: normal_scoring_rules,\n                bonus_scoring_rules: bonus_scoring_rules,\n                strike_scoring_rules: strike_scoring_rules,\n                economy_scoring_rules: economy_scoring_rules,\n                pitching_scoring_rules: pitching_scoring_rules,\n                hitting_scoring_rules: hitting_scoring_rules,\n                prizeDistributionDetail: api_response_data.prize_distibution_detail,\n                prizeList: api_response_data.prize_distibution_detail,\n                merchandiseList: api_response_data.merchandise,\n                isPrivateContest: api_response_data.is_private || 0,\n            }, () => {\n                {\n                    !this.props.LobyyData.season_game_uid && Constants.SELECTED_GAMET == Constants.GameType.Free2Play &&\n                        this.getFixtureMiniLeagueApi();\n                }\n                let prizeListVar = _filter(api_response_data.prize_distibution_detail, (o) => {\n                    return o.max_value != o.min_value;\n                })\n                // let showMaxToggle = prizeListVar && prizeListVar.length > 0;\n                let minDiff = Utilities.minuteDiffValue({ date: api_response_data.game_starts_in }) > 0;\n                let showMaxToggle = (api_response_data.is_prize_reset == 1 && minDiff) ? false : (prizeListVar && prizeListVar.length > 0);\n                this.setState({\n                    showMaxToggle: showMaxToggle,\n                    maxcurrentStatus: (api_response_data.is_prize_reset == 1 && minDiff ) ? false : true\n                })\n            })\n            ls.set('selectedSports', api_response_data.sports_id);\n            Constants.setValue.setAppSelectedSport(api_response_data.sports_id);\n            if (WSManager.loggedIn() && this.state.contestStatus !== 1 && this.state.contestStatus !== 2) {\n                this.getUserJoinCount(data);\n            }\n            else {\n                this.setState({\n                    joinBtnVisibility: (this.state.contestStatus !== 1 && this.state.contestStatus !== 2)\n                })\n            }\n        }\n    }\n\n    getFixtureMiniLeagueApi = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"season_game_uid\": this.props.LobyyData.season_game_uid ? this.props.LobyyData.season_game_uid : this.state.season_game_uid\n        }\n\n        delete param.limit;\n        var api_response_data = await getFixtureMiniLeague(param);\n        if (api_response_data) {\n            this.setState({\n                MiniLeagueList: api_response_data.data\n            }, () => {\n                this.state.MiniLeagueList && this.state.MiniLeagueList.length == 1 &&\n                    this.getMiniLeagueDetails(this.state.MiniLeagueList[0].mini_league_uid)\n            })\n        }\n    }\n\n    getMiniLeagueDetails = async (mini_league_uid) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"mini_league_uid\": mini_league_uid\n        }\n\n        delete param.limit;\n        var api_response_data = await getMiniLeagueDetails(param);\n        if (api_response_data) {\n            this.setState({\n                miniLeagueprizeList: api_response_data.data.prize_distibution_detail,\n                miniLeagueMerchandiseList: api_response_data.data.merchandise,\n\n            })\n\n\n        }\n    }\n\n    getUserJoinCount(data) {\n        var param = {\n            \"contest_id\": data.contest_id,\n        }\n        this.setState({ isLoading: true })\n        if(this.props.OpenContestDetailFor && this.props.OpenContestDetailFor.is_network_contest && this.props.OpenContestDetailFor.is_network_contest == 1){\n            getUserContestJoinCountNetworkfantasy(param).then((responseJson) => {\n                this.setState({ isLoading: false })\n                if (responseJson.response_code == WSC.successCode) {\n                    this.setState({ userJoinCount: responseJson.data.user_joined_count }, () =>\n                        this.getIsTimerOver(this.state.ContestDetail))\n                }\n            })\n        }\n        else{\n            getUserContestJoinCount(param).then((responseJson) => {\n                this.setState({ isLoading: false })\n                if (responseJson.response_code == WSC.successCode) {\n                    this.setState({ userJoinCount: responseJson.data.user_joined_count }, () =>\n                        this.getIsTimerOver(this.state.ContestDetail))\n                }\n            })\n        }\n    }\n\n    getUserList(data = {}, page_no = 1) {\n        var param = {\n            \"contest_id\": data.contest_id,\n            \"page_no\": page_no,\n            \"page_size\": this.state.limit,\n        }\n\n        let IsNetworkFantasy = this.props.OpenContestDetailFor && this.props.OpenContestDetailFor.is_network_contest && this.props.OpenContestDetailFor.is_network_contest == 1;\n\n        if(IsNetworkFantasy){\n            param['collection_master_id'] = data.network_collection_master_id            \n        }\n        else{\n            param['collection_master_id'] = data.collection_master_id\n        }\n\n        this.setState({ isLoadMoreLoaderShow: page_no > 1, isLoading: true })\n        if(IsNetworkFantasy){\n            getContestUserListNetworkfantasy(param).then((responseJson) => {    \n                setTimeout(() => {\n                    this.setState({ isLoading: false })\n                }, 100);\n                if (responseJson.response_code == WSC.successCode) {\n                    let mergeList = [];\n                    if (page_no == 1) {\n                        mergeList = responseJson.data.users;\n                        this.setState({ total_user_joined: responseJson.data.total_user_joined })\n                    }\n                    else {\n                        mergeList = [...this.state.userList, ...responseJson.data.users]\n                    }\n                    hasMore = responseJson.data.users.length === this.state.limit;\n                    this.setState({ userList: mergeList, page_no: this.state.page_no + 1 })\n                }\n            })\n        }\n        else{\n            getContestUserList(param).then((responseJson) => {    \n                setTimeout(() => {\n                    this.setState({ isLoading: false })\n                }, 100);\n                if (responseJson.response_code == WSC.successCode) {\n                    let mergeList = [];\n                    if (page_no == 1) {\n                        mergeList = responseJson.data.users;\n                        this.setState({ total_user_joined: responseJson.data.total_user_joined })\n                    }\n                    else {\n                        mergeList = [...this.state.userList, ...responseJson.data.users]\n                    }\n                    hasMore = responseJson.data.users.length === this.state.limit;\n                    this.setState({ userList: mergeList, page_no: this.state.page_no + 1 })\n                }\n            })\n        }\n    }\n\n    getWinnerCount(prizeDistributionDetail) {\n        if (prizeDistributionDetail.length > 0) {\n            if ((prizeDistributionDetail[prizeDistributionDetail.length - 1].max) > 1) {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \" + AppLabels.WINNERS\n            } else {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \" + AppLabels.WINNER\n            }\n        }\n    }\n\n    joinGame() {\n        this.props.history.push({ pathname: '/lineup' })\n    }\n\n    contestDetailBtnVisibility(contestDetailsState) {\n        let totalUserJoined = parseInt(this.state.total_user_joined)\n        let maxContestSize = parseInt(contestDetailsState.size)\n        let userJoinedCount = this.state.userJoinCount;\n        let multiLineupCount = parseInt(contestDetailsState.multiple_lineup)\n\n        if (isTimerOver) {\n            this.setState({\n                joinBtnVisibility: false,\n                showError: this.props.showPCError\n            })\n        } else {\n            if (totalUserJoined >= maxContestSize) {\n                this.setState({\n                    joinBtnVisibility: false,\n                    showError: this.props.showPCError\n                })\n            } else {\n                if ((this.state.contestStatus && this.state.contestStatus == Constants.CONTEST_UPCOMING) || (this.state.ContestDetail.status == Constants.CONTEST_UPCOMING)) {\n                    if ((multiLineupCount == 0 || multiLineupCount == 1) && userJoinedCount == 0) {\n                        this.setState({\n                            joinBtnVisibility: (this.state.contestStatus !== 1 && this.state.contestStatus !== 2),\n                            showError: this.props.showPCError\n                        })\n                    } else if (multiLineupCount > 1 && (userJoinedCount < multiLineupCount)) {\n                        this.setState({\n                            joinBtnVisibility: (this.state.contestStatus !== 1 && this.state.contestStatus !== 2),\n                            isJoinPlus: true,\n                            showError: this.props.showPCError\n                        })\n                    } else {   //New scenerio can be added here....\n                        this.setState({\n                            joinBtnVisibility: false,\n                            showError: this.props.showPCError\n                        })\n                    }\n                }\n                else {\n                    this.setState({\n                        joinBtnVisibility: false,\n                        showError: this.props.showPCError\n                    })\n                }\n            }\n        }\n    }\n    getIsTimerOver(contestDetailsState) {\n        if (contestDetailsState.current_timestamp > contestDetailsState.game_starts_in) {\n            isTimerOver = true;\n        } else {\n            isTimerOver = false;\n        }\n        this.contestDetailBtnVisibility(contestDetailsState)\n    }\n\n    onLoadMore = () => {\n        if (!this.state.isLoading && hasMore)\n            this.getUserList(this.props.OpenContestDetailFor, this.state.page_no);\n    }\n\n    ontabSelect = (tab) => {\n        if (tab == 3) {\n            if (this.state.userList.length == 0)\n                this.getUserList(this.props.OpenContestDetailFor, 1);\n        }\n    }\n    getContestPrizeDetails = (ContestDetail) => {\n        this.setState({\n            isMiniLeaguePrize: false,\n        }, () => {\n            this.props.history.push({\n                pathname: '/all-prizes/' + \"contestPrize\" + \"/\" + false, state: {\n                    LobyyData: this.state.LobyyData,\n                    MiniLeagueData: ContestDetail,\n                    isMiniLeaguePrize: this.state.isMiniLeaguePrize\n\n                }\n            })\n        })\n    }\n    getPrizeDetail = (item, LobyyData) => {\n        // this.props.history.push({\n        //     pathname: '/league-details',\n        //     state: { LobyyData: LobyyData, MiniLeagueData:item }\n        // })\n        this.setState({\n            isMiniLeaguePrize: true,\n        }, () => {\n            this.props.history.push({\n                pathname: '/all-prizes/' + item.mini_league_uid + \"/\" + true, state: {\n                    LobyyData: this.state.LobyyData,\n                    MiniLeagueData: item,\n                    isMiniLeaguePrize: this.state.isMiniLeaguePrize\n\n                }\n            })\n        })\n    }\n\n    getHomeTeamFromCollectionName(collectionName) {\n        if (collectionName) {\n            var team = collectionName.split('v');\n            if (team == collectionName) {\n                team = collectionName.split('V');\n            }\n            return team[0].trim();\n        }\n        return '';\n    }\n    getAwayTeamFromCollectionName(collectionName) {\n        if (collectionName) {\n            var team = collectionName.split('v');\n            if (team == collectionName) {\n                team = collectionName.split('V');\n            }\n            return team[1].trim();\n        }\n        return '';\n    }\n\n    showPrivateContestError = () => {\n        this.setState({\n            showError: false\n        }, () => {\n            Utilities.showToast(AppLabels.ERROR_MSG, 5000);\n        })\n    }\n    setCurrentMaxPrize = (minMaxValue, prizeItem) => {\n        var finalPrize;\n        var maxMini;\n        if (prizeItem.prize_type == 2) {\n            maxMini = prizeItem.max - prizeItem.min + 1;\n            finalPrize = (Math.ceil(minMaxValue) / maxMini)\n        } else {\n            maxMini = prizeItem.max - prizeItem.min + 1;\n            finalPrize = (parseFloat(minMaxValue).toFixed(2) / maxMini)\n        }\n        // var  maxMini = prizeItem.max - prizeItem.min + 1;\n        // var  finalPrize = (minMaxValue / maxMini)\n\n        return finalPrize;\n    }\n    getWinnerCounts(prizeList) {\n\n        if (prizeList != '') {\n            if ((prizeList[prizeList.length - 1].max) > 1) {\n                return prizeList[prizeList.length - 1].max + \" \" + AppLabels.WINNERS\n            } else {\n                return prizeList[prizeList.length - 1].max + \" \" + AppLabels.WINNER\n            }\n        } else {\n            return '0 Winner';\n        }\n    }\n\n    getPrizeAmount = (prize_data) => {\n        let prize_text = \"Prizes\";\n        let is_tie_breaker = 0;\n        let prizeAmount = { 'real': 0, 'bonus': 0, 'point': 0 };\n        return (\n            <React.Fragment>\n                {\n                    prize_data && prize_data.map(function (lObj, lKey) {\n                        var amount = 0;\n                        if (lObj.max_value) {\n                            amount = parseFloat(lObj.max_value);\n                        } else {\n                            amount = parseFloat(lObj.amount);\n                        }\n                        if (lObj.prize_type == 3) {\n                            is_tie_breaker = 1;\n                        }\n                        if (lObj.prize_type == 0) {\n                            prizeAmount['bonus'] = parseFloat(prizeAmount['bonus']) + amount;\n                        } else if (lObj.prize_type == 2) {\n                            prizeAmount['point'] = parseFloat(prizeAmount['point']) + amount;\n                        } else {\n                            prizeAmount['real'] = parseFloat(prizeAmount['real']) + amount;\n                        }\n                    })\n                }\n\n                {\n                    is_tie_breaker == 0 && prizeAmount.real > 0 ?\n                        <span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}{parseFloat(prizeAmount.real).toFixed(0)}</span>\n                        : is_tie_breaker == 0 && prizeAmount.bonus > 0 ? <span className=\"contest-prizes margin-contest\"><i className=\"icon-bonus\" />{parseFloat(prizeAmount.bonus).toFixed(0)}</span>\n                            : is_tie_breaker == 0 && prizeAmount.point > 0 ? <span style={{ marginLeft: '13px', display: 'inlineBlock' }}> <img alt='' className=\"img-coin\" src={Images.IC_COIN} />{parseFloat(prizeAmount.point).toFixed(0)}</span>\n                                : AppLabels.PRIZES\n                }\n\n            </React.Fragment>\n        )\n\n\n    }\n    render() {\n        const { IsContestDetailShow, IsContestDetailHide, onJoinBtnClick, LobyyData, OpenContestDetailFor } = this.props;\n        const { ContestDetail, normal_scoring_rules, bonus_scoring_rules, economy_scoring_rules, pitching_scoring_rules, hitting_scoring_rules, strike_scoring_rules, prizeDistributionDetail, playerCount, joinBtnVisibility, userList, sportsSelected, allowCollection, showCollectionInfo, showError, isPrivateContest, showMaxToggle } = this.state;\n\n        let lengthFixture = LobyyData.match_list ? LobyyData.match_list.length : 0\n        let match_item = lengthFixture >= 1 ? LobyyData.match_list[0] : LobyyData\n        let sponserImage = ContestDetail.sponsor_logo && ContestDetail.sponsor_logo != null ? ContestDetail.sponsor_logo : 0\n        let miniLeagueListLengthStatus = this.state.MiniLeagueList && this.state.MiniLeagueList.length > 1 ? 2 : this.state.MiniLeagueList && this.state.MiniLeagueList.length == 1 ? 1 : 0\n\n        var isPrivateEnable = process.env.REACT_APP_PRIVATE_CONTEST_WINNING_DISABLE == 1 ? 1 : 0;\n        var showtab = isPrivateContest == 1 ? (process.env.REACT_APP_PRIVATE_CONTEST_WINNING_DISABLE == 1 ? false : true) : true;\n\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsContestDetailShow}\n                            className={\"contest-detail-dialog\" + (showCollectionInfo ? ' contest-detail-hide' : ' ')}\n                            onHide={IsContestDetailHide} bsSize=\"large\"\n                            dialogClassName={\"contest-detail-modal primary-h contest-details-modal-white-lebel \" + (!joinBtnVisibility ? 'contest-detail-with-btn' : '') + (isPrivateEnable == 1 && isPrivateContest == 1 ? ' contest-with-two-tabs' : '') +\n                                (\n                                    LobyyData ? (LobyyData.match_list && LobyyData.match_list.length > 1 ? 'contest-detail-with-collection' : '') :\n                                        (ContestDetail.match_list && ContestDetail.match_list.length > 1 ? 'contest-detail-with-collection' : '')\n                                )\n                            }>\n                            <Modal.Header className={LobyyData ? (LobyyData.match_list && LobyyData.match_list.length > 1 ? 'header-with-collection' : '') : (ContestDetail.match_list && ContestDetail.match_list.length > 1 ? 'header-with-collection' : '')}>\n                                <Modal.Title >\n                                    <a href onClick={IsContestDetailHide} className=\"modal-close\">\n                                        <i className=\"icon-close\"></i>\n                                    </a>\n                                    <div className=\"match-heading header-content\">\n                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                            <div className=\"team-img-block\">\n                                                <img src={Utilities.teamFlagURL(match_item.home_flag || ContestDetail.home_flag)} alt=\"\" />\n                                            </div>\n                                        }\n                                        <div className=\"team-header-detail\">\n                                            {Constants.SELECTED_GAMET != Constants.GameType.MultiGame ?\n                                                <div className=\"team-header-content text-uppercase\">\n                                                    <span>{match_item.home || ContestDetail.home} <span className='text-lowercase'> {AppLabels.VS} </span>{match_item.away || ContestDetail.away}</span>\n                                                </div>\n                                                :\n                                                <div className=\"team-header-content \">\n                                                    <span>{LobyyData.collection_name} </span>\n                                                </div>\n                                            }\n                                            {\n                                                this.state.contestStatus !== Constants.CONTEST_LIVE && <div className=\"match-timing\">\n                                                    {\n                                                        (Utilities.showCountDown(LobyyData ? LobyyData : ContestDetail) && this.state.contestStatus !== Constants.CONTEST_COMPLETED) ?\n                                                            <div className=\"countdown\">\n                                                                {\n                                                                    LobyyData && LobyyData.game_starts_in ?\n                                                                        <CountdownTimer deadlineTimeStamp={LobyyData.game_starts_in} />\n                                                                        :\n                                                                        ContestDetail && ContestDetail.game_starts_in ?\n                                                                            <CountdownTimer deadlineTimeStamp={ContestDetail.game_starts_in} />\n                                                                            :\n                                                                            ''\n                                                                }\n\n                                                            </div>\n                                                            :\n                                                            <span className=\"time-line\"> <MomentDateComponent data={{ date: (LobyyData ? LobyyData.season_scheduled_date : ContestDetail.season_scheduled_date), format: \"D MMM - hh:mm A \" }} /> </span>\n\n                                                    }\n                                                </div>\n                                            }\n                                        </div>\n                                        {Constants.SELECTED_GAMET != Constants.GameType.MultiGame &&\n                                            <div className=\"team-img-block\">\n                                                <img src={Utilities.teamFlagURL(match_item.away_flag || ContestDetail.away_flag)} alt=\"\" />\n                                            </div>\n                                        }\n\n                                    </div>\n\n                                </Modal.Title>\n                                {(!WSManager.loggedIn() || joinBtnVisibility) &&\n                                    <div className=\"header-section-contest-entry\">\n                                        {/* <div className=\"center-alignment\">\n                                            {\n                                                ContestDetail.sponsor_logo && ContestDetail.sponsor_logo != \"\" && ContestDetail.sponsor_logo != null &&\n                                                <div className=\"sponser-section-strip-header\">\n                                                    <span className=\"text-entry\">{AppLabels.SPONSORED_BY}</span>\n                                                    {\n\n\n                                                        <div className=\"sponser-logo-view\">\n\n\n                                                            {\n                                                                window.ReactNativeWebView ?\n                                                                    <a\n                                                                        href\n                                                                        onClick={(event) => Utilities.callNativeRedirection(Utilities.getValidSponserURL(ContestDetail.sponsor_link, event))}>\n                                                                        <img alt='' className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)} />\n                                                                    </a>\n\n                                                                    :\n                                                                    <a\n                                                                        href={Utilities.getValidSponserURL(ContestDetail.sponsor_link)}\n                                                                        onClick={(event) => event.stopPropagation()}\n                                                                        target='__blank'>\n                                                                        <img alt='' className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)} />\n                                                                    </a>\n\n                                                            }\n\n                                                        </div>\n                                                    }\n                                                </div>\n                                            }\n\n                                        </div> */}\n\n                                        <div className=\"center-alignment\">\n                                            <span className=\"entry-fee-btn\" onClick={() => onJoinBtnClick(ContestDetail)}>\n                                                {/* {ContestDetail.entry_fee > 0 ? Utilities.getMasterData().currency_code + ContestDetail.entry_fee + \" \" + AppLabels.JOIN : Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? AppLabels.JOIN_FOR_FREE : AppLabels.JOIN_FOR_FREE} */}\n                                                {\n                                                    ContestDetail.entry_fee > 0 ?\n                                                        <>\n                                                            {\n                                                                ContestDetail.currency_type == 2 ?\n                                                                    <img className=\"img-coin\" alt='' src={Images.IC_COIN} />\n                                                                    :\n                                                                    Utilities.getMasterData().currency_code\n                                                            }\n                                                            {ContestDetail.entry_fee} {AppLabels.JOIN}\n                                                        </>\n                                                        :\n                                                        Constants.SELECTED_GAMET == Constants.GameType.Free2Play ?\n                                                            AppLabels.JOIN_FOR_FREE\n                                                            :\n                                                            AppLabels.JOIN_FOR_FREE\n                                                }\n                                            </span>\n\n                                        </div>\n                                    </div>\n                                }\n\n                            </Modal.Header>\n                            <Modal.Body>\n                                <Tabs id={'contest-detail-tab'} onSelect={this.ontabSelect} defaultActiveKey={this.props.activeTabIndex} >\n                                    {\n                                        showtab &&\n                                        <Tab eventKey={1} title={AppLabels.WINNINGS}>\n                                            {\n\n\n                                                Constants.SELECTED_GAMET == Constants.GameType.Free2Play ?\n                                                    <div>\n                                                        <div className=\"free-to-play-info margin-top_wiining\">\n\n                                                            <div className=\"text_hall_of_fame\">\n                                                                {AppLabels.SPONSORED_BY}\n                                                            </div>\n                                                            {\n                                                                window.ReactNativeWebView ?\n                                                                    <a\n                                                                        href\n                                                                        onClick={(event) => Utilities.callNativeRedirection(Utilities.getValidSponserURL(ContestDetail.sponsor_link, event))}>\n                                                                        <img alt='' className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)} />\n                                                                    </a>\n\n                                                                    :\n                                                                    <a\n                                                                        href={Utilities.getValidSponserURL(ContestDetail.sponsor_link)}\n                                                                        onClick={(event) => event.stopPropagation()}\n                                                                        target='__blank'>\n                                                                        <img alt='' className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)} />\n                                                                    </a>\n\n                                                            }\n\n                                                        </div>\n                                                        {this.state.prizeList && this.state.prizeList.length > 0 &&\n                                                            <div className=\"table-heading switch-text-align\">\n                                                                <div style={{ width: '100%', color: '#212121' }}>\n                                                                    {AppLabels.Prize_Distribution + \" - \" + (this.getWinnerCounts(this.state.prizeList))}\n                                                                </div>\n\n                                                            </div>\n                                                        }\n                                                        {\n                                                            this.state.prizeList && this.state.prizeList.length > 0 ?\n                                                                <Row className=\"Ftp-prizes  no-margin p-v-ms mt20\">\n                                                                    {\n                                                                        this.state.prizeList && this.state.prizeList.length > 0 && this.state.prizeList.slice(0, 3).map((item, index) => {\n                                                                            return (\n                                                                                <Col xs={3} sm={3} md={4} className=\"Ftp-prize-section center-grid\">\n                                                                                    <div className={\"Ftp-prize-inner-section\" + (item.prize_type == 0 ? ' padding-bonus-icon' : '')}>\n                                                                                        {/* <i className=\"icon-ic-info\"></i> */}\n                                                                                        {\n                                                                                            item.prize_type == 0 ?\n                                                                                                <div className=\"bonus-icon-prize\">\n                                                                                                    <i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>\n                                                                                                </div>\n                                                                                                : item.prize_type == 1 ?\n                                                                                                    <React.Fragment>\n                                                                                                        <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n\n                                                                                                    </React.Fragment>\n                                                                                                    :\n                                                                                                    <React.Fragment>\n                                                                                                        {\n                                                                                                            item.prize_type == 2 ?\n                                                                                                                <img alt=\"\" src={Images.IC_COIN} width=\"50px\" />\n                                                                                                                :\n                                                                                                                <div>\n                                                                                                                    {\n                                                                                                                        item.prize_type == 3 &&\n                                                                                                                        this.state.merchandiseList && this.state.merchandiseList.map((merchandise, index) => {\n                                                                                                                            return (\n                                                                                                                                <React.Fragment key={index}>\n                                                                                                                                    {item.amount == merchandise.merchandise_id &&\n                                                                                                                                        <img style={{ resizeMode: 'contain' }} src={Utilities.getMerchandiseURL(merchandise.image_name)} width=\"60px\" height=\"60px\" />\n                                                                                                                                    }\n\n                                                                                                                                </React.Fragment>\n                                                                                                                            );\n                                                                                                                        })\n\n\n                                                                                                                    }\n                                                                                                                </div>\n                                                                                                        }\n                                                                                                    </React.Fragment>\n\n\n                                                                                        }\n\n                                                                                        {/* <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"prize-image\" /> */}\n\n                                                                                    </div>\n                                                                                    <div class=\"rank-ribbon\">\n                                                                                        <span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min + 'st') : item.min == 2 ? (item.min + 'nd') : item.min == 3 ? (item.min + 'rd') : item.min : item.min + ' - ' + item.max}</span>\n                                                                                    </div>\n                                                                                    <div className=\"prize-name\">\n\n                                                                                        {item.prize_type == 3 ? item.max_value :\n\n                                                                                            <div>\n\n                                                                                                {\n                                                                                                    item.prize_type == 1 ?\n                                                                                                        <React.Fragment>\n                                                                                                            <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n                                                                                                            {this.setCurrentMaxPrize(item.min_value, item)}\n                                                                                                        </React.Fragment>\n                                                                                                        :\n                                                                                                        item.prize_type == 0 ?\n                                                                                                            <React.Fragment>\n                                                                                                                <div className=\"bonus-icon-prize-amount\">\n                                                                                                                    <span className=\"contest-prizes\"><div className=\"icon-bonus\"></div></span>\n                                                                                                                </div>\n                                                                                                                {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                            </React.Fragment>\n                                                                                                            :\n                                                                                                            item.prize_type == 2 ?\n                                                                                                                <React.Fragment>\n                                                                                                                    <img className=\"contest-prizes\" style={{ height: '12px', marginTop: '-2px', width: '12px' }} alt=\"\" src={Images.IC_COIN} />\n                                                                                                                    {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                </React.Fragment>\n                                                                                                                :\n                                                                                                                <React.Fragment>\n                                                                                                                    {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                </React.Fragment>\n                                                                                                }\n\n                                                                                            </div>\n\n                                                                                        }\n                                                                                    </div>\n                                                                                </Col>\n                                                                            );\n                                                                        })\n                                                                    }\n\n                                                                </Row>\n                                                                :\n                                                                <div className=\"no-prize-text\">{AppLabels.NO_PRIZES_FOR_THIS_CONTEST}</div>\n\n                                                        }\n                                                        {\n                                                            this.state.prizeList && this.state.prizeList.length > 3 &&\n                                                            <div className=\"show-more-prizes text-center\" >\n                                                                <div className=\"button button-primary-rounded padding-more\" onClick={() => this.getContestPrizeDetails(this.state.ContestDetail)}>\n                                                                    {AppLabels.VIEW_ALL_PRIZES}</div>\n                                                            </div>\n                                                        }\n\n                                                        {\n                                                            miniLeagueListLengthStatus != 0 &&\n                                                            <div className=\"contest-section-detail\">\n\n                                                                <img src={Images.HALL_OF_FAME_SMALL_ICON} />\n                                                                <div className=\"Ftp-prizes-label\">{AppLabels.HALL_OF_FAME_JOIN_CONTEST_TEXT}</div>\n\n\n                                                            </div>\n                                                        }\n                                                        {\n                                                            miniLeagueListLengthStatus == 2 && this.state.MiniLeagueList.map((item, index) => {\n                                                                return (\n                                                                    <div className=\"league-list-all\">\n\n                                                                        <div className=\"sort-contest-wrapper mt10 p-t p-lr \">\n                                                                            <div className=\"contest-detail-section no-border\">\n                                                                                <div className=\"league-name contest-detail-text\">\n                                                                                    {item.mini_league_name}\n\n                                                                                </div>\n                                                                                <div className=\"pull-right view-prize-all margin-less\" onClick={() => this.getPrizeDetail(item)}>\n                                                                                    {AppLabels.VIEW_ALL_PRIZES}\n                                                                                </div>\n                                                                            </div>\n\n                                                                        </div>\n                                                                    </div>\n                                                                );\n                                                            })\n                                                        }\n                                                        {\n                                                            miniLeagueListLengthStatus == 1 &&\n                                                                this.state.miniLeagueprizeList && this.state.miniLeagueprizeList.length > 0 ?\n                                                                <Row className=\"Ftp-prizes  no-margin p-v-ms mt20\">\n                                                                    {\n                                                                        this.state.miniLeagueprizeList && this.state.miniLeagueprizeList.length > 0 && this.state.miniLeagueprizeList.slice(0, 3).map((item, index) => {\n                                                                            return (\n                                                                                <Col xs={3} sm={3} md={4} className=\"Ftp-prize-section center-grid\">\n                                                                                    <div className={\"Ftp-prize-inner-section\" + (item.prize_type == 0 ? ' padding-bonus-icon' : '')}>\n                                                                                        {/* <i className=\"icon-ic-info\"></i> */}\n                                                                                        {\n                                                                                            item.prize_type == 0 ?\n                                                                                                <div className=\"bonus-icon-prize\">\n                                                                                                    <i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>\n                                                                                                </div>\n                                                                                                : item.prize_type == 1 ?\n                                                                                                    <React.Fragment>\n                                                                                                        <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n\n                                                                                                    </React.Fragment>\n                                                                                                    :\n                                                                                                    <React.Fragment>\n                                                                                                        {\n                                                                                                            item.prize_type == 2 ?\n                                                                                                                <img alt=\"\" src={Images.IC_COIN} width=\"50px\" />\n                                                                                                                :\n                                                                                                                <div>\n                                                                                                                    {\n                                                                                                                        item.prize_type == 3 &&\n                                                                                                                        this.state.miniLeagueMerchandiseList && this.state.miniLeagueMerchandiseList.map((merchandise, index) => {\n                                                                                                                            return (\n                                                                                                                                <React.Fragment key={index}>\n                                                                                                                                    {item.amount == merchandise.merchandise_id &&\n                                                                                                                                        <img style={{ resizeMode: 'contain' }} src={Utilities.getMerchandiseURL(merchandise.image_name)} width=\"60px\" height=\"60px\" />\n                                                                                                                                    }\n\n                                                                                                                                </React.Fragment>\n                                                                                                                            );\n                                                                                                                        })\n\n\n                                                                                                                    }\n                                                                                                                </div>\n                                                                                                        }\n                                                                                                    </React.Fragment>\n\n\n                                                                                        }\n                                                                                    </div>\n                                                                                    <div class=\"rank-ribbon\">\n                                                                                        <span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min + 'st') : item.min == 2 ? (item.min + 'nd') : item.min == 3 ? (item.min + 'rd') : item.min : item.min + ' - ' + item.max}</span>\n                                                                                    </div>\n                                                                                    <div className=\"prize-name\">\n\n                                                                                        {item.prize_type == 3 ? item.max_value :\n\n                                                                                            <div>\n\n                                                                                                {\n                                                                                                    item.prize_type == 1 ?\n                                                                                                        <React.Fragment>\n                                                                                                            <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n                                                                                                            {this.setCurrentMaxPrize(item.min_value, item)}\n                                                                                                        </React.Fragment>\n                                                                                                        :\n                                                                                                        item.prize_type == 0 ?\n                                                                                                            <React.Fragment>\n                                                                                                                <div className=\"bonus-icon-prize-amount\">\n                                                                                                                    <span className=\"contest-prizes\"><div className=\"icon-bonus\"></div></span>\n                                                                                                                </div>\n                                                                                                                {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                            </React.Fragment>\n                                                                                                            :\n                                                                                                            item.prize_type == 2 ?\n                                                                                                                <React.Fragment>\n                                                                                                                    <img className=\"contest-prizes\" style={{ height: '12px', marginTop: '-2px', width: '12px' }} alt=\"\" src={Images.IC_COIN} />\n                                                                                                                    {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                </React.Fragment>\n                                                                                                                :\n                                                                                                                <React.Fragment>\n                                                                                                                    {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                </React.Fragment>\n                                                                                                }\n\n                                                                                            </div>\n                                                                                        }\n\n                                                                                    </div>\n                                                                                </Col>\n                                                                            );\n                                                                        })\n                                                                    }\n\n                                                                </Row>\n                                                                :\n                                                                miniLeagueListLengthStatus != 0 &&\n                                                                <div className=\"no-prize-text\">{AppLabels.NO_PRIZES_FOR_THIS_LEAGUES}</div>\n                                                        }\n                                                        {\n                                                            this.state.miniLeagueprizeList && this.state.miniLeagueprizeList.length > 3 &&\n                                                            <div className=\"show-more-prizes text-center\" onClick={() => this.getPrizeDetail(this.state.MiniLeagueList[0])}>\n                                                                <div className=\"button button-primary-rounded padding-more\">\n                                                                    {AppLabels.VIEW_ALL_PRIZES}</div>\n                                                            </div>\n                                                        }\n                                                    </div>\n                                                    :\n                                                    <div className=\"winning-section\">\n                                                        <div className=\"winning-tab-header\">\n\n                                                            <div className='winning-text'>{AppLabels.PRIZES}</div>\n\n\n                                                            <div className='winning-right-section'>\n                                                                {this.getPrizeAmount(this.state.prizeList)}\n                                                                <div className=\"winner-count\">{this.getWinnerCount(prizeDistributionDetail)}</div>\n                                                            </div>\n\n                                                        </div>\n                                                        <div className=\"center-alignment\">\n                                            {\n                                                ContestDetail.sponsor_contest_dtl_image &&\n                                                <div className=\"sponser-section-strip-header sponser-img-sec\">\n                                                    {\n                                                        <div className=\"sponser-logo-view\">\n                                                            {\n                                                                window.ReactNativeWebView ?\n                                                                    <a\n                                                                        href\n                                                                        onClick={(event) => Utilities.callNativeRedirection(Utilities.getValidSponserURL(ContestDetail.sponsor_link, event))}>\n                                                                        <img alt='' className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={Utilities.getSponserURL(ContestDetail.sponsor_contest_dtl_image)} />\n                                                                    </a>\n\n                                                                    :\n                                                                    <a\n                                                                        href={Utilities.getValidSponserURL(ContestDetail.sponsor_link)}\n                                                                        onClick={(event) => event.stopPropagation()}\n                                                                        target='__blank'>\n                                                                        <img alt='' className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={Utilities.getSponserURL(ContestDetail.sponsor_contest_dtl_image)} />\n                                                                    </a>\n\n                                                            }\n\n                                                        </div>\n                                                    }\n                                                </div>\n                                            }\n\n                                        </div>\n                                                        <div className={\"table-heading\" + (ContestDetail.is_tie_breaker == 0 ? '' : ' switch-text-align')}>\n                                                            {\n                                                                ContestDetail.is_tie_breaker == 0 ?\n                                                                    <div style={{ float: 'left', width: '80%' }}>\n                                                                        {AppLabels.DISTRIBUTION}\n                                                                    </div>\n                                                                    :\n                                                                    <div style={{ width: '100%' }}>\n                                                                        {AppLabels.DISTRIBUTION}\n                                                                    </div>\n\n                                                            }\n\n                                                            {\n                                                                ContestDetail.is_tie_breaker == 0 && showMaxToggle && \n                                                                ContestDetail.is_prize_reset != 1 &&\n                                                                Utilities.minuteDiffValue({ date: ContestDetail.game_starts_in }) < 0 &&\n                                                                <div className=\"switch-container\">\n                                                                    <div className=\"switch\" >\n                                                                        <input type=\"radio\" className=\"switch-input\" name=\"view\" value=\"week\" id=\"week\" defaultChecked />\n                                                                        <label for=\"week\" className=\"switch-label switch-label-off\" onClick={() => this.isMaximumSelected(true)}>{AppLabels.MAXIMUM}</label>\n                                                                        <input type=\"radio\" className=\"switch-input\" name=\"view\" value=\"month\" id=\"month\" />\n                                                                        <label for=\"month\" className=\"switch-label switch-label-on\" onClick={() => this.isMaximumSelected(false)}>{AppLabels.CURRENT}</label>\n                                                                        <span className=\"switch-selection\"></span>\n                                                                    </div>\n                                                                </div>\n                                                            }\n                                                        </div>\n                                                        <Table responsive>\n                                                            <tbody>\n\n                                                                {\n                                                                    ContestDetail.is_tie_breaker == 0 ?\n                                                                        _Map(ContestDetail.prize_distibution_detail, (prizeItem, idx) => {\n                                                                            return (\n                                                                                <tr key={idx}>\n                                                                                    <td>{prizeItem.min == prizeItem.max ? prizeItem.min : prizeItem.min + ' - ' + prizeItem.max}</td>\n                                                                                    <React.Fragment>\n\n                                                                                        <div>\n                                                                                            {\n                                                                                                prizeItem.prize_type ?\n\n                                                                                                    (prizeItem.prize_type == 0) ?\n                                                                                                        <div className='winning'>\n                                                                                                            <span className=\"contest-prizes\">\n                                                                                                                {<i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>}\n\n                                                                                                                {parseFloat(this.state.maxcurrentStatus ? this.setCurrentMaxPrize(prizeItem.max_value, prizeItem) : this.setCurrentMaxPrize(prizeItem.min_value, prizeItem)).toFixed(0)}\n                                                                                                            </span>\n                                                                                                        </div>\n                                                                                                        :\n                                                                                                        (prizeItem.prize_type == 1) ?\n                                                                                                            <div className='winning'>\n\n                                                                                                                <span className=\"contest-prizes\" style={{ display: 'inlineBlock' }}>{Utilities.getMasterData().currency_code}\n                                                                                                                    {this.state.maxcurrentStatus ? this.setCurrentMaxPrize(prizeItem.max_value, prizeItem) : this.setCurrentMaxPrize(prizeItem.min_value, prizeItem).toFixed(0)}\n\n                                                                                                                </span>\n\n                                                                                                            </div>\n                                                                                                            :\n                                                                                                            (prizeItem.prize_type == 2) ?\n                                                                                                                <div className='winning'>\n                                                                                                                    {\n                                                                                                                        <span className=\"contest-prizes\" style={{ display: 'flex' }}>\n                                                                                                                            <img style={{ marginTop: \"5px\" }} src={Images.IC_COIN} width=\"10px\" height=\"10px\" />\n                                                                                                                            {parseFloat(this.state.maxcurrentStatus ?\n                                                                                                                                this.setCurrentMaxPrize(prizeItem.max_value, prizeItem) : this.setCurrentMaxPrize(prizeItem.min_value, prizeItem)).toFixed(0)}\n                                                                                                                        </span>\n                                                                                                                    }\n\n                                                                                                                </div>\n                                                                                                                :\n                                                                                                                (prizeItem.prize_type == 3) ?\n                                                                                                                    <div className='winning'>\n                                                                                                                        {<span className=\"contest-prizes\" style={{ display: 'inlineBlock' }}>{this.state.maxcurrentStatus ? prizeItem.max_value : prizeItem.min_value}</span>}\n\n                                                                                                                    </div> : ''\n\n                                                                                                    :\n                                                                                                    (ContestDetail.prize_type == 0) ?\n                                                                                                        <React.Fragment>\n                                                                                                            {(prizeItem.amount === \"0\" || prizeItem.amount === \"0.00\") ?\n                                                                                                                <td className=\"text-right\">{AppLabels.PRACTICE}</td>\n                                                                                                                :\n                                                                                                                <td className=\"text-right\">\n                                                                                                                    <span className=\"amt-type\">\n                                                                                                                        <i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>\n                                                                                                                    </span>\n                                                                                                                    {prizeItem.amount}\n                                                                                                                </td>\n                                                                                                            }\n                                                                                                        </React.Fragment>\n                                                                                                        :\n                                                                                                        (ContestDetail.prize_type == 1) &&\n                                                                                                        <React.Fragment>\n                                                                                                            {\n                                                                                                                (prizeItem.amount === \"0\" || prizeItem.amount === \"0.00\") ?\n                                                                                                                    <td className=\"text-right\">{AppLabels.PRACTICE}</td>\n                                                                                                                    :\n                                                                                                                    <td className=\"text-right\">\n                                                                                                                        <span className=\"amt-type\">\n                                                                                                                            {Utilities.getMasterData().currency_code}\n                                                                                                                        </span>\n                                                                                                                        {this.convertIntoWhole(prizeItem.amount)}\n                                                                                                                    </td>\n                                                                                                            }\n                                                                                                        </React.Fragment>\n                                                                                            }\n\n                                                                                        </div>\n                                                                                    </React.Fragment>\n\n\n                                                                                </tr>\n                                                                            )\n                                                                        })\n\n                                                                        :\n                                                                        ContestDetail.prize_distibution_detail\n                                                                        &&\n                                                                        <React.Fragment>\n                                                                            {\n                                                                                Constants.SELECTED_GAMET == Constants.GameType.DFS ?\n                                                                                    <>\n                                                                                        {\n                                                                                            ContestDetail.prize_distibution_detail && ContestDetail.prize_distibution_detail.length > 0 && ContestDetail.prize_distibution_detail.map((item, index) => {\n                                                                                                return (\n                                                                                                    <tr className=\"merchandise-tr\">\n                                                                                                        <td><span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min + 'st') : item.min == 2 ? (item.min + 'nd') : item.min == 3 ? (item.min + 'rd') : item.min : item.min + ' - ' + item.max}</span>\n                                                                                                        </td>\n                                                                                                        <td>\n                                                                                                            {item.prize_type == 3 ? <span className=\"text-primary merchandise-name\">{item.max_value}</span> :\n\n                                                                                                                <div className=\"text-primary\">\n                                                                                                                    {\n                                                                                                                        item.prize_type == 1 ?\n                                                                                                                            <React.Fragment>\n                                                                                                                                <span className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</span>\n\n                                                                                                                                {this.setCurrentMaxPrize(item.min_value, item)}\n                                                                                                                            </React.Fragment>\n                                                                                                                            :\n                                                                                                                            item.prize_type == 0 ?\n                                                                                                                                <React.Fragment>\n                                                                                                                                    <span className=\"bonus-icon-prize-amount\">\n                                                                                                                                        <span className=\"contest-prizes\"><div className=\"icon-bonus\"></div></span>\n                                                                                                                                    </span>\n                                                                                                                                    {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n\n                                                                                                                                </React.Fragment>\n                                                                                                                                :\n                                                                                                                                item.prize_type == 2 ?\n                                                                                                                                    <React.Fragment>\n                                                                                                                                        <img className=\"contest-prizes padding-contest-detail\" style={{ height: '12px', marginTop: '-2px', width: '12px' }} alt=\"\" src={Images.IC_COIN} />\n                                                                                                                                        {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                                    </React.Fragment>\n                                                                                                                                    :\n                                                                                                                                    <React.Fragment>\n                                                                                                                                        {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                                    </React.Fragment>\n                                                                                                                    }\n                                                                                                                </div>\n                                                                                                            }\n                                                                                                        </td>\n\n                                                                                                    </tr>\n                                                                                                );\n                                                                                            })\n                                                                                        }\n                                                                                    </>\n                                                                                    :\n\n                                                                                    <Row className=\"Ftp-prizes no-margin p-v-ms\">\n                                                                                        {\n                                                                                            ContestDetail.prize_distibution_detail && ContestDetail.prize_distibution_detail.length > 0 && ContestDetail.prize_distibution_detail.map((item, index) => {\n                                                                                                return (\n                                                                                                    <Col xs={3} sm={3} md={4} className=\"Ftp-prize-section center-grid\">\n                                                                                                        <div className={\"Ftp-prize-inner-section\" + (item.prize_type == 0 ? ' padding-bonus-icon' : '')}>\n                                                                                                            {\n                                                                                                                item.prize_type == 0 ?\n                                                                                                                    <div className=\"bonus-icon-prize\">\n                                                                                                                        <i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>\n                                                                                                                    </div>\n                                                                                                                    : item.prize_type == 1 ?\n                                                                                                                        <React.Fragment>\n                                                                                                                            <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n\n                                                                                                                        </React.Fragment>\n                                                                                                                        :\n                                                                                                                        <React.Fragment>\n                                                                                                                            {\n                                                                                                                                item.prize_type == 2 ?\n                                                                                                                                    <img alt=\"\" src={Images.IC_COIN} width=\"50px\" />\n                                                                                                                                    :\n                                                                                                                                    <div>\n                                                                                                                                        {\n                                                                                                                                            item.prize_type == 3 &&\n                                                                                                                                            this.state.merchandiseList && this.state.merchandiseList.map((merchandise, index) => {\n                                                                                                                                                return (\n                                                                                                                                                    <React.Fragment key={index}>\n                                                                                                                                                        {item.amount == merchandise.merchandise_id &&\n                                                                                                                                                            <img style={{ resizeMode: 'contain' }} src={Utilities.getMerchandiseURL(merchandise.image_name)} width=\"60px\" height=\"60px\" />\n                                                                                                                                                        }\n\n                                                                                                                                                    </React.Fragment>\n                                                                                                                                                );\n                                                                                                                                            })\n\n\n                                                                                                                                        }\n                                                                                                                                    </div>\n                                                                                                                            }\n                                                                                                                        </React.Fragment>\n\n\n                                                                                                            }\n                                                                                                        </div>\n                                                                                                        <div class=\"rank-ribbon\">\n                                                                                                            <span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min + 'st') : item.min == 2 ? (item.min + 'nd') : item.min == 3 ? (item.min + 'rd') : item.min : item.min + ' - ' + item.max}</span>\n                                                                                                        </div>\n                                                                                                        <div className=\"prize-name\">\n\n                                                                                                            {item.prize_type == 3 ? item.max_value :\n\n                                                                                                                <div>\n\n                                                                                                                    {\n                                                                                                                        item.prize_type == 1 ?\n                                                                                                                            <React.Fragment>\n                                                                                                                                <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n\n                                                                                                                                {this.setCurrentMaxPrize(item.min_value, item)}\n                                                                                                                            </React.Fragment>\n                                                                                                                            :\n                                                                                                                            item.prize_type == 0 ?\n                                                                                                                                <React.Fragment>\n                                                                                                                                    <div className=\"bonus-icon-prize-amount\">\n                                                                                                                                        <span className=\"contest-prizes\"><div className=\"icon-bonus\"></div></span>\n                                                                                                                                    </div>\n                                                                                                                                    {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n\n                                                                                                                                </React.Fragment>\n                                                                                                                                :\n                                                                                                                                item.prize_type == 2 ?\n                                                                                                                                    <React.Fragment>\n                                                                                                                                        <img className=\"contest-prizes padding-contest-detail\" style={{ height: '12px', marginTop: '-2px', width: '12px' }} alt=\"\" src={Images.IC_COIN} />\n                                                                                                                                        {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                                    </React.Fragment>\n                                                                                                                                    :\n                                                                                                                                    <React.Fragment>\n                                                                                                                                        {parseFloat(this.setCurrentMaxPrize(item.min_value, item)).toFixed(0)}\n                                                                                                                                    </React.Fragment>\n                                                                                                                    }\n\n                                                                                                                </div>\n\n                                                                                                            }\n                                                                                                        </div>\n                                                                                                    </Col>\n                                                                                                );\n                                                                                            })\n                                                                                        }\n\n                                                                                    </Row>\n\n                                                                            }\n                                                                        </React.Fragment>\n\n                                                                }\n\n                                                                {\n                                                                    (ContestDetail.consolation_prize && prizeDistributionDetail.length > 0) && <tr>\n                                                                        <td>{(prizeDistributionDetail[prizeDistributionDetail.length - 1].max + 1) + ' - ' + ContestDetail.size}</td>\n                                                                        <td className=\"text-right\">\n                                                                            <span className=\"amt-type\">\n                                                                                {\n                                                                                    ContestDetail.consolation_prize.prize_type == 0\n                                                                                        ?\n                                                                                        <i className=\"icon-bonus\" />\n                                                                                        :\n                                                                                        <img className=\"coin-img\" src={Images.IC_COIN} alt=\"\" />\n                                                                                }\n                                                                            </span>\n                                                                            {ContestDetail.consolation_prize.value}\n                                                                        </td>\n                                                                    </tr>\n                                                                }\n                                                            </tbody>\n                                                        </Table>\n                                                        {ContestDetail.guaranteed_prize != 2 && ContestDetail.minimum_size != ContestDetail.size && ContestDetail.entry_fee > 0 &&\n                                                            <div className=\"tab-description\">\n\n                                                                <span className='star'>\n                                                                    <sup>*</sup>\n                                                                </span>\n                                                                {AppLabels.PRIZE_MSG1} {ContestDetail.minimum_size} {AppLabels.PRIZE_MSG2} {ContestDetail.max_prize_pool}.<br />\n                                                                {AppLabels.PRIZE_MSG3} {ContestDetail.minimum_size} {AppLabels.PRIZE_MSG4}\n                                                            </div>\n                                                        }\n                                                        {(ContestDetail.guaranteed_prize == 2 || (ContestDetail.guaranteed_prize != 2 && ContestDetail.minimum_size == ContestDetail.size)) &&\n                                                            <div className=\"tab-description\">\n                                                                {AppLabels.GUARANTEED_PRIZE_MSG1} {ContestDetail.minimum_size} {AppLabels.GUARANTEED_PRIZE_MSG2} {ContestDetail.minimum_size} {AppLabels.GUARANTEED_PRIZE_MSG3}\n                                                            </div>\n                                                        }\n                                                        {\n                                                            !this.state.maxcurrentStatus && ContestDetail.minimum_size > this.state.total_user_joined &&\n                                                            <div className=\"tab-description p-0\">\n                                                                {AppLabels.THIS_WILL_BE_UPDATED} {ContestDetail.minimum_size} {AppLabels.PEOPLE_JOINED_THIS_CONTEST}\n                                                            </div>\n                                                        }\n                                                    </div>\n                                            }\n\n                                        </Tab>\n                                    }\n                                    <Tab eventKey={2} title={AppLabels.INFO}>\n                                        <div className=\"info-section\">\n                                            {Constants.SELECTED_GAMET == Constants.GameType.MultiGame && ((LobyyData && LobyyData.match_list && LobyyData.match_list.length > 1) || (ContestDetail.match_list && ContestDetail.match_list.length > 1)) &&\n                                                <div className=\"collection-description\">\n                                                    <div className=\"collection-info cursor-pointer\" onClick={this.CollectionInfoShow}>\n                                                        <span>{AppLabels.COLLECTION}</span>\n                                                        <i className=\"icon-info\"></i>\n                                                    </div>\n                                                    {AppLabels.COLLECTION_CONTEST_DISCRIPTION}\n                                                </div>\n                                            }\n                                            <div className=\"header-section\">\n                                                <div className=\"contest-type\">\n                                                    {\n                                                        (ContestDetail.is_private == 1 || ((OpenContestDetailFor || '').is_private == 1)) &&\n                                                        <div className='contest-item-container'>\n                                                            <span className=\"featured-icon\">p</span>\n                                                            <span>{AppLabels.PRIVATE_CONTEST}</span>\n                                                        </div>\n                                                    }\n                                                    {\n                                                        (ContestDetail.multiple_lineup > 1 || ((OpenContestDetailFor || '').multiple_lineup > 1)) &&\n                                                        <div className='contest-item-container'>\n                                                            <span className=\"featured-icon\">m</span>\n                                                            <span>{AppLabels.MULTI_ENTRY_CONTEST}</span>\n                                                            <div className='contest-type-description'>{util.format(AppLabels.MULTI_ENTRY_DISCRIPTION, (ContestDetail.multiple_lineup || OpenContestDetailFor.multiple_lineup))}</div>\n                                                        </div>\n                                                    }\n                                                    {\n                                                        parseInt(this.state.total_user_joined) >= parseInt(ContestDetail.minimum_size) &&\n                                                        <div className='contest-item-container'>\n                                                            <span className=\"featured-icon\">g</span>\n                                                            <span>{AppLabels.GUARANTEED_CONTEST}</span>\n                                                            <div className='contest-type-description'>{AppLabels.GUARANTEED_DESCRIPTION}</div>\n                                                        </div>\n                                                    }\n                                                    {\n                                                        ContestDetail.is_confirmed == 1 && parseInt(this.state.total_user_joined) >= parseInt(ContestDetail.minimum_size) &&\n                                                        <div className='contest-item-container'>\n                                                            <span className=\"featured-icon\">c</span>\n                                                            <span>{AppLabels.CONFIRM_CONTEST}</span>\n                                                            <div className='contest-type-description'>{AppLabels.CONFIRM_DESCRIPTION}</div>\n                                                        </div>\n                                                    }\n                                                </div>\n                                            </div>\n                                            <div className=\"contest-info\">\n                                                <p>\n                                                    <span>{util.format(AppLabels.SUBMIT_PLAYERS_IN_BUDGET, playerCount)}</span>\n                                                </p>\n                                                <div className=\"salary-cap-text\">\n                                                    {AppLabels.SALARY_CAP}\n                                                    <span>{Utilities.getMasterData().currency_code} {ContestDetail.salary_cap}</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"\">\n                                                <Panel id=\"collapsible-panel-example-1\" defaultExpanded>\n                                                    <Panel.Heading>\n                                                        <Panel.Title></Panel.Title>\n                                                        <a href>\n                                                            {AppLabels.SCORING_RULES}\n                                                        </a>\n                                                    </Panel.Heading>\n                                                    <Panel.Collapse>\n                                                        <Panel.Body>\n                                                            <Table responsive>\n                                                                <thead>\n                                                                    <tr>\n                                                                        <th>{normal_scoring_rules && normal_scoring_rules.length > 0 ? AppLabels.NORMAL : ''}</th>\n                                                                        <th></th>\n                                                                    </tr>\n                                                                </thead>\n                                                                <tbody>\n                                                                    {\n                                                                        _Map(normal_scoring_rules, (item, idx) => {\n                                                                            return (\n                                                                                <tr key={idx}>\n                                                                                    <td className=\"\">\n                                                                                        {item.score_position}\n                                                                                    </td>\n                                                                                    <td className=\"text-right right-text\">\n                                                                                        {item.score_points}\n                                                                                    </td>\n                                                                                </tr>\n                                                                            )\n                                                                        })\n                                                                    }\n                                                                </tbody>\n                                                            </Table>\n                                                            {\n                                                                bonus_scoring_rules.length > 0 &&\n                                                                <div>\n\n                                                                    <Table responsive className=\"mb-0\">\n                                                                        <thead>\n                                                                            <tr>\n                                                                                <th>{AppLabels.BONUS}</th>\n                                                                                <th></th>\n                                                                            </tr>\n                                                                        </thead>\n                                                                        <tbody>\n                                                                            {\n                                                                                _Map(bonus_scoring_rules, (item, idx) => {\n                                                                                    return (\n                                                                                        <tr key={idx}>\n                                                                                            <td className=\"\">\n                                                                                                {item.score_position}\n                                                                                            </td>\n                                                                                            <td className=\"text-right right-text\">\n                                                                                                {item.score_points}\n                                                                                            </td>\n                                                                                        </tr>\n                                                                                    )\n                                                                                })\n                                                                            }\n                                                                        </tbody>\n                                                                    </Table>\n                                                                    {\n                                                                        (Utilities.getMasterData().c_point > 0 || Utilities.getMasterData().vc_point > 0) &&\n                                                                        <Table responsive>\n                                                                            <tbody>\n                                                                                {Utilities.getMasterData().c_point > 0 &&\n                                                                                    <tr>\n                                                                                        <td>{AppLabels.CAPTAIN}</td>\n                                                                                        <td className=\"text-right right-text\">\n                                                                                            {(sportsSelected != SportsIDs.badminton) ? masterDataResponse != null && masterDataResponse.c_point + ' X' : masterDataResponse != null && masterDataResponse.vc_point + ' X'}\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                }\n                                                                                {Utilities.getMasterData().vc_point > 0 &&\n                                                                                    (sportsSelected != SportsIDs.badminton) &&\n                                                                                    <tr>\n                                                                                        <td>{AppLabels.VICE_CAPTAIN}</td>\n                                                                                        <td className=\"text-right right-text\">{masterDataResponse != null && masterDataResponse.vc_point}   {' X'}</td>\n                                                                                    </tr>\n                                                                                }\n\n\n                                                                            </tbody>\n                                                                        </Table>\n                                                                    }\n                                                                </div>\n                                                            }\n                                                            {\n                                                                economy_scoring_rules.length > 0 &&\n                                                                <Table responsive>\n                                                                    <thead>\n                                                                        <tr>\n                                                                            <th>{AppLabels.ECONOMY_RATE}</th>\n                                                                            <th></th>\n                                                                        </tr>\n                                                                    </thead>\n                                                                    <tbody>\n                                                                        {\n                                                                            _Map(economy_scoring_rules, (item, idx) => {\n                                                                                return (\n                                                                                    <tr key={idx}>\n                                                                                        <td className=\"\">\n                                                                                            {item.score_position}\n                                                                                        </td>\n                                                                                        <td className=\"text-right right-text\">\n                                                                                            {item.score_points}\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                )\n                                                                            })\n                                                                        }\n                                                                    </tbody>\n                                                                </Table>\n                                                            }\n                                                            {\n                                                                pitching_scoring_rules.length > 0 &&\n                                                                <Table responsive>\n                                                                    <thead>\n                                                                        <tr>\n                                                                            <th>{pitching_scoring_rules[0].scoring_category_name}</th>\n                                                                            <th></th>\n                                                                        </tr>\n                                                                    </thead>\n                                                                    <tbody>\n                                                                        {\n                                                                            _Map(pitching_scoring_rules, (item, idx) => {\n                                                                                return (\n                                                                                    <tr key={idx}>\n                                                                                        <td className=\"\">\n                                                                                            {item.score_position}\n                                                                                        </td>\n                                                                                        <td className=\"text-right right-text\">\n                                                                                            {item.score_points}\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                )\n                                                                            })\n                                                                        }\n                                                                    </tbody>\n                                                                </Table>\n                                                            }\n                                                            {\n                                                                hitting_scoring_rules.length > 0 &&\n                                                                <Table responsive>\n                                                                    <thead>\n                                                                        <tr>\n                                                                            <th>{hitting_scoring_rules[0].scoring_category_name}</th>\n                                                                            <th></th>\n                                                                        </tr>\n                                                                    </thead>\n                                                                    <tbody>\n                                                                        {\n                                                                            _Map(hitting_scoring_rules, (item, idx) => {\n                                                                                return (\n                                                                                    <tr key={idx}>\n                                                                                        <td className=\"\">\n                                                                                            {item.score_position}\n                                                                                        </td>\n                                                                                        <td className=\"text-right right-text\">\n                                                                                            {item.score_points}\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                )\n                                                                            })\n                                                                        }\n                                                                    </tbody>\n                                                                </Table>\n                                                            }\n                                                            {\n                                                                strike_scoring_rules.length > 0 &&\n                                                                <Table responsive>\n                                                                    <thead>\n                                                                        <tr>\n                                                                            <th>{AppLabels.STRIKE_RATE}</th>\n                                                                            <th></th>\n                                                                        </tr>\n                                                                    </thead>\n                                                                    <tbody>\n                                                                        {\n                                                                            _Map(strike_scoring_rules, (item, idx) => {\n                                                                                return (\n                                                                                    <tr key={idx}>\n                                                                                        <td className=\"\">\n                                                                                            {item.score_position}\n                                                                                        </td>\n                                                                                        <td className=\"text-right right-text\">\n                                                                                            {item.score_points}\n                                                                                        </td>\n                                                                                    </tr>\n                                                                                )\n                                                                            })\n                                                                        }\n                                                                    </tbody>\n                                                                </Table>\n                                                            }\n                                                        </Panel.Body>\n                                                    </Panel.Collapse>\n                                                </Panel>\n                                            </div>\n                                        </div>\n                                    </Tab>\n                                    <Tab eventKey={3} title={AppLabels.ENTRIES}>\n                                        <div className=\"entries-section\">\n                                            <div className=\"progress-bar-default\">\n                                                <ProgressBar className={this.state.total_user_joined < ContestDetail.minimum_size ? 'danger-area' : ''} now={this.ShowProgressBar(this.state.total_user_joined, ContestDetail.minimum_size)} />\n                                                <div className=\"progress-bar-value\">\n                                                    <span className=\"total-output\">{this.state.total_user_joined}</span> / <span className=\"total-entries\">{ContestDetail.size} {AppLabels.ENTRIES}</span>\n                                                    <span className=\"min-entries\">{AppLabels.MIN}.{ContestDetail.minimum_size}</span>\n                                                </div>\n                                            </div>\n\n                                            <InfiniteScroll\n                                                dataLength={userList.length}\n                                                next={this.onLoadMore}\n                                                hasMore={!this.state.isLoading && hasMore}\n                                                scrollableTarget='users-scroll-list'\n                                            >\n                                                <div className='user-table-container' id=\"users-scroll-list\" >\n                                                    <Table responsive>\n                                                        <tbody className=\"table-body\">\n                                                            {\n                                                                _Map(userList, (item, idx) => {\n                                                                    return (\n                                                                        idx < parseInt(ContestDetail.size) ?\n                                                                            <tr key={idx}>\n                                                                                <td className=\"user-entry\">\n                                                                                    {item.image === '' &&\n                                                                                        <img src={Images.DEFAULT_USER} alt=\"\" className=\"user-img\" />\n                                                                                    }\n                                                                                    {item.image !== '' &&\n                                                                                        <img src={Utilities.getThumbURL(item.image)} alt=\"\" className=\"user-img\" />\n                                                                                    }\n                                                                                    <div className=\"user-name\">{item.name}</div>\n                                                                                </td>\n                                                                                {ContestDetail.multiple_lineup > 1 &&\n                                                                                    <td className=\"text-right team-joined\">{item.user_join_count != -1 && item.user_join_count}\n                                                                                        <span>{item.user_join_count != -1 && (item.user_join_count > 1 ? ' ' + AppLabels.TEAMS : ' ' + AppLabels.TEAM)}</span>\n                                                                                    </td>\n                                                                                }\n                                                                            </tr>\n                                                                            :\n                                                                            ''\n                                                                    )\n                                                                })\n                                                            }\n                                                        </tbody>\n                                                    </Table>\n\n                                                </div>\n                                            </InfiniteScroll>\n\n                                        </div>\n                                    </Tab>\n\n                                    {Constants.SELECTED_GAMET == Constants.GameType.MultiGame ? <Tab eventKey={4} title={AppLabels.FIXTURE_TAB}>\n\n\n                                        <InfiniteScroll\n                                            style={{ overflow: 'hidden !important' }}\n                                            pullDownToRefresh={false}\n                                            dataLength={LobyyData.match_list.length}\n                                            scrollableTarget='test'>\n                                            <div className=\"collection-list-wrapper\">\n                                                {\n                                                    (LobyyData.match_list.length > 0 ?\n                                                        LobyyData.match_list.map((item, index) => {\n                                                            return (\n                                                                <div className=\"fixture-card-wrapper  fixture-card-wrapper-lg\">\n                                                                    <div className=\"fixture-card-body display-table\">\n                                                                        <div className={\"match-info-section\"}>\n                                                                            {WSManager.getPickedGameType() == Constants.GameType.MultiGame &&\n                                                                                <div className=\"section-left\">\n                                                                                    <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"home-team-flag\" />\n                                                                                </div>\n                                                                            }\n                                                                            <div className=\"section-middle\">\n                                                                                {\n                                                                                    WSManager.getPickedGameType() == Constants.GameType.MultiGame\n                                                                                        ?\n                                                                                        <div>\n                                                                                            <span className=\"team-home\">{item.home}</span>\n                                                                                            <span className=\"vs-text\">{AppLabels.VERSES}</span>\n                                                                                            <span className=\"team-away\">{item.away}</span>\n                                                                                        </div>\n                                                                                        :\n                                                                                        <span className=\"team-home\">{item.collection_name}</span>\n                                                                                }\n                                                                                {\n                                                                                    this.state.contestStatus !== Constants.CONTEST_LIVE && <div className=\"match-timing\">\n                                                                                        {\n\n                                                                                            Utilities.showCountDown(item) && this.state.contestStatus !== Constants.CONTEST_COMPLETED ?\n                                                                                                <div className=\"countdown time-line\">\n                                                                                                    {item.game_starts_in && <CountdownTimer deadlineTimeStamp={item.game_starts_in} />}\n                                                                                                </div> :\n                                                                                                <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm a \" }} /></span>\n                                                                                        }\n                                                                                    </div>\n                                                                                }\n                                                                            </div>\n                                                                            {WSManager.getPickedGameType() == Constants.GameType.MultiGame &&\n                                                                                <div className=\"section-right\">\n                                                                                    <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"away-team-flag\" />\n                                                                                </div>\n                                                                            }\n                                                                        </div>\n                                                                    </div>\n                                                                    <div className={\"fixture-card-footer\" + (item.league_name ? '' : ' justify-center')}>\n                                                                        {item.league_name &&\n                                                                            <div className=\"match-type\">\n                                                                                {item.league_name || item.league_abbr}\n                                                                                {this.state.sports_id === '7' &&\n                                                                                    <span>- {MATCH_TYPE[item.format]}</span>\n                                                                                }\n                                                                            </div>\n                                                                        }\n\n                                                                    </div>\n                                                                </div>\n                                                            )\n                                                        })\n                                                        :\n                                                        (LobyyData.match_list.length === 0) &&\n                                                        <NoDataView\n                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                                            MESSAGE_2={AppLabels.NO_FIXTURES_MSG2}\n                                                            onClick_2={this.joinContest}\n                                                        />\n                                                    )}\n                                            </div>\n                                        </InfiniteScroll>\n                                    </Tab> : ''}\n\n                                </Tabs>\n                                {\n                                    !joinBtnVisibility && showError && this.showPrivateContestError()\n                                }\n                            </Modal.Body>\n                        </Modal>\n                        {showCollectionInfo &&\n                            <CollectionInfoModal IsCollectionInfoShow={showCollectionInfo} IsCollectionInfoHide={this.CollectionInfoHide} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Modals/CollectionInfo.jsx",[],"/var/www/html/framework/frontend/src/views/FieldViewRight.jsx",["2819","2820","2821"],"\nimport React from 'react';\nimport FieldView from \"./FieldView\";\n\nexport default class FieldViewRight extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            reloadFieldView: true,\n            nextProps: ''\n        }\n    }\n\n    componentDidMount = () => {\n        if(this.props.isFromUpcoming || this.props.isFromLeaderboard){\n            this.setState({\n                nextProps: this.props,\n                reloadFieldView: false\n            },()=>{\n                this.setState({\n                    reloadFieldView: true\n                })\n            })\n        }\n    }\n    \n    componentWillReceiveProps(nextProps){\n        if(nextProps && (nextProps.MasterData != this.state.nextProps.MasterData || nextProps.LobyyData != this.state.nextProps.LobyyData || nextProps.SelectedLineup != this.state.nextProps.SelectedLineup)){\n            this.setState({\n                nextProps: nextProps,\n                reloadFieldView: false\n            },()=>{\n                this.setState({\n                    reloadFieldView: true\n                })\n            })\n        }\n        // else if(nextProps.isFromUpcoming || nextProps.isFromLeaderboard){\n        //     this.setState({\n        //         nextProps: nextProps,\n        //         reloadFieldView: false\n        //     },()=>{\n        //         this.setState({\n        //             reloadFieldView: true\n        //         })\n        //     })\n        // }\n    }\n\n    render(){\n        // const {SelectedLineup,MasterData, LobyyData,FixturedContest,isFrom,team,rootDataItem,isFromMyTeams,ifFromSwitchTeamModal} = this.props\n        return(\n            <div className=\"field-view-right hide-sm-below\">\n                {this.state.reloadFieldView &&\n                    <FieldView \n                        SelectedLineup= {this.state.nextProps.SelectedLineup}\n                        MasterData= {this.state.nextProps.MasterData}\n                        LobyyData= {this.state.nextProps.LobyyData}\n                        FixturedContest= {this.state.nextProps.FixturedContest}\n                        isFrom={this.state.nextProps.isFrom}\n                        isFromUpcoming={this.state.nextProps.isFromUpcoming}\n                        rootDataItem={this.state.nextProps.rootDataItem}\n                        team={this.state.nextProps.team}\n                        team_name={this.state.nextProps.team_name}\n                        resetIndex={this.state.nextProps.resetIndex} \n                        TeamMyContestData={this.state.nextProps.TeamMyContestData}\n                        isFromMyTeams={this.state.nextProps.isFromMyTeams}\n                        ifFromSwitchTeamModal={this.state.nextProps.ifFromSwitchTeamModal}\n                        rootitem={this.state.nextProps.rootitem}\n                        sideViewHide={this.state.nextProps.sideViewHide}\n                        isFromLeaderboard={this.state.nextProps.isFromLeaderboard}\n                    />\n                }\n            </div>\n        );\n    }\n}","/var/www/html/framework/frontend/src/views/CollectionSlider.jsx",["2822","2823","2824","2825","2826","2827","2828","2829","2830","2831","2832","2833","2834","2835","2836","2837","2838","2839","2840","2841","2842","2843","2844","2845","2846","2847","2848","2849","2850","2851","2852","2853"],"import React from 'react';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport Slider from \"react-slick\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities } from '../Utilities/Utilities';\nimport CountdownTimer from './CountDownTimer';\nimport { AppSelectedSport } from '../helper/Constants';\nimport { MomentDateComponent } from '../Component/CustomComponent';\n\n// this component contains fixture list of lobby\n\nexport default class CollectionSlider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sports_id: AppSelectedSport,\n            isExist:false\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    FixtureListFunction = (item, isFrom,contestSliderData) => {\n        let collectionFor = item.status == 0 && (item.game_starts_in > item.today) ? 0 : 1; // 1 is for live and 0 is for upcoming\n        let tmpFixtures = this.props.FixtureSelected;\n        let isItemSelected = tmpFixtures ? tmpFixtures.includes(item) : false\n        return (\n            <React.Fragment>\n                {((isFrom == 'LiveContest' && (item.status == 2 || collectionFor == 1)) || isFrom == 'CompletedContest') &&\n                    <div className=\"collection-list livecontest-collection-list\">\n                        <div className={\"display-table\" + (item.status == 2 ? ' completed-border' :  item.status == 1 || collectionFor == 1 ? ' live-border' : ' upcoming-border')}>\n                            <div className=\"display-table-cell text-left v-mid \">\n                                <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                                <span className=\"team-name text-uppercase\">{item.home}</span>\n                                {this.state.sports_id != 8 && item.score_data && item.score_data[1] ?\n                                    <span className=\"match-score\">\n                                    \n                                        {item.score_data[1].home_team_score}/\n                                        {item.score_data[1].home_wickets}\n                                        <span className=\"over\"> {item.score_data[1].home_overs}</span>\n                                    </span>\n                                    :\n                                    this.state.sports_id == 5 && item.score_data ?\n                                    <span className=\"match-score\">\n                                     {item.score_data.home_score} \n                                   </span> : ''\n\n                                }\n                                {this.state.sports_id != 8 && !item.score_data &&\n                                    <span className=\"match-score\">\n                                        {0}/\n                                        {0}\n                                        <span className=\"over\"> {0}</span>\n                                    </span>\n                                }\n                                {this.state.sports_id == 8 && item.score_data &&\n                                    <span className=\"match-score\">\n                                        {item.score_data.home_score}\n                                    </span>\n                                }\n                            </div>\n                            {isFrom == 'LiveContest' &&\n                                <div className={\"collection-status\" + (item.status == 2 ? ' completed-status' : (item.status == 1 || collectionFor == 1 ? ' live-status' :''))}>\n                                    {item.status == 2 ?\n                                        <span>\n                                            <div>Completed</div>\n                                        </span> :\n                                        item.status == 1 || collectionFor == 1 ?\n                                        <span>\n                                            <span className=\"circle-divider\"></span>\n                                            <div>Live</div>\n                                        </span>\n                                        :''\n                                        \n                                    }\n                                </div>\n                            }\n                            <div className=\"display-table-cell text-right v-mid \">\n                                <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                                <span className=\"team-name text-uppercase\">{item.away}</span>\n                                {this.state.sports_id != 8 && item.score_data && item.score_data[1] ?\n                                    <span className=\"match-score\">\n                                        {item.score_data[1].away_team_score}/\n                                        {item.score_data[1].away_wickets}\n                                        <span className=\"over\"> {item.score_data[1].away_overs}</span>\n                                    </span>\n                                    :\n                                    this.state.sports_id == 5 && item.score_data ?\n                                    <span className=\"match-score\">\n                                        {item.score_data.away_score}\n                                      </span>\n                                      : ''\n\n                                }\n                                {this.state.sports_id != 8 && !item.score_data &&\n                                    <span className=\"match-score\">\n                                        {0}/\n                                        {0}\n                                        <span className=\"over\"> {0}</span>\n                                    </span>\n                                }\n                                {this.state.sports_id == 8 && item.score_data &&\n                                    <span className=\"match-score\">\n                                        {item.score_data.away_score}\n                                    </span>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                }\n                {((isFrom != 'LiveContest' && isFrom != 'CompletedContest') || (isFrom == 'LiveContest' && collectionFor == 0)) &&\n                    <div className=\"collection-list\">\n                        <div className= {\"display-table \" + (isItemSelected ? \"selection-border\" : \"\" )}>\n                            <div className=\"display-table-cell text-center v-mid w20\">\n                                <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                            </div>\n                            <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                                <div className=\"team-block\">\n                                    <span className=\"team-name text-uppercase\">{item.home}</span>\n                                    <span className=\"verses\">{AppLabels.VS}</span>\n                                    <span className=\"team-name text-uppercase\">{item.away}</span>\n                                </div>\n                                <div className=\"match-timing\">\n                                    {\n                                        Utilities.showCountDown(item) ?\n                                            <div className=\"countdown time-line\">\n                                                {item.game_starts_in && <CountdownTimer deadlineTimeStamp={item.game_starts_in} currentDateTimeStamp={item.today} />}\n                                            </div> :\n                                            <span><MomentDateComponent data={{date:item.season_scheduled_date,format:\"D MMM - hh:mm A \"}} /></span>\n                                    }\n                                </div>\n                            </div>\n                            <div className=\"display-table-cell text-center v-mid w20\">\n                                <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                            </div>\n                        </div>\n                    </div>\n                }\n            </React.Fragment>\n\n            /* <div className={\"collection-list\" + (isFrom == 'LiveContest' ? (item.status == 2 ? ' completed-collection-list' : (item.status == 0 ? ' live-collection-list' : '')) : '')}>\n            </div> */\n        );\n    }\n\n    onFixtureSelect = (item) => {\n        const { contestSliderData,getFilterList,keyId, showContestItem, isFrom } = this.props;\n        if(isFrom == \"Roster\" ) {\n            let tmpFixtures = this.props.FixtureSelected;\n            if(tmpFixtures.includes(item)){\n                let indexObj = tmpFixtures.indexOf(item);\n                tmpFixtures.splice(indexObj, 1);\n                getFilterList(tmpFixtures)\n            }else{\n                    getFilterList([...tmpFixtures, item])\n            }\n        }\n    }\n\n \n   render() {\n        const { contestSliderData,collectionInfo, isFrom, CollectionInfoShow } = this.props;\n        var settings = {\n            infinite: false,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            variableWidth: false,\n            centerPadding: '100px 0 5px',\n            initialSlide: 0,\n            // variableWidth: true,\n            className: \"center\",\n            centerMode: true,\n            responsive: [\n                {\n                    breakpoint: 767,\n                    settings: {\n                        slidesToShow: 1,\n                    }\n                },\n                {\n                    breakpoint: 414,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '45px 0 10px',\n                    }\n                },\n                {\n                    breakpoint: 320,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '10px 0 5px',\n                    }\n                }\n            ]\n        };\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"contest-collection-slider fixture-list-content \" + (isFrom == \"Roster\" ? 'contest-collection-slider-roster' : '')}>\n                        {contestSliderData &&\n                            <React.Fragment>\n                                <Slider {...settings}>\n                                    {\n                                        contestSliderData.match_list && contestSliderData.match_list.length >= 2 && contestSliderData.match_list.map((item, index) => {\n                                            return (\n                                                <div key={item.season_game_uid} onClick={()=>this.onFixtureSelect(item)} className=\"collection-list-slider\">\n                                                    {this.FixtureListFunction(item, isFrom,contestSliderData)}\n                                                </div>\n                                            );\n                                        })\n                                    }\n                                </Slider>\n                                {\n                                    contestSliderData.match_list && contestSliderData.match_list.length >=2 && collectionInfo &&\n                                    <div className=\"collection-info-section\" onClick={CollectionInfoShow}>\n                                        <span>{AppLabels.COLLECTION}</span>\n                                        <i className=\"icon-info\"></i>\n                                    </div>\n                                }\n                            </React.Fragment>\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Modals/Thankyou.jsx",["2854","2855","2856","2857"],"import React from 'react';\nimport {  Modal } from 'react-bootstrap';\nimport Images from '../components/images';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\n\nexport default class Thankyou extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            \n        };\n    }\n\n    render() {\n\n        const { goToLobbyClickEvent, seeMyContestEvent  } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={this.props.ThankyouModalShow}\n                        dialogClassName=\"custom-modal thank-you-modal\" \n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"header-modalbg\">\n                                <i className=\"icon-tick-circular primary-icon\"></i>\n                            </div>\n                        </Modal.Header>\n                        <div>\n                            <Modal.Body>\n                                <div className=\"thank-you-body\">\n                                    <h4>{AppLabels.JOIN_SUCCESS_TITLE}</h4>\n                                    <p>{AppLabels.JOIN_SUCCESS_MESSAGE}</p>\n                                </div>\n                            </Modal.Body>\n                            <Modal.Footer className='custom-modal-footer'>\n                                <div  className=\"btn-grops-footer\">\n                                    <a onClick={() => goToLobbyClickEvent(this.state, context)}>\n                                        <span>{AppLabels.JOIN_MORE_POPUP} <br></br> {AppLabels.CONTESTS_POPUP}</span>\n                                    </a>\n                                    <a onClick={() => seeMyContestEvent(this.state, context)}>\n                                        <span>{this.props.from && this.props.from == 'MyContest' ? AppLabels.DISMISS: AppLabels.SEE_MY_CONTESTS}</span>\n                                    </a>\n                                </div>\n                            </Modal.Footer>\n                        </div>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/ConfirmationPopup.jsx",["2858","2859","2860","2861","2862","2863","2864","2865","2866","2867","2868","2869","2870","2871","2872","2873","2874","2875","2876","2877","2878","2879","2880","2881","2882","2883","2884","2885","2886","2887","2888","2889","2890","2891","2892","2893","2894","2895","2896","2897","2898","2899","2900","2901","2902"],"import React from 'react';\nimport { Modal, Tooltip, OverlayTrigger, Button, FormGroup, Row, Col } from 'react-bootstrap';\nimport Select from 'react-select';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { inputStyle } from '../helper/input-style';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities } from '../Utilities/Utilities';\nimport { getUserBalance, validateContestPromo } from '../WSHelper/WSCallings';\nimport * as Constants from \"../helper/Constants\";\nimport Images from \"../components/images\";\nimport { isIOS } from 'react-device-detect';\nvar UserBalance = null;\nvar discountAmount = 0;\nvar entryFeeAfterDiscount = 0;\n\nexport default class ConfirmationPopup extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            selectedTeam: '',\n            Teams: this.props.TeamListData,\n            FixturedContestItem: this.props.FixturedContest,\n            lobbyDataItem: this.props.lobbyDataToPopup,\n            mUserBalance: '',\n            balanceAccToMaxPercent: \"\",\n            promoCode: '',\n            benefitCap: '',\n            entryFeeAfterPromoCode: \"\", //this.props.FixturedContest.entry_fee,\n            isDisabled: false,\n            lineUpMasterIdOfCreatedTeam: this.props.createdLineUp != \"\" ? this.props.createdLineUp : \"\",\n            TeamsSortedArray: [],\n            isChanged: true,\n            refreshAddFundsBtn: true,\n            entryFeeOfContest: this.props.FixturedContest.entry_fee,\n            showPromoCode: false,\n            clickOnce: false,\n            promoCodeErrorMsg: '',\n            contestMaxBonusAllowed: '',\n            useWinningAmt: false,\n            BalanceDetail: Utilities.getBalanceInDetail(this.props.FixturedContest.entry_fee),\n            AmountToAdd: parseFloat(this.props.FixturedContest.entry_fee),\n            refreshField: true,\n            isLoading: false\n        };\n\n\n    }\n\n    fiterCreatedTeamFromAllTeams(TeamListData) {\n\n\n        if (this.state.lineUpMasterIdOfCreatedTeam != \"\") {\n\n            let teamList1 = [];\n            for (var obj of TeamListData) {\n\n                let tempObj = {};\n                tempObj['label'] = obj.label ? obj.label : obj.team_name;\n                tempObj['value'] = obj.value ? obj.value : obj;\n\n                if (this.state.lineUpMasterIdOfCreatedTeam == tempObj.value.lineup_master_id) {\n                    teamList1.push(tempObj)\n                    this.setState({ selectedTeam: tempObj })\n\n                } else {\n                    teamList1.push(tempObj)\n\n                }\n            }\n\n            this.setState({\n                TeamsSortedArray: teamList1.reverse(),\n                Teams: teamList1\n            })\n\n\n        } else {\n            if (this.props.TeamListData.length > 1) {\n                if (this.props.TeamListData[0].lineup_master_id > this.props.TeamListData[1].lineup_master_id) {\n                    this.setState({ TeamsSortedArray: this.props.TeamListData.reverse() })\n                } else {\n                    this.setState({ TeamsSortedArray: this.props.TeamListData })\n                }\n            } else {\n                this.setState({ TeamsSortedArray: this.props.TeamListData })\n            }\n\n        }\n    }\n\n\n    handleTeamChange = (selectedOption) => {\n        if (selectedOption.value == AppLabels.CREATE_NEW_TEAM) {\n            this.props.CreateTeamClickEvent(this.props.FixturedContest, this.state.lobbyDataItem)\n        }\n        this.setState({ selectedTeam: selectedOption })\n    }\n\n    ShowPromoCode = () => {\n        this.setState({\n            showPromoCode: true\n        })\n    }\n\n    userBalance(EntryFee, maxBonusAllowed) {\n        if (this.state.FixturedContestItem.currency_type != 2 && maxBonusAllowed != null && maxBonusAllowed != \"\"){\n            UserBalance = Utilities.getMaxBonusAllowedOfEntryFeeContestWise(EntryFee, maxBonusAllowed);\n        } \n        else if(this.state.FixturedContestItem.currency_type == 2){\n            UserBalance = this.state.mUserBalance.point_amount\n        }\n        else {\n            UserBalance = Utilities.getBalanceAccToMaxPercentOfEntryFee(EntryFee);\n        }\n\n        this.setState({\n            refreshAddFundsBtn: false,\n            entryFeeOfContest: EntryFee\n        })\n\n        setTimeout(() => {\n            this.setState({\n                balanceAccToMaxPercent: UserBalance,\n                refreshAddFundsBtn: true\n            })\n        }, 100);\n    }\n\n    componentDidMount() {\n        this.handelBycoinAppEvent()\n        var allowedBonusPercantage = WSManager.getAllowedBonusPercantage()\n        var BonusAllowed = parseFloat(allowedBonusPercantage) * parseFloat(this.state.FixturedContestItem.entry_fee) / 100\n        this.setState({\n            contestMaxBonusAllowed: BonusAllowed\n        })\n\n        this.callUserBalanceApi();\n        this.fiterCreatedTeamFromAllTeams(this.props.TeamListData);\n\n    }\n\n\n    callUserBalanceApi() {\n\n        getUserBalance().then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    mUserBalance: responseJson.data.user_balance\n                })\n                WSManager.setAllowedBonusPercantage(responseJson.data.allowed_bonus_percantage)\n                WSManager.setBalance(responseJson.data.user_balance);\n                this.userBalance(this.state.FixturedContestItem.entry_fee, this.state.FixturedContestItem.max_bonus_allowed)\n\n            }\n        })\n    }\n\n    callGetPromoCodeDetailApi(inputPromoCode) {\n\n        if (!this.state.isLoading) {\n            this.setState({\n                isLoading: true\n            })\n            let param = {\n                \"promo_code\": inputPromoCode,\n                \"contest_id\": this.state.FixturedContestItem.contest_id\n            }\n\n            validateContestPromo(param).then((responseJson) => {\n                this.setState({\n                    isLoading: false\n                })\n                if (responseJson.response_code == WSC.successCode) {\n                    Utilities.showToast(AppLabels.Promocode_has_been_applied, 2500);\n                    this.setState({\n                        benefitCap: responseJson.data.benefit_cap,\n                        isDisabled: true\n                    }, () => {\n                        this.hidePromoCode()\n                    })\n                    this.entryFeeAccToBenefitCapOrDiscount(responseJson.data.amount, this.state.benefitCap);\n                }\n                else {\n                    this.setState({\n                        promoCodeErrorMsg: responseJson.message\n                    })\n                }\n            })\n        }\n    }\n\n    removePromoCode() {\n        this.userBalance(this.state.FixturedContestItem.entry_fee, this.state.FixturedContestItem.max_bonus_allowed)\n        this.setState({\n            entryFeeAfterPromoCode: \"\",\n            promoCode: \"\",\n            isChanged: false,\n            isDisabled: false,\n            showPromoCode: false,\n        },\n            () => {\n                this.setState({\n                    BalanceDetail: Utilities.getBalanceInDetail(this.state.FixturedContestItem.entry_fee)\n                })\n            }\n        )\n\n        setTimeout(() => {\n            this.setState({\n                isChanged: true\n            })\n        }, 100);\n    }\n\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value });\n    }\n\n    entryFeeAccToBenefitCapOrDiscount(mDiscountAmount, mBenefitCap) {\n\n        discountAmount = mDiscountAmount;\n        entryFeeAfterDiscount = parseFloat(this.state.FixturedContestItem.entry_fee) - parseFloat(discountAmount);\n        if (entryFeeAfterDiscount < 0)\n            entryFeeAfterDiscount = 0;\n\n        this.setState({\n            entryFeeAfterPromoCode: entryFeeAfterDiscount == 0 ? \"0\" : entryFeeAfterDiscount\n        },\n            () => {\n                this.setState({\n                    BalanceDetail: Utilities.getBalanceInDetail(entryFeeAfterDiscount)\n                })\n            })\n\n        this.userBalance(entryFeeAfterDiscount, this.state.FixturedContestItem.max_bonus_allowed)\n    }\n\n    UseWinning = () => {\n        this.setState({\n            useWinningAmt: !this.state.useWinningAmt\n        })\n    }\n\n    showPromoCode = () => {\n        this.setState({\n            showPromoCode: true\n        })\n    }\n    hidePromoCode = () => {\n        this.setState({\n            showPromoCode: false\n        })\n    }\n    PromoCodeFn = (event) => {\n        event.stopPropagation()\n    }\n\n    addAmount = (amt) => {\n        let totalAmt = this.state.AmountToAdd;\n        totalAmt = parseFloat(totalAmt + amt);\n        this.setState({\n            AmountToAdd: totalAmt,\n            refreshField: false\n        }, () => {\n            this.setState({\n                refreshField: true\n            })\n        })\n    }\n\n    onChange = (e) => {\n        let amt = e.target.value;\n        this.setState({\n            AmountToAdd: amt\n        })\n    }\n\n    goToBuyCoins = () => {\n\n        if (window.ReactNativeWebView) {\n            let data = {\n                action: 'openBuyScreen',\n                targetFunc: 'openBuyScreen',\n            }\n            window.ReactNativeWebView.postMessage(JSON.stringify(data));\n        } else {\n            this.props.showDownloadApp();\n            // if (isIOS) {\n            //     let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.ios : {};\n            //     window.open(iosAppDownload.app_url, \"_blank\")\n            // } else {\n            //     let iosAppDownload = Utilities.getMasterData().app_version ? Utilities.getMasterData().app_version.android : {};\n            //     window.open(iosAppDownload.app_url, \"_blank\")\n            // }\n        }\n\n    }\n    handelBycoinAppEvent() {\n        window.addEventListener('message', (e) => {\n           if (e.data.action == 'buyCoin' && e.data.type == 'succuss') {\n                this.callUserBalanceApi();\n              }            \n        });\n    }\n\n    render() {\n        const {\n            selectedTeam,\n            FixturedContestItem,\n            mUserBalance,\n            balanceAccToMaxPercent,\n            promoCode,\n            entryFeeAfterPromoCode,\n            isDisabled,\n            lineUpMasterIdOfCreatedTeam,\n            TeamsSortedArray,\n            isChanged,\n            refreshAddFundsBtn,\n            entryFeeOfContest,\n            clickOnce,\n            useWinningAmt,\n            BalanceDetail\n        } = this.state;\n\n        let BalDetail = Utilities.getBalanceInDetail(FixturedContestItem.entry_fee)\n\n        let EntryFee = FixturedContestItem.entry_fee\n        let CurrencyType = FixturedContestItem.currency_type\n        let isNetworkFantasyContest =  FixturedContestItem && FixturedContestItem.is_network_contest && FixturedContestItem.is_network_contest == 1 ? true :false\n\n\n        const { ConfirmationClickEvent, FixturedContest,isFromFreeToPlay } = this.props;\n        let maxCBCapAmount = Utilities.getMasterData().max_contest_bonus_cap;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    //Old Confirmation modal\n                    <Modal\n                        show={this.props.IsConfirmationPopupShow}\n                        onHide={this.props.IsConfirmationPopupHide}\n                        dialogClassName=\"custom-modal thank-you-modal confirmation-modal confirmation-modal-contestlist \"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className='Confirm-header '>\n                                {AppLabels.CONFIRMATION}\n                            </div>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            {\n                                mUserBalance &&\n                                <React.Fragment>\n                                    <Row className='mt30' style={{ padding: 0 }}>\n                                    {\n                                        Constants.SELECTED_GAMET != Constants.GameType.Free2Play &&\n                                        <Col xs={12} style={{ padding: 0 }}>\n                                       \n                                       <div className={\"fee-container\" + (balanceAccToMaxPercent < EntryFee ? ' fee-container-danger' : '')}>\n                                            <div className=\"lable-text\">{CurrencyType == 2 ? AppLabels.PAYABLE_COINS_BAL : AppLabels.PAYABLE_BALANCE}\n                                                {\n                                                    CurrencyType != 2 &&\n\n                                                    <OverlayTrigger trigger={'click'} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\">\n                                                            <strong>{AppLabels.PAYABLE_TOOLTIP1\n                                                                + (FixturedContest.max_bonus_allowed != null && FixturedContest.max_bonus_allowed != \"\" ? FixturedContest.max_bonus_allowed : WSManager.getAllowedBonusPercantage()) + AppLabels.PAYABLE_TOOLTIP2 + (maxCBCapAmount > 0 ? (' (' + AppLabels.MAX + \" \" + Utilities.getMasterData().currency_code + maxCBCapAmount + ')') : '')}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <i className=\"icon-info m-l-sm\"></i>\n                                                    </OverlayTrigger>\n                                                }\n\n                                           </div>\n                                           <div className=\"payable-amount-value\">\n                                                <span className='confirmation'> \n                                                {\n                                                        CurrencyType == 2 ?\n                                                            <span \n                                                                // style={{ fontSize: ((JSON.stringify(FixturedContestItem.point_amount).length) > 5 ? 14 : 14) }} \n                                                                className={balanceAccToMaxPercent < EntryFee ? ' ' : ''}> \n                                                                <img className=\"img-coin\" alt='' src={Images.IC_COIN} />\n                                                                {parseInt(balanceAccToMaxPercent)}\n                                                            </span>\n                                                        :\n                                                        <span \n                                                            // style={{ fontSize: ((JSON.stringify(balanceAccToMaxPercent).length) > 5 ? 14 : 14) }}\n                                                            className={balanceAccToMaxPercent < EntryFee ? ' ' : ''}> \n                                                                {Utilities.getMasterData().currency_code}{parseInt(balanceAccToMaxPercent).toFixed(2)}\n                                                            </span>\n                                                    }\n                                                    </span>\n                                                    {/* {\n                                                        Constants.SELECTED_GAMET != Constants.GameType.Free2Play &&\n                                                        <>\n                                                        {\n                                                            CurrencyType == 2 ?\n                                                            <img className=\"img-coin\" alt='' src={Images.IC_COIN} />\n                                                            :\n                                                            Utilities.getMasterData().currency_code\n                                                        }\n                                                        </>\n                                                    }\n                                                    {Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? AppLabels.FREE : entryFeeAfterPromoCode == \"\" ? EntryFee : entryFeeAfterPromoCode}</span> */}\n\n                                           </div>\n                                       </div>\n                                       <div className='devider-line'></div>\n                                       \n                                   </Col>       \n                                    }\n                                      \n                                        <Col xs={12} style={{ padding: 0 }}>\n                                            <div className=\"fee-container\">\n                                                <div className='lable-text'>{AppLabels.ENTRY_FEE}</div>\n                                                <div className=\"payable-amount-value\">\n                                                    {/* {\n                                                        CurrencyType == 2 ?\n                                                            <span \n                                                                // style={{ fontSize: ((JSON.stringify(FixturedContestItem.point_amount).length) > 5 ? 14 : 14) }} \n                                                                className={balanceAccToMaxPercent < EntryFee ? ' ' : ''}> \n                                                                <img className=\"img-coin\" alt='' src={Images.IC_COIN} />\n                                                                {parseInt(balanceAccToMaxPercent)}\n                                                            </span>\n                                                        :\n                                                        <span \n                                                            // style={{ fontSize: ((JSON.stringify(balanceAccToMaxPercent).length) > 5 ? 14 : 14) }}\n                                                            className={balanceAccToMaxPercent < EntryFee ? ' ' : ''}> \n                                                                {Utilities.getMasterData().currency_code}{parseInt(balanceAccToMaxPercent).toFixed(2)}\n                                                            </span>\n                                                    } */}\n                                                    <span>\n                                                      {\n                                                        Constants.SELECTED_GAMET != Constants.GameType.Free2Play &&\n                                                        <>\n                                                        {\n                                                            CurrencyType == 2 ?\n                                                            <img className=\"img-coin\" alt='' src={Images.IC_COIN} />\n                                                            :\n                                                            Utilities.getMasterData().currency_code\n                                                        }\n                                                        </>\n                                                    }\n                                                    {Constants.SELECTED_GAMET == Constants.GameType.Free2Play ? AppLabels.FREE : entryFeeAfterPromoCode == \"\" ? EntryFee : entryFeeAfterPromoCode}</span>\n                                                </div>\n                                            </div>\n                                            <div className='devider-line'></div>\n                                        </Col>\n                                    </Row>\n                                    <Row style={{ padding: 0 }}>\n                                        <Col xs={12} style={{ padding: 0 }}>\n                                            <div className=\"fee-container \">\n                                                <div className=\"lable-text small-div\">{AppLabels.JOINING_TEAM_WITH}</div>\n                                                <div className=\"joining-team\">\n                                                    {\n                                                        this.state.Teams.length < 10 ?\n                                                            <Select\n                                                                onChange={this.handleTeamChange}\n                                                                options={lineUpMasterIdOfCreatedTeam != \"\" ? TeamsSortedArray : [...[{ label: AppLabels.CREATE_NEW_TEAM, value: AppLabels.CREATE_NEW_TEAM }], ...TeamsSortedArray]}\n                                                                className={\"basic-select-field\" + (lineUpMasterIdOfCreatedTeam != \"\" ? '' : ' add-create-team')}\n                                                                classNamePrefix=\"select\"\n                                                                value={selectedTeam}\n                                                                placeholder={AppLabels.SELECT_TEAM}\n                                                                isSearchable={false}\n                                                                isClearable={false}\n                                                                theme={(theme) => ({\n                                                                    ...theme,\n                                                                    borderRadius: 0,\n                                                                    colors: {\n                                                                        ...theme.colors,\n                                                                        primary25: '#fff',\n                                                                        primary: '#555555',\n                                                                    },\n                                                                })}\n                                                            />\n                                                            :\n                                                            <Select\n                                                                onChange={this.handleTeamChange}\n                                                                options={lineUpMasterIdOfCreatedTeam != \"\" ? TeamsSortedArray : TeamsSortedArray}\n                                                                className={\"basic-select-field\" + (lineUpMasterIdOfCreatedTeam != \"\" ? '' : '')}\n                                                                classNamePrefix=\"select\"\n                                                                value={selectedTeam}\n                                                                placeholder={AppLabels.SELECT_TEAM}\n                                                                isSearchable={false} isClearable={false}\n                                                                theme={(theme) => ({\n                                                                    ...theme,\n                                                                    borderRadius: 0,\n                                                                    colors: {\n                                                                        ...theme.colors,\n                                                                        primary25: '#fff',\n                                                                        primary: '#555555',\n                                                                    },\n                                                                })}\n                                                            />\n                                                    }\n                                                </div>\n                                            </div>\n                                            <div className='devider-line no-margin'></div>\n                                        </Col>\n                                    </Row>\n                                    {CurrencyType != 2 && EntryFee > 0 && !this.state.showPromoCode &&\n                                        this.ShowPromoCode()\n                                    }\n                                </React.Fragment>\n\n\n\n                            }\n                            {CurrencyType != 2 && EntryFee > 0 && this.state.showPromoCode && !isNetworkFantasyContest &&\n                                <div >\n                                    <FormGroup\n                                        className='input-label-center input-with-cancel'\n                                        controlId=\"formBasicText\"\n                                    >\n                                        {promoCode != '' && <label className=\"input-label\">{AppLabels.ENTER_PROMO_CODE}</label>}\n                                        <span className=\"promocode-input\">\n                                            {\n                                                isChanged ? <input\n                                                    id='promoCode'\n                                                    name='promoCode'\n                                                    placeholder={AppLabels.ENTER_PROMO_CODE}\n                                                    type='text'\n                                                    value={promoCode}\n                                                    maxLength={10}\n                                                    onChange={this.handleChange}\n                                                    disabled={isDisabled}\n                                                /> : <div className='input-label-center input-with-cancel'\n                                                    styles={inputStyle}\n                                                    />\n                                            }\n                                            {isDisabled &&\n                                                <i onClick={() => this.removePromoCode()} className=\"icon-close\"></i>\n                                            }\n                                        </span>\n\n                                    </FormGroup>\n                                    {\n                                        !isNetworkFantasyContest &&\n                                        <div className=\"text-center\">\n                                        <Button disabled={promoCode.length < 4 ? true : false} onClick={() => this.callGetPromoCodeDetailApi(promoCode)} className=\"btn btn-success btn-rounded promo-btn\">{AppLabels.APPLY}</Button>\n                                    </div>\n                                    }\n                                    \n                                </div>}\n                            <div className=\"text-center promocode-congrats\">\n                                {isDisabled &&\n                                    <React.Fragment>\n                                        {AppLabels.PROMO_TEXT1} \n                                        <span className=\"teal-color text-bold\">\n                                            {Utilities.getMasterData().currency_code}\n                                            {(parseFloat(EntryFee) - parseFloat(entryFeeAfterPromoCode)).toFixed(2)}\n                                        </span> \n                                        {AppLabels.PROMO_TEXT2} \n                                        <span className=\"teal-color text-bold\">\n                                            {Utilities.getMasterData().currency_code}{entryFeeAfterPromoCode}\n                                        </span>.\n                                        </React.Fragment>\n                                }\n                                {!isDisabled &&\n                                    <React.Fragment>\n                                        <span className=\"text-danger\">\n                                            {this.state.promoCodeErrorMsg}\n                                        </span>\n                                    </React.Fragment>\n                                }\n                            </div>\n\n                        </Modal.Body>\n                        <Modal.Footer className='custom-modal-footer dual-btn-footer'>\n                            {refreshAddFundsBtn &&\n                                <a href className={\"single-text\" + (clickOnce && selectedTeam != '' ? ' click-disabled' : '')} onClick={() => {\n                                    this.setState({ clickOnce: selectedTeam != '' }, () => {\n                                        if (Constants.OnlyCoinsFlow == 1 || Constants.OnlyCoinsFlow == 2) {\n                                            var currentEntryFee = 0;\n                                            currentEntryFee = this.state.entryFeeOfContest;\n                                            if (\n                                                (FixturedContestItem.currency_type == 2 && (parseInt(currentEntryFee) <= parseInt(balanceAccToMaxPercent))) ||\n                                                (FixturedContestItem.currency_type != 2 && (parseFloat(currentEntryFee) <= parseFloat(balanceAccToMaxPercent)))\n                                            ) {\n                                                ConfirmationClickEvent(this.state, context);\n\n                                            }\n                                            else {\n                                                if (FixturedContestItem.currency_type == 2) {\n                                                    if (Constants.EnableBuyCoin) {\n                                                        this.goToBuyCoins()\n                                                    }\n                                                }\n                                                else {\n                                                    ConfirmationClickEvent(this.state, context);\n\n                                                }\n                                            }\n\n                                        }\n                                        else {\n                                            ConfirmationClickEvent(this.state, context);\n\n                                        }\n                                        setTimeout(() => {\n                                            this.setState({ clickOnce: false })\n                                        }, 3000);\n\n                                    });\n                                }}> \n                                      {\n                                        ( (CurrencyType != 2 && (parseFloat(balanceAccToMaxPercent) >= parseFloat(entryFeeOfContest))) \n                                        || \n                                        (CurrencyType == 2 && (parseInt(balanceAccToMaxPercent) >= parseInt(entryFeeOfContest)))) ? \n                                            AppLabels.JOIN_CONTEST : \n                                            Constants.SELECTED_GAMET != Constants.GameType.Free2Play ? \n                                                (CurrencyType == 2 ? AppLabels.ADD_COIN_AND_JOIN_CONTEST : AppLabels.ADD_FUND_JOIN_CONTEST)\n                                                : \n                                                AppLabels.JOIN_CONTEST \n                                    }\n\n                                </a>\n                            }\n                        </Modal.Footer>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/SwitchTeamModal.jsx",["2903","2904","2905","2906","2907","2908","2909","2910","2911","2912"],"\nimport React from 'react';\nimport { Modal, FormGroup } from 'react-bootstrap';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport Select from 'react-select';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { inputStyle } from '../helper/input-style';\nimport {Utilities} from '../Utilities/Utilities';\nimport { AppSelectedSport } from '../helper/Constants';\nimport { getSwitchTeamList, switchTeamContest,getSwitchTeamListNF } from '../WSHelper/WSCallings';\n\n\n// var hasMore = false;\nexport default class SwitchTeam extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n            sportsSelected: AppSelectedSport,\n            teamData: '',\n            fixtureData: '',\n            contestData: '',\n            teamList: [],\n            selectedTeam: '',\n        };\n    }\n\n    setData(fixtureData, contestData, teamData) {\n        this.setState({ fixtureData: fixtureData, contestData: contestData, teamData: teamData })\n\n        this.getUserLineUpListApi(fixtureData, contestData, teamData);\n    }\n\n    getUserLineUpListApi(fixtureData, contestData, teamData) {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"contest_id\": contestData.contest_id,\n        }\n\n        this.setState({ isLoaderShow: true })\n        if(this.state.contestData.is_network_contest == 1){\n            getSwitchTeamListNF(param).then((responseJson) => {\n                this.setState({ isLoaderShow: false })\n                if (responseJson.response_code == WSC.successCode) {\n                    this.processTeamList(responseJson.data, teamData)\n                }\n            })\n        }\n        else{\n            getSwitchTeamList(param).then((responseJson) => {\n                this.setState({ isLoaderShow: false })\n                if (responseJson.response_code == WSC.successCode) {\n                    this.processTeamList(responseJson.data, teamData)\n                }\n            })\n        }\n    }\n\n    submitSwitch() {\n        if (this.state.selectedTeam != '') {\n            let param = {\n                \"sports_id\": AppSelectedSport,\n                \"contest_id\": this.state.contestData.contest_id,\n                \"lineup_master_id\": this.state.selectedTeam.lineup_master_id,\n                \"lineup_master_contest_id\": this.state.teamData.lineup_master_contest_id,\n            }\n\n            this.setState({ isLoaderShow: true })\n            switchTeamContest(param).then((responseJson) => {\n                this.setState({ isLoaderShow: false })\n                if (responseJson.response_code == WSC.successCode) {\n\n                    Utilities.showToast(responseJson.message, 5000);\n                    this.props.IsSwitchTeamModalHide(true);\n\n                }\n            })\n        }\n    }\n\n    createTeamAndJoin = () => {\n        WSManager.clearLineup()\n        let urlData = this.state.fixtureData;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        dateformaturl = dateformaturl.getDate() + '-' + (dateformaturl.getMonth() + 1) + '-' + dateformaturl.getFullYear();\n        if(urlData.home){\n            this.props.mHistory.push({ pathname: '/lineup/' + urlData.home.toLowerCase() + \"-vs-\" + urlData.away.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: this.state.contestData, LobyyData: this.state.fixtureData, rootDataItem: this.state.fixtureData, ifFromSwitchTeamModal: true, resetIndex: 1,lineup_master_contest_id:this.state.teamData.lineup_master_contest_id } })\n        }\n        else{\n            let pathurl = Utilities.replaceAll(urlData.collection_name,' ','_');\n            this.props.mHistory.push({ pathname: '/lineup/' + pathurl.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: this.state.contestData, LobyyData: this.state.fixtureData, rootDataItem: this.state.fixtureData, ifFromSwitchTeamModal: true, resetIndex: 1,lineup_master_contest_id:this.state.teamData.lineup_master_contest_id } })\n        }\n    }\n\n    processTeamList(contestData, teamData) {\n        let tempTeamList = [];\n        if(contestData.length<9){\n            tempTeamList = [{\n                label: AppLabels.CREATE_NEW_TEAM,\n                value: '',\n            }];\n        }\n       \n\n        // let tempTeamList = [{\n        //     label: 'Create New Team',\n        //     value: '',\n        // }];\n\n        contestData.forEach(function (team) {\n            if (team.lineup_master_id != teamData.lineup_master_id) {\n                let tempItem = {};\n                tempItem['label'] = team.team_name;\n                tempItem['value'] = team;\n                tempTeamList.push(tempItem);\n            }\n        });\n        this.setState({ teamList: tempTeamList })\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    handleTeamChange = (team) => {\n        if (team.value == \"\") // Empty value for Create New team\n        {\n            this.createTeamAndJoin();\n        }\n        else {\n            this.setState({ selectedTeam: team.value })\n        }\n    }\n\n    render() {\n        const { IsSwitchTeamModalShow, IsSwitchTeamModalHide } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsSwitchTeamModalShow} onHide={IsSwitchTeamModalHide} bsSize=\"sm\" className=\"switch-team-modal center-modal\">\n                            <Modal.Header>\n                                <Modal.Title>\n                                    <div className=\"match-heading display-table\">\n                                        <div className=\"display-table-cell v-mid text-center switch-team-title\">\n                                            {AppLabels.SWITCH_TEAM}\n                                        </div>\n                                    </div>\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"current-team-wrapper\">\n                                    <h2>{AppLabels.YOUR_CURRENT_TEAM}</h2>\n                                    <p>{this.state.teamData.team_name}</p>\n                                </div>\n                                <div className=\"\">\n                                    <FormGroup className='input-label-center input-transparent select-state-field switch-team-select m-t-20 m-b-20'>\n                                        <div className=\"select-state \">\n                                            <label style={inputStyle.label} className=\"text-center\">{AppLabels.SWITCH_WITH}</label>\n                                            <div className=\"stateStyle switch-sport-style\">\n                                                <Select\n                                                    onChange={this.handleTeamChange}\n                                                    classNamePrefix=\"secondary\"\n                                                    options={this.state.teamList}\n                                                    value={this.state.selectedState}\n                                                    arrowRenderer={this.arrowRenderer}\n                                                    placeholder=\"--\"\n                                                    isSearchable={true}\n                                                    isClearable={false}\n                                                    theme={(theme) => ({\n                                                        ...theme,\n                                                        borderRadius: 0,\n                                                        colors: {\n                                                            ...theme.colors,\n                                                            primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                        },\n                                                    })}\n                                                />\n                                            </div>\n                                            <i className=\"icon-switch-team\"></i>\n                                            <span className=\"select-arr\"><i className=\"icon-arrow-down\"></i></span>\n                                            <div className=\"state-border col-sm-12\"></div>\n                                        </div>\n                                    </FormGroup>\n                                </div>\n                            </Modal.Body>\n                            <Modal.Footer onClick={() => this.submitSwitch()} className={'custom-modal-footer ' + (this.state.selectedTeam == '' ? 'disabled' : '')}>\n                                <a className={\"btn btn-primary \" + (this.state.selectedTeam == '' ? 'disabled' : '')}>{AppLabels.SUBMIT}</a>\n                            </Modal.Footer>\n                        </Modal>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\n","/var/www/html/framework/frontend/src/Modals/ShareContestModal.jsx",["2913","2914","2915","2916","2917","2918","2919","2920","2921","2922","2923","2924","2925","2926","2927","2928","2929"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { FacebookShareButton, WhatsappShareButton, EmailShareButton } from 'react-share';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { Utilities } from '../Utilities/Utilities';\nimport { getContestShareCode, getShortURL, saveShortURL,getContestShareCodeNF } from '../WSHelper/WSCallings';\nimport * as Constants from \"../helper/Constants\";\n\nvar userProfileDataFromLS = null;\nvar referalCode = \"\";\nvar base_url = \"\";\nexport default class ShareContestModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            shortUrls: [],\n            FixturedContest: this.props.FixturedContestItem,\n            contestCode: \"\",\n            copied: false,\n            shareURL: '',\n            showNotification: false,\n            notification_message: '',\n        };\n        userProfileDataFromLS = WSManager.getProfile();\n    }\n\n    componentDidMount() {\n        this.callGetShortenUrlApi();\n        base_url = WSC.baseURL;\n        this.createAndSetUrls();\n\n    }\n\n    componentWillMount() {\n        referalCode = WSManager.getUserReferralCode(); // referal_code\n    }\n\n\n    GetInviteCodeApi() {\n        let param = {\n            \"contest_id\": this.state.FixturedContest.contest_id\n        }\n        if(this.state.FixturedContest && this.state.FixturedContest.is_network_contest == 1){\n            getContestShareCodeNF(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.setState({\n                        contestCode: responseJson.data\n                    })\n                }\n            })\n        }\n        else{\n            getContestShareCode(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.setState({\n                        contestCode: responseJson.data\n                    })\n                }\n            })\n        }\n    }\n\n    formatedText() {\n        return AppLabels.Hi + ', \\n ' + AppLabels.JOIN + '  ' + this.state.FixturedContest.contest_name + ' ' + AppLabels.contest_and_win_real_cash + ' ' + WSC.AppName + \"\\n \" + AppLabels.League_Url + \" : \\n \"\n            + this.state.shareURL + \" \\n  \\n  \" + AppLabels.Cheers + \",\" + '\\n' + AppLabels.Team + \" \" + WSC.AppName;\n    }\n\n\n    callGetShortenUrlApi() {\n        let param = {\n            'url_type': \"2\",\n            'url_type_id': this.state.FixturedContest.contest_id,\n        }\n\n        getShortURL(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    shortUrls: responseJson.data\n                })\n\n                if (responseJson.data.length > 0) {\n                    this.createAndSetUrls(responseJson.data);\n                } else {\n                    this.callGetShortenUrlDataObjIsEmpty();\n                }\n                this.GetInviteCodeApi()\n            }\n        })\n    }\n\n    callGetShortenUrlDataObjIsEmpty() {\n        var urlsArray = []\n\n        var sourcetype = [\"1\", \"2\", \"3\", \"4\", \"6\"]\n        var i;\n        for (i = 0; i < 5; i++) {\n            let param = {\n                \"url_type\": \"2\",\n                \"url\": \"?ref=\" + referalCode + \"&source_type=\" + sourcetype[i] + \"&affiliate_type=\" + 1,\n                \"source_type\": sourcetype[i],\n                'url_type_id': this.state.FixturedContest.contest_id,\n            }\n            urlsArray.push(param)\n        }\n\n        let param = {\n            \"url_data\": urlsArray\n        }\n\n        saveShortURL(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    shortUrls: responseJson.data\n                })\n            }\n        })\n    }\n\n    createAndSetUrls() {\n        let id = this.state.FixturedContest.contest_unique_id;\n        let mURL=''\n        if(Constants.SELECTED_GAMET == Constants.GameType.MultiGame){\n            mURL = base_url + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/multigame-contest/\" + id;\n        }\n        else{\n            if(this.state.FixturedContest.is_network_contest && this.state.FixturedContest.is_network_contest == 1){\n                mURL = base_url + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/contest/\" + id;\n            }\n            else{\n                mURL = base_url + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/contest/\" + id;\n            }\n        }\n        // ?nf=true\n        var shareURL\n       if(this.state.FixturedContest.is_network_contest && this.state.FixturedContest.is_network_contest == 1){\n        shareURL = mURL + \"?referral=\" + referalCode + \"&nf=\" + 1 ;\n\n       }\n       else{\n        shareURL = mURL + \"?referral=\" + referalCode;\n\n       }\n\n       if(Constants.SELECTED_GAMET){\n        shareURL = shareURL + \"&sgmty=\" +  btoa(Constants.SELECTED_GAMET)    \n       }\n        this.setState({ shareURL: shareURL });\n    }\n\n    getIOSWhatsappURL = () => {\n        let id = this.state.FixturedContest.contest_unique_id;\n        let mURL=''\n        if(Constants.SELECTED_GAMET == Constants.GameType.MultiGame){\n            mURL = base_url + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/multigame-contest/\" + id;\n        }\n        else{\n            mURL = base_url + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/contest/\" + id;\n        }\n        var shareURL = mURL + \"?referral=\" + referalCode;\n        return shareURL;\n    }\n\n    onCopyCode = () => {\n        this.showCopyToast(AppLabels.MSZ_COPY_CODE);\n        this.setState({ copied: true })\n    }\n\n    onCopyLink = () => {\n        this.showCopyToast(AppLabels.Link_has_been_copied);\n        this.setState({ copied: true })\n    }\n\n    showCopyToast = (message) => {\n        Utilities.showToast(message, 2000)\n    }\n\n    callNativeShare(type, url, detail) {\n        let data = {\n            action: 'social_sharing',\n            targetFunc: 'social_sharing',\n            type: type,\n            url: url,\n            detail: detail\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    getEmailShareContent(contestCode) {\n        if (window.ReactNativeWebView) {\n            if (this.state.shareURL != '') {\n                let shareLink = WSManager.getIsIOSApp() ? this.state.shareURL : encodeURIComponent(this.state.shareURL);\n                let shareText =\n                    AppLabels.Your_Friend + ' ' + userProfileDataFromLS.user_name\n                    + ' ' + AppLabels.has_referred_you_on + ' ' + WSC.AppName +\n                    \", \" + AppLabels.please_join_and_earn_prizes_text + \" : \\n\"\n                    + shareLink + \" \\n \" + AppLabels.or + \" \\n\" + AppLabels.Join_through_the_following_text + \" \" +\n                    WSManager.getUserReferralCode() + \" \" + AppLabels.and_contest_code + \" \" + contestCode + '\\n\\n' + AppLabels.Cheers + \",\" + '\\n' + AppLabels.Team + \" \" + WSC.AppName\n                return shareText\n            }\n            return ''\n        }\n        else {\n            let shareText =\n            AppLabels.Your_Friend + ' ' + userProfileDataFromLS.user_name\n            + ' ' + AppLabels.has_referred_you_on + ' ' + WSC.AppName +\n            \", \" + AppLabels.please_join_and_earn_prizes_text + \" : \\n\"\n            + this.state.shareURL + \" \\n \" + AppLabels.or + \" \\n\" + AppLabels.Join_through_the_following_text + \" \" +\n            WSManager.getUserReferralCode() + \" \" + AppLabels.and_contest_code + \" \" + contestCode + '\\n\\n' + AppLabels.Cheers + \",\" + '\\n' + AppLabels.Team + \" \" + WSC.AppName\n            return shareText\n\n        }\n    }\n\n    render() {\n\n        const { IsShareContestModalShow } = this.props;\n\n        const {\n            contestCode\n        } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={IsShareContestModalShow}\n                        onHide={this.props.IsShareContestModalHide}\n                        dialogClassName=\"custom-modal thank-you-modal\"\n                        className=\"center-modal\"\n                    >\n                        <div className=\"social-linking\">\n                            {\n                                this.state.showNotification &&\n                                <div className='copy-notification'>\n                                    <span>{this.state.notification_message}</span>\n                                </div>\n                            }\n                            <div className=\"link-heading\">{AppLabels.INVITE_YOUR_FRIENDS_VIA}</div>\n                            <ul className=\"social-icons\">\n                                <li>\n                                    <CopyToClipboard onCopy={this.onCopyLink} text={this.state.shareURL} className=\"social-circle icon-link\">\n                                        <i className=\"icon-link\"></i>\n                                    </CopyToClipboard>\n                                    <label>{AppLabels.INVITE_LINK}</label>\n                                </li>\n                                <li>\n                                {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-facebook\" onClick={() => this.callNativeShare('facebook', this.state.shareURL, AppLabels.YOUR_FRIEND_CONTEST + ' ' + userProfileDataFromLS.user_name\n                                            + ' ' + AppLabels.has_referred_you_on_contest  +\n                                            \" \" + AppLabels.please_join_and_earn_prizes_text_contest + \" : \\n\"\n                                            + this.state.shareURL + \" \\n \" + AppLabels.OR_CONTEST + \" \\n\" + AppLabels.Join_through_the_following_text_contest + \" \" +\n                                            WSManager.getUserReferralCode() + \" \" + AppLabels.and_contest_code_contest + \" \" + contestCode + \" \"+AppLabels.MEDIUM_ADD + '\\n\\n' + AppLabels.Cheers + \",\" + '\\n' + AppLabels.Team + \" \" + WSC.AppName)}>\n                                            <label>{AppLabels.INVITE_FB}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <FacebookShareButton className=\"social-circle icon-facebook\" url={this.state.shareURL} quote={\n                                                AppLabels.YOUR_FRIEND_CONTEST + ' ' + userProfileDataFromLS.user_name\n                                                + ' ' + AppLabels.has_referred_you_on_contest + \n                                                \" \" + AppLabels.please_join_and_earn_prizes_text_contest + \" : \\n\"\n                                                + this.state.shareURL + \" \\n \" + AppLabels.OR_CONTEST + \" \\n\" + AppLabels.Join_through_the_following_text_contest + \" \" +\n                                                WSManager.getUserReferralCode() + \" \" + AppLabels.and_contest_code_contest + \" \" + contestCode + \" \"+AppLabels.MEDIUM_ADD+ '\\n\\n' + AppLabels.Cheers + \",\" + '\\n' + AppLabels.Team + \" \" + WSC.AppName\n                                            }\n                                            />\n                                            <label>{AppLabels.INVITE_FB}</label>\n                                        </React.Fragment>\n                                    }\n\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-whatsapp\" onClick={() => this.callNativeShare('whatsapp', this.state.shareURL, AppLabels.YOUR_FRIEND_CONTEST + ' ' + userProfileDataFromLS.user_name\n                                        + ' ' + AppLabels.has_referred_you_on_contest  +\n                                        \" \" + AppLabels.please_join_and_earn_prizes_text_contest + \" : \\n\"\n                                            + (WSManager.getIsIOSApp() ? this.getIOSWhatsappURL() : this.state.shareURL) + \" \\n \" + AppLabels.OR_CONTEST + \" \\n\" + AppLabels.Join_through_the_following_text_contest + \" \" +\n                                            WSManager.getUserReferralCode() + \" \" + AppLabels.and_contest_code_contest + \" \" + contestCode + \" \"+AppLabels.MEDIUM_ADD + '\\n\\n' + AppLabels.Cheers + \",\\n\" + AppLabels.Team + \" \" + WSC.AppName)}>\n                                            <label>{AppLabels.INVITE_WHATSAPP}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <WhatsappShareButton className=\"social-circle icon-whatsapp\"\n                                                url={\n                                                    AppLabels.YOUR_FRIEND_CONTEST + ' ' + userProfileDataFromLS.user_name\n                                                    + ' ' + AppLabels.has_referred_you_on_contest + ' '  +\n                                                    \" \" + AppLabels.please_join_and_earn_prizes_text_contest + \" : \\n\"\n                                                    + this.state.shareURL + \" \\n \" + AppLabels.OR_CONTEST + \" \\n\" + AppLabels.Join_through_the_following_text_contest + \" \" +\n                                                    WSManager.getUserReferralCode() + \" \" + AppLabels.and_contest_code_contest + \" \" + contestCode + \" \"+AppLabels.MEDIUM_ADD + '\\n\\n'+ AppLabels.Cheers + \",\" + '\\n' + AppLabels.Team + \" \" + WSC.AppName\n                                                } />\n                                            <label>{AppLabels.INVITE_WHATSAPP}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                                {/* <li>\n                                    <EmailShareButton subject={WSC.AppName + \" - \" + AppLabels.Your_friend_has_shared}\n                                        body={\n                                            this.getEmailShareContent(contestCode)\n                                        }\n                                        className=\"social-circle icon-email\" quote={\"\"} />\n                                    <label>{AppLabels.INVITE_EMAIL}</label>\n                                </li> */}\n                            </ul>\n                           \n                  <div className=\"referal-code\">\n                                <div className=\"referal-body\">\n                                    <div className='share-code-style'>{AppLabels.SHARE_CONTEST_CODE}</div>\n\n\n                                    <CopyToClipboard onCopy={this.onCopyCode} text={contestCode}>\n                                        <div>\n                                            <div className=\"copy-text\">{AppLabels.COPY}</div>\n                                            <i className=\"icon-copy-file\"> <h1>{contestCode}</h1> </i>\n                                        </div>\n                                    </CopyToClipboard>\n\n                                </div>\n                                <div className=\"referal-footer\">\n                                    {AppLabels.TELL_YOUR_FRIENDS_JOIN_CONTEST}\n                                </div>\n                            </div>\n                        </div>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/MyContestTeamView.jsx",["2930","2931","2932","2933","2934"],"import React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport Images from '../components/images';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities } from '../Utilities/Utilities';\n\n\nexport default class TeamViewModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false\n        };\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    render() {\n\n\n        const { IsTeamViewShow, IsTeamViewHide } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        {/* <Button bsStyle=\"primary\" bsSize=\"lg\" onClick={this.handleShow}> Launch demo modal </Button> */}\n\n                        <Modal show={IsTeamViewShow} onHide={IsTeamViewHide} bsSize=\"large\" dialogClassName=\"modal-full-screen\">\n                            <Modal.Header closeButton>\n                                <Modal.Title>\n                                    <a onClick={IsTeamViewHide} className=\"modal-close\">\n                                        <i className=\"icon-close\"></i>\n                                    </a>\n                                    <div className=\"match-heading text-center\">\n                                        <h4 className=\"header-title\">WinFantasy</h4>\n                                    </div>\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"lineup-header-action with-modal\">\n                                    <ul >\n                                        <li><a><i className=\"icon-ground\"></i></a></li>\n                                        <li><a><i className=\"icon-listview\"></i></a></li>\n                                    </ul>\n                                    <div className=\"lineup-header-action-right\">\n                                        <p className=\"multi-txt\"><b>3</b> <span>/400 Rank</span></p>\n                                        <p className=\"multi-txt\"><b>2,000</b> <span>Pts</span> </p>\n                                    </div>\n                                </div>\n                                <div className=\"field-view cricket-ground\">\n                                    <ul className=\"player-field-list\">\n                                        <li>\n                                            <a className=\"btn-remove-player\"><i className=\"icon-remove\"></i></a>\n                                            <img src={Images.TEAM_JERSY} alt=\"\" className />\n                                            <div className=\"player-name\">K.S.Rang</div>\n                                            <div className=\"player-postion\">WK | CSK | {Utilities.getMasterData().currency_code + \" \"}8.5</div>\n                                        </li>\n                                        <li>\n                                            <a className=\"btn-remove-player\"><i className=\"icon-remove\"></i></a>\n                                            <img src={Images.TEAM_JERSY} alt=\"\" className />\n                                            <div className=\"player-name\">K.S.Rang</div>\n                                            <div className=\"player-postion\">WK | CSK | {Utilities.getMasterData().currency_code + \" \"}8.5</div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </Modal.Body>\n                        </Modal>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\n","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/FreeToPlayFixtureContest.jsx",["2935","2936","2937","2938","2939","2940"],"import React from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport { MatchCard, MomentDateComponent } from \"../../Component/CustomComponent\";\nimport * as Constants from \"../../helper/Constants\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport MiniLeagueCard from './MiniLeagueCard'\n\n\n\nexport default class FreeToPlayFixtureContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeSlider = this.changeSlider.bind(this)\n\n        this.state = {\n            allowCollection: Utilities.getMasterData().allow_collection,\n            slideIndex: 0\n        }\n    }\n\n    componentWillMount = () => {\n        WSManager.setPickedGameType(Constants.GameType.Free2Play)\n    }\n    FixtureListFunction = (item) => {\n        return (\n            <div className=\"collection-list\">\n                <div className=\"display-table\">\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                        <div className=\"team-block\">\n                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                            <span className=\"verses\">{AppLabels.VS}</span>\n                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                        </div>\n                        <div className=\"match-timing\">\n                            {\n                                Utilities.showCountDown(item) ?\n                                    <div className=\"countdown time-line\">\n                                        {item.game_starts_in && <CountdownTimer\n                                            deadlineTimeStamp={item.game_starts_in}\n                                            timerCallback={this.props.timerCallback}\n                                        />}\n                                    </div> :\n                                    <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} /></span>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    changeSlider(e) {\n        if (this.sliderWrapper.innerSlider.state.currentSlide > 1) {\n            setTimeout(() => {\n                this.sliderWrapper.slickGoTo(1);\n            }, 10);\n        }\n    }\n\n    gotoDetails = (ContestListItem, event) => {\n        this.props.gotoDetails(ContestListItem, event);\n    }\n    \n    gotoLeaderBoard = (ContestListItem, event) => {\n        this.props.gotoLeaderBoard(ContestListItem, event);\n    }\n     render() {\n        const { ContestListItem, indexKey, timerCallback,isFromFreeToPlayLandingPage } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <li key={indexKey} style={{position: 'relative'}}>\n                        {\n                            (ContestListItem.playing_announce == \"1\" || ContestListItem.delay_minute > \"0\") &&\n                            <div className=\"match-delay-info\">\n                                    {\n                                        ContestListItem.playing_announce == \"1\" && \n                                        <span >{AppLabels.LINEUP_OUT}</span>\n                                    }\n                                    {\n                                        ContestListItem.playing_announce ==\"1\" && ContestListItem.delay_minute \n                                        > \"0\" &&\n                                            <span className=\"seperator-class\"> | </span>\n                                    }\n                                    {\n                                        ContestListItem.delay_minute > \"0\" &&\n                                        <span>\n                                            <OverlayTrigger trigger={['click']} placement=\"left\" overlay={\n                                                <Tooltip id=\"tooltip\" className={\"tooltip-featured\" + (ContestListItem.delay_message != '' ? ' display-tooltip' : ' hide-tooltip')}>\n                                                    <strong> {ContestListItem.delay_message} </strong>\n                                                </Tooltip>\n                                            }>\n                                            <span  onClick={(e)=>e.stopPropagation()} className=\"cursor-pointer\">{AppLabels.DELAYED} {ContestListItem.delay_text}</span>\n                                            </OverlayTrigger>\n                                        </span>\n                                    }\n                                </div>\n\n                            \n                        }\n                        {\n                           ContestListItem.obj_type && ContestListItem.obj_type ==\"fixture\" ?\n                           <MatchCard item={ContestListItem} isFromFreeToPlayLandingPage={isFromFreeToPlayLandingPage} gotoDetails={this.gotoDetails} gotoLeaderBoard={this.gotoLeaderBoard} fixtureCardLg={true} timerCallback={timerCallback}/>\n                           :ContestListItem.obj_type && ContestListItem.obj_type ==\"league\" ?\n                           <MiniLeagueCard item={ContestListItem} isFromFreeToPlayLandingPage={isFromFreeToPlayLandingPage} gotoDetails={this.gotoDetails} gotoLeaderBoard={this.gotoLeaderBoard} fixtureCardLg={true} timerCallback={timerCallback}/>\n                           :\n                           <MatchCard item={ContestListItem} gotoDetails={this.gotoDetails} gotoLeaderBoard={this.gotoLeaderBoard} fixtureCardLg={true} timerCallback={timerCallback}/>\n\n\n\n                        }\n                    </li>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/HallofFameModal.jsx",["2941","2942","2943","2944","2945","2946","2947","2948","2949"],"import React from 'react';\nimport { Modal, Button, Label } from 'react-bootstrap';\nimport Images from '../../components/images';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport * as AppLabels from \"../../helper/AppLabels\";\n\nexport default class HallofFameModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            show: false,\n        };\n    }\n\n\n    showLeageueDetail= (status,data, event) => {\n         event.stopPropagation();\n        this.props.IsCollectionInfoHide(status,data)\n    }\n\n    render() {\n        const { IsCollectionInfoShow, IsCollectionInfoHide } = this.props;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsCollectionInfoShow} onHide={() => IsCollectionInfoHide()} bsSize=\"large\" dialogClassName=\"how-to-play-modal\" className=\"center-modal\">\n                            <Modal.Header closeButton>\n                            </Modal.Header>\n                            <Modal.Body>\n\n                                <div >\n                                    <img  onClick={(event) => event.stopPropagation()} src={Images.BG_HALL_OF_FAME} className='modal-celebrate'></img>\n                                    <div className=\"text-center\">\n                                        <div className=\"hall-of-fame-info\" >\n                                            <img style={{marginTop:'-15px'}} src={Images.HALL_OF_FAME_BIG_ICON} ></img>\n                                            <div className=\"hall-of-fame-title\">\n                                                {AppLabels.WHAT_IS_HALL_OF_FAME} </div>\n                                            <div className=\"hall-of-fame-detail\">\n                                                {AppLabels.HALL_OF_FAME_JOIN_CONTEST} </div>\n                                            <div className=\"hall-of-sub-fame-detail\">\n                                                {AppLabels.LEAGUE_END} </div>\n                                            <div className='level-open-right'>\n                                                <img src={Images.RIGHT_SHAPE} className='bg-shape-open-right'></img>\n                                                <div className='parallelogram-outer inner-d'>\n\n                                                </div>\n                                                <div className='pos-abs right-side'>\n                                                    <Label style={{ color: '#333333', marginLeft: \"5px\" }}>{AppLabels.PLAY_THE} {this.props.item.mini_league_name} </Label>\n                                                    <img hspace=\"15\" src={Images.HOF1}></img>\n                                                </div>\n                                            </div>\n                                            <div className='level-open-down'>\n                                                <img src={Images.LEFT_SHAPE} className='bg-shape-open-left do-margin'></img>\n                                                <div className='parallelogram-outer-r inner-d'>\n                                                </div>\n                                                <div className='pos-abs-center left-side'>\n                                                    <img hspace=\"15\" src={Images.HOF2}></img>\n                                                    <Label style={{ color: '#333333', marginRight: \"35px\" }}>{AppLabels.HALL_OF_FAME_GATHER_POINTS} </Label>\n\n                                                </div>\n                                            </div>\n                                            <div className='level-open-right-m'>\n                                                <img src={Images.RIGHT_SHAPE} className='bg-shape-open-right do-margin'></img>\n                                                <div className='parallelogram-outer inner-d'>\n\n                                                </div>\n                                                <div className='pos-abs right-side'>\n                                                    <Label style={{ color: '#333333', marginLeft: \"35px\" }}>{AppLabels.HALL_OF_FAME_WIN_PRIZES} </Label>\n                                                    <img hspace=\"15\" src={Images.HOF3}></img>\n                                                </div>\n\n                                            </div>\n                                        </div>\n\n                                        <div className=\"league_sheduled_btn text-center mt50\" onClick={(event) =>this.showLeageueDetail(true,this.props.item,event) }>\n                                            <div className=\"button button-primary-rounded padding-more height-b\">\n                                                {AppLabels.HALL_OF_FAME_VIEW_SCHEDULED}</div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                            </Modal.Body>\n                        </Modal>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/views/FieldView.jsx",["2950","2951","2952","2953","2954","2955","2956","2957","2958","2959","2960","2961","2962","2963","2964","2965","2966","2967","2968","2969","2970","2971","2972","2973","2974","2975","2976","2977","2978","2979","2980","2981","2982","2983","2984","2985","2986","2987","2988","2989","2990","2991","2992","2993","2994","2995","2996","2997","2998","2999","3000","3001","3002","3003","3004","3005","3006","3007","3008","3009","3010","3011","3012","3013","3014","3015","3016","3017","3018","3019","3020","3021","3022","3023","3024","3025","3026","3027","3028","3029","3030","3031","3032","3033","3034","3035","3036","3037","3038"],"import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport ls from 'local-storage';\nimport Images from '../components/images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport MyAlert from '../Modals/MyAlert';\nimport { Utilities, _isUndefined, _Map, _isEmpty, _cloneDeep } from '../Utilities/Utilities';\nimport { SportsIDs } from \"../JsonFiles\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../helper/MetaData\";\nimport { AppSelectedSport, IS_BRAND_ENABLE, SELECTED_GAMET,GameType } from '../helper/Constants';\nimport { getUserLineUpDetail, getLineupWithScore } from '../WSHelper/WSCallings';\n\nvar i = 0;\nexport default class FiledView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            profileDetail: ls.get('profile') || '',\n            userName: '',\n            isSearchable: false,\n            MasterData: [],\n\n            LobyyData: [],\n\n            lineupArr: [],\n\n            allPosition: [],\n\n            maxPlayers: [],\n\n            isFieldView: true,\n\n            FixturedContest: [],\n\n            isFrom: '',\n\n            isEditLineup: false,\n\n            TeamMyContestData: '',\n\n            collection_master_id: '',\n\n            rootDataItem: [],\n\n            myContestData: '',\n\n            isFromtab: '',\n\n            isFromRoster: '',\n\n            showResetAlert: false,\n            tempLineupArr: [],\n            homePlayerCount: 0,\n            awayPlayerCount: 0,\n\n            isFromMyTeams: false,\n\n            ifFromSwitchTeamModal: false,\n\n            resetIndex: -1,\n\n            teamName: this.props.location ? this.props.location.state.team_name : '',\n            allowCollection: Utilities.getMasterData().allow_collection,\n        }\n\n        i = 0\n    }\n\n    componentWillMount() {\n        this.setPropsVar();\n        if(SELECTED_GAMET != GameType.MultiGame &&  SELECTED_GAMET != GameType.Free2Play){\n            WSManager.setPickedGameType(GameType.DFS);\n          }\n        }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.userName != ''){\n            this.setState({\n                userName: nextProps.userName\n            })\n        }\n        if (!this.props.isFromUpcoming) {\n            if (nextProps.MasterData != this.state.MasterData) {\n                this.setPropsVar();\n            }\n        }\n        else {\n            this.callSetLineup(nextProps);\n        }\n    }\n\n\n    setPropsVar() {\n        \n        let propsData = '';\n        if (this.props.location && this.props.location.state) {\n            propsData = this.props.location.state;\n        }\n        else {\n            propsData = this.props;\n        }\n\n\n        let { from, MasterData, LobyyData, SelectedLineup, FixturedContest, isFrom, isEdit, team, rootitem, rootDataItem, contestItem, isFromtab, isFromMyTeams, ifFromSwitchTeamModal, resetIndex, team_name } = propsData;\n\n        this.setState({\n            isSearchable: false,\n            MasterData: from == 'MyContest' ? [] : (MasterData || []),\n\n            LobyyData: LobyyData || [],\n\n            lineupArr: SelectedLineup || [],\n\n            allPosition: from == 'MyContest' ? [] : (MasterData ? (MasterData.all_position || []) : []),\n\n            maxPlayers: from == 'MyContest' ? [] : (MasterData ? (MasterData.team_player_count || []) : []),\n\n            isFieldView: true,\n\n            FixturedContest: FixturedContest || [],\n\n            isFrom: from == 'MyContest' ? from : isFrom,\n\n            isEditLineup: from == 'MyContest' ? isEdit : false,\n\n            TeamMyContestData: (from == 'MyContest' || isFrom == 'MyContest' ? team : isFrom && isFrom == 'editView' ? team : '') || '',\n\n            collection_master_id: from == 'MyContest' ? rootitem.collection_master_id : '',\n\n            rootDataItem: from == 'MyContest' ? rootitem : (isFrom && isFrom == 'editView' ? rootDataItem : (isFrom && isFrom == 'contestJoin' ? rootDataItem : '')),\n\n            myContestData: (from && from == 'MyContest') ? contestItem : ((isFrom && isFrom == 'editView') ? FixturedContest : ''),\n\n            isFromtab: from && from == 'MyContest' ? isFromtab : ((isFrom && isFrom == 'editView') ? FixturedContest : ((isFrom && isFrom == 'rank-view') ? 11 : '')),\n\n            isFromRoster: isFrom && isFrom == 'editView' ? isFrom : '',\n\n            showResetAlert: false,\n            tempLineupArr: [],\n            homePlayerCount: ls.get('home_player_count') ? ls.get('home_player_count') : 0,\n            awayPlayerCount: ls.get('away_player_count') ? ls.get('away_player_count') : 0,\n\n            isFromMyTeams: isFromMyTeams ? isFromMyTeams : false,\n\n            ifFromSwitchTeamModal: ifFromSwitchTeamModal && this.props.location ? this.props.location.state.ifFromSwitchTeamModal : false,\n\n            resetIndex: resetIndex ? resetIndex : -1,\n\n            teamName: team_name\n        })\n    }\n\n    filterLineypArrByPosition = (player) => {\n        let tmpLineupArray = this.state.lineupArr.sort((a, b) => (b.fantasy_score - a.fantasy_score))\n        let arrPositionOfSelectedPlayer = tmpLineupArray.filter(function (item) {\n            return item.position == player.position\n        })\n        return arrPositionOfSelectedPlayer\n    }\n    TempfilterLineypArrByPosition = (player) => {\n\n        let arrPositionOfSelectedPlayer = this.state.tempLineupArr.filter(function (item) {\n            return item.position == player.position\n        })\n        return arrPositionOfSelectedPlayer\n    }\n    checkPlayerExistInLineup(player) {\n        var isExist = false\n\n        for (var selectedPlayer of this.state.lineupArr) {\n            if (selectedPlayer.player_uid == player.player_uid) {\n                isExist = true\n                break\n            }\n        }\n        return isExist\n\n    }\n    toggleFields = (mode) => {\n        this.setState({ isFieldView: mode })\n        i = 0;\n    }\n    removePlayerFromLineup = (player) => {\n\n        i = 0;\n        let lineupArr = this.state.lineupArr;\n        let TempArrLineup = this.state.tempLineupArr\n        if (this.checkPlayerExistInLineup(player)) {\n            var index = 0;\n            for (var selectedPlayer of this.state.lineupArr) {\n                if (selectedPlayer.player_uid == player.player_uid) {\n                    TempArrLineup.push(selectedPlayer)\n                    lineupArr.splice(index, 1);\n                }\n                index++\n            }\n        }\n        this.setState({ tempLineupArr: TempArrLineup })\n        this.setState({ lineupArr: lineupArr })\n        ls.set('Lineup_data', lineupArr)\n\n        if (player.team_abbreviation == this.state.LobyyData.home || player.team_abbr == this.state.LobyyData.home) {\n            let homePlayerCount = this.state.homePlayerCount;\n            homePlayerCount = homePlayerCount - 1;\n            setTimeout(() => {\n                this.setState({\n                    homePlayerCount: homePlayerCount\n                }, () => {\n                    ls.set('home_player_count', homePlayerCount);\n                })\n            }, 100);\n\n        } else {\n            let awayPlayerCount = this.state.awayPlayerCount;\n            awayPlayerCount = awayPlayerCount - 1;\n            setTimeout(() => {\n                this.setState({\n                    awayPlayerCount: awayPlayerCount\n                }, () => {\n                    ls.set('away_player_count', awayPlayerCount);\n                })\n            }, 100);\n        }\n\n    }\n\n    resetConfirm() {\n        this.setState({ showResetAlert: true })\n    }\n\n    resetConfirmHide() {\n        this.setState({ showResetAlert: false })\n    }\n    resetLineup = () => {\n        this.setState({ showResetAlert: false })\n        this.setState({ lineupArr: [] })\n        this.setState({ selectedCaptain: '', salaryCap: this.state.salaryCapDefault })\n        this.setState({ AvgSalaryPlayer: parseFloat(this.state.salaryCapDefault) / this.state.maxPlayers })\n        WSManager.clearLineup();\n    }\n    EditMyLineup = () => {\n\n\n        const { allowCollection, rootDataItem } = this.state;\n        let urlData = this.state.rootDataItem;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n        //count home and away player count to set on local storage\n        let homePlayerCount = 0;\n        let awayPlayerCount = 0;\n\n        if (typeof this.state.lineupArr != 'undefined' && this.state.lineupArr.length > 0) {\n            this.state.lineupArr.map((lineupItem, lineupIndex) => {\n                if (SELECTED_GAMET != GameType.MultiGame ) {\n                    if (lineupItem.team_abbreviation == urlData.home || lineupItem.team_abbr == urlData.home) {\n                        homePlayerCount = homePlayerCount + 1;\n                    }\n                    else {\n                        awayPlayerCount = awayPlayerCount + 1;\n                    }\n                }\n                else {\n                    if (lineupItem.team_abbreviation == urlData.match_list[0].home || lineupItem.team_abbr == urlData.match_list[0].home) {\n                        homePlayerCount = homePlayerCount + 1;\n                    }\n                    else {\n                        awayPlayerCount = awayPlayerCount + 1;\n                    }\n                }\n\n\n            });\n        }\n\n        ls.set('home_player_count', homePlayerCount);\n        ls.set('away_player_count', awayPlayerCount);\n        ls.set('Lineup_data', this.state.lineupArr);\n\n        let lineupPath = '';\n        if (SELECTED_GAMET != GameType.MultiGame ) {\n            lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: this.state.rootDataItem, isFromMyTeams: this.state.isFromMyTeams, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: this.state.resetIndex > 0 ? (this.state.resetIndex + 1) : -1 } });\n        }\n        else if (SELECTED_GAMET == GameType.MultiGame  && rootDataItem.match_list.length == 1) {\n            lineupPath = '/lineup/' + urlData.match_list[0].home + \"-vs-\" + urlData.match_list[0].away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: this.state.rootDataItem, isFromMyTeams: this.state.isFromMyTeams, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: this.state.resetIndex > 0 ? (this.state.resetIndex + 1) : -1 } });\n        }\n        else {\n            let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n            lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: this.state.rootDataItem, isFromMyTeams: this.state.isFromMyTeams, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: this.state.resetIndex > 0 ? (this.state.resetIndex + 1) : -1 } });\n        }\n    }\n    GoToRoster = (item, groster) => {\n        let urlData = _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n\n        let lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n        this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { LobyyData: _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, FixturedContest: this.state.FixturedContest, SelectedPlayerPosition: item.position, PositionOrder: groster, from: this.state.isFrom, isFromMyTeams: this.state.isFromMyTeams, team: this.state.TeamMyContestData, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: 1 } });\n    }\n    playerPosClass = (a) => {\n\n        if (a == 0) {\n\n            i = 0\n        }\n        i++;\n        return 'pos' + i\n    }\n\n    callSetLineup = (props) => {\n        if (props.isFromLeaderboard == true) {\n            let param = {\n                'lineup_master_contest_id': props.TeamMyContestData.lineup_master_contest_id,\n                \"sports_id\": AppSelectedSport,\n            }\n            getLineupWithScore(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n\n                    this.setState({\n                        lineupArr: responseJson.data.lineup,\n                        allPosition: responseJson.data.all_position\n                    })\n                }\n            })\n        }\n        else {\n            let param = {\n                \"lineup_master_id\": props.TeamMyContestData.lineup_master_id,\n                \"collection_master_id\": props.rootitem.collection_master_id,\n                \"sports_id\": AppSelectedSport,\n            }\n\n            getUserLineUpDetail(param).then((responseJson) => {\n                if (responseJson && responseJson.response_code == WSC.successCode) {\n                    this.setState({\n                        lineupArr: responseJson.data.lineup,\n                        allPosition: responseJson.data.all_position\n                    })\n                }\n            })\n        }\n    }\n\n    componentDidMount = () => {\n        i = 0\n\n        if (this.props.isFromUpcoming || this.props.isFromLeaderboard) {\n            this.callSetLineup(this.props);\n        }\n        else {\n            if (!_isUndefined(this.state.isFrom) && this.state.isFrom == 'MyContest' && this.state.isFromtab != 11) {\n                let param = {\n                    \"lineup_master_id\": this.state.TeamMyContestData.lineup_master_id,\n                    \"collection_master_id\": this.state.collection_master_id,\n                    \"sports_id\": AppSelectedSport,\n                }\n\n                getUserLineUpDetail(param).then((responseJson) => {\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        this.setState({\n                            //    home_player_team_id: responseJson.data.lineup[0].player_team_id,\n                            lineupArr: responseJson.data.lineup,\n                            allPosition: responseJson.data.all_position\n                        })\n                    }\n                })\n            }\n            if (!_isUndefined(this.state.isFrom) && this.state.isFrom == 'MyContest' && this.state.isFromtab == 11) {\n\n                let param = {\n                    'lineup_master_contest_id': this.state.TeamMyContestData.lineup_master_contest_id,\n                    \"sports_id\": AppSelectedSport,\n                }\n                getLineupWithScore(param).then((responseJson) => {\n                    if (responseJson.response_code == WSC.successCode) {\n\n                        this.setState({\n                            lineupArr: responseJson.data.lineup,\n                            allPosition: responseJson.data.all_position\n                        })\n                    }\n                })\n            }\n        }\n    }\n    NextSubmit = () => {\n\n        let urlData = _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n        let selectCaptainPath = '/select-captain/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n        this.props.history.push({ pathname: selectCaptainPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, FixturedContest: this.state.FixturedContest, isFrom: this.state.isFromRoster ? this.state.isFromRoster : this.state.isFrom, team: this.state.TeamMyContestData, rootDataItem: this.state.rootDataItem, isFromMyTeams: this.state.isFromMyTeams, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal } })\n    }\n\n    goBackToRoster() {\n        if(this.props.showFieldV) {\n            this.props.hideFieldV()\n        }else{\n            this.props.history.goBack()\n        }\n    }\n    render() {\n        const {\n            allPosition,\n            isFieldView,\n            isFrom,\n            isEditLineup,\n            TeamMyContestData,\n            isFromRoster,\n            isFromtab,\n            profileDetail,\n            userName\n        } = this.state;\n\n        let reversePosition =  AppSelectedSport == SportsIDs.soccer ? _cloneDeep(allPosition || []).reverse() : allPosition;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"web-container pb0\" + ((isFrom == 'captain' || isFrom == 'rank-view') ? ' right-fieldview' : '') + (this.props.showFieldV ? ' show-rfv' : '') }>\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.fieldview.title}</title>\n                            <meta name=\"description\" content={MetaData.fieldview.description} />\n                            <meta name=\"keywords\" content={MetaData.fieldview.keywords}></meta>\n                        </Helmet>\n\n                        <div className='field-view-cross-button-container'>\n                            {\n                                (this.props.TeamMyContestData && this.props.TeamMyContestData.team_name && this.props.TeamMyContestData.team_name != '') ?\n                                    <span>\n                                        {this.props.TeamMyContestData.team_name} \n                                        {\n                                            userName && userName != '' ?\n                                            <span className=\"username-text\">({userName})</span>\n                                            :\n                                            <span className=\"username-text\">({profileDetail.user_name})</span>\n                                        }\n                                    </span>\n                                    :\n                                    <span>\n                                        {\n                                            this.state.teamName \n                                            || \n                                            (TeamMyContestData.team_name ? TeamMyContestData.team_name : TeamMyContestData )\n                                        }\n                                        {\n                                            userName && userName != '' ?\n                                            <span className=\"username-text\">({userName})</span>\n                                            :\n                                            <span className=\"username-text\">({profileDetail.user_name})</span>\n                                        }\n                                    </span>\n\n                            }\n\n                            {\n                                <img className='brand-logo' alt=\"\" src={Images.FIELD_VIEW_LOGO}></img>\n                            }\n                            {\n                                <img className='developed-by-container' alt=\"\" src={Images.DEVELOPED_BY_LOGO}></img>\n                            }\n                            <i onClick={() => { this.goBackToRoster() }} className='icon-close' />\n                            {isEditLineup &&\n                                <i onClick={() => { this.EditMyLineup() }} className='icon-edit edit' />\n                            }\n                        </div>\n                        <div className={'field-view-container ' + (AppSelectedSport == SportsIDs.cricket ? 'cricket-ground-container' : AppSelectedSport == SportsIDs.soccer ? 'soccer-ground-container' : AppSelectedSport == SportsIDs.badminton ? 'badminton-ground-container' : AppSelectedSport == SportsIDs.kabaddi ? 'kabaddi-ground-container' : AppSelectedSport == SportsIDs.basketball ? 'basketball-ground-container' : AppSelectedSport == SportsIDs.football ? 'football-ground-container' : AppSelectedSport == SportsIDs.baseball ? ' baseball-ground-container' :'soccer-ground-container')}>\n                            <div className={\"player-area \" + (!isFieldView && 'hide')}>\n                                {(this.props.isFromUpcoming || this.props.isFromLeaderboard) &&\n                                    <a href className=\"close-field-view-right\" onClick={this.props.sideViewHide}>\n                                        <i className=\"icon-close\"></i>\n                                    </a>\n                                }\n                                <div className='space-evenly-container'>\n                                    {_Map(reversePosition, (positem, posidx) => {\n                                        return (\n                                            <div key={posidx} >\n                                                <div className={'player-position-header'+ (AppSelectedSport == SportsIDs.baseball ? ' baseball-filedview': ' ')}>{positem.position_display_name}</div>\n                                                <div className='player-position-row'>\n                                                    {_Map(this.filterLineypArrByPosition(positem), (item, idx) => {\n                                                        return (\n                                                            <div key={idx} className='player-row-container'>\n                                                                \n                                                                {\n                                                                    item.sports_id != SportsIDs.kabaddi && item.playing_announce == 1 && item.is_playing == 0 &&\n                                                                    <span class=\"playing_indicator danger\"></span>\n                                                                }\n\n                                                                {isFromRoster == \"editView\" ? '' :\n                                                                    <React.Fragment>\n\n                                                                        {item.player_role == 1 &&\n                                                                            <span className=\"captain-player\">C</span>\n                                                                        }\n                                                                        {item.player_role == 2 &&\n                                                                            <span className=\"vcaptain-player\">V</span>\n                                                                        }\n                                                                    </React.Fragment>\n                                                                }\n                                                                <img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" />\n                                                                <div className=\"player-name\"> {item.full_name}</div>\n                                                                <div className=\"player-postion\">\n                                                                    {isFromtab == 1 || isFromtab == 2 || isFromtab == 11 ? '' : Utilities.getMasterData().currency_code + \" \"} {isFromtab == 1 || isFromtab == 2 || isFromtab == 11 ? item.score : item.salary} {isFromtab == 1 || isFromtab == 2 || isFromtab == 11 ? 'pts' : ''}\n                                                                </div>\n\n                                                            </div>\n                                                        )\n                                                    })\n                                                    }\n                                                </div>\n                                            </div>\n                                        )\n                                    })\n                                    }\n                                </div>\n                                {IS_BRAND_ENABLE && <div className=\"powered-by\">\n                                    <span>{AppLabels.DEVELOPED_BY} </span>\n                                    <img alt='' src={Images.VINFOTECH_BRAND_WHITE} />\n                                    <span>{AppLabels.VINFOTECH}</span>\n                                </div>\n                                }\n                            </div>\n                        </div>\n\n                        <div className={\"lineup-list-view \" + (isFieldView ? 'hide' : '')}>\n                            <div className=\"list-view-detail\">\n                                {_Map(allPosition, (positem, posidx) => {\n                                    return (\n                                        <div key={posidx}>\n                                            <div className=\"list-view-header\"> {positem.position_name} </div>\n                                            <ul className=\"list-secondary\" key={posidx}>\n                                                {\n                                                    _Map(this.filterLineypArrByPosition(positem), (item, idx) => {\n                                                        return (\n                                                            <li key={idx}>\n                                                                <Row>\n                                                                    <Col xs={8} className=\"text-left-ltr\">\n                                                                        <h4>\n                                                                            {item.full_name}\n                                                                            {item.player_role == 1 &&\n                                                                                <span className=\"captain-player\">C</span>\n                                                                            }\n                                                                            {item.player_role == 2 &&\n                                                                                <span className=\"vcaptain-player\">V</span>\n                                                                            }\n                                                                        </h4>\n                                                                        <span>{item.team_abbreviation || item.team_abbr}</span>\n                                                                    </Col>\n                                                                    <Col xs={4} className=\"text-right-ltr\">\n                                                                        <p>{isFromtab == 1 || isFromtab == 2 || isFromtab == 11 ? '' : Utilities.getMasterData().currency_code + \" \"} {isFromtab == 1 || isFromtab == 2 || isFromtab == 11 ? item.score : item.salary} {isFromtab == 1 || isFromtab == 2 || isFromtab == 11 ? 'pts' : ''}</p>\n                                                                        {!(isFrom == 'MyContest') &&\n                                                                            <button className=\"btn-removeplayer btn\" onClick={() => this.removePlayerFromLineup(item)}><i className=\"icon-remove\"></i></button>\n                                                                        }\n                                                                    </Col>\n                                                                </Row>\n\n                                                            </li>\n                                                        )\n                                                    })\n                                                }\n\n                                            </ul>\n                                        </div>\n                                    )\n                                })\n                                }\n\n\n                            </div>\n\n                        </div>\n                        {\n                            this.state.showResetAlert &&\n                            <MyAlert isMyAlertShow={this.state.showResetAlert} onMyAlertHide={() => this.resetLineup()} hidemodal={() => this.resetConfirmHide()} message={AppLabels.Your_lineup_will_be_reset} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/AllLeagueList.jsx",["3039","3040","3041","3042","3043","3044","3045","3046"],"import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map ,_isUndefined} from '../../Utilities/Utilities';\nimport { setValue, AppSelectedSport } from '../../helper/Constants';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport {getMiniLeagueByStatus } from \"../../WSHelper/WSCallings\";\nimport * as Constants from \"../../helper/Constants\";\nimport { NoDataView } from '../CustomComponent';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport LeagueDetails from './LeagueDetails';\n\nclass AllLeagueList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            LobyyData: !_isUndefined(props.location.state) ? props.location.state.LobyyData : [],\n            isFromLobby:!_isUndefined(props.location.state) ? props.location.state.isFromLobby : true,\n            MiniLeagueList:[],\n            MiniLeagueData:'',\n            showBtmBtn: '',\n            oldScrollOffset: 0,\n            scrollStatus: '',\n\n            showContestDetail: false,\n            HeaderOption: {\n                back: true,\n                title: AL.F2P_LEAGUES,\n                hideShadow: false\n            }\n        };\n        this._timeout = null;\n        this.checkScrollStatus = this.checkScrollStatus.bind(this);\n    }\n\n    checkScrollStatus() {\n        if (this._timeout) { \n            clearTimeout(this._timeout);\n        }\n        this._timeout = setTimeout(() => {\n            this._timeout = null;\n            this.setState({\n                scrollStatus: 'scroll stopped',\n                showBtmBtn: ''\n            });\n        }, 700);\n        if (this.state.scrollStatus !== 'scrolling') {\n            this.setState({\n                scrollStatus: 'scrolling'\n            });\n        }\n    }\n    onScrollList = (event) => {\n        let scrollOffset = window.pageYOffset;\n        this.checkScrollStatus();\n        this.setState({\n            soff: scrollOffset\n        })\n        if (this.state.oldScrollOffset < scrollOffset) {\n            this.setState({\n                showBtmBtn: 'hideBottomBtn',\n                oldScrollOffset: scrollOffset\n            })\n        } else {\n            this.setState({\n                showBtmBtn: '',\n                oldScrollOffset: scrollOffset\n            })\n        }\n    }\n\n    componentWillMount = () => {\n        this.getMiniLeagueByStatusApi();\n        window.addEventListener('scroll', this.onScrollList);\n\n\n    }\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.onScrollList);\n    }\n    getMiniLeagueDetails = (item,LobyyData) => {\n        this.props.history.push({\n            pathname: '/league-details',\n            state: { LobyyData: LobyyData, MiniLeagueData:item }\n        })\n\n    }\n    ContestDetailShow = (item) => {\n          this.setState({\n            showContestDetail: true,\n            MiniLeagueData:item,\n        });\n    }\n    openLeaderBoardLeague=(item)=>{\n\n        this.props.history.push({ pathname: '/mini-league-leader-board', state: { \n            LobyyData:this.state.LobyyData,\n            MiniLeagueSponser:item,\n            MiniLeagueListItem:item\n        } }) \n    }\n    /**\n     * @description method to hide contest detail model\n     */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    getMiniLeagueByStatusApi = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n          let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"status\": \"live\",\n            \"page_no\": \"1\",\n            \"page_size\": \"500\"\n        }\n            delete param.limit;\n            var api_response_data = await getMiniLeagueByStatus(param);\n             if (api_response_data) {\n               this.setState({ MiniLeagueList: api_response_data})\n            }\n            \n        \n\n        \n    }\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            isFromLobby:this.state.isFromLobby,\n            title: AL.F2P_LEAGUES,\n            share: true\n        }\n        const { LobyyData, MiniLeagueList,showContestDetail } = this.state;\n        return (\n            <MyContext.Provider >\n                <div className=\"web-container Ftp-web-container \">\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                    <CustomHeader\n                        {...this.props}\n                        HeaderOption={HeaderOption}\n                    />\n\n                    {\n                        MiniLeagueList.data && MiniLeagueList.data.map((item, index) => {\n                            return (\n                                <div className=\"league-list-all\">\n                                <div className=\"sort-contest-wrapper mt15\">\n                                    <div className=\"league-section no-border\" onClick={() => this.openLeaderBoardLeague(item) }>\n                                        <div className=\"league-name\">\n                                            {item.mini_league_name}\n\n                                        </div>\n                                        {\n                                            item.join_count > 0 &&\n                                            <div className=\"pull-right verity-count\">\n                                                {AL.JOINED_CAP}\n                                            </div>\n                                        }\n\n\n                                        <p> {item.total_complete + \" / \" + item.season_count + \" Matches\"}</p>\n                                    </div>\n\n                                </div>\n                                </div>\n                            );\n                        })\n                    }\n                    {\n                    MiniLeagueList.data && MiniLeagueList.data.length == 0 &&\n                                                    <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                                        MESSAGE_2={AppLabels.NO_DATA_VIEW_MESSAGE_ALL_LEAGUE}\n                                                        onClick_2={this.joinContest}\n                                                    />\n                                                \n            }\n\n                            <div className={\"roster-footer pl15 pr15 \" + this.state.showBtmBtn}>\n                            <div className=\"btn-wrap\">\n                                <button  onClick={() => this.props.history.push({\n                                    pathname: '/completed-leagues',\n                                    state: { LobyyData: LobyyData, }\n                                })} className=\"btn btn-primary btn-block btm-fix-btn completed-league-preview\">{AL.COMPLETED_LEAGUE}</button>\n                            </div>\n                        </div>\n                    \n                    {\n                            showContestDetail &&\n                            <LeagueDetails\n                               {...this.props}\n                                IsContestDetailShow={showContestDetail}\n                                IsContestDetailHide={this.ContestDetailHide}\n                                LobyyData={this.state.LobyyData}\n                                MiniLeagueData={this.state.MiniLeagueData} />\n                    }\n\n                    \n\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default AllLeagueList;\n","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/MiniLeagueCard.jsx",["3047","3048","3049","3050","3051","3052","3053","3054","3055","3056","3057","3058","3059","3060","3061","3062","3063"],"import React from \"react\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from \"../../Utilities/Utilities\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MATCH_TYPE, SELECTED_GAMET } from \"../../helper/Constants\";\nimport * as Constants from \"../../helper/Constants\";\nimport { OverlayTrigger, Tooltip ,Label} from 'react-bootstrap';\nimport Images from \"../../components/images\";\nimport { MatchInfo } from \"../CustomComponent\";\n\nexport default class MiniLeagueCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sports_id: Constants.AppSelectedSport,\n            timerCallback: this.props.timerCallback\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps != this.props) {\n            this.setState({\n                timerCallback: nextProps.timerCallback\n            })\n        }\n\n    }\n\n\n    render() {\n        const { item, gotoDetails, gotoLeaderBoard, isFromFreeToPlayLandingPage } = this.props;\n        let bg_image = item.bg_image && item.bg_image != null && item.bg_image != '' ? item.bg_image : 0\n        let sponserImage = item.sponsor_logo && item.sponsor_logo != null ? item.sponsor_logo : 0\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n\n                     {\n                        bg_image ==0\n                        ?\n                        <div className=\"no-bg-container \">\n                        <div className='top-holder' onClick={(event) => gotoDetails(item, event)}>\n                        <div className='d-star-holder'>\n                            <img src={Images.STARS_ICON} className='star-image'></img>\n                        </div>\n\n                        <div className='epl-label-div'>\n                            <Label className='epl-label'>{item.title} </Label><br></br>\n                            \n                        </div>\n                        <div className='epl-label-div-2'>\n                            <Label className='english-premier-leag'>{item.mini_league_name} </Label><br></br>\n\n                        </div>\n                        <div className='d-star-holder football-image'>\n                            <img style={{resizeMode: 'contain'}} src={bg_image == 0 ?Images.FOOTBALL_ICON : Utilities.getSponserURL(bg_image)}/>\n\n                        </div>\n                        <span class=\"play-now-landing\">{AppLabels.PLAY_NOW}!</span>\n                        <div className='amazon'>\n                            <img className=\"lobby_sponser-image sponser-card-image\" style={{resizeMode: 'contain'}} src={sponserImage == 0 ?Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)}/>\n\n                        </div>\n                        \n                    </div>\n                    </div>\n\n                    :\n                    <img className=\"bg-image\" onClick={(event) => gotoDetails(item, event)} src={bg_image == 0 ? Images.FOOTBALL_ICON : Utilities.getSponserURL(bg_image)}/>\n\n                    }\n                    </div>\n                    \n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/UserLeaguePoints.jsx",["3064","3065","3066","3067","3068","3069","3070","3071","3072","3073"],"import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map, _isUndefined } from '../../Utilities/Utilities';\nimport { setValue, AppSelectedSport } from '../../helper/Constants';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport { getUserMiniLeagueLeaderBoardMatches } from \"../../WSHelper/WSCallings\";\nimport * as Constants from \"../../helper/Constants\";\nimport { NoDataView } from '../CustomComponent';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MomentDateComponent } from '../CustomComponent';\n\nconst ListHeader = ({ context }) => {\n    return (\n        <div className=\"ranking-list-user user-list-header mini-leage-leaderbord\" style={context.state.userData ? { marginTop: 0 } : {}}>\n            <div className=\"display-table-cell text-center\">\n                <div className=\"list-header-text list-heder-mini-league\">{AppLabels.MATCHES}</div>\n            </div>\n            \n            <div className=\"display-table-cell\">\n                <div className=\"list-header-text list-heder-mini-league text-right mr10\">{AppLabels.POINTS}</div>\n            </div>\n        </div>\n    )\n}\nclass UserLeaguePoints extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            LobyyData: !_isUndefined(props.location.state) ? props.location.state.LobyyData : [],\n            userData: !_isUndefined(props.location.state) ? props.location.state.userData : '',\n            status: !_isUndefined(props.location.state) ? props.location.state.status : '',\n            isYou:!_isUndefined(props.location.state) ? props.location.state.isYou : false,\n            UserLeaguePointsList: [],\n            MiniLeagueData: '',\n            HeaderOption: {\n                back: true,\n                title: AL.F2P_LEAGUES,\n                hideShadow: false\n            }\n        }\n    }\n\n    componentWillMount = () => {\n        this.getMiniLeagueByStatusApi();\n\n    }\n    getMiniLeagueDetails = (item, LobyyData) => {\n        this.props.history.push({\n            pathname: '/league-details',\n            state: { LobyyData: LobyyData, MiniLeagueData: item }\n        })\n\n    }\n    \n\n    getMiniLeagueByStatusApi = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"mini_league_leaderboard_id\": this.state.userData.mini_league_leaderboard_id,\n\n        }\n        delete param.limit;\n        var api_response_data = await getUserMiniLeagueLeaderBoardMatches(param);\n        if (api_response_data) {\n            this.setState({ UserLeaguePointsList: api_response_data.data })\n        }\n\n\n\n\n    }\n    render() {\n        let userRank =  AppLabels.RANK + \"#\" + \"   \"+ this.state.userData.game_rank\n\n        const HeaderOption = {\n            back: true,\n            screentitle:this.state.isYou ? AppLabels.You : this.state.userData.user_name,\n            rank:userRank,\n            statusLeaderBoard:this.state.status,\n            share: true\n        }\n        const { LobyyData, MiniLeagueList } = this.state;\n        var totalScore = 0\n        return (\n            <MyContext.Provider >\n                <div className=\"web-container Ftp-web-container \">\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                    <CustomHeader\n                        {...this.props}\n                        HeaderOption={HeaderOption}\n                    />\n                    \n                    <ListHeader context={this} />\n                    {\n\n                       this.state.UserLeaguePointsList && this.state.UserLeaguePointsList.map((item, index) => {\n                        totalScore = totalScore + parseFloat(item.total_score)\n                            return (\n                                <div className=\"league-list-all no-margin\">\n                                <div className=\"sort-contest-wrapper  p-t\">\n                                    <div className=\"league-section no-border-leageue-point\">\n                                        <div className=\"league-name leaderboard\">\n                                            {item.home}{\" \"+AppLabels.VS+\" \"}{item.away}\n\n                                        </div>\n                                        {\n                                            <div className=\"pull-right total-points user-points-top-margin\">\n                                                {item.total_score}\n                                            </div>\n                                        }\n\n\n                                        <p className=\"leaderboard\"> \n                                        \n                                        {<span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM\" }}/></span>}\n                                        \n                                        </p>\n                                    </div>\n\n                                </div>\n                                </div>\n                            );\n                        })\n                    \n                    }\n\n                    {\n                        this.state.UserLeaguePointsList && this.state.UserLeaguePointsList.length == 0 &&\n                        <NoDataView\n                            BG_IMAGE={Images.no_data_bg_image}\n                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                            onClick_2={this.joinContest}\n                        />\n\n                    }\n                    {\n                        WSManager.loggedIn() &&\n                        <div className=\"btn-block bottom bottom-view-leader-board\">\n                        <div className=\"pull-left\">\n                          {\"Total Score\"}\n                         </div>\n                         <div className=\"pull-right\">\n                          {totalScore}\n                         </div>\n                            \n\n                        </div>\n                    }\n\n\n\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default UserLeaguePoints;","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeagueDetails.jsx",["3074","3075","3076","3077","3078","3079","3080","3081","3082","3083","3084","3085","3086","3087","3088","3089","3090","3091","3092","3093","3094","3095","3096","3097","3098","3099","3100","3101","3102","3103","3104","3105","3106","3107","3108"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Button, ProgressBar, Row, Col } from 'react-bootstrap';\nimport { _Map, Utilities } from '../../Utilities/Utilities';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport { _isUndefined } from '../../Utilities/Utilities';\nimport * as Constants from \"../../helper/Constants\";\nimport { getMiniLeagueDetails } from \"../../WSHelper/WSCallings\";\nimport { Modal, Tabs, Tab, Table, Panel } from 'react-bootstrap';\nimport Images from \"../../components/images\";\nimport { MomentDateComponent } from '../CustomComponent';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport { NoDataView } from '../CustomComponent';\nimport * as AppLabels from \"../../helper/AppLabels\";\n\nclass LeagueDetails extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            prizeList: [],\n            merchandiseList: [],\n            MiniLeagueList: [],\n            MiniLeagueSponser:'',\n            prizeTabSelected:true,\n            statusLeague:0,\n            HeaderOption: {\n                back: false,\n                title: \"\",\n                hideShadow: false\n            }\n        }\n\n\n\n    }\n\n\n    getMiniLeagueDetails = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"mini_league_uid\": this.props.MiniLeagueData.mini_league_uid\n        }\n\n        delete param.limit;\n        var api_response_data = await getMiniLeagueDetails(param);\n        if (api_response_data) {\n            this.setState({\n                MiniLeagueList: api_response_data.data.match_list, HeaderOption: {\n                    back: false,\n                    title: api_response_data.data.mini_league_name,\n                    hideShadow: false\n                },\n                prizeList: api_response_data.data.prize_distibution_detail && api_response_data.data.prize_distibution_detail !=null ? api_response_data.data.prize_distibution_detail :[],\n                merchandiseList: api_response_data.data.merchandise,\n                MiniLeagueSponser:api_response_data.data,\n                statusLeague:api_response_data.data.status == 0 && (api_response_data.data.game_starts_in * 1000 > Date.now()) ? 0 : api_response_data.data.status == 2 ? 2: 1\n            })\n\n\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentWillMount = () => {\n        this.getMiniLeagueDetails();\n\n\n    }\n\n    FixtureListFunction = (item) => {\n        return (\n            <div className=\"league-list\">\n                <div className=\"display-table\">\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                        <div className=\"team-block\">\n                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                            <span className=\"verses\">{AL.VS}</span>\n                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                        </div>\n                        <div className=\"match-timing\">\n                            {\n\n                                <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} /></span>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    ontabSelect = (tab) => {\n        if (tab == 1) {\n            this.isPrizeTabSelected(true)\n        }\n        else{\n            this.isPrizeTabSelected(false)\n\n\n        }\n    }\n\n    isPrizeTabSelected = (isSelected) => {\n        this.setState({ prizeTabSelected: isSelected });\n    }\n\n    viewLeaderBoard =( )=> {\n\n        this.props.history.push({ pathname: '/mini-league-leader-board', state: { \n            FixturedContest: this.state.FixtureData, \n            LobyyData:this.props.LobyyData,\n            MiniLeagueSponser:this.state.MiniLeagueSponser,\n            MiniLeagueListItem:this.props.MiniLeagueData\n        } }) \n    }\n    setCurrentMaxPrize = (minMaxValue, prizeItem) => {\n        var maxMini = prizeItem.max - prizeItem.min + 1;\n        var finalPrize = (minMaxValue / maxMini)\n        return finalPrize;\n    }\n\n    render() {\n\n        const { MiniLeagueSponser } = this.state;\n        const { IsContestDetailHide, LobyyData,MiniLeagueData } = this.props;\n\n        const HeaderOption = {\n            back: true,\n            title: MiniLeagueData.mini_league_name,\n            share: true\n        }\n        let sponserImage = MiniLeagueSponser.sponsor_logo && MiniLeagueSponser.sponsor_logo!=null ? MiniLeagueSponser.sponsor_logo : 0\n\n        return (\n            <MyContext.Provider >\n                <div className=\"web-container Ftp-web-container test free-to-play-info mt20\">\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                   \n                    <Modal show=\"true\" onHide={IsContestDetailHide} bsSize=\"large\" dialogClassName={\"contest-detail-modal contest-details-modal-white-lebel \"}>\n                        <Modal.Header  >\n                            <Modal.Title >\n                            <a onClick={IsContestDetailHide} className=\"modal-close\">\n                                        <i className=\"icon-close\"></i>\n                                    </a>\n                                <div className=\"match-heading header-content\">\n\n                                  <div className=\"team-header-detail\">\n                                            {\n                                                <div className=\"team-header-content \">\n                                                    <span>{MiniLeagueData.mini_league_name} </span>\n                                                </div>\n                                            }\n                    <div className='match-timing'>\n                        {<span> <MomentDateComponent data={{ date: MiniLeagueData.scheduled_date, format: \"D MMM\" }} />\n                             -  <MomentDateComponent data={{ date: MiniLeagueData.end_date, format: \"D MMM\" }} />\n                        </span>}\n                    </div>\n                                            \n                                        </div>\n                                </div>\n                              \n\n                            </Modal.Title>\n                            <div className=\"leaderboard-rank margin-league-details\">\n                                    <img src={Images.HALL_OF_FAME_SMALL_ICON}/>\n\n                                    <div className=\"text_hall_of_fame\">\n                                        {AL.SPONSORED_BY}\n                                    </div>\n                                    {\n                            window.ReactNativeWebView  ?\n                            <a \n                                href\n                                onClick={(event)=>Utilities.callNativeRedirection(Utilities.getValidSponserURL(MiniLeagueSponser.sponsor_link,event))}>\n                                <img className=\"lobby_sponser-image sponser-card-image\" style={{resizeMode: 'contain'}} src={sponserImage == 0 ?Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)}/>\n                            </a>\n                        \n                            :\n                            <a \n                                href={Utilities.getValidSponserURL(MiniLeagueSponser.sponsor_link)}\n                                onClick={(event)=>event.stopPropagation()}\n                                target='_blank'>\n                                <img className=\"lobby_sponser-image sponser-card-image\" style={{resizeMode: 'contain'}} src={sponserImage == 0 ?Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)}/>\n                            </a>\n                         \n                        }\n\n                                </div>\n                        </Modal.Header>\n                        <Modal.Body>\n\n                            <Tabs id={'contest-detail-tab'} onSelect={this.ontabSelect} defaultActiveKey={this.props.activeTabIndex} className='tabs-multileage' >\n                                <Tab eventKey={1} title={AL.PRIZES}>\n                                    <Row className=\"Ftp-prizes p-t\">\n\n                                        {\n                                            this.state.prizeList && this.state.prizeList.map((item, index) => {\n                                                return (\n                                                    <Col xs={3} sm={3} md={4} className=\"Ftp-prize-section center-grid\">\n                                                        <div className=\"Ftp-prize-inner-section\">\n                                                            {/* <i className=\"icon-ic-info\"></i> */}\n                                                            {\n                                                                item.prize_type == 0 ?\n                                                                <div className=\"bonus-icon-prize\">    \n                                                                 <i style={{ display: 'inlineBlock'}} className=\"icon-bonus\"></i>\n                                                                 </div>\n                                                                    : item.prize_type == 1 ?\n                                                                        <React.Fragment>\n                                                                        <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n                                                                        \n                                                                        </React.Fragment>\n                                                                        :\n                                                                        <React.Fragment>\n                                                                            {\n                                                                                item.prize_type == 2 ?\n                                                                                    <img alt=\"\" src={Images.IC_COIN} width=\"50px\" />\n                                                                                    :\n                                                                                    <div>\n                                                                                        {\n                                                                                            item.prize_type == 3 &&\n                                                                                            this.state.merchandiseList && this.state.merchandiseList.map((merchandise, index) => {\n                                                                                                return (\n                                                                                                    <React.Fragment key={index}>\n                                                                                                        {item.amount == merchandise.merchandise_id &&\n                                                                                                            <img style={{resizeMode:'contain'}} src={Utilities.getMerchandiseURL(merchandise.image_name)} width=\"60px\" height=\"60px\" />\n                                                                                                        }\n\n                                                                                                    </React.Fragment>\n                                                                                                );\n                                                                                            })\n\n\n                                                                                        }\n                                                                                    </div>\n                                                                            }\n                                                                        </React.Fragment>\n\n\n                                                            }\n\n                                                            {/* <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"prize-image\" /> */}\n\n                                                        </div>\n                                                        <div class=\"rank-ribbon\">\n                                                        <span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min +'st') : item.min == 2 ? (item.min +'nd') : item.min == 3 ? (item.min +'rd'): item.min : item.min + ' - ' + item.max}</span>\n                                                        </div>\n                                                        <div className=\"prize-name\">\n\n                                                        { item.prize_type == 3 ? item.max_value : this.setCurrentMaxPrize(item.min_value, item) }\n\n                                                     </div>\n                                                    </Col>\n                                                );\n                                            })\n                                        }\n                                     \n                                    </Row>\n                                    {\n                    \n                    this.state.prizeList && this.state.prizeList.length == 0 &&\n             <NoDataView\n                 BG_IMAGE={Images.no_data_bg_image}\n                 CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                 MESSAGE_1={AppLabels.LEAGUE_NO_PRIZE}\n             />\n         \n}\n                                </Tab>\n                                <Tab  eventKey={2} title={AL.FIXTURE} className='table-content-height'>\n                                <div className=\"Ftp-prizes\">\n                                {this.state.MiniLeagueList && this.state.MiniLeagueList.map((item, index) => {\n                                        return (\n                                            <React.Fragment key={index}>\n                                            <div className=\"collection-list-slider\">\n                                                    {this.FixtureListFunction(item)}\n                                                </div>\n                                                \n                                            \n                                                \n                                               \n                                            </React.Fragment>\n                                        );\n                                    })\n\n                                    }\n                                </div>\n                                    \n                                    {\n                    \n                    this.state.MiniLeagueList && this.state.MiniLeagueList.length == 0 &&\n             <NoDataView\n                 BG_IMAGE={Images.no_data_bg_image}\n                 CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                 MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                 onClick_2={this.joinContest}\n             />\n         \n}\n                                </Tab>\n\n\n\n\n                            </Tabs>\n                        </Modal.Body>\n                    </Modal>\n                    \n                </div>\n               \n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default LeagueDetails;","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeaderBoardFreeToPlay.jsx",["3109","3110","3111","3112","3113","3114","3115","3116","3117","3118","3119","3120","3121","3122","3123","3124","3125","3126","3127","3128","3129","3130","3131","3132","3133","3134","3135","3136","3137","3138","3139","3140","3141","3142","3143","3144","3145","3146"],"import React, { Fragment } from 'react';\nimport { Row, Col, Alert } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport { notify } from 'react-notify-toast';\nimport { Utilities, _Map, _isUndefined } from '../../Utilities/Utilities';\nimport { downloadContestTeam, getMiniLeagueLeaderBoard, getUserMiniLeagueLeaderBoard, getLineupWithScore } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../../Component/CustomComponent';\nimport { AppSelectedSport } from '../../helper/Constants';\nimport Images from '../../components/images';\nimport MetaData from \"../../helper/MetaData\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\nimport CustomHeader from '../../components/CustomHeader';\n\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as NC from \"../../WSHelper/WSConstants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport AllPrizes from './AllPrizes';\nimport LeagueDetails from './LeagueDetails';\n\n/**\n  * @description This is the header of other user rank list.\n  * @return UI components\n  * @param context This is the instance of this component\n*/\nconst ListHeader = ({ context }) => {\n    return (\n        <div className=\"ranking-list user-list-header mini-leage-leaderbord\" style={Object.keys(context.state.userRankList).length === 0 ? { marginTop: 0 } : {}}>\n            <div className=\"display-table-cell text-center\">\n                <div className=\"list-header-text list-heder-mini-league\">{AppLabels.RANK}</div>\n            </div>\n            <div className=\"display-table-cell pl-1\">\n                <div className=\"list-header-text list-heder-mini-league left pl6\">{AppLabels.NAME}</div>\n            </div>\n            <div className=\"display-table-cell\">\n                <div className=\"list-header-text list-heder-mini-league text-right mr10\">{AppLabels.POINTS}</div>\n            </div>\n        </div>\n    )\n}\n\nconst Shimmer = () => {\n    return (\n        <div className=\"ranking-list shimmer margin-2p\">\n            <div className=\"display-table-cell text-center\">\n                <div className=\"rank\">--</div>\n                <div className=\"rank-heading\">{AppLabels.RANK}</div>\n            </div>\n            <div className=\"display-table-cell pl-1 pointer-cursor\">\n                <figure className=\"user-img shimmer\">\n                    <Skeleton circle={true} width={40} height={40} />\n                </figure>\n                <div className=\"user-name-container shimmer\">\n                    <Skeleton width={'80%'} height={8} />\n                    <Skeleton width={'40%'} height={5} />\n                </div>\n            </div>\n            <div className=\"display-table-cell\">\n                <div className=\"points\">--</div>\n            </div>\n        </div>\n    )\n}\n\nexport default class LeaderBoardFreeToPlay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            isLoadMoreLoaderShow: false,\n            hasMore: true,\n            leaderboardList: [],\n            userRankList: '',\n            ShimmerList: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],\n            status: '',\n            contestItem: '',\n            contestId: '',\n            LobyyData: !_isUndefined(props.location.state) ? props.location.state.LobyyData : [],\n            MiniLeagueSponser: !_isUndefined(props.location.state) ? props.location.state.MiniLeagueSponser : '',\n            MiniLeagueListItem: !_isUndefined(props.location.state) ? props.location.state.MiniLeagueListItem : '',\n            rootItem: '',\n            mfileURL: '',\n            downloadFail: false,\n            isExpanded: false,\n            isExpandedWithDelay: false,\n            pageNo: 1,\n            userData: '',\n            showContestDetail: false,\n            AllLineUPData: {},\n            SelectedLineup: '',\n            MiniLeagueData:'',\n\n            showFieldV: false,\n            isRefresh: false,\n            isMiniLeaguePrize: true\n        }\n        this.headerRef = React.createRef();\n    }\n\n    componentWillMount() {\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    componentDidMount() {\n        if (this.props.location.state) {\n            this.getLeaderboard();\n            this.getUserRank()\n            if (this.headerRef) {\n                this.headerRef.GetHeaderProps('', {}, {}, this.state.rootItem);\n            }\n        }\n    }\n\n    onLoadMore() {\n        if (!this.state.isLoaderShow && this.state.hasMore) {\n            this.setState({ hasMore: false })\n            this.getLeaderboard()\n        }\n    }\n\n    /**\n     * \n     * @description method to refresh page contest when user pull down to refresh screen\n     */\n    handleRefresh = () => {\n        if (!this.state.isLoaderShow) {\n            this.setState({ hasMore: false, pageNo: 1, isRefresh: true }, () => {\n                this.hideFieldV();\n                this.getLeaderboard();\n                this.getUserRank()\n            })\n        }\n    }\n\n    getUserRank() {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"mini_league_uid\": this.state.MiniLeagueSponser.mini_league_uid,\n        }\n        getUserMiniLeagueLeaderBoard(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == NC.successCode) {\n                this.setState({\n                    userRankList: responseJson.data\n                });\n            }\n        })\n\n    }\n\n    getLeaderboard() {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"mini_league_uid\": this.state.MiniLeagueSponser.mini_league_uid,\n            \"page_size\": \"20\",\n            \"page_no\": this.state.pageNo\n        }\n\n        this.setState({ isLoaderShow: true })\n        getMiniLeagueLeaderBoard(param).then((responseJson) => {\n            this.setState({ isLoaderShow: false })\n            setTimeout(() => {\n                this.setState({\n                    isRefresh: false\n                })\n            }, 2000);\n            if (responseJson && responseJson.response_code == NC.successCode) {\n                this.setState({\n                    leaderboardList: this.state.pageNo == 1 ? responseJson.data : [...this.state.leaderboardList, ...responseJson.data],\n                    hasMore: responseJson.data.length === 20,\n                    pageNo: this.state.pageNo + 1\n                });\n            }\n        })\n    }\n\n    openPrizesForLeague = () => {\n        this.props.history.push({\n            pathname: '/all-prizes/' + this.state.MiniLeagueSponser.mini_league_uid + \"/\" + true, state: {\n                LobyyData: this.state.LobyyData,\n                MiniLeagueSponser: this.state.MiniLeagueSponser,\n                isMiniLeaguePrize: this.state.isMiniLeaguePrize,\n                MiniLeagueData: this.state.MiniLeagueSponser,\n            }\n        })\n\n\n    }\n\n    downloadFile(fileURL) {\n        var filename = fileURL.substring(fileURL.lastIndexOf('/') + 1);\n        if (!window.ActiveXObject) {\n\n            if (navigator.userAgent.toLowerCase().match(/(ipad|iphone|safari)/) && navigator.userAgent.search(\"Chrome\") < 0) {\n                var save = document.createElement('a');\n                save.href = fileURL;\n                save.target = '_blank';\n                save.download = filename;\n                document.location = save.href;\n            }\n            else if (navigator.userAgent.toLowerCase().match(/(android)/)) {\n                if (window.ReactNativeWebView) {\n                    let data = {\n                        action: 'download',\n                        targetFunc: 'download',\n                        type: 'team',\n                        url: fileURL\n                    }\n                    this.sendMessageToApp(data);\n                }\n                else {\n                    let save = document.createElement('a');\n                    save.href = fileURL;\n                    save.target = '_blank';\n\n                    save.download = filename;\n                    var evt = new MouseEvent('click', {\n                        'view': window,\n                        'bubbles': true,\n                        'cancelable': false\n                    });\n                    save.dispatchEvent(evt);\n                    (window.URL || window.webkitURL).revokeObjectURL(save.href);\n                }\n            }\n            else {\n                var popup_window = window.open(fileURL, \"_blank\");\n                try {\n                    popup_window.focus();\n                } catch (e) {\n                    this.setState({ downloadFail: true })\n                }\n\n\n            }\n        }\n        \n        else if (!!window.ActiveXObject && document.execCommand) {\n            var _window = window.open(fileURL, '_blank');\n            _window.document.close();\n            _window.document.execCommand('SaveAs', true, filename)\n            _window.close();\n        }\n\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    /**\n     * @description This function is used to open player lineup page with formatted URL data\n     * @param teamItem Team item\n     * @see FieldView\n    */\n    openLineup = (teamItem, isYou) => {\n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n        \n\n        this.setState({\n            SelectedLineup: teamItem.mini_league_leaderboard_id,\n            userData: teamItem\n        }, () => {\n            \n            let statusLeague = this.state.MiniLeagueListItem.status == 0 && (this.state.MiniLeagueListItem.game_starts_in * 1000 > Date.now()) ? '' : this.state.MiniLeagueListItem.status == 2 || this.state.MiniLeagueListItem.status == 3 ? 2 : 1\n\n            this.props.history.push({\n                pathname: '/user-league-points', state: {\n                    FixturedContest: this.state.FixtureData,\n                    LobyyData: this.state.LobyyData,\n                    MiniLeagueSponser: this.state.MiniLeagueSponser,\n                    userData: this.state.userData,\n                    status: statusLeague,\n                    isYou: isYou\n\n                }\n            })\n        })\n\n\n    }\n\n    getLineupScoreData = (teamItem) => {\n        let lineupData = this.state.AllLineUPData && this.state.AllLineUPData[this.state.SelectedLineup] ? this.state.AllLineUPData[this.state.SelectedLineup] : ''\n        if (lineupData) {\n            this.showFieldV()\n        } else {\n            let param = {\n                'lineup_master_contest_id': teamItem.lineup_master_contest_id,\n                \"sports_id\": AppSelectedSport,\n            }\n            getLineupWithScore(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n\n                    let lData = this.state.AllLineUPData;\n                    lData[teamItem.lineup_master_contest_id] = responseJson.data;\n                    this.setState({\n                        AllLineUPData: lData\n                    }, () => {\n                        this.showFieldV()\n                    })\n                }\n            })\n        }\n    }\n\n    showFieldV = () => {\n        this.setState({\n            showFieldV: true\n        });\n    }\n    hideFieldV = () => {\n        this.setState({\n            showFieldV: false,\n            SelectedLineup: ''\n        });\n    }\n    goToLobby = () => {\n\n        this.props.history.push('/lobby')\n    }\n\n    copyToClipboard = (textToCopy) => {\n        var textField = document.createElement('textarea')\n        textField.innerText = textToCopy\n        document.body.appendChild(textField)\n        textField.select()\n        document.execCommand('copy')\n        textField.remove()\n        notify.show(AppLabels.URL_COPIED_TO_CLIPBOARD, \"success\", 5000);\n        setTimeout(() => {\n            this.setState({ downloadFail: false })\n        }, 1000 * 30);\n    }\n    \n    ContestDetailShow = (item) => {\n        this.setState({\n          showContestDetail: true,\n          MiniLeagueData:item,\n      });\n  }\n   /**\n     * @description method to hide contest detail model\n     */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n    render() {\n        let statusLeague = this.state.MiniLeagueListItem.status == 0 && (this.state.MiniLeagueListItem.game_starts_in * 1000 > Date.now()) ? '' : this.state.MiniLeagueListItem.status == 2 || this.state.MiniLeagueListItem.status == 3 ? 2 : 1\n\n\n        const HeaderOption = {\n            back: true,\n            fixture: false,\n            statusLeaderBoard: statusLeague,\n            screentitle: this.state.MiniLeagueSponser.mini_league_name,\n            leagueDate: this.state.MiniLeagueSponser,\n            hideShadow: true,\n            leaderboard: true,\n            minileague:true,\n        }\n        const { MiniLeagueSponser,showContestDetail } = this.state\n        let sponserImage = MiniLeagueSponser.sponsor_logo && MiniLeagueSponser.sponsor_logo != null ? MiniLeagueSponser.sponsor_logo : 0\n        let lineupData = this.state.AllLineUPData && this.state.AllLineUPData[this.state.SelectedLineup] ? this.state.AllLineUPData[this.state.SelectedLineup] : ''\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container\">\n\n                        <CustomHeader\n                            ref={(ref) => this.headerRef = ref}\n                            HeaderOption={HeaderOption}\n                            {...this.props} />\n\n\n                        <Row>\n\n                            <Col sm={12}>\n                                <div className=\"leaderboard-wrapper\">\n                                    {\n                                        (this.state.userRankList && this.state.leaderboardList.length == 0 && this.state.isLoaderShow) ?\n                                            this.state.ShimmerList.map((item, index) => {\n                                                return (\n                                                    <Shimmer key={index} />\n                                                )\n                                            })\n                                            :\n                                            (this.state.userRankList && this.state.leaderboardList.length == 0 && !this.state.isLoaderShow) ?\n                                                <NoDataView\n                                                    BG_IMAGE={Images.no_data_bg_image}\n                                                    CENTER_IMAGE={Images.teams_ic}\n                                                    MESSAGE_1={AppLabels.NO_DATA_AVAILABLE}\n                                                    MESSAGE_2={''}\n                                                    BUTTON_TEXT={AppLabels.GO_BACK_TO_LOBBY}\n                                                    onClick={this.goToLobby.bind(this)}\n                                                />\n                                                :\n\n\n                                                <div>\n                                                    {this.state.rootItem.scoring_alert && this.state.rootItem.scoring_alert != '0' &&\n                                                        <Alert variant=\"warning\" className=\"alert-warning msg-alert-container border-radius-0\">\n                                                            <div className=\"msg-alert-wrapper\">\n                                                                <span className=\"\"><i className=\"icon-megaphone\"></i></span>\n                                                                <span>{AppLabels.CUSTOM_SCORING_MSG}</span>\n                                                            </div>\n                                                        </Alert>\n                                                    }\n\n                                                    <div className=\"leaderboard-header header-free_to_play\">\n                                                        <div className=\"leaderboard-rank \">\n                                                            <img style={{ marginLeft: '12px' }} src={Images.HALL_OF_FAME_SMALL_ICON} />\n\n                                                            <div className=\"text_hall_of_fame\">\n                                                                {AppLabels.SPONSORED_BY}\n                                                            </div>\n                                                            {\n                                                            window.ReactNativeWebView ?\n                                                                <a\n                                                                    href\n                                                                    onClick={(event) => Utilities.callNativeRedirection(Utilities.getValidSponserURL(MiniLeagueSponser.sponsor_link, event))}>\n                                                                    <img className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)} />\n                                                                </a>\n\n                                                                :\n                                                                <a\n                                                                    href={Utilities.getValidSponserURL(MiniLeagueSponser.sponsor_link)}\n                                                                    onClick={(event) => event.stopPropagation()}\n                                                                    target='_blank'>\n                                                                    <img className=\"lobby_sponser-image sponser-card-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage)} />\n                                                                </a>\n\n                                                        }\n                                                        </div>\n\n                                                        {\n\n                                                            this.state.userRankList &&\n                                                            <Fragment>\n\n                                                                <div className={\"leaderboard-header \" + (\"collpased-header-list-hide you-rank\")} style={Object.keys(this.state.userRankList).length === 0 ? { height: 0, overflow: 'auto' } : { height: 55 }}>\n                                                                    <div>\n                                                                        {\n                                                                            Object.keys(this.state.userRankList).length === 0 ? '' :\n                                                                                <div key={this.state.userRankList.mini_league_leaderboard_id} onClick={() => this.openLineup(this.state.userRankList, true)} className={\"ranking-list pointer-cursor my-ranking-list\" + (this.state.SelectedLineup == this.state.userRankList.mini_league_leaderboard_id ? ' sel-active' : '')}>\n                                                                                    <div className=\"display-table-cell text-center\">\n                                                                                        <div className=\"rank you-rank\">{this.state.userRankList.game_rank}</div>\n                                                                                    </div>\n                                                                                    <div className={\"display-table-cell pl-1 pt3 pb3\" + (this.state.isExpandedWithDelay ? \" \" : '')}>\n                                                                                        <div className= {\"user-name-container\"+(this.state.userRankList.prize_data && this.state.userRankList.prize_data != null && this.state.userRankList.prize_data.length > 0 ? '':' mt6')}>\n                                                                                            {\n                                                                                                \n                                                                                                this.state.userRankList &&\n                                                                                                <div className=\"user-name user-name-mini-league-leaderboard\">{AppLabels.You}</div>\n                                                                                            }\n                                                                                            <div className={\"user-team-name\" + (!this.state.isExpandedWithDelay ? ' ' : '')}>\n\n\n                                                                                                <span className=\"won-amount\">\n\n                                                                                                    {\n                                                                                                        this.state.userRankList.prize_data && this.state.userRankList.prize_data != null && this.state.userRankList.prize_data.length > 0 &&\n\n                                                                                                        _Map(this.state.userRankList.prize_data, (prizeItem, idx) => {\n\n                                                                                                            return (\n\n                                                                                                                (prizeItem.prize_type == 0) ?\n                                                                                                                    <span className=\"contest-prizes\"  >\n                                                                                                                        {<i style={{ display: 'inlineBlock'}} className=\"icon-bonus\"></i>}\n                                                                                                                        {this.state.userRankList.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}\n                                                                                                                    </span>\n                                                                                                                    :\n                                                                                                                    (prizeItem.prize_type == 1) ?\n                                                                                                                        <span className=\"contest-prizes\"  >\n\n                                                                                                                            {<span style={{ display: 'inlineBlock'}}>{Utilities.getMasterData().currency_code}</span>}\n                                                                                                                            {this.state.userRankList.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}\n                                                                                                                        </span>\n                                                                                                                        :\n                                                                                                                        (prizeItem.prize_type == 2) ?\n                                                                                                                            <span className=\"contest-prizes\">\n                                                                                                                                {<span style={{ display: 'inlineBlock' }}>\n                                                                                                                                    <img style={{ marginBottom: '2px' }} src={Images.IC_COIN} width=\"12px\" height=\"12px\" />\n                                                                                                                                    {this.state.userRankList.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}</span>}\n\n                                                                                                                            </span>\n                                                                                                                            :\n                                                                                                                            (prizeItem.prize_type == 3) ?\n                                                                                                                                <span className=\"contest-prizes\" >\n                                                                                                                                    {<span style={{ display: 'inlineBlock' }}>{this.state.userRankList.prize_data.length === idx + 1 ? prizeItem.name : prizeItem.name + \"/\"}</span>}\n\n                                                                                                                                </span> : ''\n\n\n\n                                                                                                            )\n\n\n                                                                                                        })\n                                                                                                    }\n                                                                                                    {this.state.userRankList.prize_data && this.state.userRankList.prize_data != null && this.state.userRankList.prize_data.length > 0 ? <React.Fragment>\n\n                                                                                                        <span style={{ color: '#5DBE7D' }} className=\"won\"> {AppLabels.WON}  </span>{this.state.userRankList.team_name ? this.state.userRankList.team_name : ''}\n                                                                                                    </React.Fragment> : \" \" + this.state.userRankList.team_name ? this.state.userRankList.team_name : ''\n                                                                                                    }\n                                                                                                </span>\n\n                                                                                            </div>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                    <div className=\"display-table-cell\">\n                                                                                        <div className=\"points\">{this.state.userRankList.total_score}</div>\n                                                                                    </div>\n                                                                                    <div className='space' />\n\n                                                                                </div>\n\n\n\n\n                                                                        }\n                                                                    </div>\n                                                                </div>\n                                                                \n                                                            </Fragment>\n                                                        }\n                                                        <ListHeader context={this} />\n                                                    </div>\n                                                    <div className={'p-height ' + (Object.keys(this.state.userRankList).length === 0 ? ' user-rank-unavilable' : ' user-rank-available')} id='scrollableTarget'>\n                                                        <InfiniteScroll\n                                                            dataLength={this.state.leaderboardList.length}\n                                                            next={() => this.onLoadMore()}\n                                                            hasMore={!this.state.isLoaderShow && this.state.hasMore}\n                                                            scrollableTarget={'scrollableTarget'}\n                                                            loader={\n                                                                this.state.isLoadMoreLoaderShow &&\n                                                                <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                            }>\n                                                            <div className=\"leaderboard-listing\">\n\n                                                                {_Map(this.state.leaderboardList, (item, idx) => {\n\n                                                                    return (\n                                                                        <div key={item.mini_league_leaderboard_id} onClick={() => item.user_id == this.state.userRankList.user_id ? this.openLineup(item, true) : this.openLineup(item, false)} className={\"ranking-list pointer-cursor \" + (this.state.SelectedLineup == item.mini_league_leaderboard_id ? ' sel-active' : '')}>\n                                                                            <div className=\"display-table-cell text-center\">\n                                                                                <div className=\"rank\">{item.game_rank}</div>\n\n                                                                            </div>\n                                                                            <div className=\"display-table-cell pl-1\">\n\n                                                                                <div className= {\"user-name-container\" +(item.prize_data && item.prize_data != null && item.prize_data.length > 0 ? '':' mt6')}>\n                                                                                    <div className=\"user-name user-name-mini-league-leaderboard\">{item.user_name}</div>\n                                                                                    <div className=\"user-team-name\">\n\n\n\n                                                                                        <span className=\"won-amount\">\n                                                                                            {\n                                                                                                item.prize_data && item.prize_data != null && item.prize_data.length > 0 &&\n\n                                                                                                _Map(item.prize_data, (prizeItem, idx) => {\n\n                                                                                                    return (\n\n                                                                                                        (prizeItem.prize_type == 0) ?\n                                                                                                            <span className=\"contest-prizes\" >\n                                                                                                                {<i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>}\n                                                                                                                {item.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}\n                                                                                                            </span>\n                                                                                                            :\n                                                                                                            (prizeItem.prize_type == 1) ?\n                                                                                                                <span className=\"contest-prizes\" >\n\n                                                                                                                    {<span style={{ display: 'inlineBlock'}}>{Utilities.getMasterData().currency_code}</span>}\n                                                                                                                    {item.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}\n                                                                                                                </span>\n                                                                                                                :\n                                                                                                                (prizeItem.prize_type == 2) ?\n                                                                                                                    <span className=\"contest-prizes\" >\n                                                                                                                        {<span style={{ display: 'inlineBlock' }}>\n                                                                                                                            <img style={{ marginBottom: '2px' }} src={Images.IC_COIN} width=\"12px\" height=\"12px\" />\n                                                                                                                            {item.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}</span>}\n\n                                                                                                                    </span>\n                                                                                                                    :\n                                                                                                                    (prizeItem.prize_type == 3) ?\n                                                                                                                        <span className=\"contest-prizes\">\n                                                                                                                            {<span style={{ display: 'inlineBlock' }}>{item.prize_data.length === idx + 1 ? prizeItem.name : prizeItem.name + \"/\"}</span>}\n\n                                                                                                                        </span> : ''\n\n\n\n                                                                                                    )\n\n\n                                                                                                })\n\n\n                                                                                            }\n\n\n                                                                                            {item.prize_data && item.prize_data != null && item.prize_data.length > 0 ? <React.Fragment>\n\n                                                                                                <span style={{ color: '#5DBE7D' }} className=\"won\"> {AppLabels.WON}  </span>{item.team_name ? item.team_name : ''}\n                                                                                            </React.Fragment> : \" \" + item.team_name ? item.team_name : ''\n                                                                                            }\n\n                                                                                        </span>\n\n                                                                                    </div>\n                                                                                </div>\n\n                                                                            </div>\n                                                                            <div className=\"display-table-cell\">\n                                                                                <div className=\"points\">{item.total_score}</div>\n                                                                            </div>\n                                                                        </div>\n                                                                    )\n                                                                })}\n\n                                                            </div>\n\n                                                        </InfiniteScroll>\n                                                    </div>\n\n\n                                                </div>\n                                    }\n                                    \n                                </div>\n                            </Col>\n                        </Row>\n\n                        {\n                            (this.state.userRankList.length > 0 || this.state.leaderboardList.length > 0) &&\n                            <div className=\"bottom-download-container\">\n\n                                <div onClick={() => this.openPrizesForLeague()} >\n                                    <span className=\"download-text text-uppercase\"> {AppLabels.VIEW_ALL_PRIZES}</span>\n                                </div>\n\n\n                            </div>\n                        }\n                         {\n                            showContestDetail &&\n                            <LeagueDetails\n                               {...this.props}\n                                IsContestDetailShow={showContestDetail}\n                                IsContestDetailHide={this.ContestDetailHide}\n                                LobyyData={this.state.LobyyData}\n                                MiniLeagueData={this.state.MiniLeagueSponser} />\n                    }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/PrizeSection.jsx",["3147","3148","3149","3150","3151","3152","3153","3154"],"import React, { Component } from 'react';\nimport { Col } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _isUndefined, _isEmpty, _Map, _sumBy, _cloneDeep, _debounce } from '../../Utilities/Utilities';\n\nclass PrizeSection extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            prizeList: []\n        }\n    }\n\n\n\n\n    componentWillMount = () => {\n        this.setState({\n            prizeList: [\n                {\n                    label: 'iPhone x',\n                    prizeFor: '1st',\n                    prizeimg: ''\n                },\n                {\n                    label: 'Apple Watch',\n                    prizeFor: '2nd',\n                    prizeimg: ''\n                },\n                {\n                    label: 'Headphone',\n                    prizeFor: '3rd',\n                    prizeimg: ''\n                },\n                {\n                    label: 'money',\n                    prizeFor: '4th',\n                    prizeimg: ''\n                },\n                {\n                    label: 'coin',\n                    prizeFor: '5th',\n                    prizeimg: ''\n                },\n                {\n                    label: 'foodball',\n                    prizeFor: '6th',\n                    prizeimg: ''\n                },\n                {\n                    label: 'Gold',\n                    prizeFor: '7th',\n                    prizeimg: ''\n                },\n                {\n                    label: 'iPhone x',\n                    prizeFor: '1st',\n                    prizeimg: ''\n                },\n                {\n                    label: 'Apple Watch',\n                    prizeFor: '2nd',\n                    prizeimg: ''\n                },\n                {\n                    label: 'Headphone',\n                    prizeFor: '3rd',\n                    prizeimg: ''\n                },\n                {\n                    label: 'money',\n                    prizeFor: '4th',\n                    prizeimg: ''\n                },\n                {\n                    label: 'coin',\n                    prizeFor: '5th',\n                    prizeimg: ''\n                },\n                {\n                    label: 'foodball',\n                    prizeFor: '6th',\n                    prizeimg: ''\n                },\n                {\n                    label: 'Gold',\n                    prizeFor: '7th',\n                    prizeimg: ''\n                },\n            ]\n        });\n    }\n\n\n\n    render() {\n\n        const { prizeType } = this.props;\n\n        return (\n            <MyContext.Provider >\n\n                {\n                    this.state.prizeList && this.state.prizeList.map((item, index) => {\n                        return (\n                            <Col xs={4} sm={4} md={6} className=\"Ftp-prize-section\">\n                            <div className=\"Ftp-prize-inner-section\">\n                                <i className=\"icon-ic-info\"></i>\n                            </div>\n                            <div class=\"rank-ribbon\">\n                                <span class=\"ribbon-text\">{item.prizeFor}</span>\n                            </div>\n                            <div className=\"prize-name\">{item.label}</div>\n                        </Col>\n                        );\n                    })\n                }\n                      </MyContext.Provider>\n        )\n    }\n}\n\nexport default PrizeSection;","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/CompletedLeagueList.jsx",["3155","3156"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\nimport {getMiniLeagueByStatus } from \"../../WSHelper/WSCallings\";\nimport { NoDataView, MomentDateComponent } from '../CustomComponent';\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport LeagueDetails from './LeagueDetails';\n\n\nclass CompletedLeagueList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            leagueList: [],\n            LobyyData: '',\n            MiniLeagueList: [],\n            showContestDetail: false,\n             HeaderOption: {\n                back: true,\n                title: AL.COMPLETED_LEAGUE,\n                hideShadow: false\n            }\n        }\n    }\n\n    getMiniLeagueDetails = (item,LobyyData) => {\n        this.props.history.push({\n            pathname: '/league-details',\n            state: { LobyyData: LobyyData, MiniLeagueData:item }\n        })\n\n    }\n    ContestDetailShow = (item) => {\n          this.setState({\n            showContestDetail: true,\n            MiniLeagueData:item,\n        });\n    }\n    /**\n     * @description method to hide contest detail model\n     */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n    openLeaderBoardLeague=(item)=>{\n\n        this.props.history.push({ pathname: '/mini-league-leader-board', state: { \n            LobyyData:this.state.LobyyData,\n            MiniLeagueSponser:item,\n            MiniLeagueListItem:item\n        } }) \n    }\n\n\n\n    getMiniLeagueByStatus = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"status\": \"completed\",\n            \"page_no\": \"1\",\n            \"page_size\": \"500\"\n        }\n\n        delete param.limit;\n        var api_response_data = await getMiniLeagueByStatus(param);\n        if (api_response_data) {\n            this.setState({ MiniLeagueList: api_response_data })\n        }\n    }\n\n    componentDidMount() {\n        this.getMiniLeagueByStatus();\n\n    }\n\n    componentWillMount = () => {\n\n\n    }\n\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            title: AL.COMPLETED_LEAGUE,\n            share: true\n        }\n        const { LobyyData, MiniLeagueList,showContestDetail } = this.state;\n\n        return (\n            <MyContext.Provider >\n                <div className=\"web-container Ftp-web-container \">\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                    <CustomHeader\n                        {...this.props}\n                        HeaderOption={HeaderOption}\n                    />\n\n                    {\n                        MiniLeagueList.data && MiniLeagueList.data.map((item, index) => {\n                            return (\n                                <div className=\"league-list-all\">\n\n                                <div className=\"sort-contest-wrapper mt15\">\n                                <div className=\"league-section no-border\" onClick={() => this.openLeaderBoardLeague(item)}>\n                                        <div className=\"league-name\">\n                                            {item.mini_league_name}\n\n                                        </div>\n                                        <p> <MomentDateComponent data={{date:item.scheduled_date,format:\"D MMM\"}}/> - <MomentDateComponent data={{date:item.end_date,format:\"D MMM\"}}/> </p>\n                                    </div>\n\n                                </div>\n                                </div>\n                            );\n\n\n                            \n                        })\n                    }\n\n                {\n                    \n                        MiniLeagueList.data && MiniLeagueList.data.length == 0 &&\n                                                        <NoDataView\n                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                                                            MESSAGE_2={AppLabels.NO_DATA_VIEW_MESSAGE_COMPLETED_LEAGUE}\n                                                            onClick_2={this.joinContest}\n                                                        />\n                                                    \n                }\n                \n                {\n                            showContestDetail &&\n                            <LeagueDetails\n                               {...this.props}\n                                IsContestDetailShow={showContestDetail}\n                                IsContestDetailHide={this.ContestDetailHide}\n                                LobyyData={this.state.LobyyData}\n                                MiniLeagueData={this.state.MiniLeagueData} />\n                        }\n\n\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default CompletedLeagueList;","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/AllPrizes.jsx",["3157","3158","3159","3160","3161","3162","3163","3164","3165","3166","3167","3168","3169","3170","3171","3172","3173","3174","3175","3176","3177"],"import React, { Component } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { _Map,_isUndefined,Utilities } from '../../Utilities/Utilities';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport PrizeSection from \"./PrizeSection\";\nimport SponserBySection from \"./SponserBy\";\nimport Images from '../../components/images';\nimport { getMiniLeagueDetails } from \"../../WSHelper/WSCallings\";\nimport * as Constants from \"../../helper/Constants\";\nimport { NoDataView } from '../CustomComponent';\nimport * as AppLabels from \"../../helper/AppLabels\";\n\nclass AllPrizes extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            LobyyData: !_isUndefined(props.location.state) ? props.location.state.LobyyData : [],\n            MiniLeagueData: !_isUndefined(props.location.state) ? props.location.state.MiniLeagueData : '',\n            isMiniLeaguePrize:!_isUndefined(props.location.state) ? props.location.state.isMiniLeaguePrize : '',\n            prizeList:[],\n            merchandiseList:[]\n        }\n    }\n\n    componentWillMount = () => {\n        if(this.state.isMiniLeaguePrize && this.props.match.params.isMiniLeaguePrize){\n            this.getMiniLeagueDetails();\n          }\n          else{\n                   this.setState({\n                HeaderOption: {\n                    back: true,\n                    title: this.state.MiniLeagueData.collection_name,\n                    hideShadow: false\n                },\n                prizeList: this.state.MiniLeagueData.prize_distibution_detail,\n                merchandiseList: this.state.MiniLeagueData.merchandise }, () => {\n\n                 })\n          }\n\n\n    }\n\n    getMiniLeagueDetails = async () => {\n  if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"mini_league_uid\": this.props.match.params.mini_league_uid\n        }\n\n        delete param.limit;\n        var api_response_data = await getMiniLeagueDetails(param);\n        if (api_response_data) {\n            this.setState({\n                MiniLeagueList: api_response_data.data.match_list, HeaderOption: {\n                    back: true,\n                    title: api_response_data.data.mini_league_name,\n                    hideShadow: false\n                },\n                prizeList: api_response_data.data.prize_distibution_detail,\n                merchandiseList: api_response_data.data.merchandise,\n\n            })\n\n\n        }\n    }\n    setCurrentMaxPrize = (minMaxValue, prizeItem) => {\n        var maxMini = prizeItem.max - prizeItem.min + 1;\n        var finalPrize = (minMaxValue / maxMini)\n        return finalPrize;\n    }\n\n    render() {\n        const {MiniLeagueData} = this.state;\n\n        let sponserImage = MiniLeagueData && MiniLeagueData.sponsor_logo && MiniLeagueData.sponsor_logo!=null ? MiniLeagueData.sponsor_logo : 0\n\n        return (\n            <MyContext.Provider >\n                <div className=\"web-container Ftp-web-container padding-less Ftp-all-prizes\">\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                    <div className=\"Ftp-contest\">\n                        <div className=\"Ftp-header less-height\">\n                            <div className='row-container'>\n                                <div className='section-left'>\n                                    <a href class=\"header-action\" onClick={() => this.props.history.goBack()} >\n                                        <i class=\"icon-left-arrow\"></i>\n                                    </a>\n                                </div>\n\n                                <div className='section-middle'>\n                                    <div className=\"match-team-info\"> <span>{this.state.isMiniLeaguePrize ? this.state.MiniLeagueData.mini_league_name : this.state.MiniLeagueData.collection_name }</span> </div>\n                                    <div className=\"ftp-all-prizes-label\">{AL.ALL_PRIZES}</div>\n                                </div>\n\n                                <div xs={2} className='section-right'>\n                                <img src={Images.HALL_OF_FAME_SMALL_ICON}></img>\n\n                                </div>\n                            </div>\n                        </div>\n                      <SponserBySection item={\n                            {\n                                'img': sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage),\n                                'sponsor_link':MiniLeagueData.sponsor_link\n\n                            }\n                        } />\n                        <div className=\"Ftp-body Ftp-all-prizes-body\">\n                            \n                            <Row className=\"Ftp-prizes\">\n\n                                        {\n                                            this.state.prizeList && this.state.prizeList.map((item, index) => {\n                                                return (\n                                                    <Col xs={3} sm={3} md={3} className=\"Ftp-prize-section center-grid\">\n                                                        <div className={\"Ftp-prize-inner-section\" + (item.prize_type == 0 ? ' padding-bonus-icon': '')}>\n                                                            {\n                                                                item.prize_type == 0 ?\n                                                                <div className=\"bonus-icon-prize\">    \n                                                                 <i style={{ display: 'inlineBlock'}} className=\"icon-bonus\"></i>\n                                                                 </div>\n                                                                    : item.prize_type == 1 ?\n                                                                        <React.Fragment>\n                                                                        <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n                                                                        \n                                                                        </React.Fragment>\n                                                                        :\n                                                                        <React.Fragment>\n                                                                            {\n                                                                                item.prize_type == 2 ?\n                                                                                    <img alt=\"\" src={Images.IC_COIN} width=\"50px\" />\n                                                                                    :\n                                                                                    <div>\n                                                                                        {\n                                                                                            item.prize_type == 3 &&\n                                                                                            this.state.merchandiseList && this.state.merchandiseList.map((merchandise, index) => {\n                                                                                                return (\n                                                                                                    <React.Fragment key={index}>\n                                                                                                        {item.amount == merchandise.merchandise_id &&\n                                                                                                            <img style={{ resizeMode: 'contain' }} src={Utilities.getMerchandiseURL(merchandise.image_name)} width=\"60px\" height=\"60px\"  />\n                                                                                                        }\n\n                                                                                                    </React.Fragment>\n                                                                                                );\n                                                                                            })\n\n\n                                                                                        }\n                                                                                    </div>\n                                                                            }\n                                                                        </React.Fragment>\n\n\n                                                            }\n\n\n                                                        </div>\n                                                        <div class=\"rank-ribbon\">\n                                                        <span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min +'st') : item.min == 2 ? (item.min +'nd') : item.min == 3 ? (item.min +'rd'): item.min : item.min + ' - ' + item.max}</span>\n                                                        </div>\n                                                        <div className=\"prize-name\">\n                                                            { item.prize_type == 3 ? item.max_value :\n                                                             <div> \n                                                                  \n                                                             {\n                                                                 item.prize_type==1 ?\n                                                                 <React.Fragment>\n                                                                 <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n                                                                 </React.Fragment> \n                                                                 :\n                                                                 item.prize_type == 0 ?\n                                                               <div className=\"bonus-icon-prize-amount\">\n                                                                   <span className=\"contest-prizes\"><div  className=\"icon-bonus\"></div></span>\n                                                               </div>\n                                                               :\n                                                               item.prize_type == 2 ?\n                                                               <img className=\"contest-prizes\" style={{height:'12px', marginTop:'-2px',width:'12px'}} alt=\"\" src={Images.IC_COIN}   />\n                                                               :''\n                                                             }\n                                                             {this.setCurrentMaxPrize(item.min_value, item)}\n\n                                                           </div>\n                                                             }\n                                                            \n                                                        </div>\n                                                    </Col>\n                                                );\n                                            })\n                                        }\n                                    </Row>\n                                   \n                        </div>\n                        {\n                            this.state.prizeList && this.state.prizeList.length == 0 &&\n                            <NoDataView\n                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                        MESSAGE_1={AppLabels.LEAGUE_NO_PRIZE}\n                                                        onClick_2={this.joinContest}\n                                                    />\n                                                    \n                            \n                           \n                                                \n            }\n                    </div>\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default AllPrizes;","/var/www/html/framework/frontend/src/Modals/SpeenWheelModal.jsx",["3178","3179"],"import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { claimSpinTheWheel } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nimport WSManager from '../WSHelper/WSManager';\nimport * as WSC from \"../WSHelper/WSConstants\";\n\nclass SpeenWheelModal extends Component {\n  componentDidMount() {\n\n    if (this.props.preData) {\n      const { data } = this.props.preData;\n\n      setTimeout(() => {\n        window.initSpin({\n          loadJSON: data.wheel_data,\n          myResult: this.wheelResult,\n          myError: this.wheelError,\n          myGameEnd: this.wheelEnd,\n          btnRef: this.spinBtn\n        });\n      }, 10);\n    }\n  }\n\n  wheelResult = (e) => {\n    //e is the result object\n    // console.log('Spin Count: ' + e.spinCount + ' - ' + 'Win: ' + e.win + ' - ' + 'Message: ' + e.msg);\n    if (e.userData) {\n      console.log('User defined score: ' + e)\n      this.claimTodaysWheel(e);\n    }\n\n    /*  if(e.spinCount == 3){\n        show the game progress when the spinCount is 3\n        console.log(e.target.getGameProgress());\n        restart it if you like\n        e.target.restart();\n      }*/\n\n  }\n\n  wheelEnd = (e) => {\n    //e is gameResultsArray\n    console.log(e);\n  }\n\n  wheelError = (e) => {\n    //e is error object\n    console.log('Error: Spin Count: ' + e.spinCount + ' - ' + 'Message: ' + e.msg);\n  }\n\n  claimTodaysWheel = (e) => {\n    let param = {\n      spinthewheel_id: e.userData.spinthewheel_id\n    }\n    claimSpinTheWheel(param).then((responseJson) => {\n      if (responseJson.response_code == WSC.successCode) {\n\n        Utilities.showToast(e.msg || responseJson.message || '', 3000, 'icon-user');\n        const data = {};\n        let todayString = new Date().toDateString();\n        data['day_string'] = todayString;\n        data['claimed'] = 1;\n        WSManager.setWheelData(data);\n        this.props.preData.mHide();\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Modal\n        show={true}\n        className=\"spin2win-modal\"\n        bsSize=\"large\"\n      >\n        <Modal.Body>\n          <div id=\"container\">\n            <div className=\"wheelContainer\">\n              <svg className=\"wheelSVG\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" textRendering=\"optimizeSpeed\" preserveAspectRatio=\"xMidYMin meet\">\n                <defs>\n                  <filter id=\"shadow\" x=\"-100%\" y=\"-100%\" width=\"550%\" height=\"550%\">\n                    <feOffset in=\"SourceAlpha\" dx=\"0\" dy=\"0\" result=\"offsetOut\"></feOffset>\n                    <feGaussianBlur stdDeviation=\"9\" in=\"offsetOut\" result=\"drop\" />\n                    <feColorMatrix in=\"drop\" result=\"color-out\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .3 0\" />\n                    <feBlend in=\"SourceGraphic\" in2=\"color-out\" mode=\"normal\" />\n                  </filter>\n                </defs>\n                <g className=\"mainContainer\">\n                  <g className=\"wheel\">\n                  </g>\n                </g>\n                <g className=\"centerCircle\" />\n                <g className=\"wheelOutline\" />\n                <g className=\"pegContainer\" opacity=\"1\">\n                  <path className=\"peg\" fill=\"#EEEEEE\" d=\"M22.139,0C5.623,0-1.523,15.572,0.269,27.037c3.392,21.707,21.87,42.232,21.87,42.232 s18.478-20.525,21.87-42.232C45.801,15.572,38.623,0,22.139,0z\" />\n                </g>\n                <g className=\"valueContainer\" />\n                <g className=\"centerCircleImageContainer\" />\n              </svg>\n              <div className=\"toast toast-msg\">\n                <p></p>\n              </div>\n              <button ref={(ref) => this.spinBtn = ref} className=\"spinBtn btn-primary\">CLICK TO SPIN!</button>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nexport default SpeenWheelModal;","/var/www/html/framework/frontend/src/Component/CoinsModule/ReedemCoachMarks.jsx",[],"/var/www/html/framework/frontend/src/Component/CoinsModule/CoinCoachMarks.jsx",[],"/var/www/html/framework/frontend/src/Modals/ProfileUpdateConfirmation.jsx",[],"/var/www/html/framework/frontend/src/Component/FreeToPlayModule/FreeToPlayList.jsx",["3180","3181","3182","3183","3184","3185","3186","3187","3188","3189","3190","3191","3192","3193","3194","3195","3196","3197","3198","3199","3200","3201","3202","3203","3204","3205","3206","3207","3208","3209","3210","3211","3212","3213","3214","3215","3216","3217","3218","3219","3220","3221","3222","3223","3224","3225","3226","3227","3228","3229","3230","3231","3232","3233","3234","3235","3236","3237","3238","3239","3240","3241","3242","3243","3244","3245","3246"],"import React, { Component } from 'react';\nimport { ProgressBar, Row, Col } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _filter } from '../../Utilities/Utilities';\nimport { getFixtureMiniLeague, getContestDetails, getUserTeams, joinContest, getMiniLeagueDetails, getUserContestJoinCount } from \"../../WSHelper/WSCallings\";\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport MatchInfo from \"../CustomComponent/MatchInfo\";\nimport SponserBySection from \"./SponserBy\";\nimport { _isUndefined } from '../../Utilities/Utilities';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport ConfirmationPopup from '../../Modals/ConfirmationPopup';\nimport Thankyou from '../../Modals/Thankyou';\nimport ShareContestModal from '../../Modals/ShareContestModal';\nimport ContestDetailModal from '../../Modals/ContestDetail';\n\nvar globalThis = null;\n\n\nclass FreeToPlayList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            lineup_master_id: '',\n            team_name: '',\n            prizeList: [],\n            miniLeagueprizeList: [],\n            miniLeagueMerchandiseList: [],\n            ContestDetail: \"\",\n            merchandiseList: [],\n            MiniLeagueList: [],\n            TeamList: [],\n            activeTab: \"\",\n            showConfirmationPopUp: false,\n            showThankYouModal: false,\n            MiniLeagueData: '',\n            MiniLeagueSponser: '',\n            bonus_scoring_rules: [],\n            normal_scoring_rules: [],\n            strike_scoring_rules: [],\n            showContestDetail: false,\n            showSharContestModal: false,\n            userJoinCount: WSManager.loggedIn() ? -1 : 0,\n            FixtureData: '',\n            economy_scoring_rules: [],\n            userTeamListSend: [],\n            isMiniLeaguePrize: '',\n            LobyyData: !_isUndefined(props.location.state) ? props.location.state.LobyyData : [],\n            TeamSubmit:!_isUndefined(props.location.state) ? props.location.state.TeamSubmit : false,\n            videoId:''\n\n\n        }\n    }\n    /**\n        * @description method to display contest detail model\n        * @param data - contest model data for which contest detail to be shown\n        * @param activeTab -  tab to be open on detail, screen\n        * @param event -  click event\n        */\n    ContestDetailShow = (data, activeTab, event) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.setState({\n            showContestDetail: true,\n            FixtureData: data,\n            activeTab: activeTab,\n        });\n    }\n    /**\n     * @description method to hide contest detail model\n     */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    /**\n    * \n    * @description method to display confirmation popup model, when user join contest.\n    */\n    ConfirmatioPopUpShow = (data) => {\n        this.setState({\n            showConfirmationPopUp: true,\n        });\n    }\n    /**\n     * \n     * @description method to hide confirmation popup model\n     */\n    ConfirmatioPopUpHide = () => {\n        this.setState({\n            showConfirmationPopUp: false,\n        });\n    }\n\n\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n    goToLobby = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n        \n        \n        this.props.history.push('/lobby')\n        \n    }\n\n    getUserJoinCount() {\n        var param = {\n            \"contest_id\": this.props.match.params.contest_id,\n        }\n        this.setState({ isLoading: true })\n        getUserContestJoinCount(param).then((responseJson) => {\n            this.setState({ isLoading: false })\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    userJoinCount: responseJson.data.user_joined_count,\n                    lineup_master_id: responseJson.data.lineup_master_id,\n                    team_name: responseJson.data.team_name\n                })\n            }\n        })\n    }\n\n    createLineup = (CollectionData) => {\n        if (CollectionData) {\n            WSManager.clearLineup();\n            let urlParams = '';\n            urlParams = Utilities.replaceAll(CollectionData.collection_name, ' ', '_')\n            this.props.history.push({ pathname: '/lineup/' + urlParams, state: { FixturedContest: CollectionData, LobyyData: CollectionData, from: 'MyTeams', isFromMyTeams: true, isFrom: \"MyTeams\", resetIndex: 1 } })\n        }\n    }\n\n    ContestDetail = async () => {\n        var param = {\n            \"contest_id\": this.props.match.params.contest_id,\n        }\n        var api_response_data = await (getContestDetails(param));\n\n        if (api_response_data) {\n            let normal_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '14' || o.master_scoring_category_id == '18' ||\n                    o.master_scoring_category_id == '19' || o.master_scoring_category_id == '20' ||\n                    o.master_scoring_category_id == '23' || o.master_scoring_category_id == '24' ||\n                    o.master_scoring_category_id == '25';\n            })\n            let bonus_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '15' || o.master_scoring_category_id == '26';\n            })\n            let strike_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '17';\n            })\n            let economy_scoring_rules = _filter(api_response_data.scoring_rules, (o) => {\n                return o.master_scoring_category_id == '16';\n            })\n\n            this.setState({\n                ContestDetail: api_response_data,\n                normal_scoring_rules: normal_scoring_rules,\n                bonus_scoring_rules: bonus_scoring_rules,\n                strike_scoring_rules: strike_scoring_rules,\n                economy_scoring_rules: economy_scoring_rules,\n                prizeList: api_response_data.prize_distibution_detail,\n                merchandiseList: api_response_data.merchandise,\n            })\n            ls.set('selectedSports', api_response_data.sports_id);\n            Constants.setValue.setAppSelectedSport(api_response_data.sports_id);\n            this.setState({\n               videoId : this.getYouTubeVedioId(api_response_data.video_link)\n            })\n\n        }\n    }\n\n    getYouTubeVedioId(url){\n        var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n        var match = url.match(regExp);\n        return (match&&match[7].length==11)? match[7] : false;\n    }\n\n    getFixtureMiniLeagueApi = async () => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"season_game_uid\": this.props.match.params.season_game_uid\n        }\n\n        delete param.limit;\n        var api_response_data = await getFixtureMiniLeague(param);\n        if (api_response_data) {\n            this.setState({\n                MiniLeagueList: api_response_data.data\n            }, () => {\n                this.state.MiniLeagueList && this.state.MiniLeagueList.length == 1 &&\n                    this.getMiniLeagueDetails(this.state.MiniLeagueList[0].mini_league_uid)\n            })\n        }\n\n\n    }\n    getUserLineUpListApi = async (CollectionData) => {\n        let param = {\n            \"collection_master_id\": CollectionData.collection_master_id,\n        }\n        let user_data = ls.get('profile');\n        var user_unique_id = 0;\n        if (user_data && user_data.user_unique_id) {\n            user_unique_id = user_data.user_unique_id;\n        }\n        var api_response_data = await getUserTeams(param, user_unique_id);\n        if (api_response_data) {\n            this.setState({\n                TeamList: api_response_data,\n                userTeamListSend: api_response_data\n            })\n\n            if (this.state.userTeamListSend) {\n                let tempList = [];\n                this.state.userTeamListSend.map((data, key) => {\n\n                    tempList.push({ value: data, label: data.team_name })\n                    return '';\n                })\n\n                this.setState({ userTeamListSend: tempList });\n            }\n        }\n    }\n\n\n    \n\n    ConfirmEvent = (dataFromConfirmPopUp) => {\n\n        if ((dataFromConfirmPopUp.selectedTeam.lineup_master_id != null && dataFromConfirmPopUp.selectedTeam.lineup_master_id == \"\") || dataFromConfirmPopUp.selectedTeam == \"\") {\n            Utilities.showToast(AppLabels.SELECT_NAME_FIRST, 1000);\n        } else {\n            var currentEntryFee = 0;\n            if (currentEntryFee <= dataFromConfirmPopUp.balanceAccToMaxPercent) {\n                this.CallJoinGameApi(dataFromConfirmPopUp);\n            }\n        }\n    }\n\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        let param = {\n            \"contest_id\": this.props.match.params.contest_id,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        joinContest(param).then((responseJson) => {\n\n            if (responseJson.response_code == WSC.successCode) {\n                this.ConfirmatioPopUpHide();\n                this.setState({\n                    isNewCJoined: true\n                })\n                setTimeout(() => {\n\n                    \n                    WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestjoin');\n\n                    WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'contestjoindaily');\n\n                    this.ThankYouModalShow()\n                }, 300);\n                WSManager.clearLineup();\n            } else {\n                Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n            }\n        })\n    }\n    createTeamAndJoin = (dataFromConfirmFixture, dataFromConfirmLobby) => {\n        WSManager.clearLineup();\n        let urlData = this.state.LobyyData;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        dateformaturl = dateformaturl.getDate() + '-' + (dateformaturl.getMonth() + 1) + '-' + dateformaturl.getFullYear();\n\n        if (urlData.home) {\n            this.props.history.push({ pathname: '/lineup/' + urlData.home.toLowerCase() + \"-vs-\" + urlData.away.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: dataFromConfirmFixture, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n        }\n        else {\n            let collectionName = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n            this.props.history.push({ pathname: '/lineup/' + collectionName.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: dataFromConfirmFixture, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n        }\n\n    }\n\n    componentDidMount = () => {\n        globalThis = this;\n        const matchParam = this.props.match.params;\n        this.getFixtureMiniLeagueApi();\n        this.ContestDetail();\n\n        if (WSManager.loggedIn()) {\n            this.getUserJoinCount();\n            this.getUserLineUpListApi(this.props.match.params);\n            WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n        }\n    }\n\n\n    /**\n           * \n           * @description method to display share contest popup model.\n           */\n    shareContestModalShow = (data) => {\n        this.setState({\n            showSharContestModal: true,\n        });\n    }\n    /**\n     * \n     * @description method to hide share contest popup model.\n     */\n    shareContestModalHide = () => {\n        this.setState({\n            showSharContestModal: false,\n        });\n    }\n    /**\n   * \n   * @description method invoke when user click on share contest icon\n   * @param shareContestEvent - share contest event\n   * @param FixturedContestItem - Contest model on which user click\n   */\n    shareContest(shareContestEvent, FixturedContestItem) {\n        if (WSManager.loggedIn()) {\n            shareContestEvent.stopPropagation();\n            this.setState({ showSharContestModal: true, FixtureData: FixturedContestItem })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goBackScreen = () => {\n        if(this.state.TeamSubmit){\n            this.props.history.push('/lobby')\n        }\n        else{\n            this.props.history.goBack();\n        }\n        \n    }\n\n\n    getPrizeDetail = (item, LobyyData) => {\n        \n        \n        \n        \n        this.setState({\n            isMiniLeaguePrize: true,\n        }, () => {\n            this.props.history.push({\n                pathname: '/all-prizes/' + item.mini_league_uid + \"/\" + true, state: {\n                    LobyyData: this.state.LobyyData,\n                    MiniLeagueData: item,\n                    isMiniLeaguePrize: this.state.isMiniLeaguePrize\n\n                }\n            })\n        })\n    }\n    getContestPrizeDetails = (ContestDetail) => {\n        this.setState({\n            isMiniLeaguePrize: false,\n        }, () => {\n            this.props.history.push({\n                pathname: '/all-prizes/' + \"contestPrize\" + \"/\" + false, state: {\n                    LobyyData: this.state.LobyyData,\n                    MiniLeagueData: ContestDetail,\n                    isMiniLeaguePrize: this.state.isMiniLeaguePrize\n\n                }\n            })\n        })\n    }\n\n    getWinnerCount(prizeList) {\n\n        if (prizeList != '') {\n            if ((prizeList[prizeList.length - 1].max) > 1) {\n                return prizeList[prizeList.length - 1].max + \" \" + AppLabels.WINNERS\n            } else {\n                return prizeList[prizeList.length - 1].max + \" \" + AppLabels.WINNER\n            }\n        } else {\n            return '0 Winner';\n        }\n    }\n    /**\n   * @description Method to show progress bar\n   * @param {*} join - number of user joined\n   * @param {*} total - total (max size) of team\n   */\n    ShowProgressBar = (join, total) => {\n        return join * 100 / total;\n    }\n\n    /**\n     * @description Method to check user is guest on loggedin in case user join\n     * @param {*} event - click event\n     * @param {*} FixturedContestItem - contest model on which user click\n     */\n    check(event, FixturedContestItem) {\n        if (WSManager.loggedIn()) {\n            this.state.userJoinCount > 0 ? globalThis.openLineup(this.state.LobyyData, this.state.LobyyData, this.state.ContestDetail, true, null) : globalThis.joinGame(event, FixturedContestItem)\n        }\n        else {\n            this.props.history.push(\"/signup\")\n        }\n\n    }\n\n\n    openLineup(rootitem, contestItem, teamitem, isEdit, isFromtab, sideView) {\n        const { allowCollection } = this.state;\n        this.setState({\n            sideView: sideView,\n            fieldViewRightData: teamitem,\n            rootitem: rootitem\n        })\n        let urlData = rootitem;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n        let lineupPath = '';\n\n        if (sideView == false || isEdit == true) {\n\n            if (isEdit == false) {\n                if (urlData.home) {\n                    let fieldViewPath = '/field-view/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: fieldViewPath.toLowerCase(), state: { team: teamitem, contestItem: contestItem, rootitem: rootitem, isEdit: isEdit, from: 'MyContest', isFromtab: isFromtab, isFromMyTeams: true, FixturedContest: contestItem, LobyyData: rootitem, resetIndex: 1 } });\n                }\n                else {\n                    let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                    let fieldViewPath = '/field-view/' + pathurl + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: fieldViewPath.toLowerCase(), state: { team: teamitem, contestItem: contestItem, rootitem: rootitem, isEdit: isEdit, from: 'MyContest', isFromtab: isFromtab, isFromMyTeams: true, FixturedContest: contestItem, LobyyData: rootitem, resetIndex: 1 } });\n                }\n            }\n            else {\n                let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { team_name: this.state.team_name, lineup_master_id: this.state.lineup_master_id, SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: this.state.LobyyData ? urlData : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: this.state.rootDataItem, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: 1, teamitem: teamitem, collection_master_id: contestItem.collection_master_id, league_id: contestItem.league_id } });\n            }\n        }\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    /**\n    * @description method to submit user entry to join contest\n    * if user is guest then loggin screen will display else go to roster to select play to create new team\n    */\n    onSubmitBtnClick = () => {\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/signup' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } else {\n            if (this.state.TeamList != null && !_isUndefined(this.state.TeamList) && this.state.TeamList.length > 0) {\n                this.ContestDetailHide();\n                setTimeout(() => {\n                    this.setState({ showConfirmationPopUp: true, FixtureData: this.state.LobyyData })\n                }, 200);\n            } else {\n                let urlData = this.state.LobyyData;\n                let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n                dateformaturl = new Date(dateformaturl);\n                let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n                let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n                dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n                let lineupPath = '';\n                if (urlData.home) {\n                    lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n                }\n                else {\n                    let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                    lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n                }\n            }\n        }\n    }\n\n    /**\n   * @description Method called when user loggedin  and click on join game \n   * @param {*} event - click event\n   * @param {*} FixturedContestItem - contest model on which user click\n   * @param {*} teamListData - user created team list of same collection\n   */\n    joinGame(event, FixturedContestItem, teamListData) {\n        if (event) {\n            event.stopPropagation();\n        }\n        WSManager.clearLineup();\n        if (this.state.TeamList.length > 0 || (teamListData && teamListData != null && teamListData.length > 0)) {\n            this.setState({ showConfirmationPopUp: true, FixtureData: FixturedContestItem })\n        } else {\n            let urlData = this.state.LobyyData;\n            let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n            dateformaturl = new Date(dateformaturl);\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n            let lineupPath = ''\n            if (urlData.home) {\n                lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n            }\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: FixturedContestItem, LobyyData: this.state.LobyyData, resetIndex: 1, isCollectionEnable: (Constants.SELECTED_GAMET == Constants.GameType.MultiGame && this.state.LobyyData.match_list && this.state.LobyyData.match_list.length > 1) } })\n        }\n        \n        WSManager.setFromConfirmPopupAddFunds(false);\n    }\n\n    /**\n         * @description lifecycle method of react,\n         * method to load locale storage data and props data\n         */\n    componentWillMount() {\n        if (this.props.location.state && this.props.location.state.from == 'MyTeams') {\n            this.setState({ lineup_master_id: this.props.location.state.lineup_master_id })\n        }\n\n    }\n    seeMyContest = () => {\n        this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n    }\n\n    getMiniLeagueDetails = async (mini_league_uid) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"mini_league_uid\": mini_league_uid\n        }\n\n        delete param.limit;\n        var api_response_data = await getMiniLeagueDetails(param);\n        if (api_response_data) {\n            this.setState({\n                miniLeagueprizeList: api_response_data.data.prize_distibution_detail,\n                miniLeagueMerchandiseList: api_response_data.data.merchandise,\n\n            })\n\n\n        }\n    }\n\n    setCurrentMaxPrize = (minMaxValue, prizeItem) => {\n        var maxMini = prizeItem.max - prizeItem.min + 1;\n        var finalPrize = (minMaxValue / maxMini)\n        return finalPrize;\n    }\n    render() {\n\n        \n        \n        \n        \n        \n        const { LobyyData, ContestDetail, showContestDetail, activeTab, FixtureData, showConfirmationPopUp, userTeamListSend, showThankYouModal, showSharContestModal } = this.state;\n        let sponserImage = LobyyData.sponsor_logo && LobyyData.sponsor_logo != null ? LobyyData.sponsor_logo : 0\n        let miniLeagueListLengthStatus = this.state.MiniLeagueList && this.state.MiniLeagueList.length > 1 ? 2 : this.state.MiniLeagueList && this.state.MiniLeagueList.length == 1 ? 1 : 0\n\n        return (\n            <MyContext.Provider >\n                <div className=\"web-container Ftp-web-container padding-less \">\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                    <div className=\"Ftp-contest\">\n                        <div className=\"Ftp-header less-height\">\n                            <div className='row-container'>\n                                <div className='section-left' key={this.props.match.params.season_game_uid} onClick={() => this.goBackScreen()} >\n                                    <a href class=\"header-action\">\n                                        <i class=\"icon-left-arrow\"></i>\n                                    </a>\n                                </div>\n\n                                <div class=\"app-header-text\" >{AL.CONTESTS}</div>\n\n\n                                <div xs={2} className='section-right' key={this.props.match.params.season_game_uid}  >\n                                    <a href class=\"header-action\">\n                                        <i onClick={(shareContestEvent) => globalThis.shareContest(shareContestEvent, this.state.ContestDetail)} className=\"icon-share\"></i>\n                                         </a>\n                                </div>\n                            </div>\n                        </div>\n\n                        <SponserBySection item={\n                            {\n                                'img': sponserImage == 0 ? Images.BRAND_LOGO_FULL_PNG : Utilities.getSponserURL(sponserImage),\n                                'sponsor_link': LobyyData.sponsor_link\n                            }\n                        } />\n                        <div className=\"Ftp-body padding-contest-free\" >\n                            <div className=\"contest-info\" onClick={(event) => globalThis.ContestDetailShow(this.state.LobyyData, 1, event)}>\n                                <a href>\n                                    {AL.CONTEST_INFO} <i className=\"icon-ic-info\"></i>\n                                </a>\n                            </div>\n                            <MatchInfo item={\n                                {\n                                    away: LobyyData.away,\n                                    away_flag: LobyyData.away_flag,\n                                    away_uid: LobyyData.away_uid,\n                                    collection_master_id: this.props.match.params.collection_master_id,\n                                    collection_name: LobyyData.collection_name,\n                                    custom_message: LobyyData.custom_message,\n                                    deadline_time: LobyyData.deadline_time,\n                                    delay_message: LobyyData.delay_message,\n                                    delay_minute: LobyyData.delay_minute,\n                                    delay_text: LobyyData.delay_text,\n                                    format: LobyyData.format,\n                                    game_starts_in: LobyyData.game_starts_in,\n                                    home: LobyyData.home,\n                                    home_flag: LobyyData.home_flag,\n                                    home_uid: LobyyData.home_uid,\n                                    league_id: LobyyData.league_id,\n                                    league_name: LobyyData.league_name,\n                                    playing_announce: LobyyData.playing_announce,\n                                    score_data: LobyyData.score_data,\n                                    season_game_uid: this.props.match.params.season_game_uid,\n                                    season_scheduled_date: LobyyData.season_scheduled_date,\n                                    total_players: LobyyData.total_players,\n                                    total_prize_pool: LobyyData.total_prize_pool\n                                }\n                            } timerCallback={this.state.timerCallback} />\n                            {\n                                this.state.prizeList && this.state.prizeList.length > 0 ?\n                                    <Row className=\"Ftp-prizes no-margin mt20\">\n                                        {\n                                            this.state.prizeList && this.state.prizeList.length > 0 && this.state.prizeList.slice(0, 3).map((item, index) => {\n                                                return (\n                                                    <Col xs={3} sm={3} md={4} className=\"Ftp-prize-section center-grid\">\n                                                        <div className={\"Ftp-prize-inner-section\" + (item.prize_type == 0 ? ' padding-bonus-icon': '')}>\n                                                            {\n                                                                item.prize_type == 0 ?\n                                                                    <div className=\"bonus-icon-prize\">\n                                                                        <i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>\n                                                                    </div>\n                                                                    : item.prize_type == 1 ?\n                                                                        <React.Fragment>\n                                                                            <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n\n                                                                        </React.Fragment>\n                                                                        :\n                                                                        <React.Fragment>\n                                                                            {\n                                                                                item.prize_type == 2 ?\n                                                                                    <img alt=\"\" src={Images.IC_COIN} width=\"50px\" />\n                                                                                    :\n                                                                                    <div>\n                                                                                        {\n                                                                                            item.prize_type == 3 &&\n                                                                                            this.state.merchandiseList && this.state.merchandiseList.map((merchandise, index) => {\n                                                                                                return (\n                                                                                                    <React.Fragment key={index}>\n                                                                                                        {item.amount == merchandise.merchandise_id &&\n                                                                                                            <img style={{ resizeMode: 'contain' }} src={Utilities.getMerchandiseURL(merchandise.image_name)} width=\"60px\" height=\"60px\" />\n                                                                                                        }\n\n                                                                                                    </React.Fragment>\n                                                                                                );\n                                                                                            })\n\n\n                                                                                        }\n                                                                                    </div>\n                                                                            }\n                                                                        </React.Fragment>\n\n\n                                                            }\n                                                            </div>\n                                                        <div class=\"rank-ribbon\">\n                                                            <span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min + 'st') : item.min == 2 ? (item.min + 'nd') : item.min == 3 ? (item.min + 'rd') : item.min : item.min + ' - ' + item.max}</span>\n                                                        </div>\n                                                        <div className=\"prize-name\">\n                                                            {item.prize_type == 3 ? item.max_value \n                                                            : \n                                                               <div> \n                                                                  \n                                                                  {\n                                                                      item.prize_type==1 ?\n                                                                      <React.Fragment>\n                                                                      <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n                                                                      </React.Fragment> \n                                                                      :\n                                                                      item.prize_type == 0 ?\n                                                                    <div className=\"bonus-icon-prize-amount\">\n                                                                        <span className=\"contest-prizes\"><div  className=\"icon-bonus\"></div></span>\n                                                                    </div>\n                                                                    :\n                                                                    item.prize_type == 2 ?\n                                                                    <img className=\"contest-prizes\" style={{height:'12px', marginTop:'-2px',width:'12px'}} alt=\"\" src={Images.IC_COIN}   />\n                                                                    :''\n                                                                  }\n                                                                  {this.setCurrentMaxPrize(item.min_value, item)}\n\n                                                                </div>\n                                                            }\n\n                                                        </div>\n                                                    </Col>\n                                                );\n                                            })\n                                        }\n\n                                    </Row>\n                                    :\n                                    <div className=\"no-prize-text\">{AL.NO_PRIZES_FOR_THIS_CONTEST}</div>\n\n                            }\n\n\n\n                            {\n                                this.state.prizeList && this.state.prizeList.length > 3 &&\n                                <div className=\"show-more-prizes text-center\" onClick={() => this.getContestPrizeDetails(this.state.ContestDetail)}>\n                                    <div className=\"button button-primary-rounded padding-more\">\n                                        {AL.VIEW_ALL_PRIZES}</div>\n                                </div>\n                            }\n                            {\n                                miniLeagueListLengthStatus != 0 &&\n                                <div className=\"contest-section p-v-ms\">\n\n                                    <img src={Images.HALL_OF_FAME_SMALL_ICON} />\n                                    <div className=\"Ftp-prizes-label\">{AL.HALL_OF_FAME_JOIN_CONTEST_TEXT}</div>\n\n\n                                </div>\n                            }\n\n\n\n                            {\n                                miniLeagueListLengthStatus == 2 && this.state.MiniLeagueList.map((item, index) => {\n                                    return (\n                                        <div className=\"league-list-all\">\n\n                                            <div className=\"sort-contest-wrapper less-margin mt10 p-t p-lr \">\n                                                <div className=\"contest-detail-section no-border\">\n                                                    <div className=\"league-name contest-detail-text\">\n                                                        {item.mini_league_name}\n\n                                                    </div>\n                                                    <div className=\"pull-right view-prize-all margin-less\" onClick={() => this.getPrizeDetail(item)}>\n                                                        {AL.VIEW_ALL_PRIZES}\n                                                    </div>\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                    );\n                                })\n\n                            }\n\n\n                            {\n                                miniLeagueListLengthStatus == 1 &&\n                                    this.state.miniLeagueprizeList && this.state.miniLeagueprizeList.length > 0 ?\n                                    <Row className=\"Ftp-prizes  no-margin mt20\">\n                                        {\n                                            this.state.miniLeagueprizeList && this.state.miniLeagueprizeList.length > 0 && this.state.miniLeagueprizeList.slice(0, 3).map((item, index) => {\n                                                return (\n                                                    <Col xs={3} sm={3} md={4} className=\"Ftp-prize-section center-grid\">\n                                                        <div className={\"Ftp-prize-inner-section\" + (item.prize_type == 0 ? ' padding-bonus-icon': '')}>\n                                                            {\n                                                                item.prize_type == 0 ?\n                                                                    <div className=\"bonus-icon-prize\">\n                                                                        <i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>\n                                                                    </div>\n                                                                    : item.prize_type == 1 ?\n                                                                        <React.Fragment>\n                                                                            <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n\n                                                                        </React.Fragment>\n                                                                        :\n                                                                        <React.Fragment>\n                                                                            {\n                                                                                item.prize_type == 2 ?\n                                                                                    <img alt=\"\" src={Images.IC_COIN} width=\"50px\" />\n                                                                                    :\n                                                                                    <div>\n                                                                                        {\n                                                                                            item.prize_type == 3 &&\n                                                                                            this.state.miniLeagueMerchandiseList && this.state.miniLeagueMerchandiseList.map((merchandise, index) => {\n                                                                                                return (\n                                                                                                    <React.Fragment key={index}>\n                                                                                                        {item.amount == merchandise.merchandise_id &&\n                                                                                                            <img style={{ resizeMode: 'contain' }} src={Utilities.getMerchandiseURL(merchandise.image_name)} width=\"60px\" height=\"60px\" />\n                                                                                                        }\n\n                                                                                                    </React.Fragment>\n                                                                                                );\n                                                                                            })\n\n\n                                                                                        }\n                                                                                    </div>\n                                                                            }\n                                                                        </React.Fragment>\n\n\n                                                            }\n                                                        </div>\n                                                        <div class=\"rank-ribbon\">\n                                                            <span class=\"ribbon-text\">{item.min == item.max ? item.min == 1 ? (item.min + 'st') : item.min == 2 ? (item.min + 'nd') : item.min == 3 ? (item.min + 'rd') : item.min : item.min + ' - ' + item.max}</span>\n                                                        </div>\n                                                        <div className=\"prize-name\">\n                                                            {item.prize_type == 3 ? item.max_value : \n                                                                <div> \n                                                                  \n                                                                {\n                                                                    item.prize_type==1 ?\n                                                                    <React.Fragment>\n                                                                    <div className=\"currency-icon-prize\">{Utilities.getMasterData().currency_code}</div>\n                                                                    </React.Fragment> \n                                                                    :\n                                                                    item.prize_type == 0 ?\n                                                                  <div className=\"bonus-icon-prize-amount\">\n                                                                      <span className=\"contest-prizes\"><div  className=\"icon-bonus\"></div></span>\n                                                                  </div>\n                                                                  :\n                                                                  item.prize_type == 2 ?\n                                                                  <img className=\"contest-prizes\" style={{height:'12px', marginTop:'-2px',width:'12px'}} alt=\"\" src={Images.IC_COIN}   />\n                                                                  :''\n                                                                }\n                                                                {this.setCurrentMaxPrize(item.min_value, item)}\n\n                                                              </div>                                                           }\n\n                                                        </div>\n                                                    </Col>\n                                                );\n                                            })\n                                        }\n\n                                    </Row>\n                                    :\n                                    ''\n\n                            }\n\n                            {\n                                this.state.miniLeagueprizeList && this.state.miniLeagueprizeList.length > 3 &&\n                                <div className=\"show-more-prizes text-center\" onClick={() => this.getPrizeDetail(this.state.MiniLeagueList[0])}>\n                                    <div className=\"button button-primary-rounded padding-more\">\n                                        {AL.VIEW_ALL_PRIZES}</div>\n                                </div>\n                            }\n                            {\n                                this.state.videoId && \n                                <iframe className=\"mt30\" id=\"player\" type=\"text/html\" width=\"530\" height=\"300\"\n                                src={\"https://www.youtube.com/embed/\"+this.state.videoId}\n                                frameborder=\"0\"></iframe>\n                            }\n\n\n\n\n                            <div className=\"entries-detail\">\n                                <div className=\"contest-winner\">{this.getWinnerCount(this.state.prizeList)}</div>\n                                <div className=\"progress-bar-default\">\n\n                                    <ProgressBar now={this.ShowProgressBar(this.state.ContestDetail.total_user_joined, this.state.ContestDetail.size)} className={parseInt(this.state.ContestDetail.total_user_joined) >= parseInt(this.state.ContestDetail.minimum_size) ? '' : 'danger-area'} />\n                                    <div className=\"progress-bar-value\">\n                                        <span className=\"total-output xdanger-text\">{this.state.ContestDetail.total_user_joined}</span><span className=\"total-entries\"> / {this.state.ContestDetail.size} {AL.ENTRIES}</span>\n                                        <span className=\"min-entries min-entry-free-to-play\">{AL.MIN} {this.state.ContestDetail.minimum_size}</span>\n                                    </div>\n\n                                </div>\n\n\n                            </div>\n                        </div>\n\n                        {\n                            miniLeagueListLengthStatus != 0 &&\n                            <div className=\"no-prize-text no-prize-text-league\">{AL.NO_PRIZES_FOR_THIS_LEAGUES}</div>\n\n                        }\n                        <div>\n                            <div className=\"button-primary-rounded button text-center join-button\"\n                                onClick={(event) => globalThis.check(event, this.state.LobyyData)}>{this.state.userJoinCount > 0 ? AL.EDIT_CURRENT_TEAM : AL.JOIN_FOR_FREE}</div>\n                        </div>\n                    </div>\n                    {\n                        showConfirmationPopUp &&\n                        <ConfirmationPopup\n                            IsConfirmationPopupShow={this.ConfirmatioPopUpShow}\n                            IsConfirmationPopupHide={this.ConfirmatioPopUpHide}\n                            TeamListData={userTeamListSend}\n                            FixturedContest={FixtureData}\n                            ConfirmationClickEvent={this.ConfirmEvent}\n                            CreateTeamClickEvent={this.createTeamAndJoin}\n                            lobbyDataToPopup={LobyyData}\n                            isFromFreeToPlay={true}\n                            fromContestListingScreen={false}\n                            createdLineUp={this.state.lineup_master_id} />\n                    }\n                    {\n                        showSharContestModal &&\n                        <ShareContestModal\n                            IsShareContestModalShow={this.shareContestModalShow}\n                            IsShareContestModalHide={this.shareContestModalHide}\n                            FixturedContestItem={FixtureData} />\n                    }\n                    {\n                        showContestDetail &&\n                        <ContestDetailModal\n                            {...this.props}\n                            IsContestDetailShow={showContestDetail}\n                            onJoinBtnClick={this.onSubmitBtnClick}\n                            IsContestDetailHide={this.ContestDetailHide}\n                            OpenContestDetailFor={FixtureData}\n                            activeTabIndex={activeTab}\n                            LobyyData={this.state.LobyyData} />\n                    }\n                    {\n                        showThankYouModal &&\n                        <Thankyou ThankyouModalShow={this.ThankYouModalShow}\n                            ThankYouModalHide={this.ThankYouModalHide}\n                            goToLobbyClickEvent={this.goToLobby}\n                            seeMyContestEvent={this.seeMyContest} />\n                    }\n                </div>\n            </MyContext.Provider >\n        )\n    }\n}\n\nexport default FreeToPlayList;","/var/www/html/framework/frontend/src/Component/CoinsModule/DailyCheckinBonus.jsx",["3247"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { Modal } from 'react-bootstrap';\nimport { _Map, Utilities } from '../../Utilities/Utilities';\nimport { claimCoins } from '../../WSHelper/WSCallings';\nimport EarnCoins from './EarnCoins';\nimport Images from '../../components/images';\nimport WSManager from '../../WSHelper/WSManager';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport CustomHeader from '../../components/CustomHeader';\n\nclass DailyCheckinBonus extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            GCoins: '',\n            ANMTC: '',\n            userCoinB: (WSManager.getBalance().point_balance || 0),\n            posting: false\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ ANMTC: \"animate-coins\" });\n        }, 500);\n        const { dailyData } = this.props.preData;\n        _Map(dailyData.daily_streak_coins, (item) => {\n            if (this.state.GCoins === '' && this.isTodayClaimed() && item.day_number === dailyData.current_day) {\n                this.setState({ GCoins: item.coins })\n            } else if (this.state.GCoins === '' && !this.isTodayClaimed() && item.day_number === (dailyData.current_day + 1)) {\n                this.setState({ GCoins: item.coins })\n            }\n        })\n    }\n\n\n    claimTodaysCoins = () => {\n        if (!this.state.posting) {\n            this.setState({\n                posting: true\n            })\n            let param = {}\n            claimCoins(param).then((responseJson) => {\n                this.setState({\n                    posting: false\n                })\n                if (responseJson.response_code == WSC.successCode) {\n                    this.props.preData.mHide();\n                    Utilities.showToast(responseJson.message, 3000, Images.IC_COIN);\n                    const { dailyData } = this.props.preData;\n                    dailyData['allow_claim'] = 0\n                    WSManager.setDailyData(dailyData);\n                    EarnCoins.updateBalance();\n                    let preBal = parseInt(this.state.userCoinB);\n                    let tCoins = 0;\n                    _Map(dailyData.daily_streak_coins, (item, index) => {\n                        if (item.day_number === dailyData.current_day) {\n                            tCoins = item.coins\n                        }\n                    })\n                    let updatedBal = preBal + parseInt(tCoins);\n                    CustomHeader.updateCoinBalance(updatedBal);\n                    let bal = WSManager.getBalance();\n                    bal[\"point_balance\"] = updatedBal;\n                    WSManager.setBalance(bal);\n                }\n            })\n        }\n    }\n\n    isTodayClaimed = () => {\n        const { dailyData } = this.props.preData;\n        return dailyData.allow_claim === 1;\n    }\n\n    hideModal = (isClaimed) => {\n        if (!isClaimed) {\n            this.props.preData.mHide();\n        }\n    }\n\n    renderGridItem = (item, index) => {\n        const { dailyData } = this.props.preData;\n        return (\n            <li key={item.day_number} className={\"daily-card\" + ((item.day_number === dailyData.current_day && this.isTodayClaimed()) ? ' active' : (item.day_number > dailyData.current_day ? ' disabled' : ''))}>\n                <img className=\"crad-tick\" src={Images.CHECKIN_TICK} alt=\"\" />\n                <p className=\"\">{AL.DAY} {item.day_number}</p>\n                <p className=\"coin-count\">{item.coins}</p>\n                <p ><img className=\"coin-img\" src={(item.day_number > dailyData.current_day) ? Images.IC_COIN_GRAY : Images.IC_COIN} alt=\"\" />{AL.coins}</p>\n            </li>\n        )\n    }\n\n    render() {\n\n        const { mShow, dailyData } = this.props.preData;\n\n        let isClaimed = this.isTodayClaimed();\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={() => this.hideModal(isClaimed)}\n                        dialogClassName=\"daily-chekin-modal\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Body>\n                            <div className=\"container\">\n                                <img alt=\"\" src={Images.COINS_POPUP_SHAPE} className=\"curve-img\" />\n                                <div className=\"daily-view\">\n                                    <div className={\"top-view \" + this.state.ANMTC}>\n                                        <img alt=\"\" className=\"c1\" src={Images.IC_COIN} />\n                                        <img alt=\"\" className=\"c2\" src={Images.IC_COIN} />\n                                        <img alt=\"\" src={Images.CHECKIN_COIN_PERSON} />\n                                        <div className=\"top-text-view\">\n                                            <div className=\"daily-text\">{AL.DAILYCB}</div>\n                                            <div className=\"earn-daily\">{isClaimed ? AL.CTG : AL.CTTGC}<p><span><img src={Images.IC_COIN} alt=\"\" /></span>{this.state.GCoins} {AL.coins}</p></div>\n                                        </div>\n                                    </div>\n                                    <ul className=\"daily-grid\">\n                                        {\n                                            _Map(dailyData.daily_streak_coins, (item, index) => {\n                                                return this.renderGridItem(item, index)\n                                            })\n                                        }\n                                    </ul>\n                                    <p className={\"bottom-msg\" + (isClaimed ? '' : ' botm-0')}>{AL.CLAIM_BONUS}</p>\n                                    {isClaimed && <div onClick={this.claimTodaysCoins} className=\"button button-primary button-block btn-claim\" >\n                                        {AL.CLAIM}\n                                    </div>}\n                                </div>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default DailyCheckinBonus;","/var/www/html/framework/frontend/src/Modals/ReferralSystem.jsx",["3248","3249","3250","3251","3252"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Row, Col, Label } from 'react-bootstrap';\nimport Images from '../components/images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { getReferralMasterData } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nimport { OnlyCoinsFlow } from '../helper/Constants';\nexport default class ReferralSystem extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            masterData: '',\n            selfBonus: 0,\n            selfReal: 0,\n            slefCoins: 0,\n            userBonus: 0,\n            userReal: 0,\n            userCoin: 0,\n            valueFivethRef: 0,\n            valueTenRef: 0,\n            valueFifRef: 0,\n            valueFriendDeposit: [],\n\n            profileDetail: WSManager.getProfile(),\n        };\n    }\n\n\n    componentWillMount() {\n        this.callRFMasterDataApi();\n    }\n\n    callRFMasterDataApi() {\n        let param = {}\n        getReferralMasterData(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let temp = responseJson.data;\n                this.setState({\n                    masterData: temp,\n                    valueFivethRef: temp[17],\n                    valueTenRef: temp[18],\n                    valueFifRef: temp[19],\n                    valueFriendDeposit: temp[12],\n                }, () => {\n                    this.setState({\n                        selfReal: parseInt(temp[0].real_amount),\n                        selfBonus: parseInt(temp[0].bonus_amount),\n                        slefCoins: parseInt(temp[0].coin_amount),\n                        userReal: parseInt(temp[0].user_real),\n                        userBonus: parseInt(temp[0].user_bonus),\n                        userCoin: parseInt(temp[0].user_coin),\n\n                    })\n                })\n            }\n        })\n\n    }\n\n    componentWillUnmount() {\n\n    }\n    // ******************* OPEN REFFERAL CODE FOR EDIT ******************\n\n    openEditRefCode = (e) => {\n            this.props.IsModalHide();\n    }\n\n    render() {\n        const { IsModalShow, IsModalHide } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={IsModalShow}\n                        onHide={IsModalHide}\n                        dialogClassName=\"banner-modal-refer modal-full-screen\"\n                    >\n                        {/* <Modal.Header>\n\n                        </Modal.Header> */}\n\n                        <Modal.Body>\n                            <div className=\"web-container bg-white p-0 verify-otp refer-friend\">\n\n                                {/* <div className=\"registration-header header-wrap\">\n                                <Row>\n                                    <Col xs={12} className=\"text-right\">\n                                        <span className=\"header-action\" onClick={() => this.goBack()}>\n                                            <i className=\"icon-close\" />\n                                        </span>\n                                    </Col>\n                                </Row>\n                            </div> */}\n                                <div className='top-header p-t-60'>\n                                    <Label className='referral-system-text'>{AppLabels.REFERRAL_SYSTEM}</Label>\n                                    <Label className='referral-system-desp'>{AppLabels.INVITE_FRIEND_WIN_REWARD}</Label>\n                                </div>\n                                {/* Layer 1 */}\n                                <div className='layer-one d-f'>\n                                    <div className='left-view image-index'>\n                                        <img alt='' src={Images.REFER_FRIEND_SIGNUP} />\n                                    </div>\n                                    <div>\n                                        <div>\n                                            <Label className='friend-sign-up-14'>{AppLabels.FRIENDS_SIGNUP}</Label>\n                                        </div>\n                                        <div className='d-f pt20'>\n                                            <Row>\n                                                <Col sm>\n                                                    <div>\n                                                        <Label className='friend-ref-sm pr10'>{AppLabels.YOU_GET}</Label><br></br>\n                                                        <div className='pt5 pr10 d-f '>\n                                                            {this.state.selfBonus >= this.state.slefCoins && this.state.selfBonus >= this.state.selfReal ? <i className=\"icon-bonus is-blue font-s-12 line-h-14 margin-postion\" /> :\n                                                                this.state.selfReal >= this.state.slefCoins && this.state.selfReal >= this.state.selfBonus ? <i className=\" font-style-normal is-blue line-h-16 margin-postion\" >{Utilities.getMasterData().currency_code}</i> :\n                                                                    this.state.slefCoins >= this.state.selfReal && this.state.slefCoins >= this.state.selfBonus ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> :\n                                                                        ''\n                                                            }\n                                                            <Label className='price-tag-13 line-h-13'>&nbsp;\n                                                                {this.state.selfBonus >= this.state.selfReal && this.state.selfBonus >= this.state.slefCoins ? this.state.selfBonus :\n                                                                    this.state.selfReal >= this.state.selfBonus && this.state.selfReal >= this.state.slefCoins ? this.state.selfReal :\n                                                                        this.state.slefCoins >= this.state.selfBonus && this.state.slefCoins >= this.state.selfReal ? this.state.slefCoins : ''} </Label>\n                                                        </div>\n\n                                                    </div>\n                                                </Col>\n                                                <Col sm>\n                                                    <div>\n                                                        <img alt='' src={Images.ZIG_LINE} />\n                                                    </div>\n                                                </Col>\n                                                <Col sm>\n                                                    <div>\n                                                        <Label className='friend-ref-sm pl10'>{AppLabels.YOUR_FRIEND_GETS}</Label><br></br>\n\n\n                                                        <span className='pt5 pr10 d-f j-c-c '>\n                                                            {this.state.userBonus >= this.state.userCoin && this.state.userBonus >= this.state.userReal ? <i className=\"icon-bonus is-blue font-s-12 line-h-14 margin-postion\" /> :\n                                                                this.state.userReal >= this.state.userCoin && this.state.userReal >= this.state.userBonus ? <i className=\" font-style-normal is-blue line-h-16 margin-postion\" >{Utilities.getMasterData().currency_code}</i> :\n                                                                    this.state.userCoin >= this.state.userReal && this.state.userCoin >= this.state.userBonus ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> :\n                                                                        ''\n                                                            }\n                                                            <Label className='price-tag-13 line-h-13 '>&nbsp;\n                                                                {this.state.userBonus >= this.state.userReal && this.state.userBonus >= this.state.userCoin ? this.state.userBonus :\n                                                                    this.state.userReal >= this.state.userBonus && this.state.userReal >= this.state.userCoin ? this.state.userReal :\n                                                                        this.state.userCoin >= this.state.userBonus && this.state.userCoin >= this.state.userReal ? this.state.userCoin : ''} </Label>\n                                                        </span>\n\n\n                                                    </div>\n                                                </Col>\n                                            </Row>\n\n                                        </div>\n                                    </div>\n                                </div>\n                                {OnlyCoinsFlow != 1 && <div className='j-c-c a-i-c d-f line-margin'>\n                                    <img alt='' src={Images.DOT_LINE} />\n                                </div>}\n\n                                {/* Layer 2 */}\n                                {OnlyCoinsFlow != 1 && <div className='d-f layer-three'>\n                                    <div className='align-text-right w-50 pt30'>\n                                        <Label className='friend-sign-up-14'>{AppLabels.ON_FRIEND_DEPOSIT}</Label><br></br>\n                                        <p className='friend-ref-sm-n'>{AppLabels.YOU_GET}&nbsp;{this.state.valueFriendDeposit != null && this.state.valueFriendDeposit != undefined ? this.state.valueFriendDeposit.real_amount : 0}{AppLabels.OF_YOU}<br></br>{AppLabels.FRIEND_DEPOSIT_MAXIMUM}<br></br>{AppLabels.UPTO}<span className='price-tag-n pt5'> <i className=\" font-style-normal is-blue \">{Utilities.getMasterData().currency_code}</i>{this.state.valueFriendDeposit != undefined && this.state.valueFriendDeposit != null ? this.state.valueFriendDeposit.max_earning_amount : 0}</span></p>\n\n\n                                    </div>\n                                    <div className='left-view w-50 image-index'>\n                                        <img alt='' src={Images.REFER_FRIEND_DEPOSIT} />\n                                    </div>\n\n                                </div>}\n                                <div className='j-c-c a-i-c d-f line-margin'>\n                                    <img alt='' src={Images.DOT_LINE_R} />\n                                </div>\n                                {/* Layer3 */}\n                                <div className='d-f  m-t-20-'>\n                                    <div className='bonus-case-view image-index'>\n                                        <img alt='' src={Images.REFER_FRIEND_REWARD} />\n                                    </div>\n                                    <div>\n                                        <div>\n                                            <Label className='friend-sign-up-14'>{AppLabels.LOYALITY_REWARDS}</Label>\n                                        </div>\n                                        <div>\n\n                                            <div className='d-f pt10'>\n                                                <div className='round-line-d'>\n                                                    <div className='round-ball' />\n                                                    <div className='sqr-line' />\n                                                    <div className='round-ball' />\n                                                    <div className='sqr-line' />\n                                                    <div className='round-ball' />\n                                                </div>\n                                                <div className='loyalty-level'>\n                                                    <div className='h-55 m-t-5-m'>\n                                                        <Label className='text-sm'>{AppLabels.FTH_REF}</Label><br></br>\n                                                        <div className='d-f'>\n                                                            {this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.real_amount && this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.coin_amount ? <Label className='text-mm mt2'><i className=\"icon-bonus is-blue font-s-14 line-h-14\"></i></Label> :\n                                                                this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.coin_amount ? <Label className='text-mm mt2'><i className=\" font-style-normal is-blue line-h-14\">{Utilities.getMasterData().currency_code}</i></Label> :\n                                                                    this.state.valueFivethRef.coin_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.coin_amount >= this.state.valueFivethRef.real_amount ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> : ''}&nbsp;\n                                                                <Label className='price-tag-n'>{this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.real_amount && this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.coin_amount ? this.state.valueFivethRef.bonus_amount :\n                                                                this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.coin_amount ? this.state.valueFivethRef.real_amount :\n                                                                    this.state.valueFivethRef.coin_amount}</Label>\n                                                            &nbsp;\n                                                                <Label className='price-tag-n-r'>{this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.real_amount && this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.coin_amount ? AppLabels.BONUS_CASH_LOWER :\n                                                                this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.coin_amount ? AppLabels.REAL_CASH_LOWER :\n                                                                    AppLabels.COIN_CASH_LOWER}</Label>\n                                                        </div>\n\n                                                    </div>\n                                                    <div className='h-55 mt3'>\n                                                        <Label className='text-sm'>{AppLabels.TEN_REF}</Label><br></br>\n                                                        <div className='d-f'>\n                                                            {this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.real_amount && this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.coin_amount ? <Label className='text-mm mt2'><i className=\"icon-bonus is-blue font-s-14 line-h-14\"></i></Label> :\n                                                                this.state.valueTenRef.real_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.real_amount >= this.state.valueTenRef.coin_amount ? <Label className='text-mm mt2'><i className=\" font-style-normal is-blue line-h-14\">{Utilities.getMasterData().currency_code}</i></Label> :\n                                                                    this.state.valueTenRef.coin_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.coin_amount >= this.state.valueTenRef.real_amount ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> : ''}&nbsp;\n                                                                <Label className='price-tag-n'>{this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.real_amount && this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.coin_amount ? this.state.valueTenRef.bonus_amount :\n                                                                this.state.valueTenRef.real_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.real_amount >= this.state.valueTenRef.coin_amount ? this.state.valueTenRef.real_amount :\n                                                                    this.state.valueTenRef.coin_amount}</Label>\n                                                            &nbsp;\n                                                            <Label className='price-tag-n-r'>{this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.real_amount && this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.coin_amount ? AppLabels.BONUS_CASH_LOWER :\n                                                                this.state.valueTenRef.real_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.real_amount >= this.state.valueTenRef.coin_amount ? AppLabels.REAL_CASH_LOWER :\n                                                                    AppLabels.COIN_CASH_LOWER}</Label>\n                                                        </div>\n\n                                                    </div>\n                                                    <div className='h-55 mt5'>\n                                                        <Label className='text-sm'>{AppLabels.FIF_REF}</Label><br></br>\n                                                        <div className='d-f'>\n                                                            {this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.real_amount && this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.coin_amount ? <Label className='text-mm mt2'><i className=\"icon-bonus is-blue font-s-14 line-h-14\"></i></Label> :\n                                                                this.state.valueFifRef.real_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.real_amount >= this.state.valueFifRef.coin_amount ? <Label className='text-mm mt2'><i className=\" font-style-normal is-blue line-h-14\">{Utilities.getMasterData().currency_code}</i></Label> :\n                                                                    this.state.valueFifRef.coin_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.coin_amount >= this.state.valueFifRef.real_amount ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> : ''}&nbsp;\n                                                            <Label className='price-tag-n'>{this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.real_amount && this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.coin_amount ? this.state.valueFifRef.bonus_amount :\n                                                                this.state.valueFifRef.real_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.real_amount >= this.state.valueFifRef.coin_amount ? this.state.valueFifRef.real_amount :\n                                                                    this.state.valueFifRef.coin_amount}</Label>\n                                                            &nbsp;\n                                                            <Label className='price-tag-n-r'>{this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.real_amount && this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.coin_amount ? AppLabels.BONUS_CASH_LOWER :\n                                                                this.state.valueFifRef.real_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.real_amount >= this.state.valueFifRef.coin_amount ? AppLabels.REAL_CASH_LOWER :\n                                                                    AppLabels.COIN_CASH_LOWER}</Label>\n                                                        </div>\n\n                                                    </div>\n\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className='round-big-btn' onClick={() => this.openEditRefCode()}>\n                                    <Label>{AppLabels.GOT_IT}</Label>\n                                </div>\n\n                            </div>\n\n                        </Modal.Body>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/ProfileQuickView.jsx",["3253","3254"],"import React from 'react';\nimport {  Modal } from 'react-bootstrap';\nimport Images from '../components/images';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport {UserProfile, DataCountBlock} from \"../Component/CustomComponent\";\n\nexport default class ProfileQuickView extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            \n        };\n    }\n\n    render() {\n\n        const { IsProfileModalShow, IsProfileModalHide  } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={IsProfileModalShow}\n                        onHide={IsProfileModalHide}\n                        dialogClassName=\"custom-modal user-profile-modal\" \n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <UserProfile IsProfileVerifyShow={false} IsImgEditable={false} />\n                            <div className=\"intrested-sport\">\n                                <span>\n                                    <i className=\"icon-bat\"></i>\n                                    Cricket\n                                </span>\n                            </div>\n                        </Modal.Header>\n                        <div>\n                            <Modal.Body>\n                                <div className=\"profile-modal-body\">\n                                    <div className=\"data-count-wrap shift-upward\">\n                                        <DataCountBlock TextRight={true} item={\n                                            {\n                                                'icon': 'icon-badge',\n                                                'count': '260',\n                                                'count_for': 'Contest Won'\n                                            }\n                                        } />\n                                    </div>\n                                    <div className=\"data-count-wrap\">\n                                        <DataCountBlock TextRight={true} item={\n                                            {\n                                                'icon': 'icon-tickets',\n                                                'count': '538',\n                                                'count_for': 'Total Contests'\n                                            }\n                                        } />\n                                    </div>\n                                    <div className=\"data-count-wrap\">\n                                        <DataCountBlock TextRight={true} item={\n                                            {\n                                                'icon': 'icon-vs-ic',\n                                                'count': '200',\n                                                'count_for': 'Matches'\n                                            }\n                                        } />\n                                    </div>\n                                    <div className=\"data-count-wrap mb-0\">\n                                        <DataCountBlock TextRight={true} item={\n                                            {\n                                                'icon': 'icon-trophy2-ic',\n                                                'count': '30',\n                                                'count_for': 'Series'\n                                            }\n                                        } />\n                                    </div>\n                                </div>\n                            </Modal.Body>\n                        </div>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/WithdrawConfirmationModal.jsx",["3255","3256"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport Images from '../components/images';\nimport * as AppLabels from \"../helper/AppLabels\";\n\nexport default class WithdrawConfirmationModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n        };\n\n    }\n\n    render() {\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={this.props.WithdrawConfirmationModalShow}\n                        onHide={() => this.props.WithdrawConfirmationModalHide}\n                        dialogClassName=\"custom-modal banner-modal confirmation-modal  withdrawal-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"header-modalbg\">\n                                <i className=\"icon-tick-circular primary-icon\"></i>\n                            </div>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <div className=\"thank-you-body\">\n                                <h4>{AppLabels.THANKYOU}</h4>\n                                <p>{AppLabels.WITHDRAW_PROCESS1}</p>\n                                <h6>{AppLabels.WITHDRAW_PROCESS2}</h6>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer className=\"custom-modal-footer dissmiss-btn-footer\">\n                            <a className='my-alert-button-text' onClick={() => this.props.WithdrawConfirmationModalHide()}>{AppLabels.OK}</a>\n                        </Modal.Footer>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/DeleteConfirmationModal.jsx",[],"/var/www/html/framework/frontend/src/Modals/EmailVerificationModal.jsx",[],"/var/www/html/framework/frontend/src/Modals/EditEmailModal.jsx",["3257","3258","3259","3260","3261","3262","3263"],"import React from 'react';\nimport { Modal, FormGroup, Row, Col } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyleLeft } from '../helper/input-style';\nimport { inputStyle } from '../helper/input-style';\nimport OtpInput from 'react-otp-input';\nimport Validation from '../helper/Validation';\nimport { editEmail, verifyEditedEmail } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport WSManager from '../WSHelper/WSManager';\nimport Images from '../components/images';\n\nexport default class EditEmailModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            otp: '',\n            isOtpShown: true,\n            newEmail: this.props.isVerifyMode ? this.props.email : '',\n            enableButton: true,\n            isValidEmail: false,\n            isOtpCorrect: true,\n            enteredEmailValid: false\n        };\n    }\n\n    /**\n     *@description Check browser and manage input field accordingly \n     */\n    checkBrowserISOpera() {\n        navigator.userAgent.match(/Opera Mini/i)\n        const isOpera = (navigator.userAgent.indexOf(\"Opera\") || navigator.userAgent.indexOf('OPR')) !== -1\n        return isOpera;\n    }\n\n    /**\n     * @description handle email change and update state variable\n     * @param e click event\n     */\n    onHandleChange = (e) => {\n        const value = e.target.value;\n        this.setState({\n            newEmail: value,\n            otp: '',\n            enteredEmailValid: (Validation.validate('email', value) == 'success')\n        });\n    }\n\n    /**\n     * @description handle OTP change and update state variable\n     * @param OTP OTP entered by user\n    */\n    handleOtpChange = otp => {\n        this.setState({\n            otp,\n            isOtpCorrect: true\n        });\n    };\n\n    /**\n      * @description handle OTP change and update state variable \n      * same as above but called only in case of UC and Opera browser\n      * @param OTP OTP entered by user\n     */\n    otpEnter = (evt) => {\n        let mOtp = evt.target.value;\n        this.setState({ otp: mOtp })\n    }\n\n\n    componentWillMount() {\n        if (this.props.email) {\n            this.setState({\n                enteredEmailValid: (Validation.validate('email', this.props.email) == 'success')\n            })\n        }\n    }\n\n\n    /**\n   * @description This function send OTP to users email\n   */\n    onSubmit = () => {\n        if (!this.state.posting) {\n            this.setState({ posting: true });\n            if (this.state.newEmail == '' && Validation.validate('email', this.state.newEmail) == 'error') {\n                Utilities.showToast(AppLabels.INVALID_EMAIL_ID, 2000, Images.EMAIL_ICON)\n            }\n            else {\n                let param = {\n                    \"email\": this.state.newEmail,\n                }\n                editEmail(param).then((responseJson) => {\n                    this.setState({ posting: false });\n                    if (responseJson && responseJson.response_code == WSC.successCode) {\n                        this.setState({ isValidEmail: true, enableButton: false }, () => {\n                            setTimeout(() => {\n                                this.setState({ enableButton: true })\n                            }, 1000 * 30);\n                        })\n                    }\n                })\n            }\n        }\n    }\n\n    /**\n    * @description This function verify OTP to users email\n    */\n    varifyOTP = () => {\n        let mOTP = this.state.otp;\n\n        if (mOTP != '') {\n            if (!this.state.posting) {\n                this.setState({ posting: true });\n                let param = {\n                    \"email\": this.state.newEmail,\n                    \"otp\": this.state.otp,\n                }\n                verifyEditedEmail(param).then((responseJson) => {\n                    this.setState({ posting: false });\n                    if (responseJson && responseJson.response_code === WSC.successCode) {\n                        this.setState({\n                            isOtpCorrect: true\n                        })\n                        if (responseJson.data) {\n                            let mProfile = WSManager.getProfile();\n                            mProfile.email = this.state.newEmail;\n                            WSManager.setProfile(mProfile)\n                            this.props.IsEditEmailHide()\n                            if (this.props.isVerifyMode) {\n                                this.props.history.goBack()\n                            }\n                        }\n                        Utilities.showToast(responseJson.message, 1000, Images.EMAIL_ICON);\n                    }\n                    else {\n                        this.setState({\n                            isOtpCorrect: false\n                        })\n                    }\n                })\n            }\n        }\n    }\n\n    render() {\n        const { isOtpShown, otp } = this.state;\n        const { IsEditEmailShow, IsEditEmailHide } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={IsEditEmailShow}\n                        onHide={IsEditEmailHide}\n                        dialogClassName=\"custom-modal edit-input-modal edit-input-modal-lg edit-mobile-no-modal\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"icon-section\">\n                                {/* <i className=\"icon-email2\"></i> */}\n                                <img src={Images.EMAIL_ICON_WHITE} alt=\"\" width=\"34px\" />\n                            </div>\n                            <h2>{this.props.isVerifyMode ? AppLabels.VERIFY_EMAIL_ADDRESS : AppLabels.EDIT_EMAIL_ADDRESS}</h2>\n                            {!this.props.isVerifyMode && <p>{this.props.email}</p>}\n\n                        </Modal.Header>\n                        <Modal.Body>\n                            <div className=\"edit-input-form edit-email-form\">\n                                <Row>\n                                    <Col xs={12} className=\"input-label-spacing input-with-btn\">\n                                        <FormGroup\n                                            className={'input-label-center input-transparent '}\n                                            controlId=\"formBasicText\">\n                                            <FloatingLabel\n                                                autoComplete='off'\n                                                styles={inputStyleLeft}\n                                                id='emailId'\n                                                name='emailId'\n                                                placeholder={AppLabels.EMAIL_ADDRESS}\n                                                type='text'\n                                                value={this.state.newEmail}\n                                                onChange={this.onHandleChange}\n                                            />\n                                        </FormGroup>\n                                        <div onClick={() => (this.state.enableButton && this.state.enteredEmailValid && this.state.newEmail) ? this.onSubmit() : ''} className={\"button button-primary-rounded-sm input-action-btn \" + ((this.state.enableButton && this.state.enteredEmailValid && this.state.newEmail) ? \"\" : \" button-disabled\")}>{AppLabels.SEND_OTP}</div>\n                                        <div className={\"email-sent-msg\" + (this.state.isValidEmail ? '' : ' hide')}>\n                                            {AppLabels.OTP_SENT_TO} {this.state.newEmail}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className={'phone-number-style ' + (this.state.isValidEmail ? ' ' : ' disabled') + (!this.state.isOtpCorrect ? ' show-error-msg' : '')}>\n                                        <div className=\"input-label\">{AppLabels.ENTER_OTP}</div>\n                                        {!this.checkBrowserISOpera() ?\n                                            <div className=\"opt-block\">\n                                                {\n                                                    isOtpShown &&\n                                                    <OtpInput\n                                                        autoComplete='off'\n                                                        shouldautofocus={true}\n                                                        containerStyle=\"otp-inputs otp-inputs-sm\"\n                                                        value={otp}\n                                                        onChange={this.handleOtpChange}\n                                                        numInputs={4}\n                                                        isDisabled={!this.state.isValidEmail}\n                                                        isInputNum={true}\n                                                    />\n                                                }\n                                            </div>\n                                            :\n                                            <FormGroup className='input-label-center' controlId=\"formBasicText\" >\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyle}\n                                                    id='otp'\n                                                    maxLength={4}\n                                                    name='otp'\n                                                    placeholder={AppLabels.ENTER_OTP}\n                                                    type='text'\n                                                    value={otp}\n                                                    onChange={this.otpEnter}\n                                                />\n                                            </FormGroup>\n                                        }\n                                        <div className=\"error-text\">{AppLabels.WRONG_OTP}</div>\n                                    </Col>\n                                </Row>\n                                <div onClick={() => this.varifyOTP()} className={\"button button-primary button-block btm-fixed \" +\n                                    (this.state.otp == '' ? ' disabled' : '')}\n                                // (this.state.otp.trim()==''?' disabled':'' )}\n                                >{AppLabels.VERIFY_AND_UPDATE}</div>\n\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/BonusCaseModal.jsx",["3264","3265","3266","3267","3268","3269","3270","3271","3272","3273","3274","3275","3276","3277","3278","3279","3280","3281","3282","3283","3284","3285","3286"],"import React from 'react';\nimport { Modal, FormGroup, Row, Col, text } from 'react-bootstrap';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyleLeft } from '../helper/input-style';\nimport { checkUsername, updateUsername } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nimport ls from 'local-storage';\nimport Images from \"../components/images\";\n\n\nexport default class BonusCaseModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            mUserProfile: ls.get('profile'),\n            isShow: true,\n            isHide: false,\n            isBonus: '',\n            valueOfPointsRef: '',\n            valueOfPointsWRef: '',\n        };\n    }\n\n    onSubmit = (e) => {\n        this.setState({\n            isShow: false,\n            isHide: true,\n        }, () => {\n            this.props.SkipStep();\n        })\n    }\n\n    componentWillMount = (e) => {\n        if (this.props.data.isSkip == 0 || this.props.data.isSkip == 1) {\n            let bonusValueRef = this.props.data.refData;\n            let valueToShowRef;\n            let valueToShowRefW;\n            let toShowValueWRef;\n            let toShowValueRef;\n\n            \n            if (parseInt(bonusValueRef.bonus_amount) >= parseInt(bonusValueRef.coins) && parseInt(bonusValueRef.bonus_amount) >= parseInt(bonusValueRef.real_amount)) {\n                valueToShowRef = bonusValueRef.bonus_amount;\n                toShowValueRef = 0;\n            }\n            \n            if (parseInt(bonusValueRef.real_amount)>= parseInt(bonusValueRef.coins) && parseInt(bonusValueRef.real_amount)>= parseInt(bonusValueRef.bonus_amount)) {\n                valueToShowRef = bonusValueRef.real_amount;\n                toShowValueRef = 2;\n            }\n\n            if (parseInt(bonusValueRef.bonus_amount) <= parseInt(bonusValueRef.coins) && parseInt(bonusValueRef.real_amount) <= parseInt(bonusValueRef.coins) ) {\n                valueToShowRef = bonusValueRef.coins;\n                toShowValueRef = 1;\n            }\n  \n            let bonusValueWithoutRef = this.props.data.withoutRefData;\n\n            if (parseInt(bonusValueWithoutRef.bonus_amount) >= parseInt(bonusValueWithoutRef.coins) && parseInt(bonusValueWithoutRef.bonus_amount) >= parseInt(bonusValueWithoutRef.real_amount)) {\n                valueToShowRefW = bonusValueWithoutRef.bonus_amount;\n                toShowValueWRef = 0;\n            }\n            if (parseInt(bonusValueWithoutRef.real_amount) >= parseInt(bonusValueWithoutRef.coins )&& parseInt(bonusValueWithoutRef.real_amount) >= parseInt(bonusValueWithoutRef.bonus_amount)) {\n                valueToShowRefW = bonusValueWithoutRef.real_amount;\n                toShowValueWRef = 2;\n            }\n            if (parseInt(bonusValueWithoutRef.coins) >= parseInt(bonusValueWithoutRef.bonus_amount )&& parseInt(bonusValueWithoutRef.coins) >= parseInt(bonusValueWithoutRef.real_amount)) {\n                valueToShowRefW = bonusValueWithoutRef.coins;\n                toShowValueWRef = 1;\n            }\n            this.setState({\n                isBonusValue: this.props.data,\n                isBonus: this.props.data.isSkip == 1 ? valueToShowRef : valueToShowRefW,\n                valueOfPointsRef: this.props.data.isSkip == 1 ? toShowValueRef : toShowValueWRef,\n            })\n        }else\n        {\n            this.setState({\n                isBonusValue: this.props.data,\n                isBonus: this.props.data.value,\n                valueOfPointsRef: this.props.data.type,\n            })\n        }\n\n    }\n\n    render() {\n\n        // const { IsEditUserNameShow, IsEditUserNameHide  } = this.props;\n        return (\n            // <MyContext.Consumer>\n            //     {(context) => (\n\n            <Modal\n                show={this.state.isShow}\n                onHide={this.state.isHide}\n                dialogClassName=\"custom-modal edit-input-modal edit-input-modal-lg\"\n                className=\"center-modal refer-friend \"\n            >\n                <Modal.Header className='j-c-c d-f '>\n                    <div className='pad-btm'>\n                        <div className='round-area-sm'>\n                            <img src={Images.ADD_CASE} />\n                        </div>\n                    </div>\n\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='w-h100'>\n                        <div className='inner-div-area'>\n                            <span className='congratalutions-label label-black'>{AppLabels.CONGRATULATIONS}</span><br></br>\n                            <div className='text-align-c'>\n                                <div className='inner-div-message'>\n                                    <span className='label-16'>{AppLabels.YOU_GOT_}</span>&nbsp;\n                                    <span className='congratalutions-label-blue'>\n                                        {\n                                            this.state.valueOfPointsRef == 0 &&\n                                            <i className=\"icon-bonus f-s-14\"></i>\n                                        }\n                                        {\n                                            this.state.valueOfPointsRef == 2 &&\n                                            Utilities.getMasterData().currency_code\n                                        }\n                                    </span>\n                                    {this.state.valueOfPointsRef == 1 ? \n                                        <img src={Images.IC_COIN} className='icon-height-is'/> : ''} <span className='mt1 congratalutions-label-blue-regular'>&nbsp;\n                                        {this.state.isBonus} \n                                        {this.state.valueOfPointsRef == 2 ? AppLabels.REAL_CASH : this.state.valueOfPointsRef == 0 ? AppLabels.BONUS_CASH : AppLabels.COINS}\n                                    </span>\n                                </div>\n                                {\n                                    this.state.isBonusValue.isSkip == 0 ? <span className='label-16'>{AppLabels.ON_SIGN_UP}</span> : this.state.isBonusValue.isSkip == 1 ? <span className='label-16'>{AppLabels.BONUS_CASH_ON_SIGNINGUP_REFER_CODE}</span> : <span className='label-16'>{AppLabels.BONUS_CASH_ON_SETTING_REF_CODE} </span>\n                                }\n\n                            </div>\n                        </div>\n                        <div className='big-btn' onClick={() => { this.onSubmit() }}>\n                            <span className='okay-btn' >{AppLabels.OK}</span>\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n\n            //     )}\n            // </MyContext.Consumer>\n        );\n    }\n}\n\n\n","/var/www/html/framework/frontend/src/Modals/RefferCoachMark.jsx",["3287","3288","3289","3290","3291"],"import React, { Component } from 'react';\nimport { MyContext } from '../views/Dashboard';\nimport { Modal, Label } from 'react-bootstrap';\nimport Images from '../components/images';\nimport * as AL from \"../helper/AppLabels\";\nimport { DataCountBlock } from \"../Component/CustomComponent\";\nimport WSManager from '../WSHelper/WSManager';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { updateUserSettings } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nclass RefferCoachMark extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ANMTC: ''\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ ANMTC: \"animate-v\" });\n        }, 100);\n    }\n\n    hideCoachMark = () => {\n        this.props.cmData.mHide();\n        let profile = WSManager.getProfile();\n        let param = profile.user_setting;\n        param[\"refer_a_friend\"] = \"1\";\n        param[\"user_id\"] = undefined;\n        param[\"_id\"] = undefined;\n\n        profile['user_setting'] = param;\n        WSManager.setProfile(profile);\n\n        updateUserSettings(param).then((responseJson) => {\n        })\n\n    }\n    openRefferSystem = () => {\n        this.props.history.push('/referral-system');\n        this.hideCoachMark();\n    }\n\n    render() {\n        const { mShow, refRCMData } = this.props.cmData;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        dialogClassName={\"coin-coachmark wallet-coins-coachmark \" + this.state.ANMTC}\n                        className=\"center-modal coin\"\n                        animation={false}\n                    >\n                        <Modal.Body>\n                            <div className=\"v-container wallet-v-container-refer\">\n                                <div className=\"position-relative\">\n                                    <div className=\"pulse-container\">\n                                        <div className=\"pulse-v\" style={{ animationDelay: \"-0s\" }}></div>\n                                        <div className=\"pulse-v\" style={{ animationDelay: \"-1s\" }}></div>\n                                    </div>\n                                    <div className='d-f bg-white-ref-coach-mark'>\n                                        <div>\n                                            <img src={Images.REFER_FRIEND_SM} />\n                                        </div>\n                                        <div className='pl10 mt5 d-g'>\n                                            <Label className='ref-title'>{AppLabels.REFER_A_FRIEND}</Label>\n                                            <div>\n                                            <Label>{AppLabels.GET} <span className='highlighted-text bold-14-blue'>{refRCMData.currency_type == 'INR' ? (Utilities.getMasterData().currency_code) : (refRCMData.currency_type == 'Bonus' ? <i className=\"icon-bonus bonus-ic bold-14-blue\"></i> : '')}</span></Label><Label className='label-blue bold-14-blue'>{refRCMData.amount}</Label> <Label>{AppLabels.REAL_CASE_ON_YOUR_FRIEND_SIGN_UP}</Label>\n\n                                            </div>\n\n\n                                        </div>\n                                    </div>\n\n                                </div>\n                                <div className=\"text-c\">\n                                    <img src={Images.SINGLE_LINE} alt=\"\" className=\"line-img-refer\" />\n                                    <div className=\"ml35 coins-text\">\n                                        <div className=\"spark1\">✦</div>\n                                        <div className=\"spark2\">✦</div>\n                                        <div className=\"spark3\">✦</div>\n                                        <div className=\"spark4\">✦</div>\n                                        <img src={Images.COINS_ON_WALLET} alt=\"\" className=\"wallet-coins-img\" />\n                                        <p className=\"title\">{AppLabels.REFER_A_FRIEND}</p>\n                                        <p className=\"desc\">{AppLabels.INVITE_FRIEND_WIN_REWARD}</p>\n                                        <button className=\"btn btn-primary btn-earn redeem-cm\" onClick={() => { this.openRefferSystem() }}>{AppLabels.REFER_NOW}</button>\n                                    </div>\n\n                                </div>\n                            </div>\n                            <a href onClick={this.hideCoachMark} className=\"modal-close\">\n                                <span className='refer-mark-skip-btn'>{AppLabels.SKIP_STEP}</span>\n                            </a>\n                        </Modal.Body>\n                    </Modal>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default RefferCoachMark;","/var/www/html/framework/frontend/src/Modals/EditMobileModal.jsx",["3292"],"import React from 'react';\nimport { Modal, FormGroup, Row, Col } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport FloatingLabel from 'floating-label-react';\nimport ls from 'local-storage';\nimport { inputStyle } from '../helper/input-style';\nimport OtpInput from 'react-otp-input';\nimport { CustomPhoneInput } from '../Component/CustomComponent';\nimport { editMobile, verifyEditedMobile } from '../WSHelper/WSCallings';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { Utilities } from '../Utilities/Utilities';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport Images from '../components/images';\n\n\nexport default class EditMobileModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            code: '',\n            phone: '',\n            otp: '',\n            mUserProfile: ls.get('profile'),\n            isOtpShown: true,\n            isValidMobileNo: false,\n            enableButton: true,\n            showSendMsg: false,\n            isOtpCorrect: true\n        };\n    }\n\n    /**\n     *@description Check browser and manage input field accordingly \n     */\n    checkBrowserISOpera() {\n        navigator.userAgent.match(/Opera Mini/i)\n        const isOpera = (navigator.userAgent.indexOf(\"Opera\") || navigator.userAgent.indexOf('OPR')) !== -1\n        return isOpera;\n    }\n\n    handleOnChange = (value, data) => {\n        this.setState({ code: data.dialCode, phone: value })\n        this.setState({enableButton:true})\n    }\n\n    /**\n     * @description handle OTP change and update state variable\n     * @param OTP OTP entered by user\n    */\n    handleOtpChange = otp => {\n        this.setState({ otp,\n            isOtpCorrect: true });\n    };\n\n    /**\n      * @description handle OTP change and update state variable \n      * same as above but called only in case of UC and Opera browser\n      * @param OTP OTP entered by user\n     */\n    otpEnter = (evt) => {\n        let mOtp = evt.target.value;\n        this.setState({ otp: mOtp })\n    }\n\n    /**\n    * @description This function send OTP to users mobile number\n    */\n    onSubmit = () => {\n        if (!this.state.posting) {\n            this.setState({ posting: true });\n            let phone_code_str = \"+\" + this.state.code;\n            let phone_no_str = this.state.phone;\n            let phone_no = phone_no_str.replace(phone_code_str, \"\");\n            if (!isValidPhoneNumber(phone_no_str)) {\n                Utilities.showToast(AppLabels.INVALID_PHONE_NUMBER, 2000, Images.MOBILE_ICON)\n            }\n            else {\n                let param = {\n                    \"phone_no\": phone_no,\n                    \"phone_code\": this.state.code\n                }\n                editMobile(param).then((responseJson) => {\n                    this.setState({ posting: false });\n                    if (responseJson && responseJson.response_code === WSC.successCode) {\n                        if (responseJson.data) {\n                            this.setState({ isValidMobileNo: true, enableButton: false, showSendMsg: true }, () => {\n                                setTimeout(() => {\n                                    this.setState({ enableButton: true })\n                                }, 1000 * 30);\n                            })\n                        }\n                    }\n                })\n            }\n        }\n    }\n\n    /**\n  * @description This function verify OTP to users mobile number\n  */\n    varifyOTP = () => {\n        let mOTP = this.state.otp;\n\n        if (mOTP != '') {\n            if (!this.state.posting) {\n                this.setState({ posting: true });\n                let phone_code_str = \"+\" + this.state.code;\n                let phone_no_str = this.state.phone;\n                let phone_no = phone_no_str.replace(phone_code_str, \"\");\n                let param = {\n                    \"phone_no\": phone_no,\n                    \"phone_code\": this.state.code,\n                    \"otp\": this.state.otp,\n                }\n                verifyEditedMobile(param).then((responseJson) => {\n                    this.setState({ posting: false });\n                    if (responseJson && responseJson.response_code === WSC.successCode) {\n                        this.setState({\n                            isOtpCorrect: true\n                        })\n                        if (responseJson.data) {\n                            Utilities.showToast(AppLabels.YOUR_MOBILE_NUMBER_HAS_BEEN_UPDATED_SUCCUSSFULLY, 1000, Images.MOBILE_ICON)\n                            this.props.IsEditMobileHide()\n                        }\n                    }\n                    else {\n                        this.setState({\n                            isOtpCorrect: false\n                        })\n                    }\n                })\n            }\n        }\n\n    }\n\n    render() {\n        const { isOtpShown } = this.state;\n        const { IsEditMobileShow, IsEditMobileHide, onHide } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={IsEditMobileShow}\n                        onHide={onHide || IsEditMobileHide}\n                        dialogClassName=\"custom-modal edit-input-modal edit-input-modal-lg edit-mobile-no-modal\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"icon-section\">\n                                {/* <i className=\"icon-mobile\"></i> */}\n                                <img src={Images.MOBILE_ICON_WHITE} alt=\"\" width=\"20px\"/>\n                            </div>\n                            <h2>{AppLabels.EDIT_MOBILE_NUMBER}</h2>\n                            {this.state.mUserProfile.phone_no && <p>  {'+'}{this.state.mUserProfile.phone_code}{' '}{this.state.mUserProfile.phone_no}</p>}\n                        </Modal.Header>\n                        <Modal.Body>\n                            <div className=\"edit-input-form edit-Mobile-form\">\n                                <Row>\n                                    <Col xs={12} className=\"input-label-spacing\">\n                                        <FormGroup\n                                            className={'input-label-center input-transparent '}\n                                            controlId=\"formBasicText\">\n                                            <CustomPhoneInput {...this.props} phone={this.state.phone} handleOnChange={this.handleOnChange} isFormLeft={true} isLabelHide={true} />\n                                        </FormGroup>\n                                        <div onClick={() => (this.state.enableButton && isValidPhoneNumber(this.state.phone)) ? this.onSubmit() : ''} className={\"button button-primary-rounded-sm input-action-btn \"+((this.state.enableButton && isValidPhoneNumber(this.state.phone))?\"\":\" button-disabled\")}>{AppLabels.SEND_OTP}</div>\n                                        {this.state.showSendMsg &&\n                                            <div className=\"email-sent-msg\">\n                                                {AppLabels.OTP_SENT_TO} {this.state.phone}\n                                            </div>\n                                        }\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className={'phone-number-style ' + (this.state.isValidMobileNo ? ' ' : ' disabled') + (!this.state.isOtpCorrect ? ' show-error-msg' : '')}>\n                                        <div className=\"input-label\">{AppLabels.ENTER_OTP}</div>\n                                        {!this.checkBrowserISOpera() ?\n                                            <div className=\"opt-block\">\n                                                {\n                                                    isOtpShown &&\n                                                    <OtpInput\n                                                        autoComplete='off'\n                                                        shouldautofocus={true}\n                                                        containerStyle=\"otp-inputs otp-inputs-sm\"\n                                                        onChange={this.handleOtpChange}\n                                                        value={this.state.otp}\n                                                        numInputs={4} \n                                                        isDisabled={!this.state.isValidMobileNo}\n                                                        isInputNum={true}\n\n                                                    />\n                                                }\n                                            </div>\n                                            :\n                                            <FormGroup className='input-label-center' controlId=\"formBasicText\" >\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyle}\n                                                    id='otp'\n                                                    maxLength={4}\n                                                    name='otp'\n                                                    placeholder={AppLabels.ENTER_OTP}\n                                                    type='text'\n                                                    onChange={this.otpEnter}\n                                                />\n                                            </FormGroup>\n                                        }\n                                        <div className=\"error-text\">{AppLabels.WRONG_OTP}</div>\n                                    </Col>\n                                </Row>\n                                <div onClick={() => this.varifyOTP()} className={\"button button-primary button-block btm-fixed\" + ((this.state.otp && isValidPhoneNumber(this.state.phone)) ? ' ' : ' disabled')}>{AppLabels.VERIFY_AND_UPDATE}</div>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/index.js",[],"/var/www/html/framework/frontend/src/Modals/ApplyPromoCode.jsx",["3293","3294","3295","3296","3297"],"import React from 'react';\nimport { Modal, FormGroup, Row, Col } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyleLeft } from '../helper/input-style';\nimport { Utilities } from '../Utilities/Utilities';\nimport { validateFundPromo } from '../WSHelper/WSCallings';\nimport * as WSC from \"../WSHelper/WSConstants\";\n\nexport default class ApplyPromoCode extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            mPromoCode: '',\n            showError: false,\n            isLoading: false\n        };\n    }\n\n    applyPromo() {\n        if (this.state.mPromoCode && this.state.mPromoCode.trim() != '') {\n            if (!this.state.isLoading) {\n                this.setState({\n                    isLoading: true\n                })\n                let param = {\n                    \"amount\": this.props.mAmount,\n                    \"promo_code\": this.state.mPromoCode\n                }\n\n                validateFundPromo(param).then((responseJson) => {\n                    this.setState({\n                        isLoading: false\n                    })\n                    if (responseJson.response_code == WSC.successCode) {\n                        this.props.onApplyPromoCode(responseJson.data)\n                        if (responseJson.data.cash_type == 0) {\n                            this.setState({\n                                promocodeDiscountAmt: responseJson.data.discount\n                            })\n                            this.props.onApplyPromoCode(responseJson.data)\n                        } else if (responseJson.data.cash_type == 1) {\n                            this.setState({\n                                promocodeDiscountAmt: responseJson.data.discount\n                            })\n                        }\n                        this.setState({\n                            promoCodeData: responseJson.data,\n                            discountPercent: responseJson.data.discount,\n                            benefitCap: responseJson.data.benefit_cap,\n                            isDisabled: true,\n                            showError: false\n                        })\n                    } else {\n                        this.setState({\n                            showError: true,\n                            promoCodeErrorMsg: responseJson.message\n                        })\n                    }\n                })\n            }\n        }\n        else {\n            Utilities.showToast(AppLabels.ENTER_PROMO_CODE, 2000)\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({ mPromoCode: e.target.value })\n    }\n\n    removePromoText=()=>{\n        this.setState({mPromoCode: null,showError: false},\n            ()=>{\n                this.setState({mPromoCode: ''})\n            }\n        )\n    }\n\n    render() {\n\n        const { IsPromoCodeShow, IsPromoCodeHide } = this.props;\n        const { mPromoCode } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={IsPromoCodeShow}\n                        onHide={IsPromoCodeHide}\n                        dialogClassName=\"custom-modal edit-input-modal\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"icon-section\">\n                                <i className=\"icon-promocode\"></i>\n                            </div>\n                            <h2>{AppLabels.PROMO_CODE}</h2>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <div className=\"edit-input-form\">\n                                <Row>\n                                    <Col xs={12} className={\"input-label-spacing\" + (this.state.showError ? ' show-error-msg' : '')}>\n                                        <FormGroup\n                                            className={'input-label-center input-transparent '}\n                                            controlId=\"formBasicText\">\n                                            {mPromoCode !== null &&\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='panno'\n                                                    name='panno'                                            \n                                                    placeholder={AppLabels.ENTER_PROMO_CODE}\n                                                    type='text'\n                                                    onChange={this.handleChange}\n                                                    value={mPromoCode}\n                                                />\n                                            }\n                                        </FormGroup>\n                                        <span className=\"bordered-span\"></span>\n                                        {mPromoCode != ''  &&\n                                            <i className=\"icon-cross-circular remove-applied-code\" onClick={()=>this.removePromoText()}></i>\n                                        }\n                                        {this.state.showError &&\n                                            <div className=\"error-text text-left\">{AppLabels.INVALID_PROMOCODE}</div>\n                                        }\n                                    </Col>\n                                </Row>\n                                <a onClick={() => this.applyPromo()} href className=\"button button-primary button-block btm-fixed\">{AppLabels.APPLY}</a>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/EditUsernamModal.jsx",["3298","3299","3300","3301","3302","3303","3304","3305","3306"],"import React from 'react';\nimport {  Modal,FormGroup,Row,Col } from 'react-bootstrap';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyleLeft } from '../helper/input-style';\nimport { checkUsername,updateUsername } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nimport ls from 'local-storage';\nimport Validation from \"../helper/Validation\";\nimport Images from \"../components/images\";\n\nexport default class EditUserNameModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            userName: '',\n            availabilityStatus: '',\n            userNameValid: '',\n            userNameError: '',\n            Valid: false,\n            mUserProfile:ls.get('profile')\n        };\n    }\n\n    onHandleChange=(e)=>{\n        let {userName} = this.state;\n        userName = e.target.value;\n        this.setState({\n            userName: userName,\n            availabilityStatus: ''\n        })\n        this.validateField(e.target.name,e.target.value)\n    }\n\n    validateField(fieldName,value){\n        let {userNameValid,userNameError} = this.state;\n        userNameValid = (Validation.validate(fieldName,value) === 'success');\n        userNameError = userNameValid ? '' : ' ' + AppLabels.is_invalid;\n        this.setState({\n            userNameValid: userNameValid,\n            userNameError: userNameError\n        })\n    }\n\n    errorClass(error){\n        if(error){\n            return (error.length == 0 ? '' : 'has-error')\n        }\n    }\n\n    checkAvaibility=()=>{\n        let param = {\n            \"user_name\": this.state.userName\n        }\n\n        checkUsername(param).then((responseJson) => {\n            if (responseJson) {\n                this.setState({\n                    availabilityStatus: responseJson.response_code\n                })\n            }\n        })\n    }\n\n    updateUsernameSubmit=()=>{\n        let param = {\n            \"user_name\": this.state.userName\n        }\n\n        updateUsername(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let {mUserProfile} = this.state;\n                mUserProfile.user_name = this.state.userName\n                ls.set('profile', this.state.mUserProfile);\n\n                this.setState({\n                    availabilityStatus: '',\n                    mUserProfile: mUserProfile\n                })\n                this.props.IsEditUserNameHide();\n                Utilities.showToast(AppLabels.USERNAME_HAS_BEEN_UPDATED_SUCCUSSFULLY, 1000,'icon-user');\n            }\n        })\n    }\n\n    render() {\n\n        const { IsEditUserNameShow, IsEditUserNameHide  } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={IsEditUserNameShow}\n                        onHide={IsEditUserNameHide}\n                        dialogClassName=\"custom-modal edit-input-modal edit-input-modal-lg\" \n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"icon-section\">\n                                <i className=\"icon-admin\"></i>\n                            </div>\n                            <h2>{AppLabels.EDIT_USERNAME}</h2>\n                            <p>{this.state.mUserProfile.user_name}</p>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <div className=\"edit-input-form\">\n                                <Row>\n                                    <Col xs={12} className=\"input-label-spacing\">\n                                        <FormGroup\n                                            className={'input-label-center input-transparent font-14 ' + (`${this.errorClass(this.state.userNameError)}`)}\n                                            controlId=\"formBasicText\">\n                                            <FloatingLabel\n                                                autoComplete='off'\n                                                styles={inputStyleLeft}\n                                                id='user_name'\n                                                name='user_name'\n                                                maxLength={25}\n                                                placeholder={AppLabels.USER_NAME}\n                                                type='text'\n                                                value={this.state.userName}\n                                                onChange={this.onHandleChange}\n                                            />\n                                        </FormGroup>\n                                        <span className=\"bordered-span\"></span>\n                                        {this.state.availabilityStatus == 200 &&\n                                            <img src={Images.TICK_IC} alt=\"\" className=\"step-status remove-applied-code small-image\" />\n                                        }\n                                        {this.state.availabilityStatus == 500 &&\n                                            <i className=\"icon-cross-circular remove-applied-code text-danger\"></i>\n                                        }\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"check-availability text-center m-t-10\">\n                                        <a \n                                            href\n                                            id=\"checkAvaibility\"\n                                            onClick={this.state.userNameValid && (this.state.availabilityStatus \n                                                == '') ? ()=>this.checkAvaibility() : ''}\n                                            className={this.state.userNameValid && (this.state.availabilityStatus == '') ? '' : 'disabled'}\n                                            >{AppLabels.CHECK_AVAILABILITY}</a>\n                                    </Col>\n                                </Row>\n                                <a \n                                    href \n                                    id=\"updateUsername\"\n                                    className={\"button button-primary button-block btm-fixed\" + (this.state.availabilityStatus == 200 ? '' : ' disabled')}\n                                    onClick={this.state.availabilityStatus == 200 ? ()=>this.updateUsernameSubmit() : ''}\n                                >\n                                    {AppLabels.UPDATE}\n                                </a>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/SponserBy.jsx",["3307","3308","3309","3310"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport * as AL from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport { Utilities } from '../../Utilities/Utilities';\n\nclass SponserBySection extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    componentWillMount = () => {\n\n    }\n\n    render() {\n\n        const {item} = this.props;\n\n        return (\n            <MyContext.Provider >\n                <div className=\"sponser-by-section\">\n                    <div className=\"sponser-by-inner-section margin-more\">\n                        <span>{AL.SPONSORED_BY}</span>\n\n                        \n                           {\n                            window.ReactNativeWebView  ?\n                            <a \n                                href\n                                onClick={(event)=>Utilities.callNativeRedirection(Utilities.getValidSponserURL(item.sponsor_link,event))}>\n                                <img className=\"lobby_sponser-image sponser-card-image\" style={{resizeMode: 'contain'}} src={item.img}/>\n                            </a>\n                        \n                            :\n                            <a className=\"image-sponser\"\n                                href={Utilities.getValidSponserURL(item.sponsor_link)}\n                                onClick={(event)=>event.stopPropagation()}\n                                target='_blank'>\n                                <img className=\"lobby_sponser-image sponser-card-image\" style={{resizeMode: 'contain'}} src={item.img}/>\n                            </a>\n                         \n                        }\n                    </div>\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default SponserBySection;","/var/www/html/framework/frontend/src/helper/Validation.jsx",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/index.js",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ShareOpenPredictorModal.jsx",["3311","3312"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { FacebookShareButton, WhatsappShareButton, EmailShareButton } from 'react-share';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport WSManager from '../../WSHelper/WSManager';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nclass ShareOpenPredictorModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            spData: this.props.preData.spData,\n            shareURL: '',\n            shareText: AL.Your_Friend + ' ' + WSManager.getProfile().user_name + ' ' + AL.has_referred_you_on + ' ' + WSC.AppName + \", \" + AL.please_join_and_earn_prizes_text + \" : \\n\\n\"\n        };\n    }\n\n    componentDidMount() {\n        this.createAndSetUrls();\n    }\n\n    createAndSetUrls() {\n        let category_id = this.state.spData.category_id;\n        let prediction_master_id = this.state.spData.prediction_master_id;\n        let refCode = WSManager.getUserReferralCode();\n        let mURL = WSC.baseURL + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor-details/\" + category_id + '/' + btoa(prediction_master_id);\n        let shareURL = mURL + (refCode ? (\"?referral=\" + refCode) : '');\n        this.setState({ shareURL: shareURL });\n    }\n\n    onCopyLink = () => {\n        this.showCopyToast(AL.Link_has_been_copied);\n    }\n\n    showCopyToast = (message) => {\n        Utilities.showToast(message, 2000)\n    }\n\n\n    callNativeShare(type, url, detail) {\n        let data = {\n            action: 'social_sharing',\n            targetFunc: 'social_sharing',\n            type: type,\n            url: url,\n            detail: detail\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    getEmailShareContent() {\n        if (window.ReactNativeWebView) {\n            if (this.state.shareURL != '') {\n                let shareLink = WSManager.getIsIOSApp() ? this.state.shareURL : encodeURIComponent(this.state.shareURL);\n                let shareText = this.state.shareText + shareLink + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                return shareText\n            }\n            return ''\n        }\n        else {\n            let shareText = this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n            return shareText\n        }\n    }\n\n    render() {\n\n        const { mShow, mHide } = this.props.preData;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"custom-modal thank-you-modal\"\n                        className=\"center-modal\"\n                    >\n\n                        <div className=\"social-linking\">\n                            <div className=\"link-heading\">{AL.INVITE_YOUR_FRIENDS_VIA}</div>\n                            <ul className=\"social-icons\">\n                                <li>\n                                    <CopyToClipboard onCopy={this.onCopyLink} text={this.state.shareURL} className=\"social-circle icon-link\">\n                                        <i className=\"icon-link\"></i>\n                                    </CopyToClipboard>\n                                    <label>{AL.INVITE_LINK}</label>\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-facebook\" onClick={() => this.callNativeShare('facebook', this.state.shareURL, this.state.shareText + this.state.shareURL + + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_FB}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <FacebookShareButton className=\"social-circle icon-facebook\" url={this.state.shareURL} quote={this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName}\n                                            />\n                                            <label>{AL.INVITE_FB}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-whatsapp\" onClick={() => this.callNativeShare('whatsapp', this.state.shareURL, this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <WhatsappShareButton className=\"social-circle icon-whatsapp\"\n                                                url={\n                                                    this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                                                } />\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                                \n                            </ul>\n                        </div>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default ShareOpenPredictorModal;","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorLearnMore.jsx",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorModule/CompletedOpenPredictors.jsx",["3313","3314"],"import React from 'react';\nimport { NoDataView } from '../CustomComponent';\nimport { _times, _Map } from '../../Utilities/Utilities';\nimport { getMyOpenPrediction } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport OpenPredictorCard from './OpenPredictorCard';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport ViewProofModal from \"./ViewProofModal\";\n\nclass CompletedOpenPredictors extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ccList: [],\n            isLoading: false,\n            showProofModal: false,\n            viewProofData: ''\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n\n        var param = {\n            \"category_id\": item.category_id,\n            \"status\": Constants.CONTEST_COMPLETED\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyOpenPrediction(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({ ccList: responseJson.data.predictions || [] })\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList(this.props.selectedFixture)\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    showProofModalFn=(item)=>{\n        let traverse = true;\n        _Map(item.option,(opt,idx)=>{\n            if(traverse && opt.is_correct == 1){\n                this.setState({\n                    correctAns: opt.option\n                },()=>{\n                    this.setState({\n                        viewProofData: item,\n                        showProofModal: true\n                    })\n                })\n            }\n            traverse = true\n        })\n    }\n    hideProofModalFn=()=>{\n        this.setState({\n            showProofModal: false\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.ccList.length > 0 && <ul className=\"list-pred\">\n                        {\n                            this.state.ccList.map((item, indx) => {\n                                return (\n                                    <OpenPredictorCard\n                                        {...this.props}\n                                        key={item.prediction_master_id}\n                                        data={{\n                                            itemIndex: indx,\n                                            item: item,\n                                            status: Constants.CONTEST_COMPLETED,\n                                            LobbyData: this.props.selectedFixture,\n                                            ShowProofModalFn: this.showProofModalFn\n                                        }} />\n                                )\n                            })\n                        }\n                    </ul>\n                }\n                {\n                    this.state.ccList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_COMPLETED_CONTEST1 + ' ' + AppLabels.NO_COMPLETED_CONTEST2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    this.state.ccList.length === 0 && this.state.isLoading &&\n                    _times(7, (idx) => {\n                        return (\n                            this.Shimmer(idx)\n                        )\n                    })\n                }\n                {\n                    this.state.showProofModal &&\n                    <ViewProofModal \n                        data={{ \n                            mShow: this.state.showProofModal,\n                            mHide: this.hideProofModalFn,\n                            viewProofData: this.state.viewProofData,\n                            correctAns: this.state.correctAns\n                        }}\n                    />\n                }\n            </div>\n        )\n    }\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m m-t-10\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default CompletedOpenPredictors;","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/LiveOpenPredictors.jsx",["3315"],"import React from 'react';\nimport { _times } from '../../Utilities/Utilities';\nimport { CONTEST_LIVE } from '../../helper/Constants';\nimport { getMyOpenPrediction } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../CustomComponent';\nimport Skeleton from 'react-loading-skeleton';\nimport OpenPredictorCard from './OpenPredictorCard';\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\n\nclass LiveOpenPredictors extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            lcList: [],\n            isLoading: false\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n\n        var param = {\n            \"category_id\": item.category_id,\n            \"status\": CONTEST_LIVE\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyOpenPrediction(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({ lcList: responseJson.data.predictions || [] })\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList(this.props.selectedFixture)\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.lcList.length > 0 && <ul className=\"list-pred\">\n                        {\n                            this.state.lcList.map((item, indx) => {\n                                return (\n                                    <OpenPredictorCard\n                                        {...this.props}\n                                        key={item.prediction_master_id}\n                                        data={{\n                                            itemIndex: indx,\n                                            item: item,\n                                            status: CONTEST_LIVE,\n                                            LobbyData: this.props.selectedFixture\n                                        }} />\n                                )\n                            })\n                        }\n                    </ul>\n                }\n                {\n                    this.state.lcList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_LIVE_CONTEST1 + ' ' + AppLabels.NO_LIVE_CONTEST2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    this.state.lcList.length === 0 && this.state.isLoading &&\n                    _times(7, (idx) => {\n                        return (\n                            this.Shimmer(idx)\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m m-t-10\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LiveOpenPredictors;","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorContestList.jsx",["3316","3317","3318","3319","3320","3321","3322","3323","3324"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { _Map, _filter, Utilities } from '../../Utilities/Utilities';\nimport { NoDataView } from '../CustomComponent';\nimport { OpenPredictorLearnMore, ConfirmOpenPredictor } from '.';\nimport { getOpenPredictionContest, checkOpenPredictionISJoin } from '../../WSHelper/WSCallings';\nimport { CONTESTS_LIST, IS_DFS, IS_OPEN_PREDICTOR } from '../../helper/Constants';\nimport SocketIOClient from \"socket.io-client\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport OpenPredictorCard from './OpenPredictorCard';\nimport ShareOpenPredictorModal from './ShareOpenPredictorModal';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\n\nvar socket = '';\n\nclass OpenPredictorContestList extends Component {\n    constructor(props) {\n        super(props);\n        this._isMounted = false;\n        this.state = {\n            LData: this.props.data || '',\n            ContestList: [],\n            isLoading: false,\n            ShimmerList: [1, 2, 3, 4, 5, 6],\n            showCP: false,\n            showLM: false,\n            showShareM: false,\n            ShareItem: '',\n            joinPItem: '',\n            limit: 20,\n            offset: 0,\n            hasMore: false\n        }\n    }\n\n    componentDidMount() {\n        if(IS_OPEN_PREDICTOR){\n            socket = SocketIOClient(WSC.nodeBaseURL);\n        }\n        this._isMounted = true;\n        this.parseHistoryStateData(this.state.LData);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        socket.disconnect();\n    }\n\n    getContestList(data) {\n        let param = {\n            \"category_id\": data.category_id,\n        }\n        if (!param.category_id) {\n            param['limit'] = this.state.limit;\n            param['offset'] = this.state.offset;\n        }\n        if (!param.offset || param.offset == 0) {\n            this.setState({ isLoading: true })\n        }\n        getOpenPredictionContest(param).then((responseJson) => {\n            this.setState({ isLoading: false })\n            if (responseJson.response_code === WSC.successCode) {\n                if (!param.category_id) {\n                    let data = responseJson.data.predictions || [];\n                    let haseMore = data.length >= param.limit\n                    this.setState({\n                        ContestList: [...this.state.ContestList, ...data],\n                        offset: responseJson.data.offset,\n                        hasMore: haseMore\n                    });\n                } else {\n                    this.setState({\n                        ContestList: responseJson.data.predictions || [],\n                        hasMore: false,\n                        offset: 0\n                    });\n                }\n            }\n        })\n    }\n\n    parseHistoryStateData = (data) => {\n        socket.disconnect();\n        if (data) {\n            let { LobbyData } = data;\n            this.setState({\n                LData: LobbyData\n            }, () => {\n                this.getContestList(LobbyData)\n                this.joinPredictionRoom(LobbyData)\n            })\n        }\n    }\n\n    joinPredictionRoom = (data) => {\n        socket.connect()\n        if (data.category_id) {\n            socket.emit('JoinAddOpenPredictionRoom', { category_id: data.category_id });\n            socket.emit('JoinPausePlayOpenPredictionRoom', { category_id: data.category_id });\n            socket.emit('JoinDeleteOpenPredictionRoom', { category_id: data.category_id });\n        }\n        if (WSManager.loggedIn()) {\n            socket.emit('JoinWonOpenPredictionRoom', { user_id: WSManager.getProfile().user_id });\n            socket.on('NotifyWonOpenPrediction', (obj) => {\n                if (this._isMounted) {\n                    let bal = WSManager.getBalance();\n                    let preBal = parseInt(bal.point_balance || 0);\n                    let updatedBal = preBal + parseInt(obj.amount);\n                    CustomHeader.updateCoinBalance(updatedBal);\n                    bal[\"point_balance\"] = updatedBal;\n                    WSManager.setBalance(bal);\n                    CustomHeader.showRSuccess(obj);\n                }\n            })\n        }\n        socket.on('NotifyNewOpenPrediction', (obj) => {\n            if (this._isMounted && obj.category_id == data.category_id) {\n                this.addFixture(obj)\n                CustomHeader.showNewPToast()\n            }\n        })\n        socket.on('NotifyDeleteOpenPrediction', (obj) => {\n            if (this._isMounted && obj.category_id == data.category_id) {\n                this.deleteFixture(obj)\n            }\n        })\n        socket.on('NotifyPausePlayOpenPrediction', (obj) => {\n            if (this._isMounted && obj.category_id == data.category_id) {\n                if (obj.pause === 1) {\n                    this.deleteFixture(obj)\n                } else if (obj.pause === 0) {\n                    if (WSManager.loggedIn()) {\n                        let param = {\n                            \"prediction_master_id\": obj.prediction_master_id,\n                        }\n                        checkOpenPredictionISJoin(param).then((responseJson) => {\n                            if (responseJson.response_code === WSC.successCode) {\n                                if (responseJson.data.is_joined == 0) {\n                                    this.addFixture(obj)\n                                }\n                            }\n                        })\n                    } else {\n                        this.addFixture(obj)\n                    }\n                }\n            }\n        })\n    }\n\n    deleteFixture = (item) => {\n        let fArray = _filter(this.state.ContestList, (obj) => {\n            return item.prediction_master_id != obj.prediction_master_id\n        })\n        this.setState({\n            ContestList: fArray\n        },()=>{\n            if(fArray.length <= 5 && this.state.hasMore){\n                this.fetchMoreData()\n            }\n        })\n    }\n\n    addFixture = (obj) => {\n        let pinnedArray = [];\n        let tmpArray = [];\n        _Map(this.state.ContestList, (item) => {\n            if (item.is_pin == 1) {\n                pinnedArray.push(item)\n            } else {\n                tmpArray.push(item)\n            }\n        })\n        this.setState({\n            ContestList: [...pinnedArray, obj.prediction, ...tmpArray]\n        });\n    }\n\n    timerCompletionCall = (item) => {\n        this.deleteFixture(item)\n    }\n\n    onSelectPredict = (itemIndex, optionIndex, option) => {\n        let tmpArray = this.state.ContestList;\n        let item = tmpArray[itemIndex];\n        _Map(item['option'], (obj, idx) => {\n            if (idx === optionIndex) {\n                obj['user_selected_option'] = option.prediction_option_id;\n                item['option_predicted'] = option\n            } else {\n                obj['user_selected_option'] = null;\n            }\n        })\n        this.setState({\n            ContestList: tmpArray\n        })\n    }\n\n    onMakePrediction = (item) => {\n        if (WSManager.loggedIn()) {\n            this.setState({\n                joinPItem: item,\n                showCP: true\n            })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    showShareM = (data) => {\n        this.setState({\n            showShareM: true,\n        });\n    }\n\n    hideShareM = () => {\n        this.setState({\n            showShareM: false,\n        });\n    }\n\n    shareContest(event, data) {\n        if (WSManager.loggedIn()) {\n            event.stopPropagation();\n            this.setState({ showShareM: true, ShareItem: data })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    hideCP = () => {\n        let tmpArray = this.state.ContestList;\n        let itemIndex = tmpArray.indexOf(this.state.joinPItem)\n        let item = itemIndex >= 0 ? tmpArray[itemIndex] : null;\n        if (item && item.option) {\n            _Map(item['option'], (obj, idx) => {\n                if (obj.user_selected_option) {\n                    obj['user_selected_option'] = null;\n                }\n            })\n            this.setState({\n                ContestList: tmpArray,\n                showCP: false\n            })\n        } else {\n            this.setState({\n                showCP: false\n            })\n        }\n    }\n\n    clickLearnMore = () => {\n        this.setState({\n            showLM: true\n        })\n    }\n\n    hideLM = () => {\n        this.setState({\n            showLM: false\n        })\n    }\n\n    clickEarnCoins = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push(\"/earn-coins\")\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    renderDFSCard = () => {\n        if(Utilities.getMasterData().allow_dfs_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().dfs_bnr;\n        if (IS_DFS) {\n            return ( bannerImg ?\n                <li onClick={this.props.goToDFS} className=\"is-card prd-card-img-only\" >\n                    <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n                </li>\n                :\n                <li onClick={this.props.goToDFS} className=\"is-card\">\n                    <div className=\"dfs-card\" >\n                        <img className=\"img-dfs-shape\" src={Images.DFS_SHAPE_IMG} alt='' />\n                        <div className=\"dfs-c\">\n                            <img className=\"img-dfs\" src={Images.DFS_IMG} alt='' />\n                            <p>Play Daily Fantasy Sports, Win Real Cash Prizes</p>\n                        </div>\n                    </div>\n                </li>\n            )\n        }\n        return ''\n    }\n    renderPrizeCard = () => {\n        if(Utilities.getMasterData().allow_prize_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().prize_bnr;\n        return ( bannerImg ?\n            <li onClick={this.props.goToRewards} className=\"is-card prd-card-img-only\" >\n                <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n            </li>\n            :\n            <li className=\"is-card\" onClick={this.props.goToRewards}>\n                <div className=\"prd-prize-card\">\n                    <img className=\"img-prize-card\" src={Images.PRD_PRIZE_IMG} alt='' />\n                    <div className=\"dfs-c\">\n                        <img className=\"img-dfs\" src={Images.PRIZES_CAR} alt='' />\n                        <p>Play Prediction and Win Huge Rewards</p>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n\n    fetchMoreData = () => {\n        if (!this.state.isLoading && this.state.hasMore) {\n            this.getContestList(this.state.LData)\n        }\n    }\n\n    render() {\n        const { ContestList, isLoading, ShimmerList, showCP, joinPItem, showLM, showShareM, ShareItem, LData, hasMore } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"prediction-wrap-v\">\n                        <div className=\"p_view-container\">\n                            <div className=\"contest-action\">\n                                <button onClick={this.clickLearnMore} className=\"btn btn-rounded small\">{AL.HOW_TO_PREDICT}</button>\n                                <button onClick={this.clickEarnCoins} className=\"btn btn-rounded small\">{AL.EARN_COINS}</button>\n                            </div>\n                            <InfiniteScroll\n                                dataLength={ContestList.length}\n                                pullDownToRefresh={false}\n                                hasMore={hasMore && !isLoading}\n                                next={this.fetchMoreData.bind(this)}\n                            >\n                                {\n                                    !isLoading && <ul className=\"list-pred\">\n                                        {\n                                            ContestList.map((item, index) => {\n                                                return (\n                                                    <React.Fragment key={index} >\n                                                        <OpenPredictorCard\n                                                            {...this.props}\n                                                            key={item.prediction_master_id}\n                                                            data={{\n                                                                itemIndex: index,\n                                                                item: item,\n                                                                status: CONTESTS_LIST,\n                                                                timerCallback: () => this.timerCompletionCall(item),\n                                                                onSelectPredict: this.onSelectPredict,\n                                                                onMakePrediction: this.onMakePrediction,\n                                                                shareContest: this.shareContest.bind(this),\n                                                                LobbyData: LData\n                                                            }} />\n                                                        {\n                                                            index === 0 && this.renderPrizeCard()\n                                                        }\n                                                        {/* {\n                                                        index === 2 && this.renderDFSCard()\n                                                    } */}\n                                                    </React.Fragment>\n                                                );\n                                            })\n                                        }\n                                        \n                                    </ul>\n                                }\n                            </InfiniteScroll>\n                            {\n                                ContestList.length === 0 && !isLoading &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                    MESSAGE_1={ LData.category_id ? AL.NO_QUE_FOR_CATEGORY : AL.NO_FIXTURES_MSG1}\n                                    MESSAGE_2={ LData.category_id ? AL.SWITCH_TO_OTHER_CAT : AL.NO_FIXTURES_MSG3}\n                                />\n                            }\n                            {\n                                ContestList.length === 0 && isLoading &&\n                                _Map(ShimmerList, (item, index) => {\n                                    return (\n                                        this.Shimmer(index)\n                                    )\n                                })\n                            }\n\n                        </div>\n                        {\n                            showCP && <ConfirmOpenPredictor {...this.props} preData={{\n                                mShow: showCP,\n                                mHide: this.hideCP,\n                                cpData: joinPItem,\n                                successAction: this.timerCompletionCall\n                            }} />\n                        }\n                        {\n                            showLM && <OpenPredictorLearnMore {...this.props} preData={{\n                                mShow: showLM,\n                                mHide: this.hideLM\n                            }} />\n                        }\n                        {\n                            showShareM &&\n                            <ShareOpenPredictorModal\n                                {...this.props}\n                                preData={{\n                                    mShow: showShareM,\n                                    mHide: this.hideShareM,\n                                    spData: ShareItem\n                                }}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default OpenPredictorContestList;\n","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/OpenPredictorCard.jsx",["3325","3326","3327","3328","3329","3330","3331","3332","3333","3334","3335","3336","3337","3338","3339","3340","3341","3342","3343","3344","3345","3346","3347","3348","3349","3350","3351","3352","3353","3354","3355","3356","3357","3358"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { CONTESTS_LIST, CONTEST_COMPLETED, CONTEST_LIVE, CONTEST_UPCOMING } from '../../helper/Constants';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Images from '../../components/images';\nimport * as AL from \"../../helper/AppLabels\";\nimport CustomHeader from \"../../components/CustomHeader\";\n\nclass OpenPredictorCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n        }\n    }\n\n    onPredictionSelect = (itemIndex, idx, opt) => {\n        const { item, onSelectPredict, onMakePrediction } = this.props.data;\n        onSelectPredict(itemIndex, idx, opt);\n        setTimeout(() => {\n            onMakePrediction(item)\n        }, 50);\n    }\n\n    renderFilledBar = (opt, idx, data) => {\n        const { item, status, itemIndex } = this.props.data;\n        let predictedPer = item.total_predictions == 0 ? 0 : ((opt.option_total_coins / item.total_pool) * 100).toFixed(2);\n\n        let checkPredictedPer = (predictedPer % 1) == 0 ? Math.floor(predictedPer) : predictedPer;\n\n        predictedPer = checkPredictedPer;\n\n        let isOptSelected = (opt.user_selected_option == opt.prediction_option_id);\n        let userCorrect = (isOptSelected && opt.is_correct == 1);\n        let isCompleted = (status === CONTEST_COMPLETED);\n        return (\n            <React.Fragment key={idx}>\n                <div onClick={() => (status == CONTESTS_LIST && this.onPredictionSelect(itemIndex, idx, opt))} className={\n                    \"prediction-bar\" + (isOptSelected ? ' selected' : '') +\n                    ((status != CONTESTS_LIST && !isCompleted && isOptSelected && item.entry_type == 0) ? ' mb-1' : '') +\n                    (isCompleted ? (userCorrect ? ' success' : (isOptSelected ? ' failure' : '')) : '')\n                }>\n                    <div className=\"filled-bar\" style={{ width: data.entry_type == 1 ? (isOptSelected ? '100%' : '0') : (predictedPer + '%'), animationDelay: (0.05 * idx) + 's' }} />\n                    <p className=\"answer\">{opt.option}</p>\n                    <div className=\"corrected-ans\">\n                        {\n                            isCompleted && <React.Fragment>\n                                {opt.is_correct == 1 && !isOptSelected && <span>{AL.CORRECT_ANS}</span>}\n                                {isOptSelected && <i className={userCorrect ? \"icon-tick\" : \"icon-close\"} />}\n                            </React.Fragment>\n                        }\n                        {\n                            data.entry_type == 0 &&\n                            <p>{predictedPer > 0 ? ((predictedPer + '%')) : ''}</p>\n                        }\n                    </div>\n                </div>\n                {\n                    (status != CONTESTS_LIST && !isCompleted && isOptSelected && item.entry_type == 0) && <div className=\"estimate-win\">\n                        <p className=\"est-price-pool\"><img src={Images.IC_COIN} alt=\"\" /><span className=\"value\">\n                            {Utilities.kFormatter(item.estimated_winning)}</span> {AL.EST_WIN}\n                            <OverlayTrigger trigger={['hover', 'focus']} placement={'bottom'} overlay={\n                                <Tooltip id=\"tooltip\">\n                                    <strong>{AL.EST_WIN_FORMULA}</strong>\n                                </Tooltip>\n                            }>\n                                <i className=\"icon-info\" />\n                            </OverlayTrigger>\n                        </p>\n                    </div>\n                }\n            </React.Fragment>\n        )\n    }\n\n    viewParticipants = () => {\n        const { item, status } = this.props.data;\n        let prediction_master_id = item.prediction_master_id;\n        let mURL = Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor/participants/\" + btoa(prediction_master_id);\n        let isLiveCom = ((status == CONTEST_COMPLETED) || (status == CONTEST_LIVE));\n        this.props.history.push({ pathname: '/' + mURL, state: { isLeader: isLiveCom } });\n    }\n\n    ShowModal = (item) => {\n        this.props.data.ShowProofModalFn(item);\n    }\n\n    callNativeRedirection(item) {\n        let data = {\n            action: 'predictionLink',\n            targetFunc: 'predictionLink',\n            type: 'link',\n            url: item.source_url,\n            detail: item\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n\n    render() {\n        const { item, status, shareContest, LobbyData, timerCallback, itemIndex } = this.props.data;\n        let game_starts_in = item.deadline_time / 1000;\n        let betCoin = 0;\n        let isCompleted = (status == CONTEST_COMPLETED);\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <li style={{animation: (itemIndex > 10 ? 'none' : ''), transition : (itemIndex > 10 ? 'none' : ''), transform: (itemIndex > 10 ? 'rotateY(0deg)' : '') }}  key={item.prediction_master_id + item.season_game_uid} className={parseInt(item.is_pin) != 0 ? ' pinned' : ''}>\n                        {status == CONTESTS_LIST && <i onClick={(e) => shareContest(e, item)} className=\"icon-share\" />}\n                        {\n                            parseInt(item.is_pin) != 0 && <div className=\"contest-pin\">\n                                <img src={Images.pinned_ic} alt=\"\" />\n                            </div>\n                        }\n                        {item.source_desc &&\n                            <OverlayTrigger trigger={['hover', 'focus']} placement={'left'} overlay={\n                                <Tooltip id=\"tooltip1\">\n                                    <strong>{item.source_desc}</strong>\n                                </Tooltip>\n                            }>\n                                <i className=\"icon-ic-info que-info\" />\n                            </OverlayTrigger>\n                        }\n                        {\n                            item.source_url &&\n                            <React.Fragment>\n                                {\n                                    window.ReactNativeWebView ?\n                                        <a\n                                            href\n                                            onClick={() => this.callNativeRedirection(item)}\n                                            className=\"attached-url\">\n                                            <img src={Images.ATTACHMENT_IC} alt=\"\" />\n                                        </a>\n                                        :\n                                        <a\n                                            href={item.source_url}\n                                            target='_blank'\n                                            className=\"attached-url\">\n                                            <img src={Images.ATTACHMENT_IC} alt=\"\" />\n                                        </a>\n                                }\n                            </React.Fragment>\n                        }\n\n                        <p className={\"questions\" + (!LobbyData ? ' mb-0' : '')}>{item.desc}</p>\n                        {\n                            (!LobbyData) && <span className=\"category_name\">{item.category_name}</span>\n                        }\n                        {\n                            _Map(item.option, (opt, idx) => {\n                                betCoin = (opt.user_selected_option == opt.prediction_option_id) ? opt.bet_coins : betCoin\n                                return this.renderFilledBar(opt, idx, item);\n                            })\n                        }\n                        {\n                            status == CONTESTS_LIST && <div className=\"footer-vc\">\n                                <div>\n                                    <div className=\"date-v new-fc\">\n                                        <div className=\"match-timing\">\n                                            {\n                                                Utilities.showCountDown({ game_starts_in: game_starts_in }) ?\n                                                    <span className=\"d-flex\">\n                                                        <div className=\"countdown time-line\">\n                                                            {\n                                                                game_starts_in && <CountdownTimer timerCallback={timerCallback} deadlineTimeStamp={game_starts_in} />\n                                                            }\n                                                        </div>\n                                                        {AL.REMAINING}\n                                                    </span> :\n                                                    <span> <MomentDateComponent data={{ date: item.deadline_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                                {\n                                    (item.entry_type == 0 && item.prize_pool > 0) &&\n                                    <p className=\"price-pool\"><span className=\"price-pool-first\">{AL.WIN}</span><img src={Images.IC_COIN} alt=\"\" />{item.prize_pool}</p>\n                                }\n                                {\n                                    (item.entry_type == 0 && item.prize_pool == 0) &&\n                                    <p className=\"price-pool-first font-12\">{AL.BE_FIRST}</p>\n                                }\n                                {\n                                    item.entry_type == 1 &&\n                                    <p className=\"price-pool\"><span className=\"price-pool-first\">{AL.WIN}</span><img src={Images.IC_COIN} alt=\"\" />{item.win_prize}</p>\n                                }\n                            </div>\n                        }\n                        {\n                            status != CONTESTS_LIST && <div className=\"footer-vc\">\n                                <div className=\"price-container\">\n                                    <div className=\"my-pre-date\">\n                                        {\n                                            isCompleted && item.win_coins > 0 && <div className=\"my-pre-date won\">\n                                                <p className=\"price-pool\">\n                                                    <span className=\"price-pool-first\">{AL.WON}</span>\n                                                    <img src={Images.IC_COIN} alt=\"\" />\n                                                    {item.win_coins || 0}\n                                                </p>\n                                            </div>\n                                        }\n                                        <p className=\"price-pool\">\n                                            <span className=\"price-pool-first text-capitalize\">\n                                                {\n                                                    item.entry_type == 0 ? AL.YOUR_BET : (item.entry_fee > 0 ? AL.Entry_fee : '')\n                                                }\n                                            </span>\n                                            {(item.entry_type == 0 || item.entry_fee > 0) && <img src={Images.IC_COIN} alt=\"\" />}\n                                            {item.entry_type == 0 ? betCoin : (item.entry_fee > 0 ? item.entry_fee : AL.FREE_ENTRY)}\n                                        </p>\n                                        {\n                                            status == CONTEST_UPCOMING && <div className=\"date-v\">\n                                                <div className=\"match-timing price-pool-first\">\n                                                    {\n                                                        Utilities.showCountDown({ game_starts_in: game_starts_in }) ?\n                                                            <span className=\"d-flex\">\n                                                                <div className=\"countdown time-line text-left\">\n                                                                    {\n                                                                        game_starts_in && <CountdownTimer timerCallback={timerCallback} deadlineTimeStamp={game_starts_in} />\n                                                                    }\n                                                                </div>\n                                                                {AL.REMAINING}\n                                                            </span> :\n                                                            <span> <MomentDateComponent data={{ date: item.deadline_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                                    }\n                                                </div>\n                                            </div>\n                                        }\n                                        {\n                                            isCompleted && (item.proof_desc || item.proof_image) &&\n                                            <p className=\"view-proof-section\" onClick={() => this.ShowModal(item)}>\n                                                {AL.VIEW_PROOF}\n                                            </p>\n                                        }\n                                    </div>\n                                </div>\n                                <div>\n                                    {\n                                        item.entry_type == 0 &&\n                                        <p className=\"price-pool\"><span className=\"price-pool-first\">{AL.WIN}</span><img src={Images.IC_COIN} alt=\"\" />{item.prize_pool}</p>\n                                    }\n                                    {\n                                        item.entry_type == 1 &&\n                                        <p className=\"price-pool\"><span className=\"price-pool-first\">{AL.WIN}</span><img src={Images.IC_COIN} alt=\"\" />{item.win_prize}</p>\n                                    }\n                                    {\n                                        item.entry_type == 0 && <div className=\"date-v right-side\">\n                                            <span onClick={this.viewParticipants} className=\"price-pool-first pointer-cursor font-12\">{item.total_predictions} {AL.PREDICTED}</span>\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        }\n                    </li>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default OpenPredictorCard;\n","/var/www/html/framework/frontend/src/Component/OpenPredictorModule/UpcomingOpenPredictors.jsx",["3359","3360"],"import React from 'react';\nimport { NoDataView } from '../CustomComponent';\nimport { _filter, _times } from '../../Utilities/Utilities';\nimport { getMyOpenPrediction } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport OpenPredictorCard from './OpenPredictorCard';\nimport Images from '../../components/images';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\n\nclass UpcomingOpenPredictors extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ucList: [],\n            isLoading: false\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n        var param = {\n            \"category_id\": item.category_id,\n            \"status\": Constants.CONTEST_UPCOMING\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyOpenPrediction(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({ ucList: responseJson.data.predictions || [] })\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList(this.props.selectedFixture)\n    }\n\n    timerCompletionCall = (item) => {\n        this.deleteFixture(item)\n    }\n\n    deleteFixture = (item) => {\n        let fArray = _filter(this.state.ucList, (obj) => {\n            return item.prediction_master_id != obj.prediction_master_id\n        })\n        this.setState({\n            ucList: fArray\n        })\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.ucList.length > 0 && <ul className=\"list-pred\">\n                        {\n                            this.state.ucList.map((item, indx) => {\n                                return (\n                                    <OpenPredictorCard\n                                        {...this.props}\n                                        key={item.prediction_master_id}\n                                        data={{\n                                            itemIndex: indx,\n                                            item: item,\n                                            status: Constants.CONTEST_UPCOMING,\n                                            timerCallback: () => this.timerCompletionCall(item),\n                                            LobbyData: this.props.selectedFixture\n                                        }} />\n                                )\n                            })\n                        }\n                    </ul>\n                }\n                {\n                    this.state.ucList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_UPCOMING_CONTEST1 + ' ' + AppLabels.NO_UPCOMING_CONTEST2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    this.state.ucList.length === 0 && this.state.isLoading &&\n                    _times(7, (idx) => {\n                        return (\n                            this.Shimmer(idx)\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m m-t-10\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UpcomingOpenPredictors;","/var/www/html/framework/frontend/src/views/AppInstallNotification.jsx",[],"/var/www/html/framework/frontend/src/views/EditReferralCode.jsx",["3361","3362","3363","3364","3365","3366","3367","3368","3369","3370"],"import React from 'react';\nimport { Label } from 'react-bootstrap';\nimport { updateRefCode } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { BonusCaseModal } from \"../Modals\";\nimport { getReferralMasterData } from '../WSHelper/WSCallings';\nimport Images from '../components/images';\n\nexport default class EditReferralCode extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            newRefCode: WSManager.getUserReferralCode(),\n            oldRefCode: WSManager.getUserReferralCode(),\n            profileDetail: WSManager.getProfile(),\n            isShowPopup: false,\n            bonusDetail: this.props.location.state,\n            displayLabelVlaue: '',\n            prizeAmount: '',\n            masterData: '',\n            refferCodeAmount: '',\n            refferCodeAmountType: '',\n\n        };\n    }\n\n\n    componentWillMount = (e) => {\n        this.callRFMasterDataApi();\n        this.updateValuesOfLabel(this.props.location.state);\n\n    }\n\n    /**\n     * MASTER API AFFILATED \n     */\n    callRFMasterDataApi() {\n        let param = {}\n        getReferralMasterData(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    masterData: responseJson.data\n                })\n            }\n        })\n\n    }\n    updateValuesOfLabel = (e) => {\n        let isValue = e;\n        let userCoin = parseInt(e.user_coin);\n        let userReal = parseInt(e.user_real);\n        let userBonus = parseInt(e.user_bonus);\n\n        if (userBonus >= userCoin && userBonus >= userReal) {\n            this.setState({\n                displayLabelVlaue: 0,\n                prizeAmount: isValue.user_bonus\n            })\n        }\n        if (userReal >= userBonus && userReal >= isValue.user_bonus) {\n            this.setState({\n                displayLabelVlaue: 2,\n                prizeAmount: isValue.user_real\n            })\n        }\n        if (userCoin >= userBonus && userCoin >= userReal) {\n            this.setState({\n                displayLabelVlaue: 1,\n                prizeAmount: isValue.user_coin\n            })\n        }\n\n    }\n\n    /**\n     * UPDATE REFERRAL CODE \n     */\n\n    updateRefCode() {\n        if (this.state.newRefCode.length >= 6) {\n            let param = {\n                \"referral_code\": this.state.newRefCode\n            }\n            updateRefCode(param).then((responseJson) => {\n                if (responseJson && responseJson.response_code == WSC.successCode) {\n                    let user_real = parseInt(this.state.masterData[16].user_real);\n                    let user_coin = parseInt(this.state.masterData[16].user_coin);\n                    let user_bonus = parseInt(this.state.masterData[16].user_bonus);\n                    let amountis, amountType;\n                    if (user_real >= user_coin && user_real >= user_bonus) {\n                        amountis = user_real;\n                        amountType = 2;\n                    }\n                    if (user_coin >= user_real && user_coin >= user_bonus) {\n                        amountis = user_coin;\n                        amountType = 1;\n                    }\n                    if (user_bonus >= user_coin && user_bonus >= user_real) {\n                        amountis = user_bonus;\n                        amountType = 0;\n                    }\n                    let passingData = {\n                        isSkip: 3,\n                        value: amountis,\n                        type: amountType,\n                    };\n                    this.setState({\n                        isShowPopup: true,\n                        passingData: passingData,\n\n                    })\n                    let tempProfile = this.state.profileDetail;\n                    tempProfile.referral_code = this.state.newRefCode;\n                    tempProfile.is_rc_edit = '1';\n                    WSManager.setProfile(tempProfile);\n                }\n            })\n        }\n    }\n    /**\n     * SKIP STEP \n     */\n\n    SkipStepWSaving = (e) => {\n        let param = {\n            \"referral_code\": this.state.oldRefCode\n        }\n        updateRefCode(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let tempProfile = this.state.profileDetail;\n                tempProfile.referral_code = this.state.oldRefCode;\n                tempProfile.is_rc_edit = '1';\n                WSManager.setProfile(tempProfile);\n                this.goBack();\n            }\n        })\n    }\n\n    SkipStep = (e) => {\n        this.goBack();\n    }\n\n    goBack = (e) => {\n        this.props.history.goBack();\n    }\n\n    render() {\n        return (\n            <div className=\"web-container bg-white p-0 verify-otp edit-ref refer-friend j-c-c d-f\">\n\n                <div className='center-view'>\n                    <div>\n                        {/* <span className=\"header-action skip_layout\" onClick={() => this.SkipStepWSaving()}>\n                            <i className=\"icon-close\" />\n                        </span> */}\n                    </div>\n                    <div className='m-t-20-p'>\n                        <Label className='font-xl'>{AppLabels.EDIT_REFER}<br></br>{AppLabels.CODE}</Label><br></br>\n                        <Label className='title'>{AppLabels.EDIT_YOUR_CODE_BONUS}</Label>\n                    </div>\n                    <div className={this.state.prizeAmount == 0 ? 'd-none' : 'box-view m-t-30-p'}>\n                        <div className='t-a-c p10'>\n                            <Label className='get-20-bonus-cash'>{AppLabels.GET}</Label>&nbsp;\n                            {\n                                this.state.displayLabelVlaue == 0 &&\n                                <Label className='icon-bonus is-blue font-s-15 line-h-18'></Label>\n                            }\n                            {\n                                this.state.displayLabelVlaue == 2 &&\n                                <Label className='is-blue font-s-12 line-h-16'>{Utilities.getMasterData().currency_code}</Label>\n                            }\n\n                            \n                            <img alt='' src={this.state.displayLabelVlaue == 1 ? Images.IC_COIN : ''} className='icon-height-is-18' />\n                            <Label className='get-20-bonus-cash pl2'>{this.state.prizeAmount}</Label> &nbsp;\n                            <Label className='get-20-bonus-cash'>\n                                {this.state.displayLabelVlaue == 0 ? AppLabels.BONUS_CASH_LOWER : this.state.displayLabelVlaue == 1 ? AppLabels.COIN_CASH_LOWER : this.state.displayLabelVlaue == 2 ? AppLabels.REAL_CASH_LOWER : ''}</Label>\n\n                            <br></br>\n                            <Label className='title'>{AppLabels.ON_TRY_COOL_REF_CODE}</Label>\n                        </div>\n                    </div>\n\n                    <div className='text-f-view'>\n                        <div className='t-a-c p10'>\n                            <Label className='title'>{AppLabels.REF_CODE}</Label>\n                        </div>\n                        <input className='ref-input-text' onChange={(e) => { this.setState({ newRefCode: e.target.value }) }} value={this.state.newRefCode} maxLength={10} />\n                        <div className='horizontal-line mt10' />\n                    </div>\n\n                    <div className='j-c-c d-f a-i-c m-t-20-p'>\n                        <i className={this.state.newRefCode.length >= 6 ? \"icon-next-btn display-color cursor-pointer\" : 'icon-next-btn display-color-disable'} onClick={() => this.updateRefCode()} />\n                    </div>\n                    <div className='lower-div pt50'>\n                        <Label className='friend-sign-up-blue cursor-pointer' onClick={() => this.SkipStepWSaving()}>{AppLabels.I_DONT_WANT_TO_EDIT}</Label><br></br>\n                        <Label className='title-sm cursor-pointer' onClick={() => this.SkipStepWSaving()}>{AppLabels.YOU_WONT_TO_ABLE_EDIT_THIS_CODE_AGAIN}</Label>\n                    </div>\n                </div>\n                {\n                    this.state.isShowPopup ? <BonusCaseModal SkipStep={this.SkipStep} data={this.state.passingData} valueData={this.state} /> : ''\n                }\n            </div>\n\n        );\n    }\n}","/var/www/html/framework/frontend/src/views/Store.jsx",["3371","3372","3373","3374"],"import React from 'react';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport Slider from 'rc-slider';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport CustomHeader from '../components/CustomHeader';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { MyContext } from '../InitialSetup/MyProvider';\n\nexport default class Store extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            rangeValue : [],\n            productList : '',\n            lowerLimit : 0,\n            upperLimit : 5000,\n            min : 0,\n            max : 5000,\n            offset: 0,\n            items_perpage : 10,\n            hasMore: false,\n            isLoaderShow : false\n        }\n    }\n\n    componentDidMount() {\n        this.getProductList();\n    }\n    onSliderChange = (rangeValue) => {\n        if(rangeValue){\n            this.setState({\n                lowerLimit : rangeValue[0],\n                upperLimit : rangeValue[1],\n                offset : 0,\n                productList : ''\n                },function(){\n                    this.getProductList();\n                });\n        }  \n      }\n\n    getProductList = () => {\n        let param = {\n            \"product_category_master_id\":\"\", \n            \"lower_limit\": this.state.lowerLimit,\n            \"upper_limit\": this.state.upperLimit,\n            \"offset\": this.state.offset,\n            \"items_perpage\" : this.state.items_perpage\n        }\n        WSManager.Rest(WSC.baseURL + WSC.GET_PRODUCT_LIST, param).then((responseJson) => {\n            if(responseJson.response_code == WSC.successCode && responseJson.data.result){\n                if(this.state.offset == 0){\n                    this.setState({ productList: responseJson.data.result })\n                }else{\n                    this.setState({ productList: [...this.state.productList, ...responseJson.data.result] });\n                }\n                this.setState({ hasMore: responseJson.data.is_load_more });\n                this.setState({ offset: responseJson.data.offset });\n            }\n        })\n    }\n\n    fetchMoreData = () => {\n        this.getProductList();\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            title: 'Store'\n        }\n        const createSliderWithTooltip = Slider.createSliderWithTooltip;\n        const Range = createSliderWithTooltip(Slider.Range);\n        const {\n            hasMore,\n            isLoaderShow\n        } = this.state;\n    \n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed\">\n                       <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                       <div className=\"webcontainer-inner\">\n                        {\n                            this.state.productList.length == 0 ? (<div className=\"no-record-found\">Sorry! There are no products in the Store.</div>) :(\n                            <div>\n                            <div className=\"slider-header\">\n                                <Range defaultValue={[this.state.lowerLimit,this.state.upperLimit]} min={this.state.min} max={this.state.max} tipFormatter={value => `${value}`}\n                                    onAfterChange={this.onSliderChange}\n                                />\n                                <div className=\"text-center\">{AppLabels.Coins_Range}\n                                    <span><i className=\"icon-coins\"></i> {this.state.lowerLimit} - {this.state.upperLimit}</span>\n                                </div>\n                            </div>\n                            <div className=\"store-wrapper\">\n\n                            <InfiniteScroll\n                                    dataLength={this.state.productList.length}\n                                    next={this.fetchMoreData.bind(this)}\n                                    hasMore={hasMore}\n                                    scrollableTarget='store-list'\n                                    loader={\n                                        isLoaderShow == true &&\n                                        <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                    }>\n                                <Row id=\"store-list\" className=\"store-list-scroller\">\n                                {\n                                    this.state.productList && this.state.productList.map((product, index) => {\n                                    return <Col key={'product'+product.product_unique_id} sm={4} xs={6} className=\"store-card\" onClick={() => this.props.history.push({ pathname: '/item-detail/'+product.product_unique_id})}>\n                                        <div className=\"rounded-cards\">\n                                            <figure className=\"text-center item-img\">\n                                                <img src={product.product_image_url} alt=\"\"/>\n                                            </figure>\n                                            <div className=\"item-name\">{product.product_name}</div>\n                                            <div className=\"item-price\"><i className=\"icon-coins\"></i>{product.price}<span className=\"text-small\">Coins</span></div>\n                                            <div className=\"text-center\">\n                                                <Button className=\"btn-sm btn-rounded\">{AppLabels.Redeem_NOW}</Button>\n                                            </div>\n                                        </div>\n                                    </Col>\n                                    })\n                                }\n                                </Row>\n                            </InfiniteScroll>\n                                \n                                </div>\n                            </div>\n                            )\n                        }\n                       </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Modals/Banner.jsx",["3375"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities } from '../Utilities/Utilities';\n\nexport default class Banner extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            bannerData: Utilities.getMasterData().banner || '',\n        };\n    }\n\n    render() {\n\n        const { isBannerShow, onBannerHide } = this.props;\n        const { bannerData } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={isBannerShow}\n                        onHide={() => onBannerHide(false)}\n                        dialogClassName=\"custom-modal banner-modal confirmation-modal\"\n                    >\n                        <Modal.Header >\n                            <div className='Confirm-header banner-app'> {bannerData.banner_title} </div>\n                        </Modal.Header>\n\n                        <Modal.Body className=\"p-0\">\n                            <a onClick={()=> onBannerHide()} href={bannerData.banner_link} target={'_blank'}>\n                                <img alt=\"\" className=\"banner-image\" src={Utilities.getAppBannerURL(bannerData.banner_image)}/>\n                            </a>\n                            \n                        </Modal.Body>\n                        <Modal.Footer className=\"custom-modal-footer dissmiss-btn-footer\">\n                            <a href className='my-alert-button-text' onClick={() => onBannerHide()}>{AppLabels.DISMISS}</a>\n                        </Modal.Footer>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/views/ReferalLeaderBoard.jsx",["3376","3377","3378","3379","3380","3381","3382","3383","3384","3385","3386","3387","3388","3389","3390","3391","3392","3393","3394","3395","3396","3397","3398","3399","3400","3401","3402","3403","3404","3405","3406","3407","3408","3409","3410","3411","3412","3413","3414","3415","3416","3417","3418","3419","3420","3421","3422","3423","3424","3425","3426","3427","3428","3429","3430","3431","3432","3433","3434","3435","3436","3437","3438","3439","3440","3441","3442","3443","3444","3445","3446","3447","3448"],"import React from 'react';\nimport { MyContext } from '../views/Dashboard';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport Images from '../components/images';\nimport { getFPPFixedPredictionCategory, getReferalLeaderboard } from \"../WSHelper/WSCallings\";\nimport * as AL from \"../helper/AppLabels\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport Skeleton from 'react-loading-skeleton';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Filter from '../components/filter';\nimport WSManager from '../WSHelper/WSManager';\nimport ls from 'local-storage';\nimport Moment from \"react-moment\";\nimport { GameType, SELECTED_GAMET } from '../helper/Constants';\nimport { NoDataView } from '../Component/CustomComponent';\nimport { Utilities, _times, _debounce, _Map, _filter } from '../Utilities/Utilities';\nimport CustomHeader from '../components/CustomHeader';\nimport ReferalPrizesModal from '../Modals/ReferalPrizesModal';\n\n\nclass ReferalLeaderBoard extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            PLIST: [],\n            OWNDATA: '',\n            TOPTHREE: [],\n            SPONSORDATA: [],\n            PNO: 1,\n            PSIZE: 20,\n            categoryList: [],\n            HMORE: false,\n            ISLOAD: false,\n            refreshList: true,\n            showLFitlers: false,\n            filterDataBy: 'today',\n            CFilter: '',\n            filterById: '1',\n            OwnUserName: ls.get('profile'),\n            showSponsorData: '',\n            STARTDATE: '',\n            ENDDATE: '',\n            showPrizeInfo: false,\n            leadStatus: '',\n            filerByTime: [\n                {\n                    value: 'today',\n                    label: AL.TODAY,\n                    prize_cat_id: '1'\n                },\n                {\n                    value: 'this_week',\n                    label: AL.THIS_WEEK,\n                    prize_cat_id: '2'\n                },\n                {\n                    value: 'this_month',\n                    label: AL.THIS_MONTH,\n                    prize_cat_id: '3'\n                },\n            ],\n            filerByPreTime: [\n                {\n                    value: 'yesterday',\n                    label: AL.YESTERDAY,\n                    prize_cat_id: '1'\n                },\n                {\n                    value: 'last_week',\n                    label: AL.LAST_WEEK,\n                    prize_cat_id: '2'\n                },\n                {\n                    value: 'last_month',\n                    label: AL.LAST_MONTH,\n                    prize_cat_id: '3'\n                },\n            ]\n        };\n\n    }\n\n    componentWillMount() {\n        WSManager.setPickedGameType(GameType.DFS);\n\n    }\n\n    componentDidMount() {\n        //this.getCategory();\n        this.getLeaderboardData();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.showLFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    /** \n    @description hide filters \n    */\n    hideFilter = () => {\n        this.setState({ showLFitlers: false })\n    }\n\n    getCategory = () => {\n        getFPPFixedPredictionCategory().then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    categoryList: responseJson.data\n                })\n            }\n        })\n    }\n\n    /**\n    * @description - method to get leaderboard list\n    */\n\n    getLeaderboardData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy, TOPTHREE, SPONSORDATA } = this.state;\n        let param = {\n            \"category_id\": CFilter.category_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy\n        }\n        this.setState({ ISLOAD: true });\n        getReferalLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                let topThree = responseJson.data.top_three || [];\n                let sponserData = responseJson.data.sponsors || [];\n                let startDate = responseJson.data.start_date || '';\n                let endDate = responseJson.data.end_date || '';\n                let status = responseJson.data.status;\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    TOPTHREE: PNO === 1 ? topThree : TOPTHREE,\n                    SPONSORDATA: PNO === 1 ? sponserData : SPONSORDATA,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1,\n                    STARTDATE: startDate,\n                    ENDDATE: endDate,\n                    leadStatus: status\n                }, () => {\n                    this.showSponser()\n                })\n            }\n        })\n    }\n\n    /**\n    * \n    * @description method to display collection info model.\n    */\n    PrizeInfoShow = () => {\n        // event.preventDefault();\n        //event.stopPropagation();\n        this.setState({\n            showPrizeInfo: true,\n        }, () => {\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    PrizeInfoHide = () => {\n        this.setState({\n            showPrizeInfo: false,\n        });\n    }\n\n\n    getMoreLData() {\n        const { PNO, PSIZE, PLIST, CFilter, OWNDATA, filterDataBy, TOPTHREE, SPONSORDATA } = this.state;\n        let param = {\n            \"category_id\": CFilter.category_id,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n            \"filter\": filterDataBy\n        }\n        this.setState({ ISLOAD: true });\n        getReferalLeaderboard(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                let topThree = responseJson.data.top_three || [];\n                let sponserData = responseJson.data.sponsors || [];\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    TOPTHREE: PNO === 1 ? topThree : TOPTHREE,\n                    SPONSORDATA: PNO === 1 ? sponserData : SPONSORDATA,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1\n                }, () => {\n                    this.showSponser()\n                })\n            }\n        })\n    }\n\n    renderShimmer = (idx) => {\n        return (\n            <div key={idx} className=\"list-item\">\n                <span className=\"shimmer\">\n                    <Skeleton height={6} width={'90%'} />\n                    <Skeleton height={4} width={'50%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'30%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'40%'} />\n                </span>\n            </div>\n        )\n    }\n\n    renderItem = (item, isown, idx) => {\n        const { filterDataBy } = this.state;\n        return (\n            <div key={item.user_id + idx} id={item.user_id + idx} className={\"list-item\" + (isown ? ' own-v' : '')}>\n                <span className=\"u-rank\">{item.rank_value}</span>\n                <span className=\"usernm\">\n                    {\n                        isown ?\n                            <React.Fragment>\n                                <div className=\"usrnm-text\">{this.state.OwnUserName.user_name}</div>\n                                <div className=\"you-text\">[{AL.YOU}]</div>\n                            </React.Fragment>\n                            :\n                            item.user_name\n                    }\n                </span>\n                <span className=\"amount\">\n                    <div className=\"val val-section\">\n                        {item.prize_data && item.prize_data.length > 0 ?\n                            <React.Fragment>\n                                {\n                                    item.prize_data[0].prize_type != 3 &&\n                                    <React.Fragment>\n                                        <span>\n                                            {\n                                                item.prize_data[0].prize_type == 0\n                                                    ?\n                                                    <i className=\"icon-bonus\"></i>\n                                                    :\n                                                    item.prize_data[0].prize_type == 1 ?\n                                                        Utilities.getMasterData().currency_code\n                                                        :\n                                                        <img src={Images.IC_COIN} alt=\"\" />\n                                            }\n                                        </span>\n                                        <React.Fragment>\n                                            {Utilities.kFormatter(item.prize_data[0].amount)}\n                                        </React.Fragment>\n                                    </React.Fragment>\n                                }\n                                {item.prize_data[0].prize_type == 3 &&\n                                    <React.Fragment>\n                                        <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                            <Tooltip id=\"tooltip\" >\n                                                <strong>{item.prize_data[0].name}</strong>\n                                            </Tooltip>\n                                        }>\n                                            <div className=\"win\">\n                                                {item.prize_data[0].name}\n                                            </div>\n                                        </OverlayTrigger>\n                                    </React.Fragment>\n                                }\n                            </React.Fragment>\n                            :\n                            <React.Fragment>\n                                {\n                                    (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                        <div className=\"win\">--</div>\n                                        :\n                                        this.showPrize(item.rank_value)\n                                }\n                            </React.Fragment>\n                        }\n                    </div>\n                </span>\n                <span className=\"corrected\">{item.total_referral}</span>\n            </div>\n        )\n    }\n\n    showSponser = () => {\n        const { SPONSORDATA, filterById } = this.state;\n        let sponsor = _filter(SPONSORDATA, (item) => {\n            return item.prize_category == filterById\n        });\n        this.setState({\n            showSponsorData: sponsor\n        })\n    }\n\n    showPrize = (data) => {\n        const { showSponsorData, CFilter } = this.state;\n        let rank = parseInt(data);\n        let tmpSData = showSponsorData && showSponsorData.length > 0 ? showSponsorData[0] : [];\n        let traverse = true;\n        let prize = [];\n        _Map(tmpSData.prize_distribution_detail, (item, idx) => {\n            let max = parseInt(item.max);\n            let min = parseInt(item.min);\n            if (traverse && ((max > rank && min < rank) || (max == rank) || (min == rank))) {\n                prize.push(item);\n                traverse = false;\n            }\n        })\n\n        let item = prize && prize.length > 0 ? prize[0] : '';\n\n        return <React.Fragment>\n            {\n                CFilter == '' && item && item.amount ?\n                    <div className={\"win\" + (item.prize_type == 2 ? ' win-pL3' : '')}>\n                        {\n                            item.prize_type != 3 &&\n                            <React.Fragment>\n                                {\n                                    item.prize_type == 0\n                                        ?\n                                        <span className=\"bns-span\">\n                                            <i className=\"icon-bonus\"></i>\n                                        </span>\n                                        :\n                                        item.prize_type == 1 ?\n                                            <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                            :\n                                            <span className=\"coin-span\">\n                                                <img src={Images.IC_COIN} alt=\"\" />\n                                            </span>\n                                }\n                                <React.Fragment>\n                                    {Utilities.kFormatter(item.amount)}\n                                </React.Fragment>\n                            </React.Fragment>\n                        }\n                        {item.prize_type == 3 &&\n                            <React.Fragment>\n                                <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                    <Tooltip id=\"tooltip\" >\n                                        <strong>{item.amount}</strong>\n                                    </Tooltip>\n                                }>\n                                    <div className=\"win\">\n                                        {item.amount}\n                                    </div>\n                                </OverlayTrigger>\n                            </React.Fragment>\n                        }\n                    </div>\n                    :\n                    <div className=\"win\">\n                        --\n                </div>\n            }\n        </React.Fragment>\n\n    }\n\n    renderTopUser = (item) => {\n        const { filterDataBy, CFilter } = this.state;\n\n        let itemLength = item ? item.length : 0;\n        let FirstUser = itemLength > 0 ? item[0] : '';\n        let SecondUser = itemLength > 1 ? item[1] : '';\n        let ThirdUser = itemLength > 2 ? item[2] : '';\n        \n \n\n        return (\n            <React.Fragment>\n                {\n                    SecondUser && itemLength > 1 &&\n                    <div className={\"rank-section second-rank\" + (itemLength > 1 ? '' : ' disabled')}>\n                        <div className=\"section-data\">\n                            <div className=\"circle-wrap\">\n                                <span className=\"rank-pos second\">\n                                    <span className=\"img-section\"></span>\n                                    <span className=\"pos-text\">2</span>\n                                </span>\n                                <div>{item.rank_value}</div>\n                                {\n                                    CFilter == '' && SecondUser && SecondUser.prize_data && SecondUser.prize_data.length > 0 ?\n                                        <div className={\"win\" + (SecondUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                            \n                                            {\n                                                <React.Fragment>\n                                                    <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\" >\n                                                            <strong>{SecondUser.user_name}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <div className=\"win\">\n                                                            {SecondUser.user_name.substring(0,10)}\n                                                        </div>\n                                                    </OverlayTrigger>\n                                                </React.Fragment>\n                                            }\n                                        </div>\n                                        :\n                                        <React.Fragment>\n                                            {\n                                                (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                                    <div className=\"win\">{SecondUser.user_name.substring(0,10)}</div>\n                                                    :\n                                                    <React.Fragment>\n                                                        <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\" >\n                                                            <strong>{SecondUser.user_name}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <div className=\"win\">\n                                                            {SecondUser.user_name.substring(0,10)}\n                                                        </div>\n                                                    </OverlayTrigger>\n                                                        </React.Fragment>\n                                            }\n                                        </React.Fragment>\n                                }\n                                <div className=\"corrected\">{SecondUser.total_referral}</div>\n                            </div>\n                            <div className=\"winner-name\">{\n                                CFilter == '' && SecondUser && SecondUser.prize_data && SecondUser.prize_data.length > 0 ?\n                                <div className={\"win\" + (SecondUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                    {\n                                        SecondUser.prize_data[0].prize_type != 3 &&\n                                        <React.Fragment>\n                                            {\n                                                SecondUser.prize_data[0].prize_type == 0\n                                                    ?\n                                                    <span className=\"bns-span\">\n                                                        <i className=\"icon-bonus\"></i>\n                                                    </span>\n                                                    :\n                                                    SecondUser.prize_data[0].prize_type == 1 ?\n                                                        <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                                        :\n                                                        <span className=\"coin-span\">\n                                                            <img style={{height:'20px',width:'20px'}} src={Images.IC_COIN} alt=\"\" />\n                                                        </span>\n                                            }\n                                            <React.Fragment>\n                                                {Utilities.kFormatter(SecondUser.prize_data[0].amount)}\n                                            </React.Fragment>\n                                        </React.Fragment>\n                                    }\n                                    { SecondUser.prize_data[0].prize_type == 3 &&\n                                        <React.Fragment>\n                                            <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                <Tooltip id=\"tooltip\" >\n                                                    <strong>{SecondUser.prize_data[0].name}</strong>\n                                                </Tooltip>\n                                            }>\n                                                <div className=\"win\"> \n                                                    {SecondUser.prize_data[0].name}\n                                                </div>\n                                            </OverlayTrigger>\n                                        </React.Fragment>\n                                    }\n                                </div> :\n                            (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\")\n                            ?\n                            '--'\n                            :\n                            this.showPrize(2)\n                            \n                            }</div>\n                        </div>\n                    </div>\n                }\n\n                {\n                    FirstUser && itemLength > 0 &&\n                    <div className={\"rank-section\" + (itemLength == 1 ? ' first-rank-single' : ' first-rank') + (itemLength > 0 ? '' : ' disabled')}>\n                        <div className={\"section-data\"}>\n                            <div className=\"circle-wrap\">\n                                <span className=\"rank-pos first\">\n                                    <span className=\"img-section\"></span>\n                                    <span className=\"pos-text\">1</span>\n                                </span>\n                                {\n                                    CFilter == '' && FirstUser && FirstUser.prize_data && FirstUser.prize_data.length > 0 ?\n                                        <div className={\"win\" + (FirstUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                           \n                                            {\n                                                \n                                                <React.Fragment>\n                                                    <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\" >\n                                                            <strong>{FirstUser.user_name}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <div className=\"win\">\n                                                            {FirstUser.user_name.substring(0,10)}\n                                                        </div>\n                                                    </OverlayTrigger>\n                                                </React.Fragment>\n                                            }\n                                        </div>\n                                        :\n                                        <React.Fragment>\n                                            {\n                                                (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                                    <div className=\"win\">{FirstUser.user_name.substring(0,10)}</div>\n                                                    :\n                                                    <React.Fragment> \n                                                       \n                                                    <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\" >\n                                                            <strong>{FirstUser.user_name}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <div className=\"win\">\n                                                            {FirstUser.user_name.substring(0,10)}\n                                                        </div>\n                                                    </OverlayTrigger>\n                                                    </React.Fragment>\n                                            }\n                                        </React.Fragment>\n                                }\n                                <div className=\"corrected\">{FirstUser.total_referral}</div>\n                            </div>\n                            <div className=\"winner-name\">{\n                                FirstUser && FirstUser.prize_data && FirstUser.prize_data.length ?\n                                <div className={\"win\" + (FirstUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                        {\n                                            FirstUser.prize_data[0].prize_type != 3 &&\n                                                <React.Fragment>\n                                                    {\n                                                        FirstUser.prize_data[0].prize_type == 0\n                                                            ?\n                                                            <span className=\"bns-span\">\n                                                                <i className=\"icon-bonus\"></i>\n                                                            </span>\n                                                            :\n                                                            FirstUser.prize_data[0].prize_type == 1 ?\n                                                                <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                                                :\n                                                                <span className=\"coin-span\">\n                                                                    <img style={{height:'20px',width:'20px'}} src={Images.IC_COIN} alt=\"\" />\n                                                                </span>\n                                                    }\n                                                    <React.Fragment>\n                                                        {Utilities.kFormatter(FirstUser.prize_data[0].amount)}\n                                                    </React.Fragment>\n                                                </React.Fragment>\n                                        }\n                                        { \n                                            FirstUser.prize_data[0].prize_type == 3 &&\n                                            <React.Fragment>\n                                                <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                    <Tooltip id=\"tooltip\" >\n                                                        <strong>{FirstUser.prize_data[0].name}</strong>\n                                                    </Tooltip>\n                                                }>\n                                                    <div className=\"win\"> \n                                                        {FirstUser.prize_data[0].name}\n                                                    </div>\n                                                </OverlayTrigger>\n                                            </React.Fragment>\n                                        }\n                                    </div>\n                                :\n                                (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\")\n                                ?\n                                '--'\n                                :\n                                this.showPrize(1)\n                                }</div>\n                        </div>\n                    </div>\n                }\n\n\n                {\n                    ThirdUser && itemLength >= 2 &&\n                    <div className={\"rank-section third-rank\" + (itemLength > 2 ? '' : ' disabled')}>\n                        <div className=\"section-data\">\n                            <div className=\"circle-wrap\">\n                                <span className=\"rank-pos third\">\n                                    <span className=\"img-section\"></span>\n                                    <span className=\"pos-text\">3</span>\n                                </span>\n                                {\n                                    CFilter == '' && ThirdUser && ThirdUser.prize_data && ThirdUser.prize_data.length > 0 ?\n                                        <div className={\"win\" + (ThirdUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                            \n                                            {\n                                                <React.Fragment>\n                                                    <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\" >\n                                                            <strong>{ThirdUser.user_name}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <div className=\"win\">\n                                                            {ThirdUser.user_name.substring(0,10)}\n                                                        </div>\n                                                    </OverlayTrigger>\n                                                </React.Fragment>\n                                            }\n                                        </div>\n                                        :\n                                        <React.Fragment>\n                                            {\n                                                (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\") ?\n                                                    <div className=\"win\">{ThirdUser.user_name.substring(0,10)}</div>\n                                                    :\n                                                    <React.Fragment>\n                                                        {/* <div className=\"win\">{ThirdUser.user_name.substring(0,10)}</div> */}\n                                                        <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                        <Tooltip id=\"tooltip\" >\n                                                            <strong>{ThirdUser.user_name}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <div className=\"win\">\n                                                            {ThirdUser.user_name.substring(0,10)}\n                                                        </div>\n                                                    </OverlayTrigger>\n                                                    </React.Fragment>\n                                            }\n                                        </React.Fragment>\n                                }\n                                <div className=\"corrected\">{ThirdUser.total_referral}</div>\n                            </div>\n                            <div className=\"winner-name\">{\n                            // this.showPrize(3)\n\n                            ThirdUser && ThirdUser.prize_data && ThirdUser.prize_data.length ?\n                                <div className={\"win\" + (ThirdUser.prize_type == 2 ? ' win-pL3' : '')}>\n                                        {\n                                            ThirdUser.prize_data[0].prize_type != 3 &&\n                                                <React.Fragment>\n                                                    {\n                                                        ThirdUser.prize_data[0].prize_type == 0\n                                                            ?\n                                                            <span className=\"bns-span\">\n                                                                <i className=\"icon-bonus\"></i>\n                                                            </span>\n                                                            :\n                                                            ThirdUser.prize_data[0].prize_type == 1 ?\n                                                                <span className=\"rupee-span\">{Utilities.getMasterData().currency_code}</span>\n                                                                :\n                                                                <span className=\"coin-span\">\n                                                                    <img style={{height:'20px',width:'20px'}} src={Images.IC_COIN} alt=\"\" />\n                                                                </span>\n                                                    }\n                                                    <React.Fragment>\n                                                        {Utilities.kFormatter(ThirdUser.prize_data[0].amount)}\n                                                    </React.Fragment>\n                                                </React.Fragment>\n                                        }\n                                        { \n                                            ThirdUser.prize_data[0].prize_type == 3 &&\n                                            <React.Fragment>\n                                                <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                    <Tooltip id=\"tooltip\" >\n                                                        <strong>{ThirdUser.prize_data[0].name}</strong>\n                                                    </Tooltip>\n                                                }>\n                                                    <div className=\"win\"> \n                                                        {ThirdUser.prize_data[0].name}\n                                                    </div>\n                                                </OverlayTrigger>\n                                            </React.Fragment>\n                                        }\n                                    </div>\n                                :\n                                (filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\")\n                                ?\n                                '--'\n                                :\n                                this.showPrize(3)\n                            \n                            }</div>\n                        </div>\n                    </div>\n                }\n\n\n            </React.Fragment>\n        )\n    }\n\n    showSponsor = (item, idx) => {\n        const { filterById } = this.state;\n        let data = filterById == item.prize_category ? item : '';\n        return (\n            <React.Fragment>\n                {\n                    data != '' && data.sponsor_name &&\n                    <div className=\"sponsored-section\">\n                        <span className=\"sponsored-text\">{AL.SPONSOR_BY}</span>\n                        <img src={Utilities.getOpenPredFPPURL(item.sponsor_logo)} alt=\"\" />\n                    </div>\n                }\n            </React.Fragment>\n        )\n    }\n\n    filterLeaderboard = (filterBy) => {\n        this.setState({\n            showLFitlers: false,\n            CFilter: filterBy,\n            PLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            OWNDATA: ''\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    handleTimeFilter = (filterBy, id) => {\n        this.setState({\n            filterDataBy: filterBy,\n            filterById: id,\n            PLIST: [],\n            PNO: 1,\n            PSIZE: 20,\n            OWNDATA: ''\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    render() {\n        const {\n            categoryList,\n            PLIST,\n            OWNDATA,\n            ISLOAD,\n            HMORE,\n            refreshList,\n            CFilter,\n            showLFitlers,\n            filerByTime,\n            filterDataBy,\n            TOPTHREE,\n            SPONSORDATA,\n            filerByPreTime,\n            filterById,\n            STARTDATE,\n            ENDDATE,\n            showPrizeInfo,\n            leadStatus\n        } = this.state;\n\n        let FitlerOptions = {\n            showLFitler: showLFitlers\n        }\n        const HeaderOption = {\n\n            referalLeaderboradTitle: AL.REFERAL_LEADERBOARD,\n            referalLeaderboradSubTitle:AL.REFER_MORE_TEXT,\n            filter: false,\n            notification: false,\n            hideShadow: true,\n            isPrimary: true ,\n            back: true\n\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container Ftp-web-container\">\n                        <div className=\"referal-wrap-v referal-part-v referal-leaderboard referal-leaderboard rf-leaderboard\">\n                            <CustomHeader\n                                {...this.props}\n                                HeaderOption={HeaderOption}\n                            />\n                            <Filter\n                                {...this.props}\n                                FitlerOptions={FitlerOptions}\n                                hideFilter={this.hideFilter}\n                                filerObj={categoryList}\n                                filterLeaderboard={this.filterLeaderboard}\n                                filterDataBy={CFilter}\n                            />\n                            <div className=\"fixed-ch-view-prizes\">\n                                <div className=\"filter-time-section-prizes\">\n                                    <ul className=\"filter-time-wrap-prizes\">\n                                        {\n                                            _Map(filerByTime, (item, idx) => {\n                                                return (\n                                                    <li\n                                                        href\n                                                        className={\"filter-time-btn\" +\n                                                            (item.value == filterDataBy ? ' active' : '') +\n                                                            (item.prize_cat_id == 2 && filterById == 2 && STARTDATE ? ' with-date' : '')\n                                                        }\n                                                        onClick={() => this.handleTimeFilter(item.value, item.prize_cat_id)}\n                                                    >\n                                                        {item.label}\n                                                        {\n                                                            (item.prize_cat_id == 2 && filterById == 2) && STARTDATE &&\n                                                            <span>\n                                                                <Moment date={STARTDATE} format={\"D MMM \"} />\n                                                                {/* <MomentDateComponent data={{ date: STARTDATE, format: \"D MMM \" }} /> */}\n                                                            -\n                                                            <Moment date={ENDDATE} format={\" D MMM \"} />\n                                                                {/* <MomentDateComponent data={{ date: ENDDATE, format: \"D MMM \" }} /> */}\n                                                            </span>\n                                                        }\n                                                    </li>\n                                                )\n                                            })\n                                        }\n                                    </ul>\n                                </div>\n\n                                <div className=\"previous-data\">\n                                    {\n                                        _Map(filerByPreTime, (item, idx) => {\n                                            return (\n                                                <React.Fragment>\n                                                    {\n                                                        filterById === item.prize_cat_id &&\n                                                        <a\n                                                            href\n                                                            className={\"previous-time-btn\" + ((filterDataBy === 'last_week' || filterDataBy === 'last_month' || filterDataBy === 'yesterday') ? ' active' : '')}\n                                                            onClick={() => this.handleTimeFilter(item.value, item.prize_cat_id)}\n                                                        >\n                                                            <i className=\"icon-arrow-up\"></i>\n                                                            <i className=\"icon-arrow-up\"></i>\n                                                            {item.label}\n                                                        </a>\n                                                    }\n                                                </React.Fragment>\n                                            )\n                                        })\n                                    }\n                                    {\n                                        leadStatus == 0 &&\n                                        <div className=\"leader-status\">\n                                            <span></span>{AL.LIVE}\n                                        </div>\n                                    }\n                                    {\n                                        leadStatus == 3 &&\n                                        <div className=\"leader-status comp\">\n                                            {AL.COMPLETED}\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                            <div className=\"table-view\">\n                                <div className=\"top-three-users\">\n                                    {\n                                        TOPTHREE && TOPTHREE.length > 0 && this.renderTopUser(TOPTHREE)\n                                    }\n                                    <div className=\"white-section\"></div>\n                                </div>\n                                {\n                                    TOPTHREE && TOPTHREE.length > 0 && SPONSORDATA && SPONSORDATA.length > 0 &&\n                                    SPONSORDATA.map((item, idx) => {\n                                        return this.showSponsor(item)\n                                    })\n                                }\n                                {\n                                    ((PLIST && PLIST.length > 0) || (OWNDATA && OWNDATA.length > 0) || (TOPTHREE && TOPTHREE.length > 0)) &&\n                                    <div className=\"header-v\">\n                                        <span className=\"u-rank\">{AL.RANK}</span>\n                                        <span className=\"usernm\">{AL.USER_NAME}</span>\n                                        <span className=\"amount\">{AL.PRIZE}</span>\n                                        <span className=\"corrected text-capitalize ellipsis-text\">{AL.TOTAL_REFERAL}</span>\n                                    </div>\n                                }\n\n                                {\n                                    refreshList && OWNDATA && this.renderItem(OWNDATA, true, -1)\n                                }\n                                {\n                                    PLIST.length > 0 && <InfiniteScroll\n                                        dataLength={PLIST.length}\n                                        hasMore={!ISLOAD && HMORE}\n                                        next={() => this.getMoreLData()}\n                                    >\n                                        <div className=\"list-view\">\n                                            {\n                                                PLIST.map((item, idx) => {\n                                                    return this.renderItem(item, false, idx);\n                                                })\n                                            }\n                                        </div>\n                                    </InfiniteScroll>\n                                }\n                                {\n                                    PLIST.length === 0 && OWNDATA.length === 0 && TOPTHREE.length === 0 && !ISLOAD &&\n                                    <div className=\"no-data-leaderboard\">\n                                        <NoDataView\n                                            BG_IMAGE={Images.no_data_bg_image}\n                                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                            MESSAGE_1={AL.NOT_ENOUGH_DATA_ON_LEADERBOARD}\n                                        />\n                                    </div>\n                                }\n                                {\n                                    PLIST.length === 0 && !OWNDATA && !ISLOAD && TOPTHREE.length != 0 &&\n                                    <NoDataView\n                                        BG_IMAGE={Images.no_data_bg_image}\n                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                        MESSAGE_1={AL.NO_DATA_FOUND}\n                                        MESSAGE_2={AL.NO_DATA_FOR_FILTER}\n                                    />\n                                }\n                                {\n                                    PLIST.length === 0 && ISLOAD &&\n                                    _times(16, (idx) => {\n                                        return this.renderShimmer(idx)\n                                    })\n                                }\n                            </div>\n                        </div>\n\n                        {\n                            (this.state.filterDataBy == \"last_week\" || filterDataBy == \"last_month\" || filterDataBy == \"yesterday\")\n                            ?\n                            ''\n                            :\n                            <div className=\"prize-footer\">\n                            <div className=\"btn-wrap-prize\">\n                                <button onClick={() => this.PrizeInfoShow()} className=\"btn btn-primary btn-block btm-fix-btn team-preview\">{AL.VIEW_ALL_PRIZES}</button>\n                            </div>\n                        </div>\n                        }\n\n                        \n                        {showPrizeInfo &&\n                            <ReferalPrizesModal STARTDATE={STARTDATE} \n                            ENDDATE={ENDDATE} \n                            filterDataBy={this.state.filterDataBy}\n                            filterById={this.state.filterById}\n                            IsCollectionInfoShow={this.PrizeInfoShow} \n                            IsCollectionInfoHide={this.PrizeInfoHide} />\n                        }\n                    </div>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default ReferalLeaderBoard;\n","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemParticipants.jsx",["3449","3450","3451"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { NoDataView } from '../CustomComponent';\nimport { getPickemParticipants } from '../../WSHelper/WSCallings';\nimport { _times } from '../../Utilities/Utilities';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\n\nclass NewPickemParticipants extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            PLIST: [],\n            OWNDATA: '',\n            PNO: 1,\n            PSIZE: 20,\n            HMORE: false,\n            ISLOAD: false,\n            PMID: '',\n            isLeader: false,\n            LData: '',\n            HOS: {\n                back: this.props.history.length > 2,\n                fixture: true,\n                title: '',\n                hideShadow: false,\n                MLogo: false,\n                statusBox: true,\n                status: (this.props.location && this.props.location.state) ? this.props.location.state.status : '',\n            }\n        }\n    }\n\n    componentWillMount() {\n        if (this.props.match && this.props.match.params) {\n            const matchParam = this.props.match.params;\n            let pmid = atob(matchParam.pickem_id)\n            this.setState({\n                PMID: pmid,\n                LData: (this.props.location && this.props.location.state) ? this.props.location.state.item : '',\n            }, () => {\n                this.getDetail();\n            });\n        }\n    }\n\n    getDetail() {\n        const { PNO, PSIZE, PLIST, PMID, OWNDATA } = this.state;\n        let param = {\n            \"pickem_id\": PMID,\n            \"page_no\": PNO,\n            \"page_size\": PSIZE,\n        }\n        this.setState({ ISLOAD: true });\n        getPickemParticipants(param).then((responseJson) => {\n            this.setState({ ISLOAD: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let ownData = responseJson.data.own || '';\n                let listOther = responseJson.data.other_list || [];\n                this.setState({\n                    PLIST: [...PLIST, ...listOther],\n                    OWNDATA: PNO === 1 ? ownData : OWNDATA,\n                    HMORE: listOther.length >= (PSIZE - (ownData || OWNDATA ? 1 : 0)),\n                    PNO: PNO + 1\n                })\n            }\n        })\n    }\n\n    renderShimmer = (idx) => {\n        return (\n            <div key={idx} className=\"list-item\">\n                <span className=\"shimmer\">\n                    <Skeleton height={6} width={'90%'} />\n                    <Skeleton height={4} width={'50%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'30%'} />\n                </span>\n                <span className=\"amount\">\n                    <Skeleton height={6} width={'40%'} />\n                </span>\n            </div>\n        )\n    }\n\n    renderItem = (item, isown, idx) => {\n        return (\n            <div className=\"display-table\" key={item.user_id + idx} id={item.user_id + idx}>\n                <div className={\"dtr dtb\" + (isown ? ' own-data' : '')}>\n                    <div className=\"dtc part-name\">\n                        <span className=\"nm\">{item.user_name}</span>\n                        {isown && <span>({AL.YOU})</span>}\n                    </div>\n                    <div className=\"dtc part-pick\">\n                        {item.user_selected_pick}\n                    </div>\n                    <div className=\"dtc part-bet\">\n                        <img src={Images.IC_COIN} alt=\"\"/> {item.bet_coins}\n                    </div>\n                    {this.props.location.state.status == 2 ?\n                        <div className=\"dtc part-est-win text-success\">\n                            <img src={Images.IC_COIN} alt=\"\"/>  {item.won_amount} \n                        </div>\n                            :\n                        <div className=\"dtc part-est-win\">\n                            <img src={Images.IC_COIN} alt=\"\"/>\n                            {item.estimated_winning}\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        const { PLIST, HOS, ISLOAD, OWNDATA, HMORE,LData } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container prediction-detail-wrap pickem-participants-wrap\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.PMPLIST.title}</title>\n                            <meta name=\"description\" content={MetaData.PMPLIST.description} />\n                            <meta name=\"keywords\" content={MetaData.PMPLIST.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader \n                            {...this.props} \n                            LobyyData={LData} \n                            HeaderOption={HOS}  \n                        />\n                        <div className=\"participants-list\">\n                            <div className=\"header-table\">\n                                <div className=\"dtr dth\">\n                                    <div className=\"dtc part-name\">{AL.USER_NAME}</div>\n                                    <div className=\"dtc part-pick\">{AL.PICK}</div>\n                                    <div className=\"dtc part-bet\">{AL.BET}</div>\n                                    <div className=\"dtc part-est-win\">{this.props.location.state.status == 2 ? AL.WON : AL.EST_WIN}</div>\n                                </div>\n                            </div>\n                            <div className={\"all-part-table\" + (this.props.location.state.status == 2 ? ' all-part-table-cp' : '')}>\n                                {\n                                    OWNDATA && \n                                    this.renderItem(OWNDATA, true, -1)\n                                }\n                                {\n                                    PLIST.length > 0 && <InfiniteScroll\n                                        dataLength={PLIST.length}\n                                        hasMore={!ISLOAD && HMORE}\n                                        next={() => this.getDetail()}\n                                    >\n                                        <React.Fragment>\n                                            {\n                                                PLIST.map((item, idx) => {\n                                                    return this.renderItem(item, false, idx);\n                                                })\n                                            }\n                                        </React.Fragment>\n                                    </InfiniteScroll>\n                                }\n                                {\n                                    PLIST.length === 0 && !OWNDATA && !ISLOAD &&\n                                    <NoDataView\n                                        BG_IMAGE={Images.no_data_bg_image}\n                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                        MESSAGE_1={AL.NO_DATA_FOUND}\n                                    />\n                                }\n                                {\n                                    PLIST.length === 0 && ISLOAD &&\n                                    _times(16, (idx) => {\n                                        return this.renderShimmer(idx)\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default NewPickemParticipants;\n","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenFPPSourceUrl.jsx",[],"/var/www/html/framework/frontend/src/views/Leaderboard/TeamComparison.jsx",["3452","3453","3454","3455","3456","3457","3458","3459","3460","3461","3462","3463","3464","3465","3466","3467"],"import React from 'react';\nimport * as AL from \"../../helper/AppLabels\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport Skeleton from 'react-loading-skeleton';\nimport CustomHeader from '../../components/CustomHeader';\nimport { NoDataView } from '../../Component/CustomComponent';\nimport { getLineupWithTeamCompare } from '../../WSHelper/WSCallings';\nimport Images from '../../components/images';\nimport { AppSelectedSport } from '../../helper/Constants';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { Utilities, _filter, _Map } from '../../Utilities/Utilities';\nimport FieldView from \"./../FieldView\";\nimport Select from 'react-select';\n\nconst Shimmer = () => {\n    return (\n        <div className=\"ranking-list shimmer margin-2p\">\n            <div className=\"display-table-cell pointer-cursor\">\n                <figure className=\"user-img shimmer\">\n                    <Skeleton circle={true} width={40} height={40} />\n                </figure>\n                <div className=\"user-name-container shimmer\">\n                    <Skeleton width={'80%'} height={8} />\n                    <Skeleton width={'40%'} height={5} />\n                </div>\n            </div>\n            <div className=\"display-table-cell pointer-cursor\">\n                <figure className=\"user-img shimmer\">\n                    <Skeleton circle={true} width={40} height={40} />\n                </figure>\n                <div className=\"user-name-container shimmer\">\n                    <Skeleton width={'80%'} height={8} />\n                    <Skeleton width={'40%'} height={5} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default class TeamComparison extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userRankList: this.props && this.props.location && this.props.location.state && this.props.location.state.userRankList,\n            oppData: this.props && this.props.location && this.props.location.state && this.props.location.state.oppData,\n            youData: this.props && this.props.location && this.props.location.state && this.props.location.state.youData,\n            selectedTeam: '',\n            status: this.props && this.props.location && this.props.location.state && this.props.location.state.status,\n            youLineupData: '',\n            otherLineupData: '',\n            youCLD: [],\n            oppCLD: [],\n            youAllLD: [],\n            oppAllLD: [],\n            UTeamCVC: [],\n            OppTeamCVC: [],\n            lineupData: [],\n            oppCVCtotalScore: 0,\n            youCVCtotalScore: 0,\n            commonScore: 0,\n            teamOptions: [],\n            SelectedLineup: '',\n            ShimmerList: [1, 2, 3, 4, 5],\n            isLoading: false\n        }\n    }\n    componentDidMount() {\n        this.getLineupComaprisonData(this.state.youData, this.state.oppData);\n        let tmpArry = []\n        for (var obj of this.state.userRankList) {\n            tmpArry.push({\n                \"value\" : obj.lineup_master_contest_id,\n                \"lineup_master_contest_id\" : obj.lineup_master_contest_id,\n                \"label\" : '#' + obj.game_rank + ' | ' + obj.team_name\n            })\n        }\n        this.setState({\n            teamOptions: tmpArry\n        })\n    }\n\n    getLineupComaprisonData = (YOU, OPP) => {\n        this.setState({\n            isLoading: true\n        })\n        let param = {\n            \"u_lineup_master_contest_id\": YOU.lineup_master_contest_id,\n            \"o_lineup_master_contest_id\": OPP.lineup_master_contest_id,\n            \"sports_id\": AppSelectedSport,\n        }\n        getLineupWithTeamCompare(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                let data = responseJson.data;\n                this.setState({\n                    youLineupData: data.you,\n                    otherLineupData: data.oponent\n                }, () => {\n                    this.CVCPlayer()\n                    this.commonPlayerYouTeam(data.you, data.oponent)\n                    this.commonPlayerOppTeam(data.oponent, data.you)\n                    this.setState({\n                        isLoading: false\n                    })\n                })\n            }\n        })\n    }\n\n    commonPlayerYouTeam = (you, opp) => {\n        this.commonPlayer(you, opp, true)\n    }\n\n    commonPlayerOppTeam = (you, opp) => {\n        this.commonPlayer(you, opp, false)\n    }\n\n    CVCPlayer = () => {\n        const { youLineupData, otherLineupData } = this.state;\n        let youCVCtotalScore = 0;\n        let oppCVCtotalScore = 0;\n        let UTeamCVC = _filter(youLineupData.lineup, (obj) => {\n            return obj.player_role && (obj.player_role == 1 || obj.player_role == 2)\n        });\n        for (var obj of UTeamCVC) {\n            youCVCtotalScore = youCVCtotalScore + obj.score\n        }\n        let OppTeamCVC = _filter(otherLineupData.lineup, (obj) => {\n            return obj.player_role && (obj.player_role == 1 || obj.player_role == 2)\n        });\n        for (var obj of OppTeamCVC) {\n            oppCVCtotalScore = oppCVCtotalScore + obj.score\n        }\n        this.setState({\n            UTeamCVC: UTeamCVC,\n            OppTeamCVC: OppTeamCVC,\n            youCVCtotalScore: youCVCtotalScore,\n            oppCVCtotalScore: oppCVCtotalScore\n        })\n    }\n\n    commonPlayer = (you, opp, isYou) => {\n        let tempCList = [];\n        let totalScore = 0;\n        for (var youData of you.lineup) {\n            for (var otherData of opp.lineup) {\n                if (youData.player_role != 1 && youData.player_role != 2 && youData.player_uid == otherData.player_uid) {\n                    totalScore = youData.score + totalScore;\n                    tempCList.push(youData)\n                }\n            }\n        }\n        this.setState({\n            commonScore: totalScore\n        })\n        this.AllPlayerList(you, tempCList, isYou)\n    }\n\n    AllPlayerList = (you, tempCList, isYou) => {\n        let tempPList = [];\n        for (var youData of you.lineup) {\n            for (var obj of tempCList) {\n                if (youData.player_role != 1 && youData.player_role != 2 && youData.player_uid != obj.player_uid) {\n                    if(!tempPList.includes(youData) && !tempCList.includes(youData)){\n                        tempPList.push(youData)\n                    }\n                }\n            }\n        }\n        if (isYou) {\n            this.setState({\n                youCLD: tempCList,\n                youAllLD: tempPList,\n            })\n        }\n        else {\n            this.setState({\n                oppCLD: tempCList,\n                oppAllLD: tempPList\n            })\n        }\n    }\n\n    /**\n     * @description This function is used to open player lineup page with formatted URL data\n     * @param teamItem Team item\n     * @see FieldView\n    */\n    openLineup = (teamItem, data) => {\n        this.setState({\n            SelectedLineup: teamItem.lineup_master_contest_id,\n            UserName: teamItem.user_name || '',\n            lineupData: data\n        }, () => {\n            this.showFieldV()\n        })\n    }\n\n    showFieldV = () => {\n        this.setState({\n            showFieldV: true\n        });\n    }\n    hideFieldV = () => {\n        this.setState({\n            showFieldV: false,\n            SelectedLineup: ''\n        });\n    }\n    handleTeamChange = (selectedOption) => {\n        this.setState({\n            selectedTeam: selectedOption \n        },()=>{\n            this.getLineupComaprisonData(selectedOption, this.state.oppData);\n        })\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            fixture: false,\n            hideShadow: true,\n            status: this.state.status,\n            title: 'Compare Teams'\n        }\n\n        const {\n            selectedTeam,\n            teamOptions,\n            youLineupData,\n            otherLineupData,\n            oppData,\n            youData,\n            oppCLD,\n            oppAllLD,\n            youAllLD,\n            youCLD,\n            UTeamCVC,\n            OppTeamCVC,\n            oppCVCtotalScore,\n            youCVCtotalScore,\n            commonScore,\n            lineupData,\n            isLoading\n        } = this.state;\n        let OppLeads = parseFloat(oppData.total_score) > parseFloat(youData.total_score) ? true : false;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed team-comparison\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.leaderboard.title}</title>\n                            <meta name=\"description\" content={MetaData.leaderboard.description} />\n                            <meta name=\"keywords\" content={MetaData.leaderboard.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader\n                            ref={(ref) => this.headerRef = ref}\n                            HeaderOption={HeaderOption}\n                            {...this.props} />\n                        <div className=\"team-comparison-wrapper\">\n                            <div className=\"team-comparison-header\">\n                                <div className=\"team-names-wrap\">\n                                    <div className=\"team-info-sec\">\n                                        <div className=\"team-name opp-team-name\">{oppData.user_name}</div>\n                                        <div className=\"post-wrap-inner\">#{oppData.game_rank}  |  {oppData.team_name}</div>\n                                    </div>\n                                    <div className=\"team-info-sec\">\n                                        <div className=\"team-points-sec\">\n                                            <span>{oppData.total_score}</span>\n                                            <img src={Images.ZIG_ZAG_LINE} alt=\"\" />\n                                            <span>{youData.total_score}</span>\n                                        </div>\n                                        <div className=\"post-wrap-inner\">{AL.TOTAL_POINTS}</div>\n                                    </div>\n                                    <div className=\"team-info-sec\">\n                                        <div className=\"team-name you-team-name\">YOU\n                                        </div>\n                                        <div className=\"post-wrap-inner you-post-wrap-inner\">\n                                            <i className=\"icon-arrow-down\"></i>\n                                            <Select\n                                                onChange={this.handleTeamChange}\n                                                options={teamOptions}\n                                                className=\"basic-select-field\"\n                                                classNamePrefix=\"select\"\n                                                value={selectedTeam} \n                                                placeholder={'#' + youData.game_rank + \" | \" + youData.team_name}\n                                                isSearchable={false}\n                                                theme={(theme) => ({\n                                                    ...theme,\n                                                    borderRadius: 0,\n                                                    colors: {\n                                                        ...theme.colors,\n                                                        primary25: '#fff',\n                                                        primary: '#999',\n                                                    },\n                                                })}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"circular-main-wrap\" onClick={() => this.openLineup(oppData, otherLineupData)}>\n                                    <span>\n                                        <i className=\"icon-ground\"></i> {AL.SEE} <span>{oppData.user_name}</span> {AL.ON_FIELDVIEW}\n                                    </span> \n                                </div>\n                            </div>\n                            <div className=\"team-comparison-body\">\n                                {\n                                    OppLeads ?\n                                        <div className=\"score-card-sec\">\n                                            {AL.OPP_LEAD_BY} <span>{oppData.total_score} {AL.PTS}</span>\n                                        </div>\n                                        :\n                                        <div className=\"score-card-sec\">\n                                            {AL.YOU_LEAD_BY} <span>{youData.total_score} {AL.PTS}</span>\n                                        </div>\n                                }\n                                {\n                                    (isLoading && youLineupData == '' && otherLineupData == '') ?\n                                        this.state.ShimmerList.map((item, index) => {\n                                            return (\n                                                <Shimmer key={index} />\n                                            )\n                                        })\n                                        :\n                                        (!isLoading && youLineupData == '' && otherLineupData == '') ?\n                                            <NoDataView\n                                                BG_IMAGE={Images.no_data_bg_image}\n                                                CENTER_IMAGE={Images.teams_ic}\n                                                MESSAGE_1={AL.NO_DATA_AVAILABLE}\n                                                MESSAGE_2={''}\n                                                BUTTON_TEXT={AL.GO_TO_MY_CONTEST}\n                                                onClick={this.goBack.bind(this)}\n                                            />\n                                            :\n                                            <>\n                                                <div className=\"comparison-sec\">\n                                                    <div className=\"lead-sec\">\n                                                        {\n                                                            OppLeads ?\n                                                                <>\n                                                                    {AL.OPP_CVC_LEAD_BY} <span>{oppCVCtotalScore}</span> {AL.PTS}\n                                                                </>\n                                                                :\n                                                                <>\n                                                                    {AL.YOU_CVC_LEAD_BY} <span>{youCVCtotalScore}</span> {AL.PTS}\n                                                                </>\n                                                        }\n                                                    </div>\n                                                    <div className=\"players-selected\">\n                                                        <div className=\"players-selected-col\">\n                                                            {\n                                                                OppTeamCVC && OppTeamCVC.length > 0 &&\n                                                                _Map(OppTeamCVC, (item, idx) => {\n                                                                    return (\n                                                                        <div className=\"opp-player-sec\" key={'oppcvc' + idx}>\n                                                                            <span className=\"img-wrap\"><img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" /></span>\n                                                                            <div className=\"player-nm\">{item.full_name}</div>\n                                                                            <div className=\"team-pos\">{item.team_abbr || item.team_abbreviation}-{item.position_name}</div>\n                                                                            <div className=\"score-diff-inner-sec\"><span>{item.score}</span></div>\n                                                                        </div>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                        <div className=\"players-selected-col\">\n                                                            {\n                                                                UTeamCVC && UTeamCVC.length > 0 &&\n                                                                _Map(UTeamCVC, (item, idx) => {\n                                                                    return (\n                                                                        <div className=\"you-player-sec\" key={'ucvc' + idx}>\n                                                                            <span className=\"img-wrap\"><img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" /></span>\n                                                                            <div className=\"player-nm\">{item.full_name}</div>\n                                                                            <div className=\"team-pos\">{item.team_abbr || item.team_abbreviation}-{item.position_name}</div>\n                                                                            <div className=\"score-diff-inner-sec\"><span>{item.score}</span></div>\n                                                                        </div>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"comparison-sec common-com-sec\">\n                                                    <div className=\"lead-sec\">{AL.COMMON_PLAYERS} <span>{commonScore} {AL.PTS}</span></div>\n                                                    <div className=\"players-selected\">\n                                                        <div className=\"players-selected-col\">\n                                                            {\n                                                                oppCLD && oppCLD.length > 0 &&\n                                                                _Map(oppCLD, (item, idx) => {\n                                                                    return (\n                                                                        <div className=\"opp-player-sec\" key={'oppcld' + idx}>\n                                                                            <span className=\"img-wrap\"><img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" /></span>\n                                                                            <div className=\"player-nm\">{item.full_name}</div>\n                                                                            <div className=\"team-pos\">{item.team_abbr || item.team_abbreviation}-{item.position}</div>\n                                                                            <div className=\"score-diff-inner-sec\"><span>{item.score}</span></div>\n                                                                        </div>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                        <div className=\"players-selected-col\">\n                                                            {\n                                                                youCLD && youCLD.length > 0 &&\n                                                                _Map(youCLD, (item, idx) => {\n                                                                    return (\n                                                                        <div className=\"you-player-sec\" key={'ucld' + idx}>\n                                                                            <span className=\"img-wrap\"><img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" /></span>\n                                                                            <div className=\"player-nm\">{item.full_name}</div>\n                                                                            <div className=\"team-pos\">{item.team_abbr || item.team_abbreviation}-{item.position_name}</div>\n                                                                        </div>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"comparison-sec\">\n                                                    <div className=\"lead-sec\">{AL.ALL_PLAYERS}</div>\n                                                    <div className=\"players-selected\">\n                                                        <div className=\"players-selected-col\">\n                                                            {\n                                                                oppAllLD && oppAllLD.length > 0 &&\n                                                                _Map(oppAllLD, (item, idx) => {\n                                                                    return (\n                                                                        <div className=\"opp-player-sec\" key={'oppall' + idx}>\n                                                                            <span className=\"img-wrap\"><img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" /></span>\n                                                                            <div className=\"player-nm\">{item.full_name}</div>\n                                                                            <div className=\"team-pos\">{item.team_abbr || item.team_abbreviation}-{item.position_name}</div>\n                                                                            <div className=\"score-diff-inner-sec\"><span>{item.score}</span></div>\n                                                                        </div>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                        <div className=\"players-selected-col\">\n                                                            {\n                                                                youAllLD && youAllLD.length > 0 &&\n                                                                _Map(youAllLD, (item, idx) => {\n                                                                    return (\n                                                                        <div className=\"you-player-sec\" key={'all' + idx}>\n                                                                            <span className=\"img-wrap\"><img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" /></span>\n                                                                            <div className=\"player-nm\">{item.full_name}</div>\n                                                                            <div className=\"team-pos\">{item.team_abbr || item.team_abbreviation}-{item.position_name}</div>\n                                                                            <div className=\"score-diff-inner-sec\"><span>{item.score}</span></div>\n                                                                        </div>\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </>\n                                } \n                            </div>\n                        </div>\n                        {\n                            this.state.SelectedLineup &&\n                            <FieldView\n                                SelectedLineup={lineupData ? lineupData.lineup : ''}\n                                MasterData={lineupData || ''}\n                                isFrom={'rank-view'}\n                                team_name={lineupData ? (lineupData.team_name || '') : ''}\n                                showFieldV={this.state.showFieldV}\n                                userName={this.state.UserName}\n                                hideFieldV={this.hideFieldV.bind(this)}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ShareFPPOpenPredictorModal.jsx",["3468","3469"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { FacebookShareButton, WhatsappShareButton, EmailShareButton } from 'react-share';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport WSManager from '../../WSHelper/WSManager';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nclass ShareFPPOpenPredictorModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            spData: this.props.preData.spData,\n            shareURL: '',\n            shareText: AL.Your_Friend + ' ' + WSManager.getProfile().user_name + ' ' + AL.has_referred_you_on + ' ' + WSC.AppName + \", \" + AL.please_join_and_earn_prizes_text + \" : \\n\\n\"\n        };\n    }\n\n    componentDidMount() {\n        this.createAndSetUrls();\n    }\n\n    createAndSetUrls() {\n        let category_id = this.state.spData.category_id;\n        let prediction_master_id = this.state.spData.prediction_master_id;\n        let refCode = WSManager.getUserReferralCode();\n        let mURL = WSC.baseURL + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor-leaderboard-details/\" + category_id + '/' + btoa(prediction_master_id);\n        let shareURL = mURL + (refCode ? (\"?referral=\" + refCode) : '');\n        this.setState({ shareURL: shareURL });\n    }\n\n    onCopyLink = () => {\n        this.showCopyToast(AL.Link_has_been_copied);\n    }\n\n    showCopyToast = (message) => {\n        Utilities.showToast(message, 2000)\n    }\n\n\n    callNativeShare(type, url, detail) {\n        let data = {\n            action: 'social_sharing',\n            targetFunc: 'social_sharing',\n            type: type,\n            url: url,\n            detail: detail\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    getEmailShareContent() {\n        if (window.ReactNativeWebView) {\n            if (this.state.shareURL != '') {\n                let shareLink = WSManager.getIsIOSApp() ? this.state.shareURL : encodeURIComponent(this.state.shareURL);\n                let shareText = this.state.shareText + shareLink + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                return shareText\n            }\n            return ''\n        }\n        else {\n            let shareText = this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n            return shareText\n        }\n    }\n\n    render() {\n\n        const { mShow, mHide } = this.props.preData;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"custom-modal thank-you-modal\"\n                        className=\"center-modal\"\n                    >\n\n                        <div className=\"social-linking\">\n                            <div className=\"link-heading\">{AL.INVITE_YOUR_FRIENDS_VIA}</div>\n                            <ul className=\"social-icons\">\n                                <li>\n                                    <CopyToClipboard onCopy={this.onCopyLink} text={this.state.shareURL} className=\"social-circle icon-link\">\n                                        <i className=\"icon-link\"></i>\n                                    </CopyToClipboard>\n                                    <label>{AL.INVITE_LINK}</label>\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-facebook\" onClick={() => this.callNativeShare('facebook', this.state.shareURL, this.state.shareText + this.state.shareURL + + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_FB}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <FacebookShareButton className=\"social-circle icon-facebook\" url={this.state.shareURL} quote={this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName}\n                                            />\n                                            <label>{AL.INVITE_FB}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-whatsapp\" onClick={() => this.callNativeShare('whatsapp', this.state.shareURL, this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <WhatsappShareButton className=\"social-circle icon-whatsapp\"\n                                                url={\n                                                    this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                                                } />\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                            </ul>\n                        </div>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default ShareFPPOpenPredictorModal;","/var/www/html/framework/frontend/src/Component/Pickem/index.js",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorModule/ViewProofModal.jsx",["3470","3471","3472","3473","3474","3475"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { FacebookShareButton, WhatsappShareButton, EmailShareButton } from 'react-share';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport WSManager from '../../WSHelper/WSManager';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nclass ViewProofModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n\n        const { mShow, mHide, viewProofData, correctAns} = this.props.data;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"custom-modal view-proof-modal\"\n                        className=\"center-modal\"\n                    >\n                        <div className=\"modal-header\">\n                            <div className=\"que\">\n                                {viewProofData.desc}\n                            </div>\n                            <div className=\"ans\">\n                                {correctAns}\n                            </div>\n                            <div className=\"correct-ans-text\">\n                                {AL.CORRECT_ANS}\n                            </div>\n                        </div>    \n                        <div className=\"modal-body\">\n                            <div className=\"proof-text\">\n                                {AL.PROOF}\n                            </div>\n                            <div className=\"proof-section\">\n                                <p>{viewProofData.proof_desc}</p>\n                                <img src={Utilities.getOpenPredURL(viewProofData.proof_image)} alt=\"\"/>\n                            </div>\n                        </div> \n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default ViewProofModal;","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPLearnMore.jsx",[],"/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/CompletedFPPOpenPredictors.jsx",["3476","3477"],"import React from 'react';\nimport { NoDataView } from '../CustomComponent';\nimport { _times, _Map } from '../../Utilities/Utilities';\nimport { getMyFPPOpenPrediction } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport OpenPredictorFPPCard from './OpenPredictorFPPCard';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport ViewProofFPPModal from \"./ViewProofFPPModal\";\n\nclass CompletedFPPOpenPredictors extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ccList: [],\n            isLoading: false,\n            showProofModal: false,\n            viewProofData: ''\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n\n        var param = {\n            \"category_id\": item.category_id,\n            \"status\": Constants.CONTEST_COMPLETED\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyFPPOpenPrediction(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({ ccList: responseJson.data.predictions || [] })\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList(this.props.selectedFixture)\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    showProofModalFn=(item)=>{\n        let traverse = true;\n        _Map(item.option,(opt,idx)=>{\n            if(traverse && opt.is_correct == 1){\n                this.setState({\n                    correctAns: opt.option\n                },()=>{\n                    this.setState({\n                        viewProofData: item,\n                        showProofModal: true\n                    })\n                })\n            }\n            traverse = true\n        })\n    }\n    hideProofModalFn=()=>{\n        this.setState({\n            showProofModal: false\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.ccList.length > 0 && <ul className=\"list-pred\">\n                        {\n                            this.state.ccList.map((item, indx) => {\n                                return (\n                                    <OpenPredictorFPPCard\n                                        {...this.props}\n                                        key={item.prediction_master_id}\n                                        data={{\n                                            itemIndex: indx,\n                                            item: item,\n                                            status: Constants.CONTEST_COMPLETED,\n                                            LobbyData: this.props.selectedFixture,\n                                            ShowProofModalFn: this.showProofModalFn\n                                        }} />\n                                )\n                            })\n                        }\n                    </ul>\n                }\n                {\n                    this.state.ccList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_COMPLETED_CONTEST1 + ' ' + AppLabels.NO_COMPLETED_CONTEST2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    this.state.ccList.length === 0 && this.state.isLoading &&\n                    _times(7, (idx) => {\n                        return (\n                            this.Shimmer(idx)\n                        )\n                    })\n                }\n                {\n                    this.state.showProofModal &&\n                    <ViewProofFPPModal \n                        data={{ \n                            mShow: this.state.showProofModal,\n                            mHide: this.hideProofModalFn,\n                            viewProofData: this.state.viewProofData,\n                            correctAns: this.state.correctAns\n                        }}\n                    />\n                }\n            </div>\n        )\n    }\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m m-t-10\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default CompletedFPPOpenPredictors;","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/LiveFPPOpenPredictors.jsx",["3478"],"import React from 'react';\nimport { _times } from '../../Utilities/Utilities';\nimport { CONTEST_LIVE } from '../../helper/Constants';\nimport { getMyFPPOpenPrediction } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../CustomComponent';\nimport Skeleton from 'react-loading-skeleton';\nimport OpenPredictorFPPCard from './OpenPredictorFPPCard';\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\n\nclass LiveFPPOpenPredictors extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            lcList: [],\n            isLoading: false\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n\n        var param = {\n            \"category_id\": item.category_id,\n            \"status\": CONTEST_LIVE\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyFPPOpenPrediction(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({ lcList: responseJson.data.predictions || [] })\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList(this.props.selectedFixture)\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.lcList.length > 0 && <ul className=\"list-pred\">\n                        {\n                            this.state.lcList.map((item, indx) => {\n                                return (\n                                    <OpenPredictorFPPCard\n                                        {...this.props}\n                                        key={item.prediction_master_id}\n                                        data={{\n                                            itemIndex: indx,\n                                            item: item,\n                                            status: CONTEST_LIVE,\n                                            LobbyData: this.props.selectedFixture\n                                        }} />\n                                )\n                            })\n                        }\n                    </ul>\n                }\n                {\n                    this.state.lcList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_LIVE_CONTEST1 + ' ' + AppLabels.NO_LIVE_CONTEST2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    this.state.lcList.length === 0 && this.state.isLoading &&\n                    _times(7, (idx) => {\n                        return (\n                            this.Shimmer(idx)\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m m-t-10\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LiveFPPOpenPredictors;","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/UpcomingFPPOpenPredictors.jsx",["3479","3480"],"import React from 'react';\nimport { NoDataView } from '../CustomComponent';\nimport { _filter, _times } from '../../Utilities/Utilities';\nimport { getMyFPPOpenPrediction } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport OpenPredictorFPPCard from './OpenPredictorFPPCard';\nimport Images from '../../components/images';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\n\nclass UpcomingFPPOpenPredictors extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ucList: [],\n            isLoading: false\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n        var param = {\n            \"category_id\": item.category_id,\n            \"status\": Constants.CONTEST_UPCOMING\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyFPPOpenPrediction(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({ ucList: responseJson.data.predictions || [] })\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList(this.props.selectedFixture)\n    }\n\n    timerCompletionCall = (item) => {\n        this.deleteFixture(item)\n    }\n\n    deleteFixture = (item) => {\n        let fArray = _filter(this.state.ucList, (obj) => {\n            return item.prediction_master_id != obj.prediction_master_id\n        })\n        this.setState({\n            ucList: fArray\n        })\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.ucList.length > 0 && <ul className=\"list-pred\">\n                        {\n                            this.state.ucList.map((item, indx) => {\n                                return (\n                                    <OpenPredictorFPPCard\n                                        {...this.props}\n                                        key={item.prediction_master_id}\n                                        data={{\n                                            itemIndex: indx,\n                                            item: item,\n                                            status: Constants.CONTEST_UPCOMING,\n                                            timerCallback: () => this.timerCompletionCall(item),\n                                            LobbyData: this.props.selectedFixture\n                                        }} />\n                                )\n                            })\n                        }\n                    </ul>\n                }\n                {\n                    this.state.ucList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_UPCOMING_CONTEST1 + ' ' + AppLabels.NO_UPCOMING_CONTEST2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    this.state.ucList.length === 0 && this.state.isLoading &&\n                    _times(7, (idx) => {\n                        return (\n                            this.Shimmer(idx)\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m m-t-10\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UpcomingFPPOpenPredictors;","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPCard.jsx",["3481","3482","3483","3484","3485","3486","3487","3488","3489","3490","3491","3492","3493","3494","3495","3496","3497","3498","3499","3500"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { MomentDateComponent } from '../CustomComponent';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { CONTESTS_LIST, CONTEST_COMPLETED, CONTEST_LIVE, CONTEST_UPCOMING } from '../../helper/Constants';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Images from '../../components/images';\nimport * as AL from \"../../helper/AppLabels\";\nimport CustomHeader from \"../../components/CustomHeader\";\n\nclass OpenPredictorFPPCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n        }\n    }\n\n    onPredictionSelect = (itemIndex, idx, opt) => {\n        const { item, onSelectPredict, onMakePrediction } = this.props.data;\n        onSelectPredict(itemIndex, idx, opt);\n        setTimeout(() => {\n            onMakePrediction(item)\n        }, 50);\n    }\n\n    renderFilledBar = (opt, idx, data) => {\n        const { item, status, itemIndex } = this.props.data;\n        let predictedPer = item.total_predictions == 0 ? 0 : ((opt.option_total_coins / item.total_pool) * 100).toFixed(2);\n\n        let checkPredictedPer = (predictedPer % 1) == 0 ? Math.floor(predictedPer) : predictedPer;\n\n        predictedPer = checkPredictedPer;\n\n        let isOptSelected = (opt.user_selected_option == opt.prediction_option_id);\n        let userCorrect = (isOptSelected && opt.is_correct == 1);\n        let isCompleted = (status === CONTEST_COMPLETED);\n        return (\n            <React.Fragment key={idx}>\n                <div \n                    onClick={() => (status == CONTESTS_LIST && this.onPredictionSelect(itemIndex, idx, opt))} \n                    className={\n                    \"prediction-bar\" + (isOptSelected ? ' selected' : '') +\n                    ((status != CONTESTS_LIST && !isCompleted && isOptSelected && item.entry_type == 0) ? ' mb-1' : '') +\n                    (isCompleted ? (userCorrect ? ' success' : (isOptSelected ? ' failure' : '')) : '')\n                }>\n                    <div className=\"filled-bar\"/>\n                    <p className=\"answer\">{opt.option}</p>\n                    <div className=\"corrected-ans\">\n                        {\n                            isCompleted && <React.Fragment>\n                                {opt.is_correct == 1 && !isOptSelected && <span>{AL.CORRECT_ANS}</span>}\n                                {isOptSelected && <i className={userCorrect ? \"icon-tick\" : \"icon-close\"} />}\n                            </React.Fragment>\n                        }\n                    </div>\n                </div>\n                \n            </React.Fragment>\n        )\n    }\n\n    viewParticipants = () => {\n        const { item, status } = this.props.data;\n        let prediction_master_id = item.prediction_master_id;\n        let mURL = Utilities.getSelectedSportsForUrl().toLowerCase() + \"/open-predictor-leaderboard/participants/\" + btoa(prediction_master_id);\n        let isLiveCom = ((status == CONTEST_COMPLETED) || (status == CONTEST_LIVE));\n        this.props.history.push({ pathname: '/' + mURL, state: { isLeader: isLiveCom } });\n    }\n\n    ShowModal=(item)=>{\n        this.props.data.ShowProofModalFn(item);\n    }\n\n    callNativeRedirection(item) {\n        let data = {\n            action: 'predictionLink',\n            targetFunc: 'predictionLink',\n            type: 'link',\n            url: item.source_url,\n            detail: item\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    render() {\n        const { item, status, shareContest, LobbyData, timerCallback, itemIndex } = this.props.data;\n        let game_starts_in = item.deadline_time / 1000;\n        let betCoin = 0;\n        let isCompleted = (status == CONTEST_COMPLETED);\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <li style={{animation: (itemIndex > 10 ? 'none' : ''), transition : (itemIndex > 10 ? 'none' : ''), transform: (itemIndex > 10 ? 'rotateY(0deg)' : '') }} key={item.prediction_master_id + item.season_game_uid} className={parseInt(item.is_pin) != 0 ? ' pinned' : ''}>\n                        {status == CONTESTS_LIST && <i onClick={(e) => shareContest(e, item)} className=\"icon-share\" />}\n                        {\n                            parseInt(item.is_pin) != 0 && <div className=\"contest-pin\">\n                                <img src={Images.pinned_ic} alt=\"\" />\n                            </div>\n                        }\n                        {item.source_desc &&\n                            <OverlayTrigger trigger={['hover', 'focus']} placement={'left'} overlay={\n                                    <Tooltip id=\"tooltip1\">\n                                        <strong>{item.source_desc}</strong>\n                                    </Tooltip>\n                                }>\n                                    <i className=\"icon-ic-info que-info\" />\n                            </OverlayTrigger>\n                        }\n                        {\n                            item.source_url &&\n                            <React.Fragment>\n                                {\n                                    window.ReactNativeWebView ?\n                                        <a \n                                            href\n                                            onClick={()=>this.callNativeRedirection(item)}\n                                            className=\"attached-url\">\n                                            <img src={Images.ATTACHMENT_IC} alt=\"\" />\n                                        </a>\n                                        :\n                                        <a \n                                            href={item.source_url}\n                                            target='_blank'\n                                            className=\"attached-url\">\n                                            <img src={Images.ATTACHMENT_IC} alt=\"\" />\n                                        </a>\n                                }\n                            </React.Fragment>\n                        }\n\n                        <p className={\"questions\" + (!LobbyData ? ' mb-0' : '')}>{item.desc}</p>\n                        {\n                            (!LobbyData) && <span className=\"category_name\">{item.category_name}</span>\n                        }\n                        {\n                            _Map(item.option, (opt, idx) => {\n                                betCoin = (opt.user_selected_option == opt.prediction_option_id) ? opt.bet_coins : betCoin\n                                return this.renderFilledBar(opt, idx, item);\n                            })\n                        }\n                        {\n                            status == CONTESTS_LIST && <div className=\"footer-vc\">\n                                <div>\n                                    <div className=\"date-v new-fc\">\n                                        <div className=\"match-timing\">\n                                            {\n                                                Utilities.showCountDown({ game_starts_in: game_starts_in }) ?\n                                                    <span className=\"d-flex\">\n                                                        <div className=\"countdown time-line\">\n                                                            {\n                                                                game_starts_in && <CountdownTimer timerCallback={timerCallback} deadlineTimeStamp={game_starts_in} />\n                                                            }\n                                                        </div>\n                                                        {AL.REMAINING}\n                                                    </span> :\n                                                    <span> <MomentDateComponent data={{ date: item.deadline_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        }\n                        {\n                            status != CONTESTS_LIST && <div className=\"footer-vc\">\n                                <div className=\"price-container\">\n                                    <div className=\"my-pre-date\">\n                                        \n                                        {\n                                            status == CONTEST_UPCOMING && <div className=\"date-v\">\n                                                <div className=\"match-timing price-pool-first\">\n                                                    {\n                                                        Utilities.showCountDown({ game_starts_in: game_starts_in }) ?\n                                                            <span className=\"d-flex\">\n                                                                <div className=\"countdown time-line text-left\">\n                                                                    {\n                                                                        game_starts_in && <CountdownTimer timerCallback={timerCallback} deadlineTimeStamp={game_starts_in} />\n                                                                    }\n                                                                </div>\n                                                                {AL.REMAINING}\n                                                            </span> :\n                                                            <span> <MomentDateComponent data={{ date: item.deadline_date, format: \"D MMM - hh:mm A \" }} /></span>\n                                                    }\n                                                </div>\n                                            </div>\n                                        }\n                                        {\n                                            isCompleted && (item.proof_desc || item.proof_image) &&\n                                            <p className=\"view-proof-section\" onClick={()=>this.ShowModal(item)}>\n                                                {AL.VIEW_PROOF}\n                                            </p>\n                                        }\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        }\n                    </li>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default OpenPredictorFPPCard;\n","/var/www/html/framework/frontend/src/Component/FreeToPlayModule/LeagueSheduledFixture.jsx",["3501","3502","3503","3504","3505","3506","3507","3508","3509","3510"],"import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map, _isUndefined } from '../../Utilities/Utilities';\nimport { setValue, AppSelectedSport } from '../../helper/Constants';\nimport Helmet from 'react-helmet';\nimport MetaData from '../../helper/MetaData';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport Images from '../../components/images';\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport { getMiniLeagueDetails } from \"../../WSHelper/WSCallings\";\nimport * as Constants from \"../../helper/Constants\";\nimport { NoDataView, MomentDateComponent } from '../CustomComponent';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport LeagueDetails from './LeagueDetails';\n\nclass LeagueSheduledFixture extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            MiniLeagueFixtureList: [],\n            HeaderOption: {\n                back: true,\n                title: this.props.match.params.mini_league_name,\n                hideShadow: false\n            }\n        }\n    }\n\n    componentWillMount = () => {\n        this.getMiniLeagueDetails();\n\n    }\n    getMiniLeagueDetails = async (mini_league_uid) => {\n        if (Constants.AppSelectedSport == null)\n            return;\n\n        let param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"mini_league_uid\": this.props.match.params.mini_league_uid\n        }\n\n        delete param.limit;\n        var api_response_data = await getMiniLeagueDetails(param);\n        if (api_response_data) {\n            this.setState({\n                MiniLeagueFixtureList: api_response_data.data.match_list,\n            })\n\n\n        }\n    }\n\n    FixtureListFunction = (item) => {\n        return (\n            <div className=\"mini_league_sheduled-fixture\">\n                <div className=\"display-table\">\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                        <div className=\"team-block\">\n                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                            <span className=\"verses\">{AL.VS}</span>\n                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                        </div>\n                        <div className=\"match-timing\">\n                            {\n\n                                <span> <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} /></span>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            title: this.props.match.params.mini_league_name,\n            share: true\n        }\n        const { LobyyData, MiniLeagueFixtureList } = this.state;\n        return (\n            <MyContext.Provider >\n                <div className=\"web-container Ftp-web-container \">\n                    <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                        <title>{MetaData.SHS.title}</title>\n                        <meta name=\"description\" content={MetaData.SHS.description} />\n                        <meta name=\"keywords\" content={MetaData.SHS.keywords}></meta>\n                    </Helmet>\n                    <CustomHeader\n                        {...this.props}\n                        HeaderOption={HeaderOption}\n                    />\n                    {this.state.MiniLeagueFixtureList && this.state.MiniLeagueFixtureList.map((item, index) => {\n                        return (\n                            <React.Fragment key={index}>\n                                <div className=\"collection-list-slider\">\n                                    {this.FixtureListFunction(item)}\n                                </div>\n\n\n\n\n                            </React.Fragment>\n                        );\n                    })\n\n                    }\n\n                    {\n                        MiniLeagueFixtureList.data && MiniLeagueFixtureList.data.length == 0 &&\n                        <NoDataView\n                            BG_IMAGE={Images.no_data_bg_image}\n                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                            MESSAGE_1={AppLabels.NO_FIXTURES_MSG1}\n                            MESSAGE_2={AppLabels.NO_DATA_VIEW_MESSAGE_ALL_LEAGUE}\n                            onClick_2={this.joinContest}\n                        />\n\n                    }\n                    \n\n\n\n\n                </div>\n            </MyContext.Provider>\n        )\n    }\n}\n\nexport default LeagueSheduledFixture;","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/OpenPredictorFPPContestList.jsx",["3511","3512","3513","3514","3515","3516","3517","3518","3519"],"import React, { Component } from 'react';\nimport { MyContext } from '../../views/Dashboard';\nimport { _Map, _filter, Utilities } from '../../Utilities/Utilities';\nimport { NoDataView } from '../CustomComponent';\nimport { OpenPredictorFPPLearnMore, ConfirmFPPOpenPredictor } from '.';\nimport { getFPPOpenPredictionContest, checkOpenPredictionISJoin } from '../../WSHelper/WSCallings';\nimport { CONTESTS_LIST, IS_DFS, IS_FPP_OPEN_PREDICTOR } from '../../helper/Constants';\nimport SocketIOClient from \"socket.io-client\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from '../../WSHelper/WSManager';\nimport OpenPredictorFPPCard from './OpenPredictorFPPCard';\nimport ShareFPPOpenPredictorModal from './ShareFPPOpenPredictorModal';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AL from \"../../helper/AppLabels\";\n\nvar socket = '';\n\nclass OpenPredictorFPPContestList extends Component {\n    constructor(props) {\n        super(props);\n        this._isMounted = false;\n        this.state = {\n            LData: this.props.data || '',\n            ContestList: [],\n            isLoading: false,\n            ShimmerList: [1, 2, 3, 4, 5, 6],\n            showCP: false,\n            showLM: false,\n            showShareM: false,\n            ShareItem: '',\n            joinPItem: '',\n            limit: 20,\n            offset: 0,\n            hasMore: false\n        }\n    }\n\n    componentDidMount() {\n        if(IS_FPP_OPEN_PREDICTOR){\n            socket = SocketIOClient(WSC.nodeBaseURL);\n        }\n        this._isMounted = true;\n        this.parseHistoryStateData(this.state.LData);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        socket.disconnect();\n    }\n\n    getContestList(data) {\n        let param = {\n            \"category_id\": data.category_id,\n        }\n        if (!param.category_id) {\n            param['limit'] = this.state.limit;\n            param['offset'] = this.state.offset;\n        }\n        if (!param.offset || param.offset == 0) {\n            this.setState({ isLoading: true })\n        }\n        getFPPOpenPredictionContest(param).then((responseJson) => {\n            this.setState({ isLoading: false })\n            if (responseJson.response_code === WSC.successCode) {\n                if (!param.category_id) {\n                    let data = responseJson.data.predictions || [];\n                    let haseMore = data.length >= param.limit\n                    this.setState({\n                        ContestList: [...this.state.ContestList, ...data],\n                        offset: responseJson.data.offset,\n                        hasMore: haseMore\n                    });\n                } else {\n                    this.setState({\n                        ContestList: responseJson.data.predictions || [],\n                        hasMore: false,\n                        offset: 0\n                    });\n                }\n            }\n        })\n    }\n\n    parseHistoryStateData = (data) => {\n        socket.disconnect();\n        if (data) {\n            let { LobbyData } = data;\n            this.setState({\n                LData: LobbyData\n            }, () => {\n                this.getContestList(LobbyData)\n                this.joinPredictionRoom(LobbyData)\n            })\n        }\n    }\n\n    joinPredictionRoom = (data) => {\n        socket.connect()\n        if (data.category_id) {\n            socket.emit('JoinAddFixedOpenPredictionRoom', { category_id: data.category_id });\n            socket.emit('JoinPausePlayFixedOpenPredictionRoom', { category_id: data.category_id });\n            socket.emit('JoinDeleteFixedOpenPredictionRoom', { category_id: data.category_id });\n        }\n        if (WSManager.loggedIn()) {\n            socket.emit('JoinWonFixedOpenPredictionRoom', { user_id: WSManager.getProfile().user_id });\n            socket.on('NotifyWonFixedOpenPrediction', (obj) => {\n                if (this._isMounted) {\n                    let bal = WSManager.getBalance();\n                    let preBal = parseInt(bal.point_balance || 0);\n                    let updatedBal = preBal + parseInt(obj.amount);\n                    CustomHeader.updateCoinBalance(updatedBal);\n                    bal[\"point_balance\"] = updatedBal;\n                    WSManager.setBalance(bal);\n                    CustomHeader.showRSuccess(obj);\n                }\n            })\n        }\n\n        socket.on('NotifyNewFixedOpenPrediction', (obj) => {\n            if (this._isMounted && obj.category_id == data.category_id) {\n                this.addFixture(obj)\n                CustomHeader.showNewPToast()\n            }\n        })\n        socket.on('NotifyDeleteFixedOpenPrediction', (obj) => {\n            if (this._isMounted && obj.category_id == data.category_id) {\n                this.deleteFixture(obj)\n            }\n        })\n        socket.on('NotifyPausePlayFixedOpenPrediction', (obj) => {\n            if (this._isMounted && obj.category_id == data.category_id) {\n                if (obj.pause === 1) {\n                    this.deleteFixture(obj)\n                } else if (obj.pause === 0) {\n                    if (WSManager.loggedIn()) {\n                        let param = {\n                            \"prediction_master_id\": obj.prediction_master_id,\n                        }\n                        checkOpenPredictionISJoin(param).then((responseJson) => {\n                            if (responseJson.response_code === WSC.successCode) {\n                                if (responseJson.data.is_joined == 0) {\n                                    this.addFixture(obj)\n                                }\n                            }\n                        })\n                    } else {\n                        this.addFixture(obj)\n                    }\n                }\n            }\n        })\n    }\n\n    deleteFixture = (item) => {\n        let fArray = _filter(this.state.ContestList, (obj) => {\n            return item.prediction_master_id != obj.prediction_master_id\n        })\n        this.setState({\n            ContestList: fArray\n        },()=>{\n            if(fArray.length <= 5 && this.state.hasMore){\n                this.setState({\n                    offset: fArray.length\n                },()=>{\n                    this.fetchMoreData()\n                })\n            }\n        })\n    }\n\n    addFixture = (obj) => {\n        let pinnedArray = [];\n        let tmpArray = [];\n        _Map(this.state.ContestList, (item) => {\n            if (item.is_pin == 1) {\n                pinnedArray.push(item)\n            } else {\n                tmpArray.push(item)\n            }\n        })\n        this.setState({\n            ContestList: [...pinnedArray, obj.prediction, ...tmpArray]\n        });\n    }\n\n    timerCompletionCall = (item) => {\n        this.deleteFixture(item)\n    }\n\n    onSelectPredict = (itemIndex, optionIndex, option) => {\n        let tmpArray = this.state.ContestList;\n        let item = tmpArray[itemIndex];\n        _Map(item['option'], (obj, idx) => {\n            if (idx === optionIndex) {\n                obj['user_selected_option'] = option.prediction_option_id;\n                item['option_predicted'] = option\n            } else {\n                obj['user_selected_option'] = null;\n            }\n        })\n        this.setState({\n            ContestList: tmpArray\n        })\n    }\n\n    onMakePrediction = (item) => {\n        if (WSManager.loggedIn()) {\n            this.setState({\n                joinPItem: item,\n                showCP: true\n            })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    showShareM = (data) => {\n        this.setState({\n            showShareM: true,\n        });\n    }\n\n    hideShareM = () => {\n        this.setState({\n            showShareM: false,\n        });\n    }\n\n    shareContest(event, data) {\n        if (WSManager.loggedIn()) {\n            event.stopPropagation();\n            this.setState({ showShareM: true, ShareItem: data })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    hideCP = () => {\n        let tmpArray = this.state.ContestList;\n        let itemIndex = tmpArray.indexOf(this.state.joinPItem)\n        let item = itemIndex >= 0 ? tmpArray[itemIndex] : null;\n        if (item && item.option) {\n            _Map(item['option'], (obj, idx) => {\n                if (obj.user_selected_option) {\n                    obj['user_selected_option'] = null;\n                }\n            })\n            this.setState({\n                ContestList: tmpArray,\n                showCP: false\n            })\n        } else {\n            this.setState({\n                showCP: false\n            })\n        }\n    }\n\n    clickLearnMore = () => {\n        this.setState({\n            showLM: true\n        })\n    }\n\n    hideLM = () => {\n        this.setState({\n            showLM: false\n        })\n    }\n\n    clickEarnCoins = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push(\"/earn-coins\")\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    renderDFSCard = () => {\n        if(Utilities.getMasterData().allow_dfs_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().dfs_bnr;\n        if (IS_DFS) {\n            return ( bannerImg ?\n                <li onClick={this.props.goToDFS} className=\"is-card prd-card-img-only\" >\n                    <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n                </li>\n                :\n                <li onClick={this.props.goToDFS} className=\"is-card\">\n                    <div className=\"dfs-card\" >\n                        <img className=\"img-dfs-shape\" src={Images.DFS_SHAPE_IMG} alt='' />\n                        <div className=\"dfs-c\">\n                            <img className=\"img-dfs\" src={Images.DFS_IMG} alt='' />\n                            <p>Play Daily Fantasy Sports, Win Real Cash Prizes</p>\n                        </div>\n                    </div>\n                </li>\n            )\n        }\n        return ''\n    }\n    renderPrizeCard = () => {\n        if(Utilities.getMasterData().allow_prize_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().prize_bnr;\n        return ( bannerImg ?\n            <li onClick={this.props.goToRewards} className=\"is-card prd-card-img-only\" >\n                <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n            </li>\n            :\n            <li className=\"is-card\" onClick={this.props.goToRewards}>\n                <div className=\"prd-prize-card\">\n                    <img className=\"img-prize-card\" src={Images.PRD_PRIZE_IMG} alt='' />\n                    <div className=\"dfs-c\">\n                        <img className=\"img-dfs\" src={Images.PRIZES_CAR} alt='' />\n                        <p>Play Prediction and Win Huge Rewards</p>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n\n    fetchMoreData = () => {\n        if (!this.state.isLoading && this.state.hasMore) {\n            this.getContestList(this.state.LData)\n        }\n    }\n\n    render() {\n        const { ContestList, isLoading, ShimmerList, showCP, joinPItem, showLM, showShareM, ShareItem, LData, hasMore } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"prediction-wrap-v\">\n                        <div className=\"p_view-container\">\n                            <div className=\"contest-action\">\n                                <button onClick={this.clickLearnMore} className=\"btn btn-rounded small\">{AL.HOW_TO_PREDICT}</button>\n                                <button onClick={this.clickEarnCoins} className=\"btn btn-rounded small\">{AL.EARN_COINS}</button>\n                            </div>\n                            <InfiniteScroll\n                                dataLength={ContestList.length}\n                                pullDownToRefresh={false}\n                                hasMore={hasMore && !isLoading}\n                                next={this.fetchMoreData.bind(this)}\n                            >\n                                {\n                                    !isLoading && <ul className=\"list-pred\">\n                                        {\n                                            ContestList.map((item, index) => {\n                                                return (\n                                                    <React.Fragment key={index} >\n                                                        <OpenPredictorFPPCard\n                                                            {...this.props}\n                                                            key={item.prediction_master_id}\n                                                            data={{\n                                                                itemIndex: index,\n                                                                item: item,\n                                                                status: CONTESTS_LIST,\n                                                                timerCallback: () => this.timerCompletionCall(item),\n                                                                onSelectPredict: this.onSelectPredict,\n                                                                onMakePrediction: this.onMakePrediction,\n                                                                shareContest: this.shareContest.bind(this),\n                                                                LobbyData: LData\n                                                            }} />\n                                                        {\n                                                            index === 0 && this.renderPrizeCard()\n                                                        }\n                                                       \n                                                    </React.Fragment>\n                                                );\n                                            })\n                                        }\n                                        \n                                    </ul>\n                                }\n                            </InfiniteScroll>\n                            {\n                                ContestList.length === 0 && !isLoading &&\n                                <NoDataView\n                                    BG_IMAGE={Images.no_data_bg_image}\n                                    CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                    MESSAGE_1={ LData.category_id ? AL.NO_QUE_FOR_CATEGORY : AL.NO_FIXTURES_MSG1}\n                                    MESSAGE_2={ LData.category_id ? AL.SWITCH_TO_OTHER_CAT : AL.NO_FIXTURES_MSG3}\n                                />\n                            }\n                            {\n                                ContestList.length === 0 && isLoading &&\n                                _Map(ShimmerList, (item, index) => {\n                                    return (\n                                        this.Shimmer(index)\n                                    )\n                                })\n                            }\n\n                        </div>\n                        {\n                            showCP && <ConfirmFPPOpenPredictor {...this.props} preData={{\n                                mShow: showCP,\n                                mHide: this.hideCP,\n                                cpData: joinPItem,\n                                successAction: this.timerCompletionCall\n                            }} />\n                        }\n                        {\n                            showLM && <OpenPredictorFPPLearnMore {...this.props} preData={{\n                                mShow: showLM,\n                                mHide: this.hideLM\n                            }} />\n                        }\n                        {\n                            showShareM &&\n                            <ShareFPPOpenPredictorModal\n                                {...this.props}\n                                preData={{\n                                    mShow: showShareM,\n                                    mHide: this.hideShareM,\n                                    spData: ShareItem\n                                }}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div key={index} className=\"contest-list m\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <div className=\"m-v-xs\">\n                                <Skeleton height={8} width={'70%'} />\n                            </div>\n                            <Skeleton height={34} />\n                            <Skeleton height={34} />\n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0 pt-3\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'70%'} />\n                            <div className=\"d-flex justify-content-between\">\n                                <Skeleton height={4} width={110} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default OpenPredictorFPPContestList;\n","/var/www/html/framework/frontend/src/views/HaveALeagueCodeClass.jsx",["3520","3521","3522","3523","3524","3525","3526","3527","3528","3529","3530","3531","3532","3533","3534"],"import React from 'react';\nimport { FormGroup, Button,Col,Row } from 'react-bootstrap';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyle } from '../helper/input-style';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../helper/MetaData\";\nimport ContestDetailModal from '../Modals/ContestDetail';\nimport ls from 'local-storage';\nimport ConfirmationPopup from '../Modals/ConfirmationPopup';\nimport Thankyou from '../Modals/Thankyou';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport CustomHeader from '../components/CustomHeader';\nimport {Utilities} from '../Utilities/Utilities';\nimport { setValue, SELECTED_GAMET, GameType } from '../helper/Constants';\nimport { getUserTeams, joinContest, checkContestEligibility,checkContestEligibilityMultiGame } from '../WSHelper/WSCallings';\n\nexport default class HaveALeagueCodeClass extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            mLeagueCode: '',\n            showContestDetail: false,\n            clickOnce: false,\n            showConfirmationPopUp: false,\n            userTeamListSend: [],\n            LobyyData:[],\n            showThankYouModal: false,\n        };\n\n\n    }\n\n    ContestDetailShow = (data, activeTab) => {\n        this.setState({\n            showContestDetail: true,\n            contestData: data,\n            activeTab: activeTab,\n        });\n    }\n\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    handleChange = (e) => {\n        const value = e.target.value;\n        this.setState({\n            mLeagueCode: value,\n        });\n    }\n\n    joinPrivateLeague() {\n        this.setState({clickOnce: true})\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/signup' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } else {\n            if (this.state.mLeagueCode != \"\" && this.state.mLeagueCode.length > 3) {\n                this.callHaveALeagueCodeApi();\n            } else {\n                Utilities.showToast(AppLabels.Please_enter_a_valid_league_code, 3000);\n            }\n        }\n    }\n\n    callHaveALeagueCodeApi() {\n        let param = {\n            'join_code': this.state.mLeagueCode\n        }\n\n        let apiMethod = SELECTED_GAMET == GameType.MultiGame ? checkContestEligibilityMultiGame : checkContestEligibility\n\n        apiMethod(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n\n                if(responseJson.data.total_user_joined == responseJson.data.size){\n                    Utilities.showToast(AppLabels.Entry_for_the_contest, 3000);\n                }else{\n                    if(responseJson.data.game_type == 'dfs'){\n                        WSManager.setPickedGameType(GameType.DFS);\n                    }\n                    if(responseJson.data.game_type == 'multigame'){\n                        WSManager.setPickedGameType(GameType.MultiGame);\n                    }\n                    if(responseJson.data.game_type == 'free2play'){\n                        WSManager.setPickedGameType(GameType.Free2Play);\n                    }\n                    if(responseJson.data.game_type == 'tournament'){\n                        WSManager.setPickedGameType(GameType.Tournament);\n                    }\n                    setTimeout(() => {\n                        this.setState({\n                            contestData: responseJson.data,\n                        })\n        \n                        this.ContestDetailShow(responseJson.data, 2);\n                        this.getUserLineUpListApi(responseJson.data)\n                        \n                    }, 200);\n                }\n            }\n            this.setState({clickOnce: false})\n        })\n }\n\n    CreateTeamClickEvent = (data, LobyyData) => {\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/signup' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } \n        else {\n            WSManager.clearLineup();\n            let urlData = LobyyData;\n            let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n            dateformaturl = new Date(dateformaturl);\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n            let lineupPath= '';\n            if(urlData.home){\n                let lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { LobyyData: this.state.LobyyData, FixturedContest: this.state.contestData, resetIndex: 1, collection_master_id:urlData.collection_master_id } })\n            }\n            else{\n                let pathurl = Utilities.replaceAll(urlData.collection_name,' ','_');\n                lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { LobyyData: this.state.LobyyData, FixturedContest: this.state.contestData ,resetIndex: 1,collection_master_id:urlData.collection_master_id} })\n            }\n        }\n    }\n\n    onSubmitBtnClick = (data) => {\n        this.setState({LobyyData: data})\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/signup' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } \n        else {\n            if(this.state.userTeamListSend.length > 0){\n                this.setState({showContestDetail:false,showConfirmationPopUp: true})\n            }\n            else{\n                WSManager.clearLineup();\n                let urlData = data;\n\n                let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n                dateformaturl = new Date(dateformaturl);\n                let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n                let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n                dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n                let lineupPath= '';\n                if(urlData.home){\n                    lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { LobyyData: data, FixturedContest: this.state.contestData ,resetIndex: 1,collection_master_id:urlData.collection_master_id} })\n                }\n                else{\n                    let pathurl = Utilities.replaceAll(urlData.collection_name,' ','_');\n                    lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { LobyyData: data, FixturedContest: this.state.contestData ,resetIndex: 1,collection_master_id:urlData.collection_master_id} })\n                }\n            }\n        }\n    }\n\n    ConfirmEvent = (dataFromConfirmPopUp) => {\n\n        if (dataFromConfirmPopUp.selectedTeam.lineup_master_id != null && dataFromConfirmPopUp.selectedTeam.lineup_master_id == \"\" || dataFromConfirmPopUp.selectedTeam == \"\") {\n            Utilities.showToast(AppLabels.SELECT_NAME_FIRST, 1000);\n        } else {\n            var currentEntryFee = 0;\n            currentEntryFee = dataFromConfirmPopUp.entryFeeOfContest;\n\n            if (currentEntryFee <= dataFromConfirmPopUp.balanceAccToMaxPercent) {\n                this.CallJoinGameApi(dataFromConfirmPopUp);\n            } else {\n             //   setValue.setisFromConfirmModal(true);\n                WSManager.setFromConfirmPopupAddFunds(true);\n                WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                WSManager.setPaymentCalledFrom(\"SelectCaptainList\")\n                this.props.history.push({ pathname: '/add-funds', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true });\n            }\n        }\n    }\n\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        let param = {\n            \"contest_id\": dataFromConfirmPopUp.FixturedContestItem.contest_id,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        this.setState({ isLoaderShow: true })\n        joinContest(param).then((responseJson) => {\n            //this.setState({ isLoaderShow: false })\n\n            if (responseJson.response_code == WSC.successCode) {\n                this.ConfirmatioPopUpHide();\n                setTimeout(() => {\n                    this.ThankYouModalShow()\n                },300);\n                WSManager.clearLineup();\n\n            } else {\n                Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n            }\n        })\n    }\n\n\n    ConfirmatioPopUpShow = (data) => {\n        this.setState({\n            showConfirmationPopUp: true,\n\n        });\n    }\n\n    ConfirmatioPopUpHide = () => {\n        this.setState({\n            showConfirmationPopUp: false,\n        });\n    }\n\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' });\n    }\n\n    seeMyContest = () => {\n        this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n    }\n\n    getUserLineUpListApi = async (CollectionData) => {\n        let param = {\n            \"sports_id\": CollectionData.sports_id,\n            \"collection_master_id\": CollectionData.collection_master_id,\n        }\n        this.setState({ isLoaderShow: true })\n        let user_data = ls.get('profile');\n        var user_unique_id = 0;\n        if (user_data && user_data.user_unique_id) {\n            user_unique_id = user_data.user_unique_id;\n        }\n        var api_response_data = await getUserTeams(param,user_unique_id);\n        if (api_response_data) {\n            this.setState({\n                userTeamListSend: api_response_data\n            })\n            if (this.state.userTeamListSend) {\n                let tempList = [];\n                this.state.userTeamListSend.map((data, key) => {\n                    tempList.push({ value: data, label: data.team_name })\n                    return '';\n                })\n\n                this.setState({ userTeamListSend: tempList });\n            }\n        }\n\n        \n    }\n\n    render() {\n        const {\n            mLeagueCode,\n            showContestDetail,\n            activeTab,\n            contestData,\n            clickOnce,\n            showConfirmationPopUp,\n            userTeamListSend,\n            LobyyData,\n            showThankYouModal\n        } = this.state;\n\n        const HeaderOption = {\n            back: true,\n            backForLeagueCode : true,\n        }\n        return (\n\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white have-league-wrapper web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.referral.title}</title>\n                            <meta name=\"description\" content={MetaData.referral.description} />\n                            <meta name=\"keywords\" content={MetaData.referral.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader ref={this.headerRef} {...this.props} HeaderOption={HeaderOption} />\n                        <div>{AppLabels.JOIN_CONTEST}</div>\n                        <div className=\"webcontainer-inner \">\n                            <div className=\"verification-block\">\n                                    <Row>\n                                        <Col>\n                                            <div className=\"onboarding-page-heading-lg\">\n                                                {AppLabels.HAVE_A_LEAGUE_CODE}\n                                            </div>\n                                            <div className=\"onboarding-page-desc\">\n                                                {AppLabels.EMAIL_USE}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"vertical-center-section\">\n                                        <Col xs={12} className=\"vertical-center-element\">\n                                            <FormGroup\n                                                className='input-label-center input-transparent'\n                                                controlId=\"formBasicText\"\n                                            >\n                                                <FloatingLabel\n                                                autoComplete='off'\n                                                    styles={inputStyle}\n                                                    id='league-code'\n                                                    name='league-code'\n                                                    placeholder={AppLabels.ENTER_LEAGUE_CODE}\n                                                    type='text'\n                                                    onChange={this.handleChange.bind(this)}\n                                                    value={mLeagueCode}\n                                                />\n\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                            </div>\n\n\n                    </div>\n                    <div className=\"space-section\"></div>\n                    <div className=\"league-btn-section\">\n                        <Button disabled={(mLeagueCode.length > 3 ? false : true) || clickOnce } onClick={() => this.joinPrivateLeague()} className=\"btn-block btm-fix-btn btn-primary\">{AppLabels.JOIN_CONTEST}</Button>\n                    </div>\n\n                        {showContestDetail &&\n                            <ContestDetailModal showPCError={true} IsContestDetailShow={showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={contestData} activeTabIndex={activeTab} LobyyData={contestData} />\n                        }\n\n                        {showConfirmationPopUp &&\n                             <ConfirmationPopup IsConfirmationPopupShow={this.ConfirmatioPopUpShow} IsConfirmationPopupHide={this.ConfirmatioPopUpHide} TeamListData={userTeamListSend} FixturedContest={contestData} ConfirmationClickEvent={this.ConfirmEvent} CreateTeamClickEvent={this.CreateTeamClickEvent} lobbyDataToPopup={LobyyData} fromContestListingScreen={true} createdLineUp={''} />\n                        }\n\n                        {showThankYouModal &&\n                            <Thankyou ThankyouModalShow={this.ThankYouModalShow} ThankYouModalHide={this.ThankYouModalHide} goToLobbyClickEvent={this.goToLobby} seeMyContestEvent={this.seeMyContest} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/views/ReferralSystem.jsx",["3535","3536","3537","3538","3539","3540"],"import React from 'react';\nimport { Row, Col, Label } from 'react-bootstrap';\nimport Images from '../components/images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { getReferralMasterData } from '../WSHelper/WSCallings';\nimport { Utilities } from '../Utilities/Utilities';\nimport { OnlyCoinsFlow } from '../helper/Constants';\nexport default class ReferralSystem extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            masterData: '',\n            selfBonus: 0,\n            selfReal: 0,\n            slefCoins : 0,\n            userBonus: 0,\n            userReal: 0,\n            userCoin : 0,\n            valueFivethRef: 0,\n            valueTenRef: 0,\n            valueFifRef: 0,\n            valueFriendDeposit : [],\n\n            profileDetail: WSManager.getProfile(),\n        };\n    }\n\n\n    componentWillMount() {\n        this.callRFMasterDataApi();\n    }\n\n    callRFMasterDataApi() {\n        let param = {}\n        getReferralMasterData(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let temp = responseJson.data;\n                this.setState({\n                    masterData: temp,\n                    valueFivethRef: temp[17],\n                    valueTenRef: temp[18],\n                    valueFifRef: temp[19],\n                    valueFriendDeposit : temp[12],\n                }, () => {\n                    this.setState({\n                        selfReal: parseInt(temp[0].real_amount),\n                        selfBonus: parseInt(temp[0].bonus_amount),\n                        slefCoins: parseInt(temp[0].coin_amount),\n                        userReal: parseInt(temp[0].user_real),\n                        userBonus: parseInt(temp[0].user_bonus),\n                        userCoin: parseInt(temp[0].user_coin),\n\n                    })\n                })\n            }\n        })\n\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    goBack = (e) => {\n        this.props.history.goBack();\n    }\n\n    // ******************* OPEN REFFERAL CODE FOR EDIT ******************\n\n    openEditRefCode = (e) => {\n        if (this.state.profileDetail.is_rc_edit == 1) {\n            this.goBack();\n            return;\n        }\n        let passingData = this.state.masterData[16]\n        this.props.history.push('/edit-referral-code', passingData);\n    }\n\n    render() {\n\n        return (\n\n            <div className=\"web-container bg-white p-0 verify-otp refer-friend\">\n\n                <div className=\"registration-header header-wrap\">\n                    <Row>\n                        <Col xs={12} className=\"text-right\">\n                            <span className=\"header-action\" onClick={() => this.goBack()}>\n                                <i className=\"icon-close\" />\n                            </span>\n                        </Col>\n                    </Row>\n                </div>\n                <div className='top-header p-t-60'>\n                    <Label className='referral-system-text'>{AppLabels.REFERRAL_SYSTEM}</Label>\n                    <Label className='referral-system-desp'>{AppLabels.INVITE_FRIEND_WIN_REWARD}</Label>\n                </div>\n                {/* Layer 1 */}\n                <div className='layer-one d-f'>\n                    <div className='left-view image-index'>\n                        <img alt='' src={Images.REFER_FRIEND_SIGNUP} />\n                    </div>\n                    <div>\n                        <div>\n                            <Label className='friend-sign-up-14'>{AppLabels.FRIENDS_SIGNUP}</Label>\n                        </div>\n                        <div className='d-f pt20'>\n                            <Row>\n                                <Col sm>\n                                    <div>\n                                        <Label className='friend-ref-sm pr10'>{AppLabels.YOU_GET}</Label><br></br>\n                                        <div className='pt5 pr10 d-f '>\n                                            {this.state.selfBonus >= this.state.slefCoins && this.state.selfBonus >= this.state.selfReal ? <i className=\"icon-bonus is-blue font-s-12 line-h-14 margin-postion\" /> :\n                                                this.state.selfReal >= this.state.slefCoins && this.state.selfReal >= this.state.selfBonus ? <i className=\"is-blue font-s-10 line-h-16 margin-postion\" >{Utilities.getMasterData().currency_code}</i> :\n                                                    this.state.slefCoins >= this.state.selfReal && this.state.slefCoins >= this.state.selfBonus ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> :\n                                                        ''\n                                            }\n                                            <Label className='price-tag-13 line-h-13'>&nbsp;\n                                                {this.state.selfBonus >= this.state.selfReal && this.state.selfBonus >= this.state.slefCoins ? this.state.selfBonus :\n                                                    this.state.selfReal >= this.state.selfBonus && this.state.selfReal >= this.state.slefCoins ? this.state.selfReal :\n                                                        this.state.slefCoins >= this.state.selfBonus && this.state.slefCoins >= this.state.selfReal ? this.state.slefCoins : ''} </Label>\n                                        </div>\n\n                                    </div>\n                                </Col>\n                                <Col sm>\n                                    <div>\n                                        <img alt='' src={Images.ZIG_LINE} />\n                                    </div>\n                                </Col>\n                                <Col sm>\n                                    <div>\n                                        <Label className='friend-ref-sm pl10'>{AppLabels.YOUR_FRIEND_GETS}</Label><br></br>\n\n\n                                        <span className='pt5 pr10 d-f j-c-c '>\n                                            {this.state.userBonus >= this.state.userCoin && this.state.userBonus >= this.state.userReal ? <i className=\"icon-bonus is-blue font-s-12 line-h-14 margin-postion\" /> :\n                                                this.state.userReal >= this.state.userCoin && this.state.userReal >= this.state.userBonus ? <i className=\"is-blue font-s-10 line-h-16 margin-postion\">{Utilities.getMasterData().currency_code}</i> :\n                                                    this.state.userCoin >= this.state.userReal && this.state.userCoin >= this.state.userBonus ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> :\n                                                        ''\n                                            }\n                                            <Label className='price-tag-13 line-h-13 '>&nbsp;\n                                                {this.state.userBonus >= this.state.userReal && this.state.userBonus >= this.state.userCoin ? this.state.userBonus :\n                                                    this.state.userReal >= this.state.userBonus && this.state.userReal >= this.state.userCoin ? this.state.userReal :\n                                                        this.state.userCoin >= this.state.userBonus && this.state.userCoin >= this.state.userReal ? this.state.userCoin : ''} </Label>\n                                        </span>\n\n\n                                    </div>\n                                </Col>\n                            </Row>\n\n                        </div>\n                    </div>\n                </div>\n                {OnlyCoinsFlow != 1 && <div className='j-c-c a-i-c d-f line-margin'>\n                    <img alt='' src={Images.DOT_LINE} />\n                </div>}\n\n                {/* Layer 2 */}\n                {OnlyCoinsFlow != 1 && <div className='d-f layer-three'>\n                    <div className='align-text-right w-50 pt30'>\n                        <Label className='friend-sign-up-14'>{AppLabels.ON_FRIEND_DEPOSIT}</Label><br></br>\n                        <p className='friend-ref-sm-n'>{AppLabels.YOU_GET}&nbsp;{this.state.valueFriendDeposit != null && this.state.valueFriendDeposit != undefined ? this.state.valueFriendDeposit.real_amount : 0}{AppLabels.OF_YOU}<br></br>{AppLabels.FRIEND_DEPOSIT_MAXIMUM}<br></br>{AppLabels.UPTO}<span className='price-tag-n pt5'> <i className=\" is-blue refer-s-rupee-h\">{Utilities.getMasterData().currency_code}</i>{this.state.valueFriendDeposit != undefined && this.state.valueFriendDeposit != null ? this.state.valueFriendDeposit.max_earning_amount : 0}</span></p>\n\n\n                    </div>\n                    <div className='left-view w-50 image-index'>\n                        <img alt='' src={Images.REFER_FRIEND_DEPOSIT} />\n                    </div>\n\n                </div>}\n                <div className='j-c-c a-i-c d-f line-margin'>\n                    <img alt='' src={Images.DOT_LINE_R} />\n                </div>\n                {/* Layer3 */}\n                <div className='d-f  m-t-20-'>\n                    <div className='bonus-case-view image-index'>\n                        <img alt='' src={Images.REFER_FRIEND_REWARD} />\n                    </div>\n                    <div>\n                        <div>\n                            <Label className='friend-sign-up-14'>{AppLabels.LOYALITY_REWARDS}</Label>\n                        </div>\n                        <div>\n\n                            <div className='d-f pt10'>\n                                <div className='round-line-d'>\n                                    <div className='round-ball' />\n                                    <div className='sqr-line' />\n                                    <div className='round-ball' />\n                                    <div className='sqr-line' />\n                                    <div className='round-ball' />\n                                </div>\n                                <div className='loyalty-level'>\n                                    <div className='h-55 m-t-5-m'>\n                                        <Label className='text-sm'>{AppLabels.FTH_REF}</Label><br></br>\n                                        <div className='d-f'>\n                                            {this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.real_amount && this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.coin_amount ? <Label className='text-mm mt2'><i className=\"icon-bonus is-blue font-s-14 line-h-14\"></i></Label> :\n                                                this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.coin_amount ? <Label className='text-mm mt2'><i className=\"is-blue font-s-10 line-h-14\">{Utilities.getMasterData().currency_code}</i></Label> :\n                                                    this.state.valueFivethRef.coin_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.coin_amount >= this.state.valueFivethRef.real_amount ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> : ''}&nbsp;\n                                            <Label className='price-tag-n'>{this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.real_amount && this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.coin_amount ? this.state.valueFivethRef.bonus_amount :\n                                                this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.coin_amount ? this.state.valueFivethRef.real_amount :\n                                                    this.state.valueFivethRef.coin_amount}</Label>\n                                            &nbsp;\n                                             <Label className='price-tag-n-r'>{this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.real_amount && this.state.valueFivethRef.bonus_amount >= this.state.valueFivethRef.coin_amount ? AppLabels.BONUS_CASH_LOWER :\n                                                this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.bonus_amount && this.state.valueFivethRef.real_amount >= this.state.valueFivethRef.coin_amount ? AppLabels.REAL_CASH_LOWER :\n                                                    AppLabels.COIN_CASH_LOWER}</Label>\n                                        </div>\n\n                                    </div>\n                                    <div className='h-55 mt3'>\n                                        <Label className='text-sm'>{AppLabels.TEN_REF}</Label><br></br>\n                                        <div className='d-f'>\n                                            {this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.real_amount && this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.coin_amount ? <Label className='text-mm mt2'><i className=\"icon-bonus is-blue font-s-14 line-h-14\"></i></Label> :\n                                                this.state.valueTenRef.real_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.real_amount >= this.state.valueTenRef.coin_amount ? <Label className='text-mm mt2'><i className=\"is-blue font-s-10 line-h-14\">{Utilities.getMasterData().currency_code}</i></Label> :\n                                                    this.state.valueTenRef.coin_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.coin_amount >= this.state.valueTenRef.real_amount ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> : ''}&nbsp;\n                                            <Label className='price-tag-n'>{this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.real_amount && this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.coin_amount ? this.state.valueTenRef.bonus_amount :\n                                                this.state.valueTenRef.real_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.real_amount >= this.state.valueTenRef.coin_amount ? this.state.valueTenRef.real_amount :\n                                                    this.state.valueTenRef.coin_amount}</Label>\n                                            &nbsp;\n                                             <Label className='price-tag-n-r'>{this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.real_amount && this.state.valueTenRef.bonus_amount >= this.state.valueTenRef.coin_amount ? AppLabels.BONUS_CASH_LOWER :\n                                                this.state.valueTenRef.real_amount >= this.state.valueTenRef.bonus_amount && this.state.valueTenRef.real_amount >= this.state.valueTenRef.coin_amount ? AppLabels.REAL_CASH_LOWER :\n                                                    AppLabels.COIN_CASH_LOWER}</Label>\n                                        </div>\n\n                                    </div>\n                                    <div className='h-55 mt5'>\n                                        <Label className='text-sm'>{AppLabels.FIF_REF}</Label><br></br>\n                                        <div className='d-f'>\n                                            {this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.real_amount && this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.coin_amount ? <Label className='text-mm mt2'><i className=\"icon-bonus is-blue font-s-14 line-h-14\"></i></Label> :\n                                                this.state.valueFifRef.real_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.real_amount >= this.state.valueFifRef.coin_amount ? <Label className='text-mm mt2'><i className=\"is-blue font-s-10 line-h-14\">{Utilities.getMasterData().currency_code}</i></Label> :\n                                                    this.state.valueFifRef.coin_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.coin_amount >= this.state.valueFifRef.real_amount ? <img alt='' src={Images.IC_COIN} className='icon-height-is' /> : ''}&nbsp;\n                                            <Label className='price-tag-n'>{this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.real_amount && this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.coin_amount ? this.state.valueFifRef.bonus_amount :\n                                                this.state.valueFifRef.real_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.real_amount >= this.state.valueFifRef.coin_amount ? this.state.valueFifRef.real_amount :\n                                                    this.state.valueFifRef.coin_amount}</Label>\n                                            &nbsp;\n                                             <Label className='price-tag-n-r'>{this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.real_amount && this.state.valueFifRef.bonus_amount >= this.state.valueFifRef.coin_amount ? AppLabels.BONUS_CASH_LOWER :\n                                                this.state.valueFifRef.real_amount >= this.state.valueFifRef.bonus_amount && this.state.valueFifRef.real_amount >= this.state.valueFifRef.coin_amount ? AppLabels.REAL_CASH_LOWER :\n                                                    AppLabels.COIN_CASH_LOWER}</Label>\n                                        </div>\n\n                                    </div>\n\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className='round-big-btn' onClick={() => this.openEditRefCode()}>\n                    <Label>{AppLabels.GOT_IT}</Label>\n                </div>\n\n            </div>\n\n        );\n    }\n}","/var/www/html/framework/frontend/src/views/CreateContest.jsx",["3541","3542","3543","3544","3545","3546","3547","3548","3549","3550","3551","3552","3553","3554","3555","3556","3557","3558","3559","3560","3561","3562","3563","3564","3565","3566","3567","3568","3569","3570","3571","3572","3573","3574","3575","3576","3577","3578","3579","3580","3581","3582","3583","3584","3585","3586","3587","3588","3589","3590","3591","3592","3593","3594","3595","3596","3597","3598","3599","3600","3601","3602","3603","3604","3605","3606","3607","3608","3609","3610","3611","3612","3613","3614","3615","3616","3617","3618","3619","3620","3621","3622","3623","3624","3625"],"import React from 'react';\nimport { Row, Col, Button, FormGroup, Table } from 'react-bootstrap';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyleLeft } from '../helper/input-style';\nimport Select from 'react-select';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport ls from 'local-storage';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../helper/MetaData\";\nimport ConfirmationPopup from '../Modals/ConfirmationPopup';\nimport Thankyou from '../Modals/Thankyou';\nimport { Utilities } from '../Utilities/Utilities';\nimport CustomHeader from '../components/CustomHeader';\nimport { AppSelectedSport } from '../helper/Constants';\nimport { getUserTeams, joinContest, getMatchByLeague, createPrivateContest, createContestMasterData } from '../WSHelper/WSCallings';\nimport Images from '../components/images';\n\nvar mEntryFee = 0;\nvar mMinTeamSize = 0;\nvar mSiteRake = 0;\nvar mPrizePool = 0;\nvar mCalculation = 0;\nvar ErrorMsgTime = 2500;\nvar cAmount = 0;\nvar globalThis = undefined;\n\nexport default class CreateContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            leagueId: '',\n            leaguesArray: [],\n            selectedLeague: '',\n            siteRake: '',\n            salaryCap: '',\n            formats: '',\n            matchesArray: [],\n            selectedMatch: '',\n            entryFee: '',\n            numberOfWinners: '',\n            showPrizeList: false,\n            minTeamSize: '',\n            maxTeamSize: '',\n            prizePool: '',\n            prizeDistributionDetail: [],\n            disableWinner: '',\n            contestName: '',\n            prizeCalculated: false,\n            prizeDistributed: false,\n            isEntryFeeChanged: true,\n            master_min_size: 2,\n            TeamList: [],\n            userTeamListSend: [],\n            entryFeeOpt: [],\n            showConfirmationPopUp: false,\n            FixtureData: '',\n            showThankYouModal: false,\n            isValidPrizeStructure: true,\n            allowCollection: Utilities.getMasterData().allow_collection,\n            selEntryFee: ''\n        }\n    }\n\n    componentWillMount() {\n        globalThis = this;\n\n    }\n    componentDidMount() {\n        this.callCreateContestMasterData();\n        this.setState({\n            entryFeeOpt: [\n                {\n                    value: 1,\n                    label: Utilities.getMasterData().currency_code\n                },\n                {\n                    value: 2,\n                    label: <img src={Images.IC_COIN} alt=\"\"/>\n                }\n            ]\n        },()=>{\n            this.setState({\n                selEntryFee: this.state.entryFeeOpt[0]\n            })\n        })\n    }\n\n    componentDidUpdate() {\n        this.handleEntryfeeChange.bind(this);\n        this.handleMaxTeamChange.bind(this);\n        this.handleMinTeamSizeChange.bind(this);\n        this.handleWinnerChange.bind(this);\n        this.validateValuesAndJoinGame.bind(this)\n    }\n\n    validateValuesAndJoinGame() {\n        const {\n            numberOfWinners, selectedLeague, selectedMatch, entryFee, minTeamSize, maxTeamSize, contestName\n        } = this.state\n\n        if (selectedLeague == \"\") {\n            Utilities.showToast(AppLabels.SELECT_LEAGUE_ERROR, ErrorMsgTime);\n        } else if (selectedMatch == \"\") {\n            Utilities.showToast(AppLabels.SELECT_MATCH, ErrorMsgTime);\n        }\n        else if (minTeamSize == \"\") {\n            Utilities.showToast(AppLabels.SELECT_MINIMUM_TEAM, ErrorMsgTime);\n        } else if (maxTeamSize == \"\") {\n            Utilities.showToast(AppLabels.SELECT_MAX_TEAMS, ErrorMsgTime);\n        }\n        else if (parseInt(minTeamSize) < parseInt(this.state.master_min_size)) {\n            Utilities.showToast(AppLabels.MIN_TEAM_CONDITION + ' ' + this.state.master_min_size, ErrorMsgTime);\n        }\n        else if (parseInt(maxTeamSize) < parseInt(minTeamSize)) {\n            Utilities.showToast(AppLabels.MAX_TEAM_CONDITION, ErrorMsgTime);\n        } else if (entryFee == \"\") {\n            Utilities.showToast(AppLabels.SELECT_ENTRY_FEE, ErrorMsgTime);\n        } else if (numberOfWinners == \"\") {\n            Utilities.showToast(AppLabels.SELECT_WINNERS_COUNT, ErrorMsgTime);\n        } else if (contestName == \"\") {\n            Utilities.showToast(AppLabels.SELECT_CONTEST_NAME, ErrorMsgTime);\n        } else if (contestName.length < 3) {\n            Utilities.showToast(AppLabels.SELECT_CONTEST_NAME_MIN_CONDITION, ErrorMsgTime);\n        } else if (parseInt(numberOfWinners) > parseInt(minTeamSize)) {\n            Utilities.showToast(AppLabels.WINNERS_CONDITION, ErrorMsgTime);\n        }\n        else if (!this.checkValidPrizeStructure()) {\n\n            Utilities.showToast(AppLabels.PRIZE_STRUCTURE_ERROR, ErrorMsgTime);\n        }\n        else {\n            this.callCreateUserContest();\n        }\n\n    }\n    callCreateContestMasterData() {\n        let param = {\n            \"sports_id\": AppSelectedSport\n        }\n        createContestMasterData(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                let League = []\n                var leaguesForKeyValue = responseJson.data.league_list\n                for (var obj of leaguesForKeyValue) {\n                    obj['label'] = obj.league_name;\n                    obj['value'] = obj.league_id;\n                }\n                League = leaguesForKeyValue\n\n                this.setState({\n                    leaguesArray: League,\n                    siteRake: responseJson.data.site_rake,\n                    salaryCap: responseJson.data.salary_cap\n                })\n            }\n        })\n    }\n\n    callGetMatchesByLeagueId() {\n        let param = {\n            \"league_id\": this.state.selectedLeague.league_id\n        }\n\n        getMatchByLeague(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                var matchesForKeyValue = responseJson.data;\n                let Matches = [];\n                for (var matchObj of matchesForKeyValue) {\n                    matchObj['label'] = matchObj.home + \" vs \" + matchObj.away + \" - \" + Utilities.getFormatedDateTime(matchObj.season_scheduled_date, \"MMM DD, YY - hh:mm a\")\n                    matchObj['value'] = matchObj.season_game_uid\n                    Matches.push(matchObj);\n                }\n                this.setState({\n                    matchesArray: Matches\n                })\n            }\n        })\n    }\n\n    callCreateUserContest() {\n        let isCoins = Utilities.getMasterData().allow_coin == \"1\"\n        let isReal =  Utilities.getMasterData().currency_code != \"\" \n        let prizeType = (isReal && isCoins) ? (this.state.selEntryFee.value == 2 ? \"2\" : \"1\") : isReal ? \"1\" : isCoins ? \"2\" : \"\";\n        let currType = (isReal && isCoins) ? this.state.selEntryFee.value : isReal ? 1 : isCoins ? 2 : \"\";\n        if (!this.state.isLoading) {\n            this.setState({ isLoading: true })\n            let param = {\n                \"sports_id\": AppSelectedSport,\n                \"league_id\": this.state.selectedLeague.league_id,\n                \"collection_master_id\": this.state.selectedMatch.collection_master_id,\n                \"prize_type\": prizeType,\n                \"salary_cap\": this.state.salaryCap,\n                \"prize_pool\": this.state.prizePool,\n                \"number_of_winners\": this.state.numberOfWinners,\n                \"entry_fee\": this.state.entryFee,\n                \"size_min\": this.state.minTeamSize,\n                \"size\": this.state.maxTeamSize,\n                \"prize_distribution_detail\": this.state.prizeDistributionDetail,\n                \"season_game_uid\": [this.state.selectedMatch.season_game_uid],\n                \"season_scheduled_date\": this.state.selectedMatch.season_scheduled_date,\n                \"game_name\": this.state.contestName,\n                \"game_desc\": \"test\",\n                \"currency_type\": currType\n            }\n\n            createPrivateContest(param).then((responseJson) => {\n                this.setState({ isLoading: false })\n                if (responseJson.response_code == WSC.successCode) {\n                    this.getUserLineUpListApi(responseJson.data)\n                }\n            })\n        }\n    }\n\n    ConfirmatioPopUpShow = (data) => {\n        this.setState({\n            showConfirmationPopUp: true,\n\n        });\n    }\n\n    ConfirmatioPopUpHide = () => {\n        this.setState({\n            showConfirmationPopUp: false,\n        });\n    }\n\n    getUserLineUpListApi = async (contestData) => {\n        let param = {\n            \"sports_id\": this.state.selectedLeague.sports_id,\n            \"collection_master_id\": contestData.collection_master_id,\n        }\n\n        let user_data = ls.get('profile');\n        var user_unique_id = 0;\n        if (user_data && user_data.user_unique_id) {\n            user_unique_id = user_data.user_unique_id;\n        }\n        var api_response_data = await getUserTeams(param, user_unique_id);\n        if (api_response_data) {\n            this.setState({\n                TeamList: api_response_data,\n                userTeamListSend: api_response_data\n            })\n\n            if (this.state.userTeamListSend) {\n                let tempList = [];\n                this.state.userTeamListSend.map((data, key) => {\n\n                    tempList.push({ value: data, label: data.team_name })\n                    return '';\n                })\n\n                this.setState({ userTeamListSend: tempList });\n            }\n\n            let urlData = contestData;\n            let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n            dateformaturl = new Date(dateformaturl);\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n            if (api_response_data.length > 0) {\n                this.setState({ showConfirmationPopUp: true, FixtureData: contestData })\n            } else {\n                WSManager.clearLineup();\n                let lineupPath = '';\n                if (urlData.home) {\n                    lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                }\n                else {\n                    if (contestData.macth_list && contestData.macth_list.length == 1) {\n                        lineupPath = '/lineup/' + urlData.macth_list[0].home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                    }\n                    else {\n                        let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_')\n                        lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                    }\n                }\n                if (!contestData.today && contestData.match_list && contestData.match_list.length > 0) {\n                    contestData['today'] = contestData.match_list[0].today || '';\n                    contestData['game_starts_in'] = contestData.match_list[0].game_starts_in || '';\n                }\n                this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: contestData, LobyyData: contestData, resetIndex: 1 } })\n            }\n        }\n    }\n\n    createTeamAndJoin = (dataFromConfirmFixture, dataFromConfirmLobby) => {\n\n        WSManager.clearLineup();\n        let urlData = dataFromConfirmFixture\n        // let urlData = dataFromConfirmFixture.match_list[0]\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n        let lineupPath = '';\n        if (urlData.home) {\n            lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n        }\n        else {\n            let pathurl = '';\n            if (urlData.match_list && urlData.match_list.length == 1) {\n                lineupPath = '/lineup/' + urlData.match_list[0].home + \"-vs-\" + urlData.match_list[0].away + \"-\" + dateformaturl\n            }\n            else {\n                pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n            }\n        }\n\n        this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: dataFromConfirmFixture, LobyyData: dataFromConfirmFixture, resetIndex: 1 } })\n    }\n\n    ConfirmEvent = (dataFromConfirmPopUp) => {\n\n        if (dataFromConfirmPopUp.selectedTeam.lineup_master_id != null && dataFromConfirmPopUp.selectedTeam.lineup_master_id == \"\" || dataFromConfirmPopUp.selectedTeam == \"\") {\n            Utilities.showToast(AppLabels.SELECT_NAME_FIRST, 1000);\n        } else {\n            var currentEntryFee = 0;\n            currentEntryFee = dataFromConfirmPopUp.entryFeeOfContest;\n            if (currentEntryFee <= dataFromConfirmPopUp.balanceAccToMaxPercent) {\n                this.CallJoinGameApi(dataFromConfirmPopUp);\n            } else {\n                WSManager.setFromConfirmPopupAddFunds(true);\n                WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                WSManager.setPaymentCalledFrom(\"SelectCaptainList\")\n                this.props.history.push({ pathname: '/add-funds', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true });\n            }\n        }\n    }\n\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        let param = {\n            \"contest_id\": dataFromConfirmPopUp.FixturedContestItem.contest_id,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        \n        joinContest(param).then((responseJson) => {\n\n            if (responseJson.response_code == WSC.successCode) {\n                this.ConfirmatioPopUpHide();\n                setTimeout(() => {\n                    this.ThankYouModalShow()\n                }, 300);\n                WSManager.clearLineup();\n            } else {\n                Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n            }\n        })\n    }\n\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' });\n    }\n\n    seeMyContest = () => {\n        this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n    }\n\n    handleLeagueChange = (selectedOption) => {\n        this.setState({\n            selectedLeague: selectedOption,\n            selectedMatch: \"\"\n        })\n\n        setTimeout(() => {\n            this.callGetMatchesByLeagueId()\n        }, 100);\n    }\n\n    handleMatchChange = (selectedOption) => {\n        this.setState({ selectedMatch: selectedOption })\n    }\n\n    handleEntryFeeType=(selType)=>{\n        this.setState({\n            selEntryFee: selType\n        },()=>{\n            this.createWinnersList();\n        },100)\n    }\n\n    handleEntryfeeChange = (e) => {\n        const value = e.target.value;\n\n        this.setState({\n            isEntryFeeChanged: false\n        })\n\n        if (value == \"\") {\n            this.setState({\n                disableWinner: false,\n                numberOfWinners: \"\",\n            })\n        } else if (value == 0) {\n            this.setState({\n                numberOfWinners: 1,\n                disableWinner: true,\n            })\n        } else {\n            this.setState({\n                disableWinner: false,\n                numberOfWinners: \"\",\n            })\n        }\n\n        setTimeout(() => {\n            this.setState({ entryFee: value, isEntryFeeChanged: true });\n            this.getPrizePool();\n            setTimeout(() => {\n                this.createWinnersList();\n            }, 100);\n        }, 100);\n    }\n\n    handleWinnerChange = (e) => {\n        let { minTeamSize } = this.state;\n        const value = e.target.value;\n        let showPrizeList = false;\n        if (parseInt(value) <= parseInt(minTeamSize)) {\n            showPrizeList = true;\n        }\n        else {\n            Utilities.showToast(AppLabels.WINNERS_CONDITION, ErrorMsgTime);\n            showPrizeList = false;\n        }\n        this.setState({ showPrizeList: showPrizeList, numberOfWinners: value }, () => {\n\n            this.getPrizePool();\n            setTimeout(() => {\n                this.createWinnersList();\n            }, 100);\n        });\n    }\n\n    handleMinTeamSizeChange = (e) => {\n        let { numberOfWinners } = this.state;\n        const value = e.target.value;\n\n        let showPrizeList = false;\n        if (parseInt(numberOfWinners) <= parseInt(value)) {\n            showPrizeList = true;\n        }\n        else {\n            showPrizeList = false;\n        }\n\n        this.setState({ minTeamSize: value, showPrizeList: showPrizeList }, () => {\n\n            setTimeout(() => {\n                this.getPrizePool();\n                this.createWinnersList();\n            }, 100);\n        });\n    }\n\n    handleContestNameChange = (e) => {\n        const value = e.target.value;\n        this.setState({ contestName: value });\n    }\n    onKeyDown = (e) => {\n        if (e.keyCode === 8 || e.keyCode === 46) {\n            this.setState({ isDeletePer: true })\n        } else {\n            this.setState({ isDeletePer: false })\n        }\n    }\n\n    onBlurInput = (e, perIndex) => {\n        let previousList = this.state.prizeDistributionDetail;\n        previousList.map((item, index) => {\n            if (index == perIndex) {\n                previousList[index].isValid = item.isValid;\n                previousList[index].per = parseFloat(item.per || 0).toFixed(2);\n                previousList[index].amount = parseFloat(item.amount || 0).toFixed(2);\n            }\n        });\n        this.setState({ prizeDistributionDetail: previousList }, function () {\n            this.checkValidPrizeStructure();\n        });\n    }\n\n    handleWinningPerChange = (e, perIndex) => {\n        this.setState({ isValidPrizeStructure: true })\n        if (e && typeof perIndex != \"undefined\") {\n            const { prizePool } = this.state\n            let tempPrizePool = parseFloat(prizePool);\n            let previousList = this.state.prizeDistributionDetail;\n            let targetValue = e.target.value;\n\n            if(this.state.isDeletePer){\n                let upamount = parseFloat((tempPrizePool * targetValue / 100).toFixed(2))\n                previousList.map((item, index) => {\n                    if (index == perIndex) {\n                        previousList[index].isValid = false;\n                        previousList[index].per = targetValue;\n                        previousList[index].amount = upamount;\n                    }\n                });\n                return true;\n            }\n            let floatRegExp = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$')\n            if (!floatRegExp.test(targetValue)) {\n                previousList.map((item, index) => {\n                    if (index == perIndex) {\n                        previousList[index].isValid = false;\n                        previousList[index].per = 0.0;\n                        previousList[index].amount = 0.0;\n                    }\n                });\n                this.setState({ prizeDistributionDetail: previousList }, function () {\n                    this.checkValidPrizeStructure();\n                });\n                this.setState({ isValidPrizeStructure: false }, function () {\n                    Utilities.showToast(AppLabels.Please_enter_valid_percentage_value, ErrorMsgTime);\n                });\n                return false;\n            }\n            let updatedPerValue = floatRegExp.test(targetValue) ? targetValue : parseFloat(targetValue).toFixed(2);\n            if (updatedPerValue > 100.00) {\n                this.setState({ isValidPrizeStructure: false }, function () {\n                    Utilities.showToast(AppLabels.Please_enter_percentage_value_less_100, ErrorMsgTime);\n                });\n                return false;\n            }\n\n            let updatedAmountValue = parseFloat((tempPrizePool * updatedPerValue / 100).toFixed(2))\n            let totalPer = updatedPerValue;\n            let totalAmount = updatedAmountValue;\n            previousList.map((item, index) => {\n                if (index == perIndex) {\n                    previousList[index].isValid = true;\n                    previousList[index].per = updatedPerValue;\n                    previousList[index].amount = updatedAmountValue;\n                }\n                else {\n                    totalPer = parseFloat(totalPer) + parseFloat(previousList[index].per);\n                    totalAmount = parseFloat(totalAmount) + parseFloat((tempPrizePool * previousList[index].per / 100).toFixed(2));\n                }\n            });\n\n            this.setState({ prizeDistributionDetail: previousList }, function () {\n                this.checkValidPrizeStructure();\n            });\n        }\n    }\n\n    checkValidPrizeStructure() {\n        let previousList = this.state.prizeDistributionDetail;\n        let totalPer = 0;\n        let totalAmount = 0;\n        let validFlag = this.state.isValidPrizeStructure;\n        const { prizePool } = this.state\n        let entryFeeType = this.state.selEntryFee;\n        let tempPrizePool = entryFeeType==2 ? parseInt(prizePool) : parseFloat(prizePool).toFixed(2);\n        previousList.map((item, index) => {\n\n            totalPer = entryFeeType==2 ? (parseInt(totalPer) + parseInt(previousList[index].per)) : (parseFloat(totalPer) + parseFloat(previousList[index].per));\n            totalAmount = entryFeeType==2 ? parseInt(totalAmount) + parseInt((tempPrizePool * previousList[index].per / 100)) : (parseFloat(totalAmount) + parseFloat((tempPrizePool * previousList[index].per / 100).toFixed(2)));\n\n        });\n\n        cAmount = entryFeeType==2 ? parseInt(totalAmount) : (totalAmount).toFixed(2);\n        //check total percentage and total prize pool amount\n\n        if (entryFeeType==1 && totalPer != 100.00) {\n            Utilities.showToast(AppLabels.WINNING_PER_EQ100, ErrorMsgTime);\n            validFlag = false;\n        }\n        else if (entryFeeType==1 && parseFloat(totalAmount).toFixed(2) != parseFloat(tempPrizePool).toFixed(2)) {\n            Utilities.showToast(AppLabels.WINNING_AMT_CONDITION + ' ' + tempPrizePool, ErrorMsgTime);\n            validFlag = false;\n        }\n        else if (entryFeeType==2 && totalPer >= 100) {\n            Utilities.showToast(AppLabels.WINNING_PER_EQLESS100, ErrorMsgTime);\n            validFlag = false;\n        }\n        else if (entryFeeType==2 && parseInt(totalAmount) != parseInt(tempPrizePool)) {\n            Utilities.showToast(AppLabels.WINNING_AMT_CONDITION + ' ' + tempPrizePool, ErrorMsgTime);\n            validFlag = false;\n        }\n        else {\n            validFlag = true;\n        }\n\n        this.setState({ isValidPrizeStructure: validFlag }, function () {\n        });\n\n        return validFlag;\n\n    }\n    handleMaxTeamChange = (e) => {\n        const value = e.target.value;\n        this.setState({ maxTeamSize: value });\n    }\n\n    getPrizePool() {\n        let entryFeeType = this.state.selEntryFee.value;\n        mEntryFee = this.state.entryFee != \"\" ? this.state.entryFee : 0;\n        mMinTeamSize = this.state.minTeamSize != \"\" ? this.state.minTeamSize : 0;\n        mSiteRake = entryFeeType == 2 ? 0 : this.state.siteRake != \"\" ? this.state.siteRake : 0;\n        mCalculation = mEntryFee * mMinTeamSize;\n        if (mCalculation > 0) {\n            mPrizePool = mCalculation - ((mSiteRake * mCalculation) / 100);\n        } else {\n            mPrizePool = 0;\n        }\n        this.setState({\n            prizePool: mPrizePool.toFixed(2),\n            prizeCalculated: true\n        })\n        // return mPrizePool.toFixed(2);\n    }\n\n    createWinnersList() {\n        const { prizePool, numberOfWinners, } = this.state\n        let entryFeeType = this.state.selEntryFee.value;\n        let tempPrizePool = entryFeeType == 2 ? parseInt(prizePool) : parseFloat(prizePool);\n        let individualPer = entryFeeType == 2 ? parseInt(100 / numberOfWinners) : parseFloat((100 / numberOfWinners).toFixed(2));\n        let individualAmount = entryFeeType == 2 ? parseInt(tempPrizePool * individualPer / 100) : parseFloat((tempPrizePool * individualPer / 100).toFixed(2));\n\n        var firstPer = 0\n        var lastPer = 0\n\n        if ((individualPer * numberOfWinners) < 100.00) {\n            if(entryFeeType == 2){\n                firstPer = parseInt(100.00 - (individualPer * numberOfWinners))\n            }\n            else{\n                firstPer = parseFloat((100.00 - (individualPer * numberOfWinners)).toFixed(2))\n            }\n        } else if ((individualPer * numberOfWinners) > 100.00) {\n            if(entryFeeType == 2){\n                lastPer = parseInt((individualPer * numberOfWinners) - 100.00)\n            }\n            else{\n                lastPer = parseFloat(((individualPer * numberOfWinners) - 100.00).toFixed(2))\n            }\n        }\n\n        var firstAmount = 0\n        var lastAmount = 0\n\n        if ((individualAmount * numberOfWinners) < tempPrizePool) {\n            if(entryFeeType == 2){\n                firstAmount = parseInt((tempPrizePool - (individualAmount * numberOfWinners)))\n            }\n            else{\n                firstAmount = parseFloat((tempPrizePool - (individualAmount * numberOfWinners)).toFixed(2))\n            }\n        } else if ((individualAmount * numberOfWinners) > tempPrizePool) {\n            if(entryFeeType == 2){\n                lastAmount = parseInt(((individualAmount * numberOfWinners) - tempPrizePool))\n            }\n            else{\n                lastAmount = parseFloat(((individualAmount * numberOfWinners) - tempPrizePool).toFixed(2))\n            }\n        }\n\n        var tempPrizeArraY = []\n        for (var i = 1; i <= numberOfWinners; i++) {\n            let prizeDictionary = {\n                \"isValid\": true,\n                \"min\": i,\n                \"max\": i,\n                \"per\": i == 1 ? (individualPer + firstPer).toFixed(2) : i == numberOfWinners ? (individualPer - lastPer).toFixed(2) : individualPer.toFixed(2),\n                \"amount\": entryFeeType == 1 ? (i == 1 ? parseInt(individualAmount + firstAmount) : i == numberOfWinners ? parseInt(individualAmount - lastAmount) : parseInt(individualAmount)) : (i == 1 ? (individualAmount + firstAmount).toFixed(2) : i == numberOfWinners ? (individualAmount - lastAmount).toFixed(2) : individualAmount.toFixed(2)),\n            }\n            tempPrizeArraY.push(prizeDictionary)\n        }\n        cAmount = entryFeeType == 2 ?parseInt(tempPrizePool) : tempPrizePool;\n        this.setState({\n            prizeDistributionDetail: tempPrizeArraY,\n            prizeDistributed: true\n        })\n    }\n\n    static reload() {\n        if (globalThis && window.location.pathname.startsWith(\"/create-contest\")) {\n            globalThis.callCreateContestMasterData();\n        }\n    }\n\n    render() {\n        globalThis = this;\n        const HeaderOption = {\n            back: true,\n            title: AppLabels.Create_a_Contest,\n            hideShadow: false\n        }\n\n        const {\n            leaguesArray,\n            selectedLeague,\n            matchesArray,\n            selectedMatch,\n            entryFee,\n            numberOfWinners,\n            minTeamSize,\n            maxTeamSize,\n            prizePool,\n            disableWinner,\n            contestName,\n            prizeCalculated,\n            prizeDistributed,\n            isEntryFeeChanged,\n            showConfirmationPopUp,\n            userTeamListSend,\n            FixtureData,\n            showThankYouModal,\n            entryFeeOpt,\n            selEntryFee\n        } = this.state;\n\n        let showEntryFeeWith = (Utilities.getMasterData().currency_code != \"\" && Utilities.getMasterData().allow_coin == \"1\") ? 1 : Utilities.getMasterData().currency_code != \"\" ? 2 : Utilities.getMasterData().allow_coin == \"1\" ? 3 : 2\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container create-contest transparent-header web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.createcontest.title}</title>\n                            <meta name=\"description\" content={MetaData.createcontest.description} />\n                            <meta name=\"keywords\" content={MetaData.createcontest.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className=\"webcontainer-inner\">\n                            <div className='parent-container'>\n                                <div className=\"verification-block-left-align\">\n                                    <Row>\n                                        <Col xs={12}>\n                                            <FormGroup className='input-label-center-align input-transparent font-14 league-select'>\n                                                <div className=\"select-league\">\n                                                    <label className='label-text'>{AppLabels.SELECT_LEAGUE}</label>\n                                                    <div className=\"genderStyle\">\n                                                        <Select\n                                                            onChange={this.handleLeagueChange}\n                                                            options={leaguesArray}\n                                                            classNamePrefix=\"secondary\"\n                                                            className=\"select-secondary minusML10\"\n                                                            value={selectedLeague}\n                                                            placeholder=\"--\"\n                                                            isSearchable={false} isClearable={false}\n                                                            theme={(theme) => ({\n                                                                ...theme,\n                                                                borderRadius: 0,\n                                                                colors: {\n                                                                    ...theme.colors,\n                                                                    primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                                },\n                                                            })}\n                                                        />\n                                                    </div>\n                                                    <span className=\"select-arr\"><i className=\"icon-arrow-down\"></i></span>\n                                                    <div className='league-border col-sm-12' />\n                                                </div>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"verification-block-left-align\">\n                                    <Row>\n                                        <Col xs={12}>\n                                            <FormGroup className='input-label-center-align input-transparent font-14 match-list'>\n                                                <div className=\"select-match\">\n                                                    <label className='label-text'>{AppLabels.MATCHES}</label>\n                                                    <div className=\"genderStyle\">\n                                                        <Select\n                                                            onChange={this.handleMatchChange}\n                                                            options={matchesArray}\n                                                            classNamePrefix=\"secondary\"\n                                                            className=\"select-secondary minusML10\"\n                                                            value={selectedMatch}\n                                                            placeholder=\"--\"\n                                                            isSearchable={false} isClearable={false}\n                                                            theme={(theme) => ({\n                                                                ...theme,\n                                                                borderRadius: 0,\n                                                                colors: {\n                                                                    ...theme.colors,\n                                                                    primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                                },\n                                                            })}\n                                                        />\n                                                    </div>\n                                                    <span className=\"select-arr\"><i className=\"icon-arrow-down\"></i></span>\n                                                    <div className='match-border col-sm-12' />\n                                                </div>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                </div>\n\n                                <div className=\"verification-block-left-align\">\n                                    <Row>\n                                        <Col xs={5} className=\"input-label-spacing-create-contest\">\n                                            <FormGroup\n                                                className='input-label-center-align input-transparent font-16'\n                                                controlId=\"formBasicText\">\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='min-team-size'\n                                                    name='min-team-size'\n                                                    placeholder={AppLabels.Min_team_size}\n                                                    type='number'\n                                                    onChange={this.handleMinTeamSizeChange.bind(this)}\n                                                    value={minTeamSize}\n                                                />\n                                            </FormGroup>\n                                            <span className=\"bordered-span\"></span>\n                                        </Col>\n                                        <Col xs={2} className=\"input-label-spacing-create-contest\"></Col>\n                                        <Col xs={5} className=\"input-label-spacing-create-contest\">\n                                            <FormGroup\n                                                className='input-label-center-align input-transparent font-16'\n                                                controlId=\"formBasicText\"\n                                            >\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='max-team-size'\n                                                    name='max-team-size'\n                                                    placeholder={AppLabels.Max_team_size}\n                                                    type='number'\n                                                    onChange={this.handleMaxTeamChange.bind(this)}\n                                                    value={maxTeamSize}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"verification-block-left-align\">\n                                    <Row>\n                                        <Col xs={5} className=\"input-label-spacing-create-contest\" style={{zIndex: 2}}>\n                                            <FormGroup\n                                                className='input-label-center-align input-transparent font-16'\n                                                controlId=\"formBasicText\">\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='entry-fee'\n                                                    name='entry-fee'\n                                                    placeholder={showEntryFeeWith == 2 ? AppLabels.Entry_fee + '(' + Utilities.getMasterData().currency_code + ')' : AppLabels.Entry_fee}\n                                                    type='number'\n                                                    onChange={this.handleEntryfeeChange.bind(this)}\n                                                    value={entryFee}\n                                                />\n                                                {\n                                                    showEntryFeeWith == 1 &&\n                                                    <>\n                                                        <Select\n                                                        onChange={this.handleEntryFeeType}\n                                                        options={entryFeeOpt}\n                                                        classNamePrefix=\"secondary\"\n                                                        className=\"select-secondary minusML10 sel-entry-type\"\n                                                        value={selEntryFee}\n                                                        placeholder=\"--\"\n                                                        isSearchable={false} \n                                                        isClearable={false}\n                                                        theme={(theme) => ({\n                                                            ...theme,\n                                                            borderRadius: 0,\n                                                            colors: {\n                                                                ...theme.colors,\n                                                                primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                            },\n                                                        })}\n                                                    />\n                                                    <span className=\"select-arr select-arr-entry-type\"><i className=\"icon-arrow-down\"></i></span>\n                                                    </>\n                                                }\n                                                {\n                                                    showEntryFeeWith == 3 &&\n                                                    <img src={Images.COINIMG} alt=\"\"/>\n                                                }\n                                            </FormGroup>\n                                            <span className=\"bordered-span\"></span>\n                                        </Col>\n                                        <Col xs={2} className=\"input-label-spacing-create-contest\"></Col>\n                                        <Col xs={5} className=\"input-label-spacing-create-contest\">\n\n                                            <FormGroup\n                                                className={entryFee == 0 && entryFee != '' ? 'default-floting input-label-center-align input-transparent font-16' : 'input-label-center-align input-transparent font-16'}\n                                                controlId=\"formBasicText\"\n                                            >\n                                                {isEntryFeeChanged && <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='no-winners'\n                                                    name='no-winners'\n                                                    placeholder={AppLabels.Number_of_winners}\n                                                    type='number'\n                                                    onChange={this.handleWinnerChange.bind(this)}\n                                                    value={this.state.numberOfWinners + \"\"}\n                                                    disabled={this.state.disableWinner}\n                                                />}\n                                                {!isEntryFeeChanged && <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='no-winners'\n                                                    name='no-winners'\n                                                    placeholder={AppLabels.Number_of_winners}\n                                                    type='number'\n                                                    onChange={this.handleWinnerChange.bind(this)}\n                                                    value={this.state.numberOfWinners + \"\"}\n                                                    disabled={this.state.disableWinner}\n                                                />}\n\n                                            </FormGroup>\n\n\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"verification-block-left-align\">\n                                    <Row>\n                                        <Col xs={12} >\n                                            <FormGroup\n                                                className='input-label-center-align input-transparent font-16 contest-name-input'\n                                                controlId=\"formBasicText\">\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='contest-name'\n                                                    name='contest-name'\n                                                    placeholder={AppLabels.Contest_Name}\n                                                    type='text'\n                                                    onChange={this.handleContestNameChange.bind(this)}\n                                                    value={contestName}\n                                                />\n                                            </FormGroup>\n                                            <span className=\"bordered-span\"></span>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"prize-pool\">\n                                    {AppLabels.PRIZE_POOL}&nbsp;\n                                    <span> \n                                        {\n                                            selEntryFee.value == 2 ?\n                                            <>\n                                                <img src={Images.IC_COIN} alt=\"\" width='16px' /> {prizePool != \"\" || !prizePool == undefined ? parseInt(prizePool) : 0}\n                                            </>\n                                            :\n                                            <>\n                                                {Utilities.getMasterData().currency_code} {prizePool != \"\" || !prizePool == undefined ? prizePool : 0.00}\n                                            </> \n                                        }\n                                    </span>\n                                </div>\n                                {\n                                    this.state.showPrizeList && prizeCalculated && prizeDistributed && <div className=\"prize-detail\">\n                                        <div className=\"prize-heading\"><span>{AppLabels.Prize_Distribution}</span></div>\n                                        <Table>\n                                            <thead>\n                                                <tr>\n                                                    <th className=\"text-left\">{AppLabels.RANK}</th>\n                                                    <th className=\"text-left\">{AppLabels.WINNING} %</th>\n                                                    <th className=\"text-left\">{AppLabels.WINNING}</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {\n                                                    this.state.prizeDistributionDetail && this.state.prizeDistributionDetail.map((WinnersListItem, index) => {\n                                                        return (\n                                                            <tr key={index}>\n                                                                <td className={'winning-amt ' + (index == this.state.prizeDistributionDetail.length - 1 ? ' pb20' : '')}>{\"#\" + WinnersListItem.min}</td>\n                                                                <td className={'text-left ' + (index == this.state.prizeDistributionDetail.length - 1 ? ' pb20' : '')}>\n                                                                    <div className=\"win-amt-input\" style={{ backgroundColor: '#fff', borderRadius: 4, overflow: 'hidden', border: (WinnersListItem.isValid ? 'none' : '0.5px solid red') }}>\n                                                                        <input\n                                                                            autoComplete='off'\n                                                                            className='winning-perc'\n                                                                            id={'winning-per-' + index}\n                                                                            name={'winning-per-' + index}\n                                                                            type='text'\n                                                                            onChange={(e) => this.handleWinningPerChange(e, index)}\n                                                                            value={WinnersListItem.per}\n                                                                            onKeyDown={this.onKeyDown}\n                                                                            onBlur={(e) => this.onBlurInput(e, index)}\n                                                                        />\n                                                                        <i className=\"icon-edit\"></i>\n                                                                    </div>\n                                                                </td>\n                                                                <td className={\"text-left winning-amt \" + (index == this.state.prizeDistributionDetail.length - 1 ? ' pb20' : '')}>\n                                                                    {\n                                                                        selEntryFee.value == 2 ? \n                                                                            <> <img src={Images.IC_COIN} alt=\"\"  width='14px' /> {parseInt(WinnersListItem.amount)}</>\n                                                                            :\n                                                                            <>{Utilities.getMasterData().currency_code} {WinnersListItem.amount}</>\n                                                                    }\n                                                                </td>\n                                                            </tr>\n                                                        );\n                                                    })\n                                                }\n                                                <tr>\n                                                    <td className=\"text-center pt10 pl15 total-container\" colSpan=\"3\">\n                                                        <span className='total-text'>{AppLabels.TOTAL}</span>\n                                                        {selEntryFee.value == 2 \n                                                            ? \n                                                            <img src={Images.IC_COIN} alt=\"\"  width='14px' />\n                                                            :\n                                                            Utilities.getMasterData().currency_code\n                                                        }\n                                                        {cAmount != \"\" || !cAmount == undefined ? cAmount : 0.00}\n                                                    </td>\n                                                </tr>\n                                            </tbody>\n                                        </Table>\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"page-footer\">\n                            <Button onClick={() => this.validateValuesAndJoinGame()} bsStyle=\"primary\" className={\"btn btn-block\" + (!this.state.isValidPrizeStructure ? ' disabled' : '')} disabled={!this.state.isValidPrizeStructure}>{AppLabels.CREATE_SHARE}</Button>\n                        </div>\n\n                        {showConfirmationPopUp &&\n                            <ConfirmationPopup IsConfirmationPopupShow={this.ConfirmatioPopUpShow} IsConfirmationPopupHide={this.ConfirmatioPopUpHide} TeamListData={userTeamListSend} FixturedContest={FixtureData} ConfirmationClickEvent={this.ConfirmEvent} CreateTeamClickEvent={this.createTeamAndJoin} lobbyDataToPopup={FixtureData} fromContestListingScreen={true} createdLineUp={\"\"} />\n                        }\n\n                        {showThankYouModal &&\n                            <Thankyou ThankyouModalShow={this.ThankYouModalShow} ThankYouModalHide={this.ThankYouModalHide} goToLobbyClickEvent={this.goToLobby} seeMyContestEvent={this.seeMyContest} />\n                        }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n","/var/www/html/framework/frontend/src/views/Roster.jsx",["3626","3627","3628","3629","3630","3631","3632","3633","3634","3635","3636","3637","3638","3639","3640","3641","3642","3643","3644","3645","3646","3647","3648","3649","3650","3651","3652","3653","3654","3655","3656","3657","3658","3659","3660","3661","3662","3663","3664","3665","3666","3667","3668","3669","3670","3671","3672","3673","3674","3675","3676","3677","3678","3679","3680","3681","3682","3683","3684","3685","3686","3687","3688","3689","3690","3691","3692","3693","3694","3695","3696","3697","3698","3699","3700","3701","3702","3703","3704","3705","3706","3707","3708","3709","3710","3711","3712","3713","3714","3715","3716","3717","3718","3719","3720","3721","3722","3723","3724","3725","3726","3727","3728","3729","3730","3731"],"import React from 'react';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { getFixtureDetail, getFixtureDetailMultiGame, getLineupMasterData, getRosterList, getNewTeamName, getUserLineUpDetail } from \"../WSHelper/WSCallings\";\nimport { Utilities, _isUndefined, _isEmpty, _Map, _sumBy, _cloneDeep } from '../Utilities/Utilities';\nimport { SportsIDs } from \"../JsonFiles\";\nimport Images from '../components/images';\nimport { Helmet } from \"react-helmet\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport ls from 'local-storage';\nimport WSManager from \"../WSHelper/WSManager\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport PlayerCardModal from '../Modals/PlayerCard';\nimport MetaData from \"../helper/MetaData\";\nimport CustomHeader from '../components/CustomHeader';\nimport CollectionSlider from \"./CollectionSlider\";\nimport FieldViewRight from \"./FieldViewRight\";\n\nimport FilterByTeam from '../components/filterByteam';\nimport { AppSelectedSport, globalLineupData, SELECTED_GAMET,GameType } from '../helper/Constants';\n\nexport default class Roster extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teamName: '',\n            activeClass: 'normal',\n            sort_field: 'salary',//fantasy_score\n            sort_order: 'DESC',//ASC\n            isSearchable: false,\n            showPlayerCard: false,\n            playerDetails: {},\n            leagueId: '',\n            collectionMasterId: '',\n            masterData: '',\n            allPosition: [],\n            maxPlayers: '',\n            SelectedPlayerPosition: 'WK',\n            lineupArr: ls.get('Lineup_data') ? ls.get('Lineup_data') : [],\n            isSelectPostion: 1,\n            teamList: [],\n            rosterList: [],\n            allRosterList: [],\n            TotalSalary: 0,\n            TotalSalaryUsed: 0,\n            AvgSalaryPlayer: 0,\n            hasMore: true,\n            isTableLoaderShow: false,\n            salaryCapUsed: 0,\n            selectedTeamOption: '',\n            contestListData: '',\n            LobyyData: '',\n            FixturedContest: '',\n            maxPlayerPerTeam: '',\n            PlayerSearch: '',\n            isFrom: '',\n            teamData: '',\n            rootDataItem: '',\n            isFromMyTeams: false,\n            ifFromSwitchTeamModal: false,\n            TeamMyContestData: '',\n            isClone: false,\n            isCollectionEnable: false,\n            showFilterByTeam: false,\n            showBtmBtn: '',\n            oldScrollOffset: 0,\n            soff: 0,\n            scrollStatus: '',\n            fixtureSelectedList: [],\n            isEditEnable: false,\n            isPlayingAnnounced : 0,\n            isPlayingSelected: 0\n        };\n        this._timeout = null;\n        this.checkScrollStatus = this.checkScrollStatus.bind(this);\n        this.headerRef = React.createRef();\n    }\n\n\n    getLineupForEdit() {\n        let lineupID = this.props.location.state.teamitem.lineup_master_id ? this.props.location.state.teamitem.lineup_master_id :this.props.location.state.lineup_master_id \n        let keyy = lineupID + this.props.location.state.collection_master_id + 'lineup';\n\n        if (globalLineupData[keyy]) {\n            \n            if (!ls.get('Lineup_data') || ls.get('Lineup_data').length === 0) {\n                if (this.state.lineupArr.length === 0 || this.state.lineupArr[0].lineup_master_id != lineupID) {\n                    this.setState({\n                        lineupArr: _cloneDeep(globalLineupData[keyy])\n                    })\n                }\n            }\n        } else {\n            let param = {\n                \"lineup_master_id\": lineupID,\n                \"collection_master_id\": this.props.location.state.collection_master_id,\n                \"sports_id\": AppSelectedSport,\n            }\n\n            getUserLineUpDetail(param).then((responseJson) => {\n                if (responseJson && responseJson.response_code == WSC.successCode) {\n                    globalLineupData[keyy] = _cloneDeep(responseJson.data.lineup);\n                    this.setState({\n                        lineupArr: responseJson.data.lineup\n                    })\n                }\n            })\n        }\n    }\n\n    getFixtureDetails = async (collectionMasterId) => {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"collection_master_id\": collectionMasterId,\n        }\n        let methodApi = SELECTED_GAMET == GameType.MultiGame ? getFixtureDetailMultiGame : getFixtureDetail\n        var api_response_data = await methodApi(param);\n\n        if (api_response_data) {\n            this.setState({\n                LobyyData: api_response_data\n            });\n        }\n    }\n    PlayerCardShow = (e, item) => {\n        e.stopPropagation();\n        item.collection_master_id = this.state.collectionMasterId;\n        item.player_team = item.team_abbreviation || item.team_abbr;\n        this.setState({\n            playerDetails: item,\n            showPlayerCard: true\n        });\n    }\n\n    PlayerCardHide = () => {\n        this.setState({\n            showPlayerCard: false,\n            playerDetails: {}\n        });\n    }\n\n    handleChange = (selectedOption) => {\n        this.setState({ fixtureSelectedList: [], showRosterFilter: false, selectedTeamOption: selectedOption, PlayerSearch: '' }, () => {\n            this.applyTeamFilter(selectedOption.value)\n        });\n\n    }\n\n    getFilterList = (filtureFixture) => {\n\n        this.setState({ fixtureSelectedList: filtureFixture, selectedTeamOption: '' }, () => {\n            this.applyTeamFilter('')\n        })\n    }\n\n    applyTeamFilter(team) {\n        let { allRosterList, SelectedPlayerPosition, fixtureSelectedList } = this.state;\n        let tempRosterList = allRosterList;\n        if (fixtureSelectedList && fixtureSelectedList.length > 0) {\n            tempRosterList = [];\n            _Map(fixtureSelectedList, (fItem) => {\n                let tmpFilterArray = allRosterList.filter((player, index, array) => {\n                    if (player.position == SelectedPlayerPosition) {\n                        return (player.team_abbr == fItem.home || player.team_abbreviation == fItem.home || player.team_abbr == fItem.away || player.team_abbreviation == fItem.away);\n                    }\n                });\n                tempRosterList = [...tempRosterList, ...tmpFilterArray]\n            })\n        } else if (team) {\n            tempRosterList = allRosterList.filter((player, index, array) => {\n                if (player.position == SelectedPlayerPosition) {\n                    return (player.team_league_id == team.team_league_id || player.team_abbr == team.team_abbr || player.team_abbreviation == team.team_abbreviation);\n                }\n            });\n        }\n        else {\n            tempRosterList = allRosterList.filter((player, index, array) => {\n                return player.position == this.state.SelectedPlayerPosition;\n            });\n        }\n        this.setState({ rosterList: tempRosterList }, () => {\n        })\n    }\n\n    fetchLineupMasterData = async () => {\n        if (globalLineupData[this.state.collectionMasterId]) {\n            this.parseMasterData(globalLineupData[this.state.collectionMasterId]);\n        } else {\n            let param = {\n                \"league_id\": this.state.leagueId,\n                \"sports_id\": AppSelectedSport,\n                \"collection_master_id\": this.state.collectionMasterId,\n            }\n\n            var api_response_data = await getLineupMasterData(param);\n            if (api_response_data) {\n                this.parseMasterData(api_response_data);\n                globalLineupData[this.state.collectionMasterId] = api_response_data;\n            }\n        }\n    }\n\n    parseMasterData(api_response_data) {\n        const { LobyyData } = this.state;\n        this.setState({\n            masterData: api_response_data,\n            maxPlayers: api_response_data.team_player_count,\n            maxPlayerPerTeam: api_response_data.max_player_per_team,\n            TotalSalary: api_response_data.salary_cap,\n            salaryCapUsed: api_response_data.salary_cap,\n            allPosition: api_response_data.all_position,\n            teamList: api_response_data.team_list,\n            SelectedPlayerPosition: _isEmpty(this.props.location.state.SelectedPlayerPosition) ? api_response_data.all_position[0].position : this.props.location.state.SelectedPlayerPosition\n\n        }, () => {\n            if (LobyyData && !LobyyData.home && this.state.teamList.length > 1) {\n                LobyyData.away = this.state.teamList[0].team_abbr || this.state.teamList[0].team_abbreviation;\n                LobyyData.home = this.state.teamList[1].team_abbr || this.state.teamList[1].team_abbreviation;\n            }\n\n            this.getAllRoster(this.state.SelectedPlayerPosition);\n            if (this.state.teamList) {\n                let tempList = [];\n                tempList.push({ value: \"\", label: \"All\" })\n                this.state.teamList.map((data, key) => {\n                    tempList.push({ value: data, label: data.team_name })\n                    return '';\n                })\n                this.setState({ teamList: tempList });\n            }\n            if (this.headerRef && this.headerRef.current && this.headerRef.current.GetHeaderProps && this.headerRef.current.GetHeaderProps != null) {\n                this.headerRef.current.GetHeaderProps(\"lineup\", this.state.lineupArr, this.state.masterData, _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, this.state.FixturedContest, this.state.isFrom, this.state.rootDataItem, this.state.teamData ? this.state.teamData : this.state.teamName);\n            }\n        })\n    }\n\n    SendRosterPosition = (item) => {\n        this.setState({ rosterOffset: 0 })\n        let tempRosterList = this.state.allRosterList;\n        if (this.state.sort_field == 'salary') {\n            this.setState({ rosterList: tempRosterList.sort((a, b) => (this.state.sort_order == 'ASC' ? a.salary - b.salary : b.salary - a.salary)) })\n        }\n        else {\n            this.setState({ rosterList: tempRosterList.sort((a, b) => (this.state.sort_order == 'ASC' ? a.fantasy_score - b.fantasy_score : b.fantasy_score - a.fantasy_score)) })\n        }\n        this.setState({\n            isSelectPostion: item.position_order,\n            SelectedPlayerPosition: item.position\n        }, () => {\n            if (this.state.selectedTeamOption.value)\n                this.applyTeamFilter(this.state.selectedTeamOption.value);\n            else\n                this.applyTeamFilter('');\n        })\n        this.setState({ PlayerSearch: '' })\n    }\n    checkIfRequiredMinimumCreiteria = (player) => {\n        let leftEmptyPlace = this.state.maxPlayers - (this.state.lineupArr.length)\n        var miniPlaceLeft = 0\n        for (var playerPosition of this.state.allPosition) {\n            let arrPositionOfSelectedPlayer = this.filterLineypArrByPosition(playerPosition)\n            if (playerPosition.position != \"ALL\") {\n                let leftForPos = playerPosition.number_of_players - arrPositionOfSelectedPlayer.length\n                if (leftForPos > 0) {\n                    miniPlaceLeft = miniPlaceLeft + leftForPos;\n                }\n            }\n        }\n        if (miniPlaceLeft >= leftEmptyPlace) {\n            return false;\n        }\n        return true;\n    }\n    removePlayerFromLineup = (player) => {\n        let lineupArr = this.state.lineupArr;\n        if (this.checkPlayerExistInLineup(player)) {\n            var index = 0;\n            for (var selectedPlayer of this.state.lineupArr) {\n                if (selectedPlayer.player_uid == player.player_uid) {\n                    lineupArr.splice(index, 1);\n                }\n                index++\n            }\n        }\n        this.setState({ lineupArr: lineupArr })\n    }\n    _availableBudget = (LineupsList) => {\n        let Budget = _sumBy(LineupsList, function (o) { return parseFloat(o.salary, 10); })\n        let BudgetFinal = this.state.TotalSalary - Budget;\n        return BudgetFinal\n    }\n    _availableAvarage = (LineupsList) => {\n        let avg = (this.state.maxPlayers - LineupsList.length) === 0 ? 0 : this._availableBudget(LineupsList) / (this.state.maxPlayers - LineupsList.length)\n        return avg.toFixed(2)\n    }\n    addPlayerToLineup = (player) => {\n\n        let lineupArr = this.state.lineupArr;\n        let arrAllSelectedPlayer = lineupArr\n        let CurrentPosition = ''\n        for (var pos of this.state.allPosition) {\n            if (pos.position == player.position) {\n                CurrentPosition = pos;\n                break;\n            }\n        }\n        let maxPlayerForPlayerPosition = Number(CurrentPosition.max_player_per_position)\n        let arrPositionOfSelectedPlayer = this.filterLineypArrByPosition(player)\n        if (this.checkPlayerExistInLineup(player)) {\n            this.removePlayerFromLineup(player)\n        }\n        else if (arrAllSelectedPlayer.length < this.state.maxPlayers && (arrPositionOfSelectedPlayer.length < maxPlayerForPlayerPosition)) {\n\n            if (this.checkIfRequiredMinimumCreiteria(player) || arrPositionOfSelectedPlayer.length < CurrentPosition.number_of_players) {\n\n                player[\"player_role\"] = '0'\n                player[\"is_player_card\"] = '0'\n                if (this.checkPlayerTeamValid(player)) {\n                  \n                    lineupArr.push(player);\n                    let arrPositionOfSelectedPlayer = this.filterLineypArrByPosition(player)\n                    let maxPlayerForPlayerPosition = Number(CurrentPosition.max_player_per_position)\n                    if (this.state.lineupArr.length != this.state.maxPlayers) {\n                        for (var index = 0; index < this.filterPositionPlayer(player).length; index++) {\n                            let UnknowPlayer = this.filterPositionPlayer(player)[index]\n                            let arrUnknowPlayerSelectedPlayer = this.filterLineypArrByPosition(UnknowPlayer)\n                            if (arrPositionOfSelectedPlayer.length == maxPlayerForPlayerPosition && arrUnknowPlayerSelectedPlayer.length == 0) {\n                                this.SendRosterPosition(UnknowPlayer)\n                                break;\n                            }\n                        }\n                    }\n                }\n                else {\n                    Utilities.showToast(AppLabels.MAX_PLAYER_TEAMWISE + (this.state.maxPlayerPerTeam) + AppLabels.MAX_PLAYER_TEAMWISE1, 5000);\n                }\n\n            } else {\n                if (this.filterPositionPlayer(player).length > 0) {\n                    let UnknowPlayer = this.filterPositionPlayer(player)[0]\n                    this.SendRosterPosition(UnknowPlayer);\n                }\n            }\n        }\n\n        this.setState({ lineupArr: lineupArr })\n        ls.set('Lineup_data', lineupArr)\n        if (this.headerRef)\n            this.headerRef.current.GetHeaderProps(\"lineup\", this.state.lineupArr, this.state.masterData, _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, this.state.FixturedContest, this.state.isFrom, this.state.rootDataItem, this.state.teamData ? this.state.teamData : this.state.teamName);\n    }\n\n    checkPlayerTeamValid(player) {\n        var isCount = 0;\n        for (var selectedPlayer of this.state.lineupArr) {\n            if (selectedPlayer.team_league_id == player.team_league_id) {\n                isCount = isCount + 1;\n            }\n        }\n\n        return isCount < this.state.maxPlayerPerTeam\n    }\n\n    checkPlayerExistInLineup(player) {\n        var isExist = false;\n        for (var selectedPlayer of this.state.lineupArr) {\n            if (selectedPlayer.player_uid == player.player_uid) {\n                isExist = true\n                selectedPlayer['fantasy_score'] = player.fantasy_score\n                break\n            }\n        }\n        return isExist\n\n    }\n    fetchMoreData = () => {\n        this.getAllRoster(this.state.SelectedPlayerPosition)\n    }\n    getAllRoster = async (position, data) => {\n\n        let param = {\n            \"league_id\": this.state.leagueId ? this.state.leagueId : this.props.location.state.league_id,\n            \"sports_id\": AppSelectedSport,\n            \"collection_master_id\": this.state.collectionMasterId\n        }\n\n        var api_response_data = await getRosterList(param);\n        if (api_response_data) {\n            let sortedArry = api_response_data.sort((a, b) => b.salary - a.salary);\n            this.setState({\n                rosterList: sortedArry,\n                allRosterList: sortedArry,\n                isTableLoaderShow: false,\n                isPlayingAnnounced: sortedArry.length > 0 ? sortedArry[0].playing_announce : 0\n            }, () => {\n                this.applyTeamFilter('');\n            })\n        }\n    }\n    filterLineypArrByPosition = (player) => {\n        let arrPositionOfSelectedPlayer = this.state.lineupArr.filter(function (item) {\n            return item.position == player.position\n        })\n        return arrPositionOfSelectedPlayer\n\n\n\n    }\n\n    NextSubmit = () => {\n        let urlData = _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n        let selectCaptainPath = '';\n        if (urlData.match_list && urlData.match_list.length == 1) {\n            selectCaptainPath = '/select-captain/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: selectCaptainPath.toLowerCase(), state: { teamName: this.state.teamName, SelectedLineup: this.state.lineupArr, MasterData: this.state.masterData, LobyyData: _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, FixturedContest: this.state.FixturedContest, isFrom: this.state.isFromRoster ? this.state.isFromRoster : this.state.isFrom, team: this.state.TeamMyContestData, rootDataItem: this.state.rootDataItem, isFromMyTeams: this.state.isFromMyTeams, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, isClone: this.state.isClone, lineup_master_contest_id: this.props.location.state.lineup_master_contest_id, teamitem: this.props.location.state.teamitem } })\n        }\n        else {\n            let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_').toLowerCase();\n            selectCaptainPath = '/select-captain/' + pathurl + \"-\" + dateformaturl\n            this.props.history.push({ pathname: selectCaptainPath.toLowerCase(), state: { teamName: this.state.teamName, SelectedLineup: this.state.lineupArr, MasterData: this.state.masterData, LobyyData: _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, FixturedContest: this.state.FixturedContest, isFrom: this.state.isFromRoster ? this.state.isFromRoster : this.state.isFrom, team: this.state.TeamMyContestData, rootDataItem: this.state.rootDataItem, isFromMyTeams: this.state.isFromMyTeams, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, isClone: this.state.isClone, lineup_master_contest_id: this.props.location.state.lineup_master_contest_id, teamitem: this.props.location.state.teamitem ,lineup_master_id: this.props.location.state.lineup_master_id,team_name: this.props.location.state.team_name} })\n        }\n\n        //Analytics Calling \n        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'createteam');\n    }\n\n    //Logic Dynamic Start\n    isPostionSelected = (player) => {\n        let CurrentPosition = this.getTabPosition(player);\n        for (let pos of this.state.allPosition) {\n            if (pos.position == player.position) {\n                CurrentPosition = pos;\n                break;\n            }\n        }\n        if (this.returnValue(player, CurrentPosition)) {\n            return true\n        }\n        return false\n    }\n\n    getTabPosition(player) {\n\n        for (let pos of this.state.allPosition) {\n            if (pos.position == player.position) {\n                return pos;\n            }\n        }\n        return '';\n    }\n\n    returnValue(player, CurrentPosition) {\n        let arrPositionOfSelectedPlayer = this.filterLineypArrByPosition(player)\n        let minPlayerForPlayerPosition = Number(CurrentPosition.number_of_players)\n        let maxPlayerForPlayerPosition = Number(CurrentPosition.max_player_per_position)\n\n        if (this.state.lineupArr.length == this.state.maxPlayers) {\n            return true\n        }\n        else {\n            for (var index = 0; index < this.filterPositionPlayer(player).length; index++) {\n                let UnknowPlayer = this.filterPositionPlayer(player)[index]\n                let arrUnknowPlayerSelectedPlayer = this.filterLineypArrByPosition(UnknowPlayer)\n                if (arrPositionOfSelectedPlayer.length == maxPlayerForPlayerPosition && arrUnknowPlayerSelectedPlayer.length == 0) {\n                    return true\n                }\n                else if (arrPositionOfSelectedPlayer.length >= minPlayerForPlayerPosition && this.state.lineupArr.length == (this.state.maxPlayerPerTeam - this.minimumRemainngPlayer(player)) && (arrPositionOfSelectedPlayer.length == this.getTabPosition(player).max_player_per_position)) {\n                    return true\n                }\n            }\n        }\n    }\n    filterPositionPlayer(player) {\n        var arrPosition = []\n        for (var pos of this.state.allPosition) {\n            if (pos.position != player.position && this.returnSelectedPlayer(pos.position) < pos.number_of_players) {\n                arrPosition.push(pos);\n            }\n        }\n        return arrPosition\n    }\n    minimumRemainngPlayer(player) {\n        let minUnknowPlayerForPlayerPosition = 0;\n        for (var pos of this.state.allPosition) {\n            if (pos.position != player.position && this.returnSelectedPlayer(pos.position) < pos.number_of_players) {\n                minUnknowPlayerForPlayerPosition = minUnknowPlayerForPlayerPosition + Number(pos.number_of_players)\n            }\n        }\n        return minUnknowPlayerForPlayerPosition\n    }\n    returnSelectedPlayer(position) {\n\n        var index = 0;\n        for (var selectedPlayer of this.state.lineupArr) {\n            if (selectedPlayer.position == position) {\n                index++\n            }\n        }\n        return index;\n    }\n\n    checkScrollStatus() {\n        if (this._timeout) { //if there is already a timeout in process cancel it\n            clearTimeout(this._timeout);\n        }\n        this._timeout = setTimeout(() => {\n            this._timeout = null;\n            this.setState({\n                scrollStatus: 'scroll stopped',\n                showBtmBtn: ''\n            });\n        }, 700);\n        if (this.state.scrollStatus !== 'scrolling') {\n            this.setState({\n                scrollStatus: 'scrolling'\n            });\n        }\n    }\n\n    onScrollList = (event) => {\n        let scrollOffset = window.pageYOffset;\n        this.checkScrollStatus();\n        this.setState({\n            soff: scrollOffset\n        })\n        if (this.state.oldScrollOffset < scrollOffset) {\n            this.setState({\n                showBtmBtn: 'hideBottomBtn',\n                oldScrollOffset: scrollOffset\n            })\n        } else {\n            this.setState({\n                showBtmBtn: '',\n                oldScrollOffset: scrollOffset\n            })\n        }\n    }\n\n    //Logic Dynamic End\n    componentWillMount = () => {\n        this.setLocationStateData();\n        if (SELECTED_GAMET != GameType.MultiGame && SELECTED_GAMET != GameType.Free2Play) {\n            WSManager.setPickedGameType(GameType.DFS);\n        }\n        window.addEventListener('scroll', this.onScrollList);\n    }\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.onScrollList);\n    }\n\n    setLocationStateData() {\n        if (this.props.location && this.props.location.state) {\n\n            let data = this.props.location.state.nextStepData ? this.props.location.state.nextStepData : this.props.location.state\n            const { FixturedContest, league_id, SelectedPlayerPosition, PositionOrder, LobyyData, collection_master_id,\n                from, rootDataItem, isFromMyTeams, ifFromSwitchTeamModal, isFrom, isClone, isCollectionEnable, team } = data;\n            this.setState({\n                leagueId: FixturedContest ? FixturedContest.is_network_contest && FixturedContest.is_network_contest == 1 ? LobyyData.league_id :  FixturedContest.league_id : league_id,\n                collectionMasterId: FixturedContest ? FixturedContest.collection_master_id : collection_master_id,\n                SelectedPlayerPosition: SelectedPlayerPosition || 'WK',\n                isSelectPostion: PositionOrder || 1,\n                contestListData: FixturedContest,\n                LobyyData: LobyyData ? LobyyData : this.getFixtureDetails(collection_master_id),\n                FixturedContest: FixturedContest,\n                isFrom: !_isUndefined(from) && from == 'editView' || from == 'MyTeams' || from == 'MyContestSwitchModal' || from == 'MyContest' ? from : !_isUndefined(from) && from == 'contestJoin' ? from : '',\n                teamData: !_isUndefined(from) && from == 'editView' ? team : '',\n                rootDataItem: !_isUndefined(from) && from == 'editView' ? rootDataItem : !_isUndefined(from) && from == 'contestJoin' ? rootDataItem : '',\n                isFromMyTeams: !_isUndefined(isFromMyTeams) ? isFromMyTeams : false,\n                ifFromSwitchTeamModal: !_isUndefined(ifFromSwitchTeamModal) ? ifFromSwitchTeamModal : false,\n                TeamMyContestData: !_isUndefined(from) || !_isUndefined(isFrom) && from == 'MyContest' || isFrom == 'MyContest' ? team : !_isUndefined(isFrom) && isFrom == 'editView' ? team : '',\n                isClone: !_isUndefined(isClone) ? isClone : false,\n                isCollectionEnable: isCollectionEnable ? isCollectionEnable : false,\n            }, () => {\n                this.fetchLineupMasterData();\n                this.getLobbyData();\n                if (this.props.location.state.from == 'editView') {\n                    this.getLineupForEdit();\n                    this.setState({\n                        isEditEnable: true\n                    })\n                }\n            })\n        }\n    }\n\n\n    getLobbyData() {\n\n        if (this.state.LobyyData) {\n            if (this.headerRef && this.headerRef.current && this.headerRef.current.GetHeaderProps && this.headerRef.current.GetHeaderProps != null) {\n                this.headerRef.current.GetHeaderProps(\"lineup\", this.state.lineupArr, this.state.masterData, _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, this.state.FixturedContest, this.state.isFrom, this.state.rootDataItem, this.state.teamData ? this.state.teamData : this.state.teamName);\n            }\n            if (this.state.isFrom != 'editView' || this.state.isClone) {\n                this.getTeamName();\n            }\n            else if (this.state.isFrom == 'editView' && !this.state.isClone) {\n                this.setState({ teamName: this.props.location.state.teamitem.team_name })\n            }\n\n        }\n        else {\n            setTimeout(() => {\n                this.getLobbyData()\n            }, 500);\n        }\n\n    }\n\n    getTeamName() {\n        let param = {\n            \"collection_master_id\": this.state.LobyyData.collection_master_id ? this.state.LobyyData.collection_master_id : this.state.FixturedContest.collection_master_id,\n        }\n        getNewTeamName(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({ teamName: responseJson.data.team_name }, () => {\n                    if (this.headerRef && this.headerRef.current.GetHeaderProps && this.headerRef.current.GetHeaderProps != null) {\n                        this.headerRef.current.GetHeaderProps(\"lineup\", this.state.lineupArr, this.state.masterData, _isEmpty(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, this.state.FixturedContest, this.state.isFrom, this.state.rootDataItem, this.state.teamData, responseJson.data.team_name);\n                    }\n                })\n\n            }\n        })\n    }\n\n    showRosterFilter = () => {\n        this.setState({\n            showRosterFilter: true\n        })\n    }\n\n    showSlider = (maxPlayers, fillTab) => {\n        let i = 0;\n        let tempArry = [];\n        let divStyle = { width: `calc(100%/${maxPlayers})` };\n        for (i; i < maxPlayers; i++) {\n            tempArry.push(\n                <div key={i}\n                    className={\n                        (i < fillTab ? \"active\" : '') +\n                        (fillTab == (i + 1) ? \" show-number\" : '')\n                    }\n                    style={divStyle}\n                >\n                    <span>{i + 1}</span>\n                </div>\n            )\n        }\n        return tempArry;\n    }\n\n    showActivePlayerPick = (item) => {\n        if (this.state.isSelectPostion == item.position_order) {\n            return <React.Fragment>\n                {AppLabels.PICK} {item.number_of_players}-{item.max_player_per_position} {item.position_display_name}\n            </React.Fragment>\n        }\n    }\n\n    GoToFieldView = () => {\n        const {LobyyData } = this.state;\n        let urlParams = '';\n        if (LobyyData && LobyyData.match_list && LobyyData.match_list.length == 1) {\n            urlParams = Utilities.setUrlParams(LobyyData);\n        }\n        else {\n            urlParams = Utilities.replaceAll(LobyyData.collection_name, ' ', '_')\n        }\n        let fieldViewPath = '/field-view/' + urlParams;\n        this.props.history.push({ pathname: fieldViewPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.masterData, LobyyData: this.state.LobyyData, FixturedContest: this.state.FixturedContest, isFrom: this.state.isFrom, rootDataItem: this.state.rootDataItem, team: this.state.team, team_name: this.state.teamName, resetIndex: 1 } })\n    }\n\n    getPlayerCount = (type) => {\n        var pcount = 0;\n        _Map(this.state.lineupArr, (item) => {\n            if (item.team_abbr === type || item.team_abbreviation === type) {\n                pcount = pcount + 1;\n            }\n        })\n        return pcount;\n    }\n\n    handlePlayingChange = () => {\n        this.setState({\n            isPlayingSelected: this.state.isPlayingSelected == 0 ? 1 : 0\n        })\n    }\n\n    render() {\n        var {\n            LobyyData,\n            showPlayerCard,\n            playerDetails,\n            allPosition,\n            maxPlayers,\n            TotalSalary,\n            isSelectPostion,\n            rosterList,\n            hasMore,\n            isTableLoaderShow,\n            isEditEnable,\n            soff\n        } = this.state;\n        const HeaderOption = {\n            back: true,\n            fixture: false,\n            fixtureDate: true,\n            hideShadow: SELECTED_GAMET == GameType.MultiGame ? true : false,\n            filter: false,\n            title: '',\n            showAlertRoster: true,\n            resetIndex: this.props.location.state.nextStepData ? this.props.location.state.nextStepData.resetIndex : this.props.location.state.resetIndex,\n            showRosterFilter: this.showRosterFilter,\n            showFilterByTeam: true,\n            themeHeader: true\n        }\n        let match_list = LobyyData && LobyyData.match_list ? (LobyyData.match_list || []) : LobyyData ? LobyyData : [];\n        let lineupArr = this.state.lineupArr ? this.state.lineupArr : [];\n        if (this.state.isPlayingAnnounced == 1) {\n            let playingRoster = rosterList.filter((obj) => { return obj.is_playing == 1 });\n            rosterList = this.state.isPlayingSelected == 1 ? playingRoster : rosterList;\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n\n                    <div className={\"web-container roster-web-container fixed-sub-header web-container-fixed white-bg \" + ((SELECTED_GAMET == GameType.MultiGame && LobyyData && match_list.length > 1) ? ' lineup-with-collection' : '') + `${this.state.activeClass}`}>\n\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.lineup.title}</title>\n                            <meta name=\"description\" content={MetaData.lineup.description} />\n                            <meta name=\"keywords\" content={MetaData.lineup.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader ref={this.headerRef} {...this.props} HeaderOption={HeaderOption} />\n\n\n                        <div className={\"header-curve \" + (soff > 100 ? 'small-v' : '')}></div>\n                        <div className={\"roster-header \" + (soff > 100 ? 'fixed-v' : '')}>\n                            <div className=\"step-section\">\n                                <div className={\"inner-step-section \" + (!isEditEnable ? 'pre-active' : '')}>\n                                    <span className=\"step-circle\"></span>\n                                    <div className=\"label\">{AppLabels.SELECT_MATCH_TEXT}</div>\n                                </div>\n                                <div className={\"inner-step-section \" + (!isEditEnable ? 'active-step' : ' pre-active')}>\n                                    <span className=\"step-circle\">{!isEditEnable ? '2' : ''}</span>\n                                    <div className=\"label active-label\">{AppLabels.CREATE_TEAM}</div>\n                                </div>\n                                <div className={\"inner-step-section \" + (isEditEnable ? 'active-step' : 'non-active-step')}>\n                                    <span className=\"step-circle\">{isEditEnable ? '3' : ''}</span>\n                                    <div className=\"label\">{AppLabels.JOIN_CONTEST}</div>\n                                </div>\n                            </div>\n                            <div className=\"max-player-alowed-section\">\n                                {soff <= 100 && <span className=\"max-player-inner-section\">{AppLabels.MAX} {this.state.maxPlayerPerTeam} {AppLabels.PLAYERS_FROM_A_TEAM}</span>}\n                            </div>\n                            <div className=\"whole-team-info\">\n                                <div className=\"collection-slider-wrapper-roster\">\n                                    {SELECTED_GAMET == GameType.MultiGame &&\n                                        <CollectionSlider getFilterList={this.getFilterList} FixtureSelected={this.state.fixtureSelectedList} contestSliderData={this.state.LobyyData} collectionInfo={false} isFrom={\"Roster\"} />\n                                    }\n                                </div>\n                                <div className=\"player-selected\">\n                                    <div className=\"label\">{AppLabels.PLAYERS}</div>\n                                    <div className=\"player-count\">\n                                        <div className=\"span\">{(lineupArr.length)}</div><span className=\"total-c\">/{maxPlayers}</span>\n                                    </div>\n                                </div>\n                                {\n                                    SELECTED_GAMET != GameType.MultiGame &&\n                                    <div className=\"team-player-info\">\n                                        <div className=\"home-team-info\">\n                                            <img src={Utilities.teamFlagURL(match_list.home_flag)} alt=\"\" />\n                                            <div className=\"team-nm\">\n                                                {LobyyData.home}\n\n                                            </div>\n                                            <div className=\"team-player-count\">{this.getPlayerCount(match_list.length > 0 ? match_list[0].home : LobyyData.home)}</div>\n                                        </div>\n                                        <div className=\"away-team-info\">\n                                            <div className=\"team-nm\">\n                                                {LobyyData.away}\n                                            </div>\n                                            <div className=\"team-player-count\">{this.getPlayerCount(match_list.length > 0 ? match_list[0].away : LobyyData.away)}</div>\n                                            <img src={Utilities.teamFlagURL(match_list.away_flag)} alt=\"\" />\n                                        </div>\n                                    </div>\n                                }\n                                <div className=\"salary-count\">\n                                    <div className=\"label\">{AppLabels.SALARY_LEFT}</div>\n                                    <div className=\"player-count\">\n                                        <div className=\"span\">{Number((this._availableBudget(lineupArr) || 0).toFixed(2))}</div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"player-count-slider\">\n                                {this.showSlider(maxPlayers, lineupArr.length)}\n                            </div>\n                            <div className=\"roster-top-header\">\n                                <div className={\"roster-postion-header\" + (AppSelectedSport == SportsIDs.football ? ' roster-position-football' : AppSelectedSport == SportsIDs.basketball ? ' roster-position-basketball' : AppSelectedSport == SportsIDs.ncaaf ? ' roster-postion-ncss' : '')}>\n                                    <ul>\n                                        {\n                                            _Map(allPosition, (item, idx) => {\n                                                return (\n                                                    <li key={idx} className={(AppSelectedSport == SportsIDs.kabaddi ? 'three-position ' : '') + (isSelectPostion == item.position_order ? 'active' : '')} onClick={() => this.SendRosterPosition(item)}>\n                                                        <a>\n                                                            <h4>{item.position_name}\n                                                                <span className=\"roster-selected-count\">\n                                                                    [{this.filterLineypArrByPosition(item).length}]\n                                                        </span>\n                                                            </h4>\n                                                        </a>\n                                                    </li>\n                                                )\n                                            })\n                                        }\n                                    </ul>\n                                </div>\n                                {/* + (AppSelectedSport == SportsIDs.baseball ? ' sports-baseball': ' ') */}\n                                <div className={\"player-pick-info\" + (this.state.isPlayingAnnounced == 1 ? ' d-flex justify-content-between' : '')}>\n                                    {\n                                        _Map(allPosition, (item, idx) => {\n                                            return (\n                                                this.state.isSelectPostion == item.position_order \n                                                ? <div key={idx}>\n                                                    {this.showActivePlayerPick(item)}\n                                                </div>\n                                                : ''\n                                            )\n                                        })\n                                    }\n                                    {\n                                        this.state.isPlayingAnnounced == 1 && <div className=\"switch-container\">\n                                            <label>\n                                            <span className={\"playing-text\" + (this.state.isPlayingSelected ? ' all-p' : '')}>{!this.state.isPlayingSelected ? AppLabels.PLAYING: AppLabels.ALL.toLowerCase()}</span>\n                                                <input \n                                                checked={this.state.isPlayingSelected} \n                                                onChange={this.handlePlayingChange} \n                                                className=\"switch\" type=\"checkbox\" />\n                                                <div>\n                                                    <div></div>\n                                                </div>\n                                            </label>\n                                        </div>\n                                    }\n                                </div>\n\n                                <div className={\"table-roster-header  \" + `${this.state.activeClass}`}>\n                                    <table className=\"table primary-table\">\n                                        <tbody>\n                                            <tr>\n                                                <td className=\"text-left\">{AppLabels.PLAYER}</td>\n                                                <td className=\"text-center score-td text-capitalize\" > <div onClick={() => {\n                                                    this.setState({ sort_field: 'fantasy_score', sort_order: (this.state.sort_order == 'DESC' ? 'ASC' : 'DESC') });\n                                                    this.setState({ rosterList: this.state.rosterList.sort((a, b) => (this.state.sort_order == 'DESC' ? a.fantasy_score - b.fantasy_score : b.fantasy_score - a.fantasy_score)) })\n                                                }}>{AppLabels.POINTS}  {this.state.sort_field == 'fantasy_score' && <i className={this.state.sort_order == 'DESC' ? \"icon-arrow-down\" : 'icon-arrow-up'}></i>}</div>\n                                                </td>\n\n                                                <td className=\"text-center salary-td\" ><div onClick={() => {\n                                                    this.setState({ sort_field: 'salary', sort_order: (this.state.sort_order == 'DESC' ? 'ASC' : 'DESC') });\n                                                    this.setState({ rosterList: this.state.rosterList.sort((a, b) => (this.state.sort_order == 'DESC' ? a.salary - b.salary : b.salary - a.salary)) })\n                                                }}>{AppLabels.CREDITS}  {this.state.sort_field == 'salary' && <i className={this.state.sort_order == 'DESC' ? \"icon-arrow-down\" : 'icon-arrow-up'}></i>}</div>\n                                                </td>\n\n                                                <td className=\"wid-50\"></td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={\"table-rosters \"+ (AppSelectedSport == SportsIDs.baseball ? ' sports-baseball': ' ')}   id=\"tableLineupPlayer\" >\n                            <InfiniteScroll\n                                dataLength={rosterList.length}\n                                loader={\n                                    isTableLoaderShow == true &&\n                                    <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                }>\n\n                                <table className=\"table primary-table\" >\n                                    <tbody>\n                                        {\n                                            _Map(rosterList, (item, idx) => {\n                                                return (\n                                                    <tr key={idx} className={(((item.salary > (this._availableBudget(lineupArr)) && !this.checkPlayerExistInLineup(item)) || (!this.checkPlayerExistInLineup(item) && this.isPostionSelected(item))) ? 'disabled' : '') + (this.checkPlayerExistInLineup(item) || (this.state.SelectedPlayerPosition == 'ALL' && item.player_uid) ? ' selected-tr' : (this.checkPlayerTeamValid(item) ? '' : ' disabled'))} onClick={() => this.addPlayerToLineup(item)}>\n                                                        <td className=\"player-td\">\n                                                            <div className=\"roster-player-detail\" style={{ display: 'flex', paddingLeft: 10, paddingBottom: 0, paddingTop: 15 }}>\n                                                                <div className=\"roster-player-image\">\n                                                                    <img src={Utilities.playerJersyURL(item.jersey)} alt=\"\" />\n                                                                </div>\n                                                                <div onClick={(e) => this.PlayerCardShow(e, item)} className=\"roster-player-content\">\n                                                                    <h4><a>{item.display_name}</a></h4>\n                                                                    <span className=\"roster-player-team\">{item.team_abbreviation || item.team_abbr} </span>\n                                                                    {\n                                                                        item.sports_id != SportsIDs.kabaddi && item.playing_announce == 1 && item.is_playing == 1 &&\n                                                                        <small className=\"text-success m-h-xs\"> <span className=\"playing_indicator\"></span> {AppLabels.PLAYING}</small>\n                                                                    }\n                                                                    {/*\n                                                                        item.sports_id != SportsIDs.kabaddi && item.playing_announce == 1 && item.is_playing == 0 &&\n                                                                        <small className=\"text-danger m-h-xs\"> <span className=\"playing_indicator danger\"></span> {AppLabels.NOT_PLAYING}</small>\n                                                                    */}\n                                                                    {\n                                                                        item.sports_id == SportsIDs.kabaddi && item.playing_announce == 1 && item.is_playing == 1 &&\n                                                                        <small className=\"text-success m-h-xs\"> <span className=\"playing_indicator\"></span> {AppLabels.ANNOUNCED}</small>\n                                                                    }\n                                                                </div>\n                                                            </div>\n                                                        </td>\n                                                        <td className=\"text-center score-td\">\n                                                            <div className=\"roster-player-salary\"><span>{item.fantasy_score}</span></div>\n                                                        </td>\n                                                        <td className=\"text-center salary-td\">\n                                                            <div className=\"roster-player-salary\">{item.salary}</div>\n                                                        </td>\n                                                        <td className=\"text-right-ltr btn-roster-td wid-50\">\n                                                            <a className={\"btn-roster-action \" + (this.checkPlayerExistInLineup(item) || (this.state.SelectedPlayerPosition == 'ALL' && item.player_uid) ? 'added' : '')} >\n                                                                <i className={this.checkPlayerExistInLineup(item) || (this.state.SelectedPlayerPosition == 'ALL' && item.player_uid) ? \"icon-tick\" : \"icon-plus\"}></i>\n                                                            </a>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </InfiniteScroll>\n                        </div>\n\n                        <div className={\"roster-footer \" + this.state.showBtmBtn}>\n                            <div className=\"btn-wrap\">\n                                <button disabled={!(lineupArr.length > 0)} onClick={() => this.GoToFieldView()} className=\"btn btn-primary btn-block btm-fix-btn team-preview\">{AppLabels.TEAM_PREVIEW}</button>\n                                <button disabled={!(lineupArr.length == maxPlayers)} onClick={() => this.NextSubmit()} className=\"btn btn-primary btn-block btm-fix-btn\">{AppLabels.NEXT}</button>\n                            </div>\n                        </div>\n                        {\n                            showPlayerCard &&\n                            <PlayerCardModal IsPlayerCardShow={showPlayerCard} playerDetails={playerDetails} IsPlayerCardHide={this.PlayerCardHide} addPlayerToLineup={this.addPlayerToLineup} lineupArr={lineupArr} />\n                        }\n\n                        <FieldViewRight\n                            SelectedLineup={this.state.lineupArr.length ? this.state.lineupArr : []}\n                            MasterData={this.state.masterData}\n                            LobyyData={this.state.LobyyData}\n                            FixturedContest={this.state.FixturedContest}\n                            isFrom={this.state.isFrom}\n                            rootDataItem={this.state.rootDataItem}\n                            team={this.state.team}\n                            team_name={this.state.teamName}\n                            resetIndex={1}\n                            TeamMyContestData={this.state.TeamMyContestData ? this.state.TeamMyContestData : this.props.location.state.team}\n                            isFromMyTeams={this.state.isFromMyTeams}\n                            ifFromSwitchTeamModal={this.state.ifFromSwitchTeamModal}\n                        />\n                        {this.state.showRosterFilter &&\n                            <FilterByTeam teamName={this.state.teamList} selectedTeamOption={this.state.selectedTeamOption} onSelected={this.handleChange} />\n                        }\n\n                    </div>\n\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n","/var/www/html/framework/frontend/src/views/SelectCaptainList.jsx",["3732","3733","3734","3735","3736","3737","3738","3739","3740","3741","3742","3743","3744","3745","3746","3747","3748","3749","3750","3751","3752","3753","3754","3755","3756","3757","3758","3759","3760","3761","3762","3763","3764","3765","3766","3767","3768","3769","3770","3771","3772","3773","3774","3775","3776","3777","3778","3779","3780","3781","3782","3783","3784","3785","3786","3787","3788","3789","3790","3791"],"import React from 'react';\nimport ls from 'local-storage';\nimport { Row, Col, FormGroup } from 'react-bootstrap';\nimport { inputStyleLeft } from '../helper/input-style';\nimport FloatingLabel from 'floating-label-react';\nimport Validation from '../helper/Validation';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport ConfirmationPopup from '../Modals/ConfirmationPopup';\nimport Thankyou from '../Modals/Thankyou';\nimport CustomHeader from '../components/CustomHeader';\nimport FieldView from \"./FieldView\";\nimport { Utilities, _isUndefined, _indexOf, _Map, _isEmpty, _filter, _cloneDeep, parseURLDate } from '../Utilities/Utilities';\nimport { SportsIDs } from \"../JsonFiles\";\nimport { AppSelectedSport, globalLineupData, preTeamsList, SELECTED_GAMET,GameType, EnableBuyCoin } from '../helper/Constants';\nimport { getNewTeamName, processLineup, joinContest, getUserLineUps, switchTeamContest,joinContestNetworkfantasy } from '../WSHelper/WSCallings';\n\nvar masterDataResponse = null;\n\nexport default class SelectCaptainList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lineupArr: this.props.location.state.SelectedLineup,\n            MasterData: this.props.location.state.MasterData,\n            LobyyData: this.props.location.state.LobyyData,\n            allPosition: this.props.location.state.MasterData.all_position,\n            IsChanged: false,\n            showConfirmationPopUp: false,\n            userTeamList: [],\n            userTeamListSend: [],\n            FixturedContest: this.props.location.state.FixturedContest,\n            isFrom: !_isUndefined(this.props.location.state.isFrom) && this.props.location.state.isFrom == 'editView' ? this.props.location.state.isFrom : !_isUndefined(this.props.location.state.isFrom) && this.props.location.state.isFrom == 'contestJoin' ? this.props.location.state.isFrom : this.props.location.state.isFrom == 'MyTeams' ? this.props.location.state.isFrom : \"\",\n            teamData: !_isUndefined(this.props.location.state.isFrom) && this.props.location.state.isFrom == 'editView' ? this.props.location.state.team : '',\n            teamName: (this.props.location.state.teamitem && this.props.location.state.teamitem.team_name != '') ? this.props.location.state.teamitem.team_name : (this.props.location.state.isClone ? '' : (!_isUndefined(this.props.location.state.isFrom) && this.props.location.state.isFrom == 'editView' || this.props.location.state.isFrom == 'MyContest' ? (this.props.location.state.team && this.props.location.state.team.team_name) : this.props.location.state.teamName)),\n\n            lineupMasterdId: '',\n            showThankYouModal: false,\n            rootDataItem: !_isUndefined(this.props.location.state.isFrom) && this.props.location.state.isFrom == 'editView' ? this.props.location.state.rootDataItem : !_isUndefined(this.props.location.state.FixturedContest) ? this.props.location.state.FixturedContest : \"\",\n            sportsSelected: AppSelectedSport,\n            isFromMyTeams: this.props.location.state.isFromMyTeams ? this.props.location.state.isFromMyTeams : false,\n            ifFromSwitchTeamModal: !_isUndefined(this.props.location.state.ifFromSwitchTeamModal) ? this.props.location.state.ifFromSwitchTeamModal : false,\n            isLoading: false,\n            clickOnce: false,\n            sort_field: 'salary',//fantasy_score\n            sort_order: 'DESC',//ASC\n            rosterList: [],\n            isCategory: true,\n            isClone: !_isUndefined(this.props.location.state.isClone) ? this.props.location.state.isClone : false,\n            isTeamNameChanged: true,\n            showFieldV: false\n        }\n        this.headerRef = React.createRef();\n\n    }\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n    filterLineypArrByPosition = (player) => {\n\n        let arrPositionOfSelectedPlayer = this.state.lineupArr.filter(function (item) {\n            return item.position == player.position\n        })\n\n        return arrPositionOfSelectedPlayer\n    }\n    ChangePlayerRole = (role, player) => {\n        let lineupArr = this.state.lineupArr;\n        _Map(lineupArr, (item) => {\n            if (item.player_role == role || item.player_role == 0) {\n                item.player_role = 0;\n            }\n            return item;\n        })\n        let index = _indexOf(lineupArr, player);\n        lineupArr[index].player_role = (role === 1) ? \"1\" : \"2\";\n        this.setState({ lineupArr })\n        if(AppSelectedSport == SportsIDs.badminton){\n            this.setState({ IsChanged: true })\n        }\n        else if((role === 1 && this.returnPlayerRole(2, lineupArr)) || (role === 2 && this.returnPlayerRole(1, lineupArr))){\n            this.setState({ IsChanged: true })\n        }\n        else if ((Utilities.getMasterData().c_point > 0 && Utilities.getMasterData().vc_point <= 0) || (Utilities.getMasterData().vc_point > 0 && Utilities.getMasterData().c_point <= 0)) {            \n            this.setState({ IsChanged: true })\n        }\n        else {\n            this.setState({ IsChanged: false })\n        }\n\n\n\n        //Analytics Calling \n        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'selectcaptain');\n\n\n\n    }\n\n    returnPlayerRole = (role, lineupArr) => {\n        for (var player of lineupArr) {\n            if (player.player_role == role) {\n                return true\n            }\n        }\n        return false\n    }\n    PlayerRoleClass = (role, player) => {\n        let lineupArr = this.state.lineupArr;\n        let LineupFilter = _filter(lineupArr, (o) => { return (o.player_uid == player.player_uid && o.player_role == role) });\n        return LineupFilter.length == 1;\n    }\n    SubmitLineup = () => {\n        if(this.checkButtonEnable()){\n            this.setState({ clickOnce: true })\n            if (this.isLoading) {\n                return true;\n            }\n    \n            let tmpLineupArray = [];\n    \n            _Map(this.state.lineupArr, (item, index) => {\n                tmpLineupArray.push({\n                    \"player_id\": item.player_id,\n                    \"player_uid\": item.player_uid,\n                    \"season_game_uid\": item.season_game_uid,\n                    \"position\": item.position,\n                    \"salary\": item.salary,\n                    \"player_team_id\": item.player_team_id,\n                    \"team_league_id\": item.team_league_id,\n                    \"player_role\": item.player_role\n                })\n            });\n    \n            let param = {\n                \"league_id\": this.state.LobyyData.league_id ? this.state.LobyyData.league_id : this.state.FixturedContest.league_id,\n                \"sports_id\": AppSelectedSport,\n                \"team_name\": this.state.teamName,\n                \"collection_master_id\": this.state.LobyyData.collection_master_id ? this.state.LobyyData.collection_master_id : this.state.FixturedContest.collection_master_id,\n                \"lineup\": tmpLineupArray,\n                \"lineup_master_id\": this.state.isClone ? '' : (this.props.location.state.teamitem ? this.props.location.state.teamitem.lineup_master_id ? this.props.location.state.teamitem.lineup_master_id :this.props.location.state.lineup_master_id  : (this.state.teamData.lineup_master_id ? this.state.teamData.lineup_master_id : this.state.lineupMasterdId))\n            }\n    \n            this.setState({\n                isLoading: true\n            });\n            processLineup(param).then((responseJson) => {\n                this.setState({\n                    isLoading: false\n                });\n                if (responseJson.response_code == WSC.successCode) {\n                    let keyName = 'my-teams' + Utilities.getSelectedSportsForUrl() + param.collection_master_id;\n                    preTeamsList[keyName] = [];\n\n                    if (responseJson.data.lineup_master_id) {\n                        let keyy = responseJson.data.lineup_master_id + param.collection_master_id + 'lineup';\n                        globalLineupData[keyy] = _cloneDeep(this.state.lineupArr);\n                        this.setState({ lineupMasterdId: responseJson.data.lineup_master_id })\n                    }else{\n                        let keyy = param.lineup_master_id + param.collection_master_id + 'lineup';\n                        globalLineupData[keyy] = _cloneDeep(this.state.lineupArr);\n                    }\n                    if (this.state.isFrom == 'editView' && !this.state.isFromMyTeams) {\n                        Utilities.showToast(responseJson.message, 1000);\n                        if( SELECTED_GAMET == GameType.Free2Play){\n                            let dateformaturl = parseURLDate(this.state.LobyyData.season_scheduled_date);\n                            let contestListingPath ='/'+Utilities.getSelectedSportsForUrl().toLowerCase() + '/free-to-play/' + this.state.LobyyData.collection_master_id + '/' + this.state.LobyyData.home + \"-vs-\" + this.state.LobyyData.away + \"-\" + dateformaturl + \"/\" + SELECTED_GAMET + \"/\" + this.state.LobyyData.season_game_uid + \"/\" + this.state.LobyyData.contest_id;\n                            this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: this.state.LobyyData, lineupPath: contestListingPath,TeamSubmit:true } })\n                        }\n                        else{\n                            this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n                         }\n                    }\n                    else if ((this.state.isFrom == \"MyTeams\" || this.state.isFrom == \"MyContest\" || this.state.isFrom == \"editView\") && this.state.isFromMyTeams) {\n                        Utilities.showToast(responseJson.message, 1000);\n                        var go_index = -2;    \n                        if (this.state.isFrom == \"editView\" && !this.state.isClone && !this.state.isFromMyTeams) {\n                            go_index = -3;\n                        }\n                        WSManager.clearLineup();\n                        this.props.history.go(go_index);\n                    }\n                    else if (this.state.ifFromSwitchTeamModal) {\n                        Utilities.showToast(responseJson.message, 1000);\n                        this.switchTeam(this.state.FixturedContest.contest_id, responseJson.data.lineup_master_id, this.props.location.state.lineup_master_contest_id);\n                    }\n                    else {\n                        this.getUserLineUpListApi();\n                    }\n                    //ls.remove('Lineup_data')\n    \n                    //Analytics Calling \n                    WSManager.googleTrack(WSC.GA_PROFILE_ID, 'confirmteam');\n    \n                }\n                this.setState({ clickOnce: false })\n            })\n        }\n    }\n\n    switchTeam(contest_id, lineup_master_id, lineup_master_contest_id) {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"contest_id\": contest_id,\n            \"lineup_master_id\": lineup_master_id,\n            \"lineup_master_contest_id\": lineup_master_contest_id,\n        }\n\n        this.setState({ isLoaderShow: true })\n        switchTeamContest(param).then((responseJson) => {\n            this.setState({ isLoaderShow: false })\n            if (responseJson.response_code == WSC.successCode) {\n                Utilities.showToast(responseJson.message, 5000);\n                this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n                WSManager.clearLineup();\n            }\n        })\n\n    }\n\n    getTeamName() {\n        if (!this.state.teamName) {\n            let param = {\n                \"collection_master_id\": this.state.LobyyData.collection_master_id ? this.state.LobyyData.collection_master_id : this.state.FixturedContest.collection_master_id,\n            }\n            getNewTeamName(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.setState({ teamName: responseJson.data.team_name, isTeamNameChanged: false }, () => {\n                        this.setState({ isTeamNameChanged: true })\n                    })\n                }\n            })\n        }\n    }\n\n    getUserLineUpListApi() {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"collection_master_id\": this.state.LobyyData.collection_master_id ? this.state.LobyyData.collection_master_id : this.state.FixturedContest.collection_master_id,\n            \"league_id\": this.state.LobyyData.league_id\n        }\n        this.setState({ isLoaderShow: true })\n        getUserLineUps(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    userTeamList: responseJson.data,\n                    showConfirmationPopUp: true,\n                    userTeamListSend: responseJson.data\n                })\n                if (this.state.userTeamListSend) {\n                    let tempList = [];\n                    this.state.userTeamListSend.map((data, key) => {\n\n                        tempList.push({ value: data, label: data.team_name })\n                        return '';\n                    })\n                    this.setState({ userTeamListSend: tempList });\n                }\n            }\n        })\n    }\n\n    ConfirmatioPopUpShow = (data) => {\n        this.setState({\n            showConfirmationPopUp: true,\n        });\n    }\n\n\n    ConfirmatioPopUpHide = () => {\n        this.setState({\n            showConfirmationPopUp: false,\n        });\n    }\n\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n\n    ConfirmEvent = (dataFromConfirmPopUp, context) => {\n\n        if (dataFromConfirmPopUp.selectedTeam.value.lineup_master_id && dataFromConfirmPopUp.selectedTeam.value.lineup_master_id != null && dataFromConfirmPopUp.selectedTeam.lineup_master_id == \"\" || dataFromConfirmPopUp.selectedTeam == \"\") {\n            Utilities.showToast(AppLabels.SELECT_NAME_FIRST, 1000);\n        } else {\n            var currentEntryFee = 0;\n            currentEntryFee = dataFromConfirmPopUp.entryFeeOfContest;\n            if(SELECTED_GAMET == GameType.Free2Play) {\n                this.CallJoinGameApi(dataFromConfirmPopUp);\n            }\n            else if (\n                (dataFromConfirmPopUp.FixturedContestItem.currency_type == 2 && (parseInt(currentEntryFee) <= parseInt(dataFromConfirmPopUp.balanceAccToMaxPercent))) || \n                (dataFromConfirmPopUp.FixturedContestItem.currency_type != 2 && (parseFloat(currentEntryFee) <= parseFloat(dataFromConfirmPopUp.balanceAccToMaxPercent)))\n                ) \n            {\n                this.CallJoinGameApi(dataFromConfirmPopUp);\n            } \n            else {\n                if(dataFromConfirmPopUp.FixturedContestItem.currency_type == 2){\n                    if(EnableBuyCoin){     \n                        WSManager.setFromConfirmPopupAddFunds(true);\n                        WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                        WSManager.setPaymentCalledFrom(\"SelectCaptainList\")\n                        this.props.history.push({ pathname: '/buy-coins', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true , state: {isFrom : 'SelectCaptainList'}});\n\n                    }\n                    else{\n                        // Utilities.showToast('Not enough coins', 1000);\n                        this.props.history.push({ pathname:'/earn-coins', state: {isFrom : 'lineup-flow'}})\n                    }\n                }\n                else{\n                    //   setValue.setisFromConfirmModal(true);\n                    WSManager.setFromConfirmPopupAddFunds(true);\n                    WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                    WSManager.setPaymentCalledFrom(\"SelectCaptainList\")\n                    this.props.history.push({ pathname: '/add-funds', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true });\n                }\n\n                //Analytics Calling \n                WSManager.googleTrack(WSC.GA_PROFILE_ID, 'paymentgateway');\n            }\n        }\n    }\n\n    createTeamAndJoin = (dataFromConfirmFixture, dataFromConfirmLobby) => {\n        this.props.history.push({ pathname: '/lineup', state: { FixturedContest: dataFromConfirmFixture, LobyyData: dataFromConfirmLobby } })\n    }\n\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        var contestId = SELECTED_GAMET == GameType.Free2Play ? this.state.LobyyData.contest_id : dataFromConfirmPopUp.FixturedContestItem.contest_id\n        let param = {\n            \"contest_id\": contestId,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.lineup_master_id ? dataFromConfirmPopUp.selectedTeam.lineup_master_id : dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        this.setState({ isLoaderShow: true })\n        let IsNetworkContest = this.props && this.props.location && this.props.location.state && this.props.location.state.FixturedContest && this.props.location.state.FixturedContest.is_network_contest == 1;\n        if(IsNetworkContest){\n            joinContestNetworkfantasy(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.ConfirmatioPopUpHide();\n                    setTimeout(() => {\n                        this.ThankYouModalShow()\n                    }, 300);\n                    WSManager.clearLineup();\n                } else {\n                    Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n                }\n            })\n        }\n        else{\n            joinContest(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.ConfirmatioPopUpHide();\n                    setTimeout(() => {\n                        this.ThankYouModalShow()\n                    }, 300);\n                    WSManager.clearLineup();\n                } else {\n                    Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n                }\n            })\n        }\n        \n\n        //Analytics Calling \n        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'joingame');\n\n\n    }\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    componentDidMount = () => {\n        masterDataResponse = Utilities.getMasterData()\n        setTimeout(() => {\n            if (!_isEmpty(this.state.lineupArr)) {\n                this.headerRef.current.GetHeaderProps(\"lineup\", this.state.lineupArr, this.state.masterData, _isEmpty(this.state.LobyyData) || _isUndefined(this.state.LobyyData) ? this.state.rootDataItem : this.state.LobyyData, this.state.FixturedContest);\n            }\n        }, 500)\n\n        if (this.state.isFrom == 'editView') {\n            if (this.state.isClone) {\n                this.getTeamName()\n            }\n            this.setState({ IsChanged: true })\n        }\n        else {\n            this.getTeamName()\n        }\n    }\n\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' });\n    }\n\n    seeMyContest = () => {\n        this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n    }\n\n    callAfterAddFundPopup() {\n        if (WSManager.getFromConfirmPopupAddFunds()) {\n            //setValue.setisFromConfirmModal(false);\n            WSManager.setFromConfirmPopupAddFunds(false);\n            var contestData = WSManager.getContestFromAddFundsAndJoin();\n            this.ConfirmEvent(contestData)\n        }\n    }\n\n    componentWillMount() {\n        if(SELECTED_GAMET != GameType.MultiGame && SELECTED_GAMET != GameType.Free2Play){\n            WSManager.setPickedGameType(GameType.DFS);\n          }\n        let CinfirmPopUpIsAddFundsClicked = WSManager.getFromConfirmPopupAddFunds()\n        let tempIsAddFundsClicked = WSManager.getFromFundsOnly()\n        setTimeout(() => {\n            if (tempIsAddFundsClicked == 'true' && CinfirmPopUpIsAddFundsClicked == 'true' || CinfirmPopUpIsAddFundsClicked == true) {\n                setTimeout(() => {\n                    this.callAfterAddFundPopup()\n                }, 200);\n            }\n        }, 500);\n    }\n    onPlayers = () => {\n        this.setState({\n            isCategory: true\n        })\n    }\n    onPoints = () => {\n        this.setState({\n            isCategory: false,\n            lineupArr: this.state.lineupArr.sort((a, b) => (b.fantasy_score - a.fantasy_score))\n        })\n    }\n\n    checkButtonEnable(){\n        var isValid = true;\n        var teamname = this.state.teamName ? this.state.teamName: this.props.location.state.team_name\n        if(!teamname || teamname.length < 4 || !this.state.IsChanged){\n            isValid = false;\n        }\n        else if(this.state.isLoading || this.state.clickOnce){\n            isValid = false;\n        }\n        return isValid;        \n    }\n\n    showFieldV = () => {\n        this.setState({\n            showFieldV: true\n        });\n    }\n\n    hideFieldV = () => {\n        this.setState({\n            showFieldV: false\n        });\n    }\n\n    render() {\n        const {\n            teamName,\n            allPosition,\n            showConfirmationPopUp,\n            userTeamListSend,\n            FixturedContest,\n            showThankYouModal,\n            lineupMasterdId,\n            sportsSelected\n        } = this.state;\n        const HeaderOption = {\n            back: true,\n            fixture: true,\n            hideShadow: true,\n            title: '',\n            pitch: true,\n            fieldViewAction: this.showFieldV.bind(this)\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed white-bg\">\n                        <CustomHeader {...this.props} ref={this.headerRef} HeaderOption={HeaderOption} />\n                        <div className=\"select-captian-wrap\">\n                            <div className=\"filed-with-icon\">\n                                <Row >\n                                    {\n                                        <Col xs={12}>\n                                            <FormGroup\n                                                className='xinput-label-center'\n                                                controlId=\"formBasicText\"\n                                                validationState={teamName ? teamName : this.props.location.state.team_name  && this.getValidationState('teamName', teamName ? teamName : this.props.location.state.team_name)}\n                                            >\n                                                {\n                                                    this.state.isTeamNameChanged &&\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='teamName'\n                                                        name='teamName'\n                                                        placeholder={AppLabels.ENTER_TAM_NAME}\n                                                        type='text'\n                                                        value={teamName ? teamName : this.props.location.state.team_name || ''}\n                                                        onChange={this.handleChange}\n                                                    />\n                                                }\n                                            </FormGroup>\n                                            {/* {\n                                                <i className=\"ic-team-name icon-with-input-cvc\"></i>\n                                            } */}\n                                        </Col>\n                                    }\n                                </Row>\n                            </div>\n                            {(Utilities.getMasterData().c_point > 0 || Utilities.getMasterData().vc_point > 0) &&\n                                <div className=\"selection-help-txt\">\n                                    <h4>\n                                        {\n                                            (sportsSelected == SportsIDs.badminton) ?\n                                                <React.Fragment>\n                                                    {Utilities.getMasterData().c_point > 0 &&\n                                                        <span>{AppLabels.CHOOSE_CAPTAIN}</span>\n                                                    }\n                                                </React.Fragment>\n                                                :\n                                                <span>\n                                                    {Utilities.getMasterData().c_point > 0 && Utilities.getMasterData().vc_point <= 0 &&\n                                                        AppLabels.CHOOSE_CAPTAIN\n                                                    }\n                                                    {Utilities.getMasterData().c_point > 0 && Utilities.getMasterData().vc_point > 0 &&\n                                                        AppLabels.CHOOSE_CAPTAIN_VICE_CAPTAIN\n                                                    }\n                                                    {Utilities.getMasterData().c_point <= 0 && Utilities.getMasterData().vc_point > 0 && \n                                                        AppLabels.CHOOSE_VICE_CAPTAIN\n                                                    }\n                                                </span>\n                                        }\n                                    </h4>\n                                    <p>\n                                        {Utilities.getMasterData().c_point > 0 &&\n                                            <span>\n                                                <span className='captain_cirlce'>{AppLabels.C}</span>\n                                                {AppLabels.GETS}\n                                                {Utilities.getMasterData() != null && \n                                                    ((sportsSelected != SportsIDs.badminton) \n                                                        ? \n                                                        Utilities.getMasterData().c_point + 'x'\n                                                        : \n                                                        Utilities.getMasterData().vc_point + 'x')\n                                                }\n                                                <React.Fragment> {AppLabels.POINTS}</React.Fragment>\n                                            </span>\n                                        }\n                                        {Utilities.getMasterData().vc_point > 0 && \n                                            <React.Fragment>\n                                                {\n                                                    (sportsSelected != SportsIDs.badminton) &&\n                                                    <span>\n                                                        <span className='captain_cirlce'>{AppLabels.VC}</span>\n                                                        {AppLabels.GETS}\n                                                        {Utilities.getMasterData() != null && \n                                                            Utilities.getMasterData().vc_point + 'x'\n                                                        }\n                                                        <React.Fragment> {AppLabels.POINTS}</React.Fragment>\n                                                    </span>\n                                                }\n                                            </React.Fragment>\n                                        }\n                                    </p>\n\n                                </div>\n                            }\n                            <div className={\"sorting-pts-player\" + ((Utilities.getMasterData().c_point > 0 || Utilities.getMasterData().vc_point > 0) ? \" mt-0\" : \"\")}>\n                                <Row >\n                                    <Col xs={12}>\n                                        <span>{AppLabels.SORT_BY} -</span>\n\n                                        <button onClick={() => this.onPlayers()} className={\" btns \" + (this.state.isCategory ? 'btnsblue' : '')} >{AppLabels.PLAYERS} </button>\n\n                                        <button onClick={() => this.onPoints()} className={\" btns \" + (!this.state.isCategory ? 'btnsblue' : '')} >{AppLabels.POINTS} </button>\n                                    </Col>\n                                </Row>\n                            </div>\n                            {this.state.isCategory ?\n                                <div className=\"lineup-list-view\">\n                                    <div className=\"list-view-detail\">\n                                        {_Map(allPosition, (positem, posidx) => {\n                                            return (\n                                                <div key={posidx} className=\"list-view-header-wrap\">\n                                                    <div className=\"list-view-header\"> {positem.position_display_name} </div>\n                                                    <ul className=\"list-secondary\" key={posidx}>\n                                                        {\n                                                            _Map(this.filterLineypArrByPosition(positem), (item, idx) => {\n                                                                return (\n                                                                    <li key={idx}>\n                                                                        <Row className=\"style\">\n                                                                            <Col xs={6} className=\"text-left-ltr mt-6 player-fullname\">\n                                                                                <h4>{item.full_name}</h4>\n                                                                                <span>{item.team_abbreviation || item.team_abbr}</span>\n\n                                                                            </Col>\n                                                                            <Col xs={(Utilities.getMasterData().c_point > 0 || Utilities.getMasterData().vc_point > 0 ) ? 3 : 6} className=\"text-right\">\n                                                                                <ul className=\"roster-player-salary\">\n                                                                                    <li>\n                                                                                        <span className=\"pts-style\" >{item.fantasy_score} {AppLabels.PTS}</span>\n                                                                                    </li>\n                                                                                </ul>\n                                                                            </Col>\n                                                                            {\n                                                                                (Utilities.getMasterData().c_point > 0 || Utilities.getMasterData().vc_point > 0) &&\n                                                                                    <Col xs={3} className=\"text-right-ltr\">\n                                                                                        <ul className=\"list-inline-capt pt2\">\n        \n                                                                                            {Utilities.getMasterData().c_point > 0 &&\n                                                                                                <li>\n                                                                                                    <a onClick={() => this.ChangePlayerRole(1, item)} className={this.PlayerRoleClass(1, item) ? 'selected-captain' : ''}>\n                                                                                                        {!this.PlayerRoleClass(1, item) ?\n                                                                                                            <span className='captain-c'>C</span> : <span className=\"captain-c\"> {masterDataResponse != null && masterDataResponse.c_point + 'x'}</span>\n                                                                                                        }\n                                                                                                    </a>\n                                                                                                </li>\n                                                                                            }\n                                                                                            {Utilities.getMasterData().vc_point > 0 &&\n                                                                                                <React.Fragment>\n                                                                                                    {AppSelectedSport != SportsIDs.badminton &&\n                                                                                                        <li>\n                                                                                                            <a onClick={() => this.ChangePlayerRole(2, item)} className={this.PlayerRoleClass(2, item) ? 'selected-vcaptain' : ''}>\n                                                                                                                {this.PlayerRoleClass(2, item) ?\n                                                                                                                    <span className=\"vice-captain-v\">{masterDataResponse != null && masterDataResponse.vc_point + 'x'}</span> : <span className='vice-captain-v'>V</span>\n                                                                                                                }\n                \n                                                                                                            </a>\n                                                                                                        </li>\n                                                                                                    }\n                                                                                                </React.Fragment>\n                                                                                           }\n                                                                                        </ul>\n                                                                                    </Col>\n\n                                                                                }\n                                                                            </Row>\n                                                                    </li>\n                                                                )\n                                                            })\n                                                        }\n                                                    </ul>\n                                                </div>\n                                            )\n                                        })\n                                        }\n\n                                    </div>\n\n                                </div>\n\n                                :\n                                <div className=\"lineup-list-view\">\n                                    <div className=\"list-view-detail\">\n                                        {\n                                            <div\n                                            >\n                                                <ul className=\"list-secondary\" >\n                                                    {\n                                                        _Map(this.state.lineupArr, (item, idx) => {\n                                                            return (\n                                                                <li key={idx} >\n                                                                    <Row className=\"style\">\n                                                                        <Col xs={6} className=\"text-left-ltr mt-6 player-fullname\">\n                                                                            <h4>{item.full_name}</h4>\n                                                                            <span>{item.team_abbreviation || item.team_abbr}</span>\n\n                                                                        </Col>\n                                                                        <Col xs={3} className=\"text-right\">\n                                                                            <ul className=\"roster-player-salary\">\n                                                                                <li>\n                                                                                    <span className=\"pts-style\" >{item.fantasy_score} {AppLabels.PTS}</span>\n                                                                                </li>\n                                                                            </ul>\n\n                                                                        </Col>\n                                                                        {\n                                                                            (Utilities.getMasterData().c_point > 0 || Utilities.getMasterData().vc_point > 0 ) &&\n                                                                                <Col xs={3} className=\"text-right-ltr\">\n                                                                                    <ul className=\"list-inline-capt pt2\">\n                                                                                        {Utilities.getMasterData().c_point > 0 &&\n                                                                                            <li >\n                                                                                                <a onClick={() => this.ChangePlayerRole(1, item)} className={this.PlayerRoleClass(1, item) ? 'selected-captain' : ''}>\n                                                                                                    {!this.PlayerRoleClass(1, item) ?\n                                                                                                        <span className='captain-c'>C</span> : <span className=\"captain-c\">{masterDataResponse != null && masterDataResponse.c_point + 'X'}</span>\n                                                                                                    }\n                                                                                                </a>\n                                                                                            </li>\n                                                                                        }\n                                                                                        {\n                                                                                            Utilities.getMasterData().vc_point > 0 &&\n                                                                                            <React.Fragment>\n                                                                                                {AppSelectedSport != SportsIDs.badminton &&\n                                                                                                    <li>\n                                                                                                        <a onClick={() => this.ChangePlayerRole(2, item)} className={this.PlayerRoleClass(2, item) ? 'selected-vcaptain' : ''}>\n                                                                                                            {this.PlayerRoleClass(2, item) ?\n                                                                                                                <span className=\"vice-captain-v\">{masterDataResponse != null && masterDataResponse.vc_point + 'X'}</span> : <span className='vice-captain-v'>V</span>\n                                                                                                            }\n                \n                                                                                                        </a>\n                                                                                                    </li>\n                                                                                                }\n                                                                                            </React.Fragment>\n                                                                                        }\n                                                                                    </ul>\n                                                                                </Col>\n\n                                                                        }\n                                                                    </Row>\n                                                                </li>\n                                                            )\n                                                        })\n                                                    }\n                                                </ul>\n                                            </div>\n\n                                        }\n\n\n                                    </div>\n\n                                </div>\n                            }\n                        </div>\n                       \n                       \n                        <button disabled={!this.checkButtonEnable()} onClick={() => this.SubmitLineup()} className=\"btn btn-primary  btn-block btm-fix-btn\">{AppLabels.SUBMIT_LINEUP}</button>\n\n                        {showConfirmationPopUp &&\n                            <ConfirmationPopup IsConfirmationPopupShow={this.ConfirmatioPopUpShow} IsConfirmationPopupHide={this.ConfirmatioPopUpHide} TeamListData={userTeamListSend} FixturedContest={FixturedContest} ConfirmationClickEvent={this.ConfirmEvent} CreateTeamClickEvent={this.createTeamAndJoin} fromContestListingScreen={false} createdLineUp={lineupMasterdId} />\n                        }\n\n                        {showThankYouModal &&\n                            <Thankyou ThankyouModalShow={this.ThankYouModalShow} ThankYouModalHide={this.ThankYouModalHide} goToLobbyClickEvent={this.goToLobby} seeMyContestEvent={this.seeMyContest} />\n                        }\n                        {\n                            this.state.lineupArr.length > 0 && <FieldView\n                                SelectedLineup={this.state.lineupArr}\n                                MasterData={this.state.MasterData}\n                                isFrom={'captain'}\n                                team_name={this.state.teamName}\n                                showFieldV={this.state.showFieldV}\n                                hideFieldV={this.hideFieldV.bind(this)}\n                            />\n                        }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/ContestListing.jsx",["3792","3793","3794","3795","3796","3797","3798","3799","3800","3801","3802","3803","3804","3805","3806","3807","3808","3809","3810","3811","3812","3813","3814","3815","3816","3817","3818","3819","3820","3821","3822","3823","3824","3825","3826","3827","3828","3829","3830","3831","3832","3833","3834","3835","3836","3837","3838","3839","3840","3841","3842","3843","3844","3845"],"import React from 'react';\nimport { Row, Col, Button, ProgressBar, OverlayTrigger, Tooltip, Alert } from 'react-bootstrap';\nimport { Helmet } from \"react-helmet\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Utilities, _Map, _isUndefined, _filter, _cloneDeep } from '../Utilities/Utilities';\nimport { setValue, AppSelectedSport, preTeamsList } from '../helper/Constants';\nimport { Sports } from \"../JsonFiles\";\nimport { getFixtureDetail, getFixtureDetailMultiGame, getFixtureContestList, getUserTeams, joinContest,joinContestNetworkfantasy } from \"../WSHelper/WSCallings\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\nimport ls from 'local-storage';\nimport Images from '../components/images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport MetaData from \"../helper/MetaData\";\nimport Filter from '../components/filter';\nimport CustomHeader from '../components/CustomHeader';\nimport CollectionSlider from \"./CollectionSlider\";\nimport Thankyou from '../Modals/Thankyou';\nimport ContestDetailModal from '../Modals/ContestDetail';\nimport ConfirmationPopup from '../Modals/ConfirmationPopup';\nimport ShareContestModal from '../Modals/ShareContestModal';\nimport CollectionInfoModal from \"../Modals/CollectionInfo\";\nimport { NoDataView } from '../Component/CustomComponent';\nimport { createBrowserHistory } from 'history';\nimport * as Constants from \"../helper/Constants\";\nimport {DownloadAppBuyCoinModal} from \"../Modals\";\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\nvar globalThis = null;\n\n/**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nconst Shimmer = ({ index }) => {\n    return (<div key={index} className=\"contest-list m\">\n        <div className=\"shimmer-container\">\n            <div className=\"shimmer-top-view\">\n                <div className=\"shimmer-line\">\n                    <Skeleton height={9} />\n                    <Skeleton height={6} />\n                    <Skeleton height={4} width={100} />\n                </div>\n                <div className=\"shimmer-image\">\n                    <Skeleton width={30} height={30} />\n                </div>\n            </div>\n            <div className=\"shimmer-bottom-view\">\n                <div className=\"progress-bar-default\">\n                    <Skeleton height={6} />\n                    <div className=\"d-flex justify-content-between\">\n                        <Skeleton height={4} width={60} />\n                        <Skeleton height={4} width={60} />\n                    </div>\n                </div>\n                <div className=\"shimmer-buttin\">\n                    <Skeleton height={30} />\n                </div>\n            </div>\n        </div>\n    </div>)\n}\n\nexport default class ContestListing extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lineup_master_id: '',\n            FixturedContest: [],\n            sortContestList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            showContestDetail: false,\n            WinnerCount: [],\n            FixtureData: '',\n            FixturedContestTotal: 0,\n            SortContestTotal: '',\n            FixturedPinContest: [],\n            TeamList: [],\n            LobyyData: !_isUndefined(props.location.state) ? props.location.state.LobyyData : [],\n            showConfirmationPopUp: false,\n            userTeamListSend: [],\n            showSharContestModal: false,\n            activeTab: \"\",\n            showLoadMore: true,\n            showThankYouModal: false,\n            hasMore: false,\n            isListLoading: false,\n            LoaderShow: false,\n            showContestListFitler: false,\n            isFilterApplied: false,\n            entry_fee_from: \"\",\n            entry_fee_to: \"\",\n            participants_from: \"\",\n            participants_to: \"\",\n            prizepool_from: \"\",\n            prizepool_to: \"\",\n            allowCollection: Utilities.getMasterData().allow_collection,\n            showCollectionInfo: false,\n            showGroupView: typeof ls.get(\"show_group_view\") == 'undefined' || ls.get(\"show_group_view\") == null ? true : ls.get(\"show_group_view\"),\n            allContestData: [],\n            isNewCJoined: false,\n            showDAM : false,\n            HeaderOption: {\n                back: true,\n                fixture: true,\n                filter: true,\n                title: '',\n                hideShadow: false,\n                goBackLobby: !_isUndefined(props.location.state) ? props.location.state.isFromPM : false\n            }\n        }\n    }\n\n\n    convertIntoWhole = (x) => {\n        var no = Math.round(x)\n        return no;\n    }\n\n    /**\n     * @description lifecycle method of react,\n     * method to load data of contest listing and user lineup list\n     */\n    componentDidMount() {\n        Utilities.scrollToTop()\n        globalThis = this;\n        const matchParam = this.props.match.params;\n        if (parsed.sgmty) {\n            let urlGT = atob(parsed.sgmty)\n            WSManager.setPickedGameType(urlGT);\n        }\n\n        this.FixtureDetail(matchParam);\n\n        if (WSManager.loggedIn()) {\n            this.getUserLineUpListApi(matchParam);\n            WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n        }\n        this.FixtureContestList(matchParam);\n        this.headerRef.GetHeaderProps(\"lobbyheader\", '', '', this.state.LobyyData ? this.state.LobyyData : this.props.location.state.LobyyData);\n        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestlist');\n\n\n    }\n    /**\n     * @description lifecycle method of react,\n     * method to load locale storage data and props data\n     */\n    componentWillMount() {\n        this.checkOldUrlPattern();\n        let CinfirmPopUpIsAddFundsClicked = WSManager.getFromConfirmPopupAddFunds()\n        let tempIsAddFundsClicked = WSManager.getFromFundsOnly()\n        if (this.props.location.state && this.props.location.state.from == 'MyTeams') {\n            this.setState({ lineup_master_id: this.props.location.state.lineup_master_id })\n        }\n        setTimeout(() => {\n            if ((tempIsAddFundsClicked == 'true' && CinfirmPopUpIsAddFundsClicked == 'true') || CinfirmPopUpIsAddFundsClicked == true) {\n                setTimeout(() => {\n                    this.callAfterAddFundPopup()\n                }, 200);\n            }\n        }, 500);\n    }\n\n    /**\n     * @description this method is used to replace old url pattern to new eg. from \"/7/contest-listing\" to \"/cricket/contest-listing\"\n     */\n    checkOldUrlPattern = () => {\n\n        let sportsId = this.props.match.params.sportsId;\n        if (!(sportsId in Sports)) {\n            if (sportsId in Sports.url) {\n                let sportsId = this.props.match.params.sportsId;\n                let collection_master_id = this.props.match.params.collection_master_id;\n                let myKey = this.props.match.params.myKey;\n                this.props.history.replace(\"/\" + Sports.url[sportsId] + \"/contest-listing/\" + collection_master_id + \"/\" + myKey + \"?sgmty=\" + btoa(Constants.SELECTED_GAMET));\n                return;\n            }\n        }\n    }\n\n    /**\n     * \n     * @description method to refresh page contest when user pull down to refresh screen\n     */\n    async handleRefresh(resolve, reject) {\n        if (!globalThis.state.isListLoading) {\n            globalThis.setState({\n                showLoadMore: true\n            })\n            globalThis.FixtureContestList(globalThis.props.match.params);\n        }\n    }\n    /**\n     * \n     * @description method to display confirmation popup model, when user join contest.\n     */\n    ConfirmatioPopUpShow = (data) => {\n        this.setState({\n            showConfirmationPopUp: true,\n        });\n    }\n    /**\n     * \n     * @description method to hide confirmation popup model\n     */\n    ConfirmatioPopUpHide = () => {\n        this.setState({\n            showConfirmationPopUp: false,\n        });\n    }\n    /**\n     * \n     * @description method to display collection info model.\n     */\n    CollectionInfoShow = (event) => {\n        event.stopPropagation();\n        this.setState({\n            showCollectionInfo: true\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    CollectionInfoHide = () => {\n        this.setState({\n            showCollectionInfo: false,\n        });\n    }\n    /**\n     * \n     * @description method to display share contest popup model.\n     */\n    shareContestModalShow = (data) => {\n        this.setState({\n            showSharContestModal: true,\n        });\n    }\n    /**\n     * \n     * @description method to hide share contest popup model.\n     */\n    shareContestModalHide = () => {\n        this.setState({\n            showSharContestModal: false,\n        });\n    }\n    /**\n     * \n     * @description method invoke when user click on share contest icon\n     * @param shareContestEvent - share contest event\n     * @param FixturedContestItem - Contest model on which user click\n     */\n    shareContest(shareContestEvent, FixturedContestItem) {\n        if (WSManager.loggedIn()) {\n            shareContestEvent.stopPropagation();\n            this.setState({ showSharContestModal: true, FixtureData: FixturedContestItem })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    /**\n     * @description Method to open signup screen for guest user share contest click event\n     */\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    /**\n     * @description Method to check user is guest on loggedin in case user join\n     * @param {*} event - click event\n     * @param {*} FixturedContestItem - contest model on which user click\n     */\n    check(event, FixturedContestItem) {\n        WSManager.loggedIn() ? globalThis.joinGame(event, FixturedContestItem) : globalThis.goToSignup()\n    }\n\n    /**\n    * @description Method called when user loggedin  and click on join game \n    * @param {*} event - click event\n    * @param {*} FixturedContestItem - contest model on which user click\n    * @param {*} teamListData - user created team list of same collection\n    */\n    joinGame(event, FixturedContestItem, teamListData) {\n        if (event) {\n            event.stopPropagation();\n        }\n        WSManager.clearLineup();\n        if (this.state.TeamList.length > 0 || (teamListData && teamListData != null && teamListData.length > 0)) {\n            this.setState({ showConfirmationPopUp: true, FixtureData: FixturedContestItem })\n        } else {\n            let urlData = this.state.LobyyData;\n            let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n            dateformaturl = new Date(dateformaturl);\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n            let lineupPath = ''\n            if (urlData.home) {\n                lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n            }\n            else {\n                lineupPath = '/lineup/' + Utilities.replaceAll(urlData.collection_name, ' ', '_')\n            }\n\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: FixturedContestItem, LobyyData: this.state.LobyyData, resetIndex: 1, isCollectionEnable: (Constants.SELECTED_GAMET == Constants.GameType.MultiGame && this.state.LobyyData.match_list && this.state.LobyyData.match_list.length > 1) } })\n        }\n        //  setValue.setisFromConfirmModal(false);\n        WSManager.setFromConfirmPopupAddFunds(false);\n    }\n\n    /**\n     * @description Method to show progress bar\n     * @param {*} join - number of user joined\n     * @param {*} total - total (max size) of team\n     */\n    ShowProgressBar = (join, total) => {\n        return join * 100 / total;\n    }\n\n    /**\n     * @description method to display contest detail model\n     * @param data - contest model data for which contest detail to be shown\n     * @param activeTab -  tab to be open on detail, screen\n     * @param event -  click event\n     */\n    ContestDetailShow = (data, activeTab, event) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.setState({\n            showContestDetail: true,\n            FixtureData: data,\n            activeTab: activeTab,\n        });\n    }\n    /**\n     * @description method to hide contest detail model\n     */\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    /**\n     * @description method to submit user entry to join contest\n     * if user is guest then loggin screen will display else go to roster to select play to create new team\n     */\n    onSubmitBtnClick = () => {\n        if (!WSManager.loggedIn()) {\n            setTimeout(() => {\n                this.props.history.push({ pathname: '/signup' })\n                Utilities.showToast(AppLabels.Please_Login_Signup_First, 3000);\n            }, 10);\n        } else {\n            if (this.state.TeamList != null && !_isUndefined(this.state.TeamList) && this.state.TeamList.length > 0) {\n                this.ContestDetailHide();\n                setTimeout(() => {\n                    this.setState({ showConfirmationPopUp: true, FixtureData: this.state.FixtureData })\n                }, 200);\n            } else {\n                let urlData = this.state.LobyyData;\n                let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n                dateformaturl = new Date(dateformaturl);\n                let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n                let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n                dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n                let lineupPath = '';\n                if (urlData.home) {\n                    lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n                }\n                else {\n                    let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                    lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n                }\n            }\n        }\n    }\n\n    /**\n     * @description method to contest listing data \n     * @param {*} data - fixture data \n     */\n    FixtureContestList(data) {\n        let param = {\n            \"sports_id\": Sports[data.sportsId ? data.sportsId : AppSelectedSport],\n            \"collection_master_id\": data.collection_master_id\n\n        }\n        if (Constants.SELECTED_GAMET != Constants.GameType.MultiGame) {\n            WSManager.setPickedGameType(Constants.GameType.DFS);\n        }\n        if (param.sports_id) {\n            ls.set('selectedSports', param.sports_id.toString() || param.sports_id);\n            setValue.setAppSelectedSport(param.sports_id);\n        }\n        this.setState({ isListLoading: true })\n        getFixtureContestList(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let tmpArray = []\n                _Map(responseJson.data.contest, (item, index) => {\n                    tmpArray = [...tmpArray, ...item.contest_list];\n                })\n                this.setState({\n                    sortContestList: tmpArray,\n                    FixturedContest: responseJson.data.contest,\n                    SortContestTotal: responseJson.data.total_contest,\n                    FixturedContestTotal: responseJson.data.total_contest,\n                    FixturedPinContest: responseJson.data.pin_contest,\n                    isListLoading: false,\n                    allContestData: responseJson.data\n                }, () => {\n                    if (this.state.isFilterApplied) {\n                        this.filterContestList({\n                            entry_fee_from: this.state.entry_fee_from,\n                            entry_fee_to: this.state.entry_fee_to,\n                            participants_from: this.state.participants_from,\n                            participants_to: this.state.participants_to,\n                            prizepool_from: this.state.prizepool_from,\n                            prizepool_to: this.state.prizepool_to,\n                            isApplied: true\n                        })\n                    }\n                });\n            }\n        })\n    }\n\n    /**\n     * @description method to get fixture detail\n     */\n    FixtureDetail = async (CollectionData) => {\n        if (!this.state.LobyyData.home) {\n            let param = {\n                \"sports_id\": Sports[CollectionData.sportsId],\n                \"collection_master_id\": CollectionData.collection_master_id,\n            }\n            let apiStatus = Constants.SELECTED_GAMET == Constants.GameType.MultiGame ? getFixtureDetailMultiGame : getFixtureDetail\n            var api_response_data = await apiStatus(param);\n            if (api_response_data) {\n                if (_isUndefined(this.props.location.state)) {\n                    this.setState({\n                        LobyyData: api_response_data\n                    })\n                }\n                this.setState({\n                    FixturedDetail: api_response_data,\n                })\n                if (Constants.SELECTED_GAMET == Constants.GameType.MultiGame) {\n                    this.setState({\n                        HeaderOption: {\n                            back: true,\n                            fixture: true,\n                            filter: true,\n                            hideShadow: this.state.FixturedDetail && this.state.FixturedDetail.match_list && this.state.FixturedDetail.match_list.length > 1 ? true : false,\n                            goBackLobby: !_isUndefined(this.props.location.state) ? this.props.location.state.isFromPM : false\n                        }\n                    })\n                }\n            }\n        }\n    }\n\n    getUserLineUpListApi = async (CollectionData) => {\n        let param = {\n            \"collection_master_id\": CollectionData.collection_master_id,\n        }\n        let user_data = ls.get('profile');\n        var user_unique_id = 0;\n        if (user_data && user_data.user_unique_id) {\n            user_unique_id = user_data.user_unique_id;\n        }\n        var api_response_data = await getUserTeams(param, user_unique_id);\n        if (api_response_data) {\n            this.setState({\n                TeamList: api_response_data,\n                userTeamListSend: api_response_data\n            })\n\n            if (this.state.userTeamListSend) {\n                let tempList = [];\n                this.state.userTeamListSend.map((data, key) => {\n\n                    tempList.push({ value: data, label: data.team_name })\n                    return '';\n                })\n\n                this.setState({ userTeamListSend: tempList });\n            }\n        }\n    }\n\n    callAfterAddFundPopup() {\n        if (WSManager.getFromConfirmPopupAddFunds()) {\n            // setValue.setisFromConfirmModal(false);\n            WSManager.setFromConfirmPopupAddFunds(false);\n            setTimeout(() => {\n                var contestData = WSManager.getContestFromAddFundsAndJoin();\n                this.joinGame(null, contestData.FixturedContestItem, contestData.TeamsSortedArray)\n            }, 100);\n        }\n    }\n   \n    ConfirmEvent = (dataFromConfirmPopUp) => {\n\n        if ((dataFromConfirmPopUp.selectedTeam.lineup_master_id != null && dataFromConfirmPopUp.selectedTeam.lineup_master_id == \"\") || dataFromConfirmPopUp.selectedTeam == \"\") {\n            Utilities.showToast(AppLabels.SELECT_NAME_FIRST, 1000);\n        } else {\n            var currentEntryFee = 0;\n            currentEntryFee = dataFromConfirmPopUp.entryFeeOfContest;\n            if (\n                (dataFromConfirmPopUp.FixturedContestItem.currency_type == 2 && (parseInt(currentEntryFee) <= parseInt(dataFromConfirmPopUp.balanceAccToMaxPercent))) || \n                (dataFromConfirmPopUp.FixturedContestItem.currency_type != 2 && (parseFloat(currentEntryFee) <= parseFloat(dataFromConfirmPopUp.balanceAccToMaxPercent)))\n                ) \n            {  \n                this.CallJoinGameApi(dataFromConfirmPopUp);\n            } \n            else {\n                if(dataFromConfirmPopUp.FixturedContestItem.currency_type == 2){\n                    if(Constants.EnableBuyCoin){    \n                        WSManager.setFromConfirmPopupAddFunds(true);\n                        WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                        WSManager.setPaymentCalledFrom(\"ContestListing\")\n                     this.props.history.push({ pathname: '/buy-coins', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true , state: {isFrom : 'contestList'}});\n\n                    }\n                    else{\n                        // Utilities.showToast('Not enough coins', 1000);\n                        this.props.history.push({ pathname:'/earn-coins', state: {isFrom : 'lineup-flow'}})\n                    }\n                }\n    \n                else{\n                    WSManager.setFromConfirmPopupAddFunds(true);\n                    WSManager.setContestFromAddFundsAndJoin(dataFromConfirmPopUp)\n                    WSManager.setPaymentCalledFrom(\"ContestListing\")\n                    this.props.history.push({ pathname: '/add-funds', contestDataForFunds: dataFromConfirmPopUp, fromConfirmPopupAddFunds: true });\n                }\n            }\n        }\n    }\n\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        let param = {\n            \"contest_id\": dataFromConfirmPopUp.FixturedContestItem.contest_id,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        let IsNetworkContest = this.state.FixtureData.is_network_contest == 1;\n         if(IsNetworkContest){\n            joinContestNetworkfantasy(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.ConfirmatioPopUpHide();\n                    this.setState({\n                        isNewCJoined: true\n                    })\n                    setTimeout(() => {\n\n                        //Analytics Calling \n                        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestjoin');\n\n                        WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'contestjoindaily');\n\n                        this.ThankYouModalShow()\n                    }, 300);\n                    WSManager.clearLineup();\n                } else {\n                    Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n                }\n            })\n        }\n        else{\n            joinContest(param).then((responseJson) => {\n\n                if (responseJson.response_code == WSC.successCode) {\n                    this.ConfirmatioPopUpHide();\n                    this.setState({\n                        isNewCJoined: true\n                    })\n                    setTimeout(() => {\n    \n                        //Analytics Calling \n                        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestjoin');\n    \n                        WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'contestjoindaily');\n    \n                        this.ThankYouModalShow()\n                    }, 300);\n                    WSManager.clearLineup();\n                } else {\n                    Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n                }\n            })\n        }\n        \n    }\n\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    }\n\n    goToLobby = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n        const matchParam = globalThis.props.match.params\n        globalThis.FixtureContestList(matchParam);\n    }\n\n    seeMyContest = () => {\n        this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n    }\n\n    createTeamAndJoin = (dataFromConfirmFixture, dataFromConfirmLobby) => {\n        WSManager.clearLineup();\n        let urlData = this.state.LobyyData;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        dateformaturl = dateformaturl.getDate() + '-' + (dateformaturl.getMonth() + 1) + '-' + dateformaturl.getFullYear();\n\n        if (urlData.home) {\n            this.props.history.push({ pathname: '/lineup/' + urlData.home.toLowerCase() + \"-vs-\" + urlData.away.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: dataFromConfirmFixture, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n        }\n        else {\n            let collectionName = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n            this.props.history.push({ pathname: '/lineup/' + collectionName.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: dataFromConfirmFixture, LobyyData: this.state.LobyyData, resetIndex: 1 } })\n        }\n\n    }\n\n    /* Handle contest listing filters */\n    hideFilter = () => {\n        this.setState({ showContestListFitler: false })\n    }\n\n    showFilter = () => {\n        this.setState({ showContestListFitler: true })\n    }\n\n    filterConditions(filterObj, obj) {\n        let eFee = parseInt(obj.entry_fee);\n        let partic = parseInt(obj.total_user_joined);\n        // let prize = parseInt(obj.prize_pool);\n\n\n        let prize_data = obj.prize_distibution_detail ? obj.prize_distibution_detail : obj.prize_distribution_detail;\n        let prizeAmount = this.getWinCalculation(prize_data);\n        let prize = prizeAmount.real > 0 ? prizeAmount.real : prizeAmount.bonus > 0 ? prizeAmount.bonus : prizeAmount.point;\n\n        let isWinBetween = prizeAmount.is_tie_breaker == 1 ? true : (prize >= filterObj.prizepool_from && prize <= filterObj.prizepool_to)\n\n        return (\n            (eFee >= filterObj.entry_fee_from && eFee <= filterObj.entry_fee_to)\n            &&\n            (partic >= filterObj.participants_from && partic <= filterObj.participants_to)\n            &&\n            isWinBetween\n        )\n    }\n\n    filterContestList = (filterObj) => {\n        const { allContestData } = this.state\n        if (filterObj.isReset) {\n            let tmpSortArray = []\n            _Map(allContestData.contest, (item) => {\n                tmpSortArray = [...tmpSortArray, ...item.contest_list];\n            })\n            this.setState({\n                showContestListFitler: false,\n                sortContestList: tmpSortArray,\n                FixturedContest: allContestData.contest,\n                SortContestTotal: allContestData.total_contest,\n                FixturedContestTotal: allContestData.total_contest,\n                FixturedPinContest: allContestData.pin_contest,\n                isFilterApplied: false\n            });\n        } else {\n            let cloneAllData = _cloneDeep(allContestData);\n            let tmpAllContest = [];\n            _Map(cloneAllData.contest, (item) => {\n                let filterArray = _filter(item.contest_list, (obj) => {\n                    return this.filterConditions(filterObj, obj)\n                })\n                if (filterArray.length > 0) {\n                    item['contest_list'] = filterArray;\n                    item['total'] = filterArray.length;\n                    tmpAllContest.push(item)\n                }\n            })\n            cloneAllData['contest'] = tmpAllContest;\n\n            let tmpArray = []\n            _Map(cloneAllData.contest, (item, index) => {\n                tmpArray = [...tmpArray, ...item.contest_list];\n            })\n\n\n            let filterPINArray = _filter(cloneAllData.pin_contest, (obj) => {\n                return this.filterConditions(filterObj, obj)\n            })\n\n            this.setState({\n                showContestListFitler: false,\n                sortContestList: tmpArray,\n                FixturedContest: cloneAllData.contest,\n                SortContestTotal: tmpArray.length + filterPINArray.length,\n                FixturedContestTotal: tmpArray.length + filterPINArray.length,\n                FixturedPinContest: filterPINArray,\n                isFilterApplied: true\n            });\n        }\n        this.setState({\n            entry_fee_from: filterObj.entry_fee_from,\n            entry_fee_to: filterObj.entry_fee_to,\n            participants_from: filterObj.participants_from,\n            participants_to: filterObj.participants_to,\n            prizepool_from: filterObj.prizepool_from,\n            prizepool_to: filterObj.prizepool_to\n        });\n    }\n\n    getContestWinnerCount(prizeDistributionDetail) {\n        if (prizeDistributionDetail.length > 0) {\n            if ((prizeDistributionDetail[prizeDistributionDetail.length - 1].max) > 1) {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \" + AppLabels.WINNERS\n            } else {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \" + AppLabels.WINNER;\n            }\n        }\n    }\n\n    sortViewByGroup() {\n        if (this.state.showGroupView) {\n            this.setState({\n                showGroupView: false\n            }, () => {\n                ls.set('show_group_view', false);\n            })\n        } else {\n            this.setState({\n                showGroupView: true,\n            }, () => {\n                ls.set('show_group_view', true);\n            })\n        }\n\n    }\n\n    redirectToMyTeams() {\n        if (this.state.userTeamListSend.length > 0) {\n            let urlParams = '';\n            if (this.state.LobyyData && this.state.LobyyData.home) {\n                urlParams = Utilities.setUrlParams(this.state.LobyyData);\n            }\n            else {\n                urlParams = Utilities.replaceAll(this.state.LobyyData.collection_name, ' ', '_').toLowerCase();\n            }\n\n            let sportsId = Utilities.getSelectedSportsForUrl();\n            let collection_master_id = this.state.LobyyData.collection_master_id;\n            let keyName = 'my-teams' + sportsId + collection_master_id;\n            if (this.state.isNewCJoined) {\n                preTeamsList[keyName] = [];\n            } else {\n                preTeamsList[keyName] = this.state.TeamList;\n            }\n            this.props.history.push({ pathname: \"/\" + sportsId + '/my-teams/' + collection_master_id + \"/\" + urlParams, state: { LobyyData: this.state.LobyyData } });\n\n        } else {\n\n            let urlData = this.state.LobyyData;\n            WSManager.clearLineup()\n            let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n            dateformaturl = new Date(dateformaturl);\n            dateformaturl = dateformaturl.getDate() + '-' + (dateformaturl.getMonth() + 1) + '-' + dateformaturl.getFullYear();\n            if (urlData.home) {\n                this.props.history.push({ pathname: '/lineup/' + urlData.home.toLowerCase() + \"-vs-\" + urlData.away.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: this.state.LobyyData, LobyyData: this.state.LobyyData, from: 'MyTeams', isFromMyTeams: true, isFrom: \"MyTeams\", resetIndex: 1 } })\n            }\n            else {\n                let collectionName = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                this.props.history.push({ pathname: '/lineup/' + collectionName.toLowerCase() + \"-\" + dateformaturl, state: { FixturedContest: this.state.LobyyData, LobyyData: this.state.LobyyData, from: 'MyTeams', isFromMyTeams: true, isFrom: \"MyTeams\", resetIndex: 1 } })\n            }\n        }\n    }\n\n    showDetail(Group, index) {\n        Group.isReadMore = true;\n        var arrFixture = this.state.FixturedContest;\n        arrFixture[index] = Group;\n        this.setState({ FixturedContest: arrFixture });\n    }\n\n    hideDetail(Group, index) {\n        Group.isReadMore = undefined;\n        var arrFixture = this.state.FixturedContest;\n        arrFixture[index] = Group;\n        this.setState({ FixturedContest: arrFixture });\n    }\n\n    renderContestView(data) {\n        let { contest, isPinned, isGroup } = data;\n        let sponserImage = data.contest.sponsor_logo && data.contest.sponsor_logo != null ? data.contest.sponsor_logo : 0\n        console.log('data.sponsor_logo',data.sponsor_logo,data)\n        return (\n            <div className={\"contest-list\" + (isGroup ? ' contest-card-body' : '') + (isPinned ? ' pinned' : '')}>\n                <div className=\"contest-list-header\" onClick={(event) => globalThis.ContestDetailShow(contest, 2, event)}>\n\n\n                    <div className=\"contest-heading\">\n                        {\n                            isPinned && <div className=\"contest-pin\">\n                                <img alt='' src={Images.pinned_ic}>\n\n                                </img>\n                            </div>\n                        }\n                        {contest.multiple_lineup > 1 &&\n                            <OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" overlay={\n                                <Tooltip id=\"tooltip\" className=\"tooltip-featured\">\n                                    <strong>{AppLabels.MAX_TEAM_FOR_MULTI_ENTRY} {contest.multiple_lineup} {AppLabels.MAX_MULTI_ENTRY_TEAM}</strong>\n                                </Tooltip>\n                            }>\n                                <span className=\"featured-icon\" onClick={(e) => e.stopPropagation()}>m</span>\n                            </OverlayTrigger>\n\n                        }\n                        {\n                            parseInt(contest.total_user_joined) >= parseInt(contest.minimum_size) &&\n                            <OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" overlay={\n                                <Tooltip id=\"tooltip\" className=\"tooltip-featured\">\n                                    <strong>{AppLabels.GUARANTEED_DESCRIPTION}</strong>\n                                </Tooltip>\n                            }>\n                                <span className=\"featured-icon\" onClick={(e) => e.stopPropagation()}>g</span>\n                            </OverlayTrigger>\n\n                        }\n                        {\n                            contest.is_confirmed == 1 && parseInt(contest.total_user_joined) >= parseInt(contest.minimum_size) &&\n                            <OverlayTrigger trigger={['hover', 'focus']} placement=\"left\" overlay={\n                                <Tooltip id=\"tooltip\" className=\"tooltip-featured\">\n                                    <strong>{AppLabels.CONFIRM_DESCRIPTION}</strong>\n                                </Tooltip>\n                            }>\n                                <span className=\"featured-icon\" onClick={(e) => e.stopPropagation()}>c</span>\n                            </OverlayTrigger>\n\n                        }\n\n\n                        <h3 className=\"win-type\">\n                            {\n                                contest.contest_title ?\n                                <span>{contest.contest_title}</span>\n                                :\n                                <React.Fragment>\n                                    <span onClick={(event) => globalThis.ContestDetailShow(contest, 1, event)}>\n                                        <span className=\"prize-pool-text text-capitalize\" >{AppLabels.WIN} </span>\n        \n                                        <span>\n                                            {this.getPrizeAmount(contest.prize_distibution_detail)}\n                                        </span>\n        \n                                        {contest.prize_type == 2 &&\n                                            <span className='prize-pool-value'>\n                                                {contest.prize_pool != \"0\" && <img src={Images.COINS} alt=\"\" />}\n                                                {contest.prize_pool == \"0\" ? ' ' + AppLabels.PRACTICE : contest.prize_pool}</span>\n                                        }\n                                    </span>\n                                    {\n                                        (Constants.SELECTED_GAMET != Constants.GameType.MultiGame\n                                            &&\n                                            <i onClick={(shareContestEvent) => globalThis.shareContest(shareContestEvent, contest)} className=\"icon-share\"></i>\n        \n                                        )\n                                    }\n                                </React.Fragment>\n                            }\n\n                        </h3>\n                        {\n                            Constants.OnlyCoinsFlow != 1 && contest.max_bonus_allowed != '0' &&\n                                <div className=\"text-small-italic mt3x\">\n                                    <span onClick={(event) => globalThis.ContestDetailShow(contest, 1, event)}>\n                                        {AppLabels.Use} {contest.max_bonus_allowed}{'% '}{AppLabels.BONUS_CASH_CONTEST_LISTING}\n                                    </span>\n                                </div>\n                        }\n\n                    </div>\n                    <div className=\"display-table\">\n                        <div className=\"progress-bar-default display-table-cell v-mid\" onClick={(event) => globalThis.ContestDetailShow(contest, 3, event)}>\n                            <ProgressBar now={this.ShowProgressBar(contest.total_user_joined, contest.minimum_size)} className={parseInt(contest.total_user_joined) >= parseInt(contest.minimum_size) ? '' : 'danger-area'} />\n                            <div className=\"progress-bar-value\" >\n                                <span className=\"user-joined\">{contest.total_user_joined}</span><span className=\"total-entries\"> / {contest.size} {AppLabels.ENTRIES}</span>\n                                <span className=\"min-entries\">{AppLabels.MIN} {contest.minimum_size}</span>\n                            </div>\n                        </div>\n                        <div className=\"display-table-cell v-mid position-relative entry-criteria\">\n                            <Button className=\"white-base btnStyle btn-rounded\" bsStyle=\"primary\" onClick={(event) => globalThis.check(event, contest)}>\n                                {\n                                    contest.entry_fee > 0 ? ((contest.prize_type == 1 || contest.prize_type == 0) ?\n                                        <React.Fragment>\n                                            {\n                                                contest.currency_type == 2 ?\n                                                <img className=\"img-coin\" alt='' src={Images.IC_COIN} />\n                                                :\n                                                <span>\n                                                    {Utilities.getMasterData().currency_code}\n                                                    {/* {AppLabels.JOIN + \"  \" + Utilities.getMasterData().currency_code + contest.entry_fee} */}\n                                                </span>\n                                            }\n                                            {contest.entry_fee}\n                                        </React.Fragment>\n                                        :\n                                        <React.Fragment>\n                                            <span >\n                                                {/* {AppLabels.JOIN}&nbsp; */}\n                                                <i className=\"icon-bean\"></i>\n                                            </span>\n                                            {contest.entry_fee}\n                                        </React.Fragment>\n                                    ) : AppLabels.FREE\n                                }\n                            </Button>\n                        </div>\n\n                    </div>\n                    {\n                        data.contest.sponsor_logo && data.contest.sponsor_logo != null &&\n                        <div className={\"contest-card-footer\" + (Constants.SELECTED_GAMET == Constants.GameType.DFS ? ' height-sponsor-strip' : '')}>\n                            {/* {\n                                <div className=\"sponser-by-text\">\n                                    {AppLabels.SPONSORED_BY}\n\n                                </div>\n                            } */}\n                            <div className=\"sponsor-logo-section\">\n                                {Constants.SELECTED_GAMET == Constants.GameType.DFS &&\n                                    window.ReactNativeWebView ?\n                                    <a\n                                        href\n                                        onClick={(event) => Utilities.callNativeRedirection(Utilities.getValidSponserURL(data.contest.sponsor_link, event))}\n                                        className=\"attached-url\">\n                                        <img alt='' className=\"lobby_sponser-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? '' : Utilities.getSponserURL(sponserImage)} />\n                                    </a>\n                                    :\n                                    <a\n                                        href={Utilities.getValidSponserURL(data.contest.sponsor_link)}\n                                        onClick={(event) => event.stopPropagation()}\n                                        target='__blank'\n                                        className=\"attached-url\">\n                                        <img alt='' className=\"lobby_sponser-image\" style={{ resizeMode: 'contain' }} src={sponserImage == 0 ? '' : Utilities.getSponserURL(sponserImage)} />\n                                    </a>\n                                }\n                            </div>\n\n                        </div>\n                    }\n                    {/* <div className=\"footer-sponser-img\"></div> */}\n                </div>\n            </div>\n        );\n\n    }\n\n    getWinCalculation = (prize_data) => {\n        let prizeAmount = { 'real': 0, 'bonus': 0, 'point': 0, 'is_tie_breaker': 0 };\n        prize_data && prize_data.map(function (lObj, lKey) {\n            var amount = 0;\n            if (lObj.max_value) {\n                amount = parseFloat(lObj.max_value);\n            } else {\n                amount = parseFloat(lObj.amount);\n            }\n            if (lObj.prize_type == 3) {\n                prizeAmount['is_tie_breaker'] = 1;\n            }\n            if (lObj.prize_type == 0) {\n                prizeAmount['bonus'] = parseFloat(prizeAmount['bonus']) + amount;\n            } else if (lObj.prize_type == 2) {\n                prizeAmount['point'] = parseFloat(prizeAmount['point']) + amount;\n            } else {\n                prizeAmount['real'] = parseFloat(prizeAmount['real']) + amount;\n            }\n        })\n        return prizeAmount;\n    }\n\n    getPrizeAmount = (prize_data) => {\n        let prizeAmount = this.getWinCalculation(prize_data);\n        return (\n            <React.Fragment>\n                {\n                    prizeAmount.is_tie_breaker == 0 && prizeAmount.real > 0 ?\n                        <span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}{parseFloat(prizeAmount.real).toFixed(0)}</span>\n                        : prizeAmount.is_tie_breaker == 0 && prizeAmount.bonus > 0 ? <div className=\"contest-listing-prizes\" ><i className=\"icon-bonus\" />{parseFloat(prizeAmount.bonus).toFixed(0)}</div>\n                            : prizeAmount.is_tie_breaker == 0 && prizeAmount.point > 0 ? <span style={{ display: 'inlineBlock' }}> <img className=\"img-coin\" alt='' src={Images.IC_COIN} />{parseFloat(prizeAmount.point).toFixed(0)}</span>\n                                : AppLabels.PRIZES\n                }\n            </React.Fragment>\n        )\n\n\n    }\n\n    showDownloadApp=()=>{\n        this.ConfirmatioPopUpHide();\n        this.setState({\n            showDAM : true\n        })\n    }\n\n    hideDownloadApp=()=>{\n        this.setState({\n            showDAM : false\n        })\n    }\n\n    render() {\n        const {\n            showContestDetail,\n            FixtureData,\n            showConfirmationPopUp,\n            userTeamListSend,\n            LobyyData,\n            showSharContestModal,\n            activeTab,\n            showLoadMore,\n            FixturedContestTotal,\n            SortContestTotal,\n            showThankYouModal,\n            hasMore,\n            LoaderShow,\n            showGroupView,\n            showCollectionInfo,\n            isFilterApplied,\n            sortContestList,\n            FixturedContest,\n            FixturedPinContest,\n            HeaderOption,\n            FixturedDetail,\n            allowCollection,\n            showContestListFitler,\n            entry_fee_from,\n            entry_fee_to,\n            participants_from,\n            participants_to,\n            prizepool_from,\n            prizepool_to,\n            isListLoading,\n            ShimmerList,\n            showDAM\n        } = this.state;\n\n        const FitlerOptions = {\n            showContestListFitler: showContestListFitler,\n            entry_fee_from: entry_fee_from,\n            entry_fee_to: entry_fee_to,\n            participants_from: participants_from,\n            participants_to: participants_to,\n            prizepool_from: prizepool_from,\n            prizepool_to: prizepool_to\n        }\n\n        let showMyTeamBtn = true;\n\n        if (this.props.location.state && this.props.location.state.from == 'MyTeams') {\n            showMyTeamBtn = false;\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"web-container contest-listing-web-conatiner header-margin minus-header-height \" + (Constants.SELECTED_GAMET == Constants.GameType.MultiGame && FixturedDetail && FixturedDetail.match_list && FixturedDetail.match_list.length > 1 ? '  contest-listing-web-collection' : '')}>\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.contestListing.title}</title>\n                            <meta name=\"description\" content={MetaData.contestListing.description} />\n                            <meta name=\"keywords\" content={MetaData.contestListing.keywords}></meta>\n                        </Helmet>\n\n\n                        <CustomHeader\n                            LobyyData={LobyyData}\n                            ref={(ref) => this.headerRef = ref}\n                            HeaderOption={HeaderOption}\n                            {...this.props}\n                            showLobbyFitlers={this.showFilter} />\n\n                        <Filter\n                            {...this.props}\n                            FitlerOptions={FitlerOptions}\n                            hideFilter={this.hideFilter}\n                            filterContestList={this.filterContestList}></Filter>\n\n                        <div className=\"webcontainer-inner\">\n                            {\n                                Constants.SELECTED_GAMET == Constants.GameType.MultiGame &&\n                                <CollectionSlider\n                                    contestSliderData={FixturedDetail}\n                                    collectionInfo={true}\n                                    isFrom={\"ContestListing\"}\n                                    CollectionInfoShow={this.CollectionInfoShow} />\n                            }\n\n                            {LobyyData.custom_message != '' && LobyyData.custom_message != null &&\n                                <div className=\"\">\n                                    <Alert variant=\"warning\" className=\"alert-warning msg-alert-container border-radius-0\">\n                                        <div className=\"msg-alert-wrapper\">\n                                            <span className=\"\"><i className=\"icon-megaphone\"></i></span>\n                                            <span>{LobyyData.custom_message}</span>\n                                        </div>\n                                    </Alert>\n                                </div>\n                            }\n\n                            {\n                                (sortContestList.length > 0 || FixturedContest.length > 0) &&\n                                <div className=\"sort-contest-wrapper mt10 p-t p-h\" onClick={() => this.sortViewByGroup()}>\n                                    <div className=\"sort-contest-section\">\n                                        <i className=\"icon-arrow-right\"></i>\n                                        <div className=\"pull-right verity-count\">\n                                            {showGroupView ? SortContestTotal : FixturedContestTotal}\n                                        </div>\n                                        {!showGroupView ? AppLabels.GROUP_CONTESTS : AppLabels.SORT_CONTESTS}\n                                        <p> {AppLabels.GROUP_CONTESTS_MSG}</p>\n                                    </div>\n                                </div>\n                            }\n\n                            <Row>\n                                <Col sm={12}>\n                                    <InfiniteScroll\n                                        dataLength={showGroupView ? FixturedContest.length : sortContestList.length}\n                                        pullDownToRefreshThreshold={300}\n                                        refreshFunction={!showContestDetail && this.handleRefresh}\n                                        pullDownToRefresh={false}\n                                        hasMore={hasMore}\n                                        loader={\n                                            LoaderShow == true &&\n                                            <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                        }\n                                        pullDownToRefreshContent={\n                                            <h3 style={{ textAlign: 'center', fontSize: 14 }}>&#8595; {AppLabels.PULL_DOWN_TO_REFRESH}</h3>\n                                        }\n                                        releaseToRefreshContent={\n                                            <h3 style={{ textAlign: 'center', fontSize: 14 }}>&#8593; {AppLabels.RELEASE_TO_REFRESH}</h3>\n                                        }>\n\n                                        {\n                                            FixturedPinContest &&\n                                            _Map(FixturedPinContest, (contest, index) => {\n                                                return (\n                                                    <div className=\"contest-list-wrapper mt20 mb20\" key={index} >\n                                                        {this.renderContestView({ index: index, contest: contest, isPinned: true })}\n                                                    </div>\n                                                )\n                                            })\n                                        }\n\n                                        {showGroupView && _Map(FixturedContest, (group, idx) => {\n                                            var arrGroupList = [];\n                                            if (group.contest_list.length > 2 && group.isReadMore == undefined) {\n                                                arrGroupList.push(group.contest_list[0]);\n                                                arrGroupList.push(group.contest_list[1]);\n                                            } else {\n                                                arrGroupList = group.contest_list;\n                                            }\n\n                                            return (\n                                                <div className=\"contest-list-wrapper mt20 mb20\" key={idx}>\n                                                    <div className={\"contest-listing-card\" + (showLoadMore && group.total > 2 ? ' more-contest-card' : '')}>\n                                                        <div className=\"contest-listing-card-header\">\n                                                            <img src={Images.S3_BUCKET_IMG_PATH + group.icon} alt=\"\" className=\"contest-img\" />\n                                                            <div className=\"contest-name-heading\">{group.group_name}</div>\n                                                            <div className=\"contest-name-heading-description\">{group.description}</div>\n                                                        </div>\n                                                        {\n                                                            _Map(arrGroupList, (contest, index) => {\n                                                                return (\n                                                                    <div key={index} >\n                                                                        {this.renderContestView({ index: index, contest: contest, isGroup: true, })}\n                                                                    </div>\n                                                                )\n                                                            })\n                                                        }\n\n                                                        {group.total > 2 && group.isReadMore == undefined &&\n                                                            <div className=\"text-center show-more-contest\" onClick={() => this.showDetail(group, idx)}>\n                                                                {AppLabels.MORE_CONTEST}<i className=\"icon-arrow-down\"></i>\n                                                            </div>\n                                                        }\n\n                                                        {group.total > 2 && group.isReadMore == true &&\n                                                            <div className=\"text-center show-more-contest\" onClick={() => this.hideDetail(group, idx)}>\n                                                                {AppLabels.LESS_CONTEST}<i className=\"icon-arrow-up\"></i>\n                                                            </div>\n                                                        }\n                                                    </div>\n                                                </div>\n                                            );\n                                        })\n                                        }\n                                        {\n                                            !showGroupView && _Map(sortContestList, (contest, index) => {\n                                                return (\n                                                    <div className=\"contest-list-wrapper mt20 mb20\" key={index} >\n                                                        {this.renderContestView({ index: index, contest: contest })}\n                                                    </div>\n                                                )\n                                            })\n                                        }\n                                        {\n                                            FixturedContest.length == 0 && FixturedPinContest.length == 0 && !isListLoading &&\n                                            <NoDataView\n                                                BG_IMAGE={Images.no_data_bg_image}\n                                                CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                MESSAGE_1={isFilterApplied ? AppLabels.NO_RESULT_FOUND_FILTER_1 : AppLabels.NO_FIXTURES_MSG1}\n                                                MESSAGE_2={isFilterApplied ? AppLabels.NO_CONTEST_FOR_FILTER_2 : AppLabels.NO_FIXTURES_MSG3}\n                                                BUTTON_TEXT={AppLabels.GO_BACK_TO_LOBBY}\n                                                onClick={this.goBack}\n                                            />\n                                        }\n                                        {\n                                            FixturedContest.length == 0 && FixturedPinContest.length == 0 && isListLoading &&\n                                            ShimmerList.map((item, index) => {\n                                                return (\n                                                    <Shimmer key={index} index={index} />\n                                                )\n                                            })\n                                        }\n                                    </InfiniteScroll>\n                                </Col>\n                            </Row>\n                        </div>\n\n                        {\n                            WSManager.loggedIn() && showMyTeamBtn &&\n                            <Button onClick={() => this.redirectToMyTeams()} className=\"btn-block btn-primary bottom\">{userTeamListSend.length > 0 ? AppLabels.MY_TEAMS : AppLabels.CREATE_YOUR_TEAM}</Button>\n                        }\n\n                        {\n                            showContestDetail &&\n                            <ContestDetailModal\n                                IsContestDetailShow={showContestDetail}\n                                onJoinBtnClick={this.onSubmitBtnClick}\n                                IsContestDetailHide={this.ContestDetailHide}\n                                OpenContestDetailFor={FixtureData}\n                                activeTabIndex={activeTab}\n                                LobyyData={this.state.LobyyData} />\n                        }\n\n                        {\n                            showConfirmationPopUp &&\n                            <ConfirmationPopup\n                                IsConfirmationPopupShow={this.ConfirmatioPopUpShow}\n                                IsConfirmationPopupHide={this.ConfirmatioPopUpHide}\n                                TeamListData={userTeamListSend}\n                                FixturedContest={FixtureData}\n                                ConfirmationClickEvent={this.ConfirmEvent}\n                                CreateTeamClickEvent={this.createTeamAndJoin}\n                                lobbyDataToPopup={LobyyData}\n                                fromContestListingScreen={true}\n                                createdLineUp={this.state.lineup_master_id}\n                                showDownloadApp={this.showDownloadApp}\n                            />\n                        }\n\n                        {\n                            showSharContestModal &&\n                            <ShareContestModal\n                                IsShareContestModalShow={this.shareContestModalShow}\n                                IsShareContestModalHide={this.shareContestModalHide}\n                                FixturedContestItem={FixtureData} />\n                        }\n\n                        {\n                            showThankYouModal &&\n                            <Thankyou ThankyouModalShow={this.ThankYouModalShow}\n                                ThankYouModalHide={this.ThankYouModalHide}\n                                goToLobbyClickEvent={this.goToLobby}\n                                seeMyContestEvent={this.seeMyContest} />\n                        }\n\n                        {\n                            showCollectionInfo &&\n                            <CollectionInfoModal\n                                IsCollectionInfoShow={showCollectionInfo}\n                                IsCollectionInfoHide={this.CollectionInfoHide} />\n                        }                        \n                        {\n                            showDAM &&\n                            <DownloadAppBuyCoinModal\n                                hideM={this.hideDownloadApp}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/Contest.jsx",["3846","3847","3848","3849","3850","3851","3852","3853","3854","3855","3856","3857","3858","3859","3860","3861","3862","3863","3864","3865","3866","3867","3868","3869","3870","3871","3872","3873","3874","3875","3876","3877"],"import React from 'react';\nimport { ProgressBar } from 'react-bootstrap';\nimport Images from '../components/images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport CountdownTimer from './CountDownTimer';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport ContestDetailModal from '../Modals/ContestDetail';\nimport {createBrowserHistory} from 'history';\nimport {Utilities, parseURLDate} from '../Utilities/Utilities';\nimport CustomHeader from '../components/CustomHeader';\nimport {Sports} from \"../JsonFiles\";\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../helper/MetaData\";\nimport Slider from \"react-slick\";\nimport { getPublicContestDetail,getPublicContestDetailMultiGame,getPublicContestNetworkfantasy } from '../WSHelper/WSCallings';\nimport { MomentDateComponent } from '../Component/CustomComponent';\nimport * as Constants from \"../helper/Constants\";\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\nvar globalThis = null;\n\nexport default class Contest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contestData: '',\n            prizeList:[],\n            showContestDetail: false,\n            FixtureData: '',\n            referredCodeForSignup: '',\n            is_network_contest:0,\n            allowCollection: Utilities.getMasterData().allow_collection,\n        }\n    }\n    componentWillMount() {\n        WSManager.setShareContestJoin(true);\n        if(Constants.SELECTED_GAMET != Constants.GameType.MultiGame && Constants.SELECTED_GAMET != Constants.GameType.Free2Play){\n            WSManager.setPickedGameType(Constants.GameType.DFS);\n          }\n        if (parsed.nf != \"\" && parsed.nf != null && parsed.nf == 1) {\n            this.setState({ is_network_contest: 1 })\n        }  \n        this.checkOldUrlPattern();\n        this.checkForUserRefferal();\n    }\n\n    /**\n     * @description this method is used to replace old url pattern to new eg. from \"/7/contest-listing\" to \"/cricket/contest-listing\"\n     */\n    checkOldUrlPattern=()=> {\n        \n        let sportsId = this.props.match.params.sportsId;\n        if(!(sportsId in Sports)){\n            if(sportsId in Sports.url){\n                let sportsId = this.props.match.params.sportsId;\n                let contest_unique_id = this.props.match.params.contest_unique_id;\n                this.props.history.replace(\"/\"+ Sports.url[sportsId]+\"/contest/\"+contest_unique_id);\n                return;\n            }\n        }\n    }\n\n    checkForUserRefferal() {\n        if (parsed.referral != \"\") {\n            WSManager.setReferralCode(parsed.referral)\n        }\n    }\n\n    getPublicContest(data) {\n        let param = {\n            \"contest_unique_id\": data.contest_unique_id\n\n        }\n        let methodApi;\n        if(this.state.is_network_contest == 1){\n            methodApi = getPublicContestNetworkfantasy;\n\n        }\n        else{\n             methodApi = this.state.is_network_contest == 1 ? getPublicContestNetworkfantasy : Constants.SELECTED_GAMET == Constants.GameType.MultiGame ? getPublicContestDetailMultiGame : getPublicContestDetail ;\n\n        }\n           methodApi(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n\n                this.setState({\n                    contestData: responseJson.data,\n                    prizeList:responseJson.data.prize_distibution_detail\n                })\n                if (responseJson.data.total_user_joined == responseJson.data.size) {\n                    Utilities.showToast(AppLabels.Entry_for_the_contest, 3000);\n                }\n            }\n        }) \n      }\n\n\n    componentDidMount() {\n        globalThis = this;\n        const matchParam = this.props.match.params\n        this.getPublicContest(matchParam)\n    }\n\n    ContestDetailShow = (data) => {\n        this.setState({\n            FixtureData: data,\n            showContestDetail: true,\n        });\n    }\n\n    ContestDetailHide = () => {\n        this.setState({\n            showContestDetail: false,\n        });\n    }\n\n    onSubmitBtnClick = (data) => {\n        WSManager.clearLineup();\n        let urlData = data;\n        let dateformaturl = parseURLDate(urlData.season_scheduled_date);\n        let lineupPath = ''\n        if(urlData.home){\n            lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n        }\n        else{\n            let pathurl = Utilities.replaceAll(urlData.collection_name,' ','_');\n            lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n        }\n        \n        if (WSManager.loggedIn()) {\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: data,from:'share_contest' ,isFrom:'shareContest',resetIndex: 1 } })\n        }\n        else {\n            this.props.history.push({\n                pathname: '/signup', state: {\n                    joinContest: true,\n                    lineupPath: lineupPath.toLowerCase(),\n                    FixturedContest: this.state.FixtureData,\n                    LobyyData: data\n                }\n            })\n        }\n\n    }\n\n\n    ShowProgressBar = (join, total) => {\n        return join * 100 / total;\n    }\n\n    getContestWinnerCount(prizeDistributionDetail) {\n        if (prizeDistributionDetail && prizeDistributionDetail.length > 0) {\n            if ((prizeDistributionDetail[prizeDistributionDetail.length - 1].max) > 1) {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \"+AppLabels.WINNERS\n            } else {\n                return prizeDistributionDetail[prizeDistributionDetail.length - 1].max + \" \"+AppLabels.WINNER\n            }\n        }\n    }\n\n    FixtureListFunction = (item) =>{\n        return (\n            <div className=\"collection-list\">\n                <div className=\"display-table\">\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w-lobby-40\">\n                        <div className=\"team-block\">\n                            <span className=\"team-name text-uppercase\">{item.home}</span>\n                            <span className=\"verses\">{AppLabels.VS}</span>\n                            <span className=\"team-name text-uppercase\">{item.away}</span>\n                        </div>\n                        <div className=\"match-timing\">\n                            {\n                                Utilities.showCountDown(item) ?\n                                    <div className=\"countdown time-line\">\n                                        {item.game_starts_in && <CountdownTimer deadlineTimeStamp={item.game_starts_in} currentDateTimeStamp={item.today} />}\n                                    </div> :\n                                    <span> <MomentDateComponent data={{date:item.season_scheduled_date,format:\"D MMM - hh:mm A \"}} /></span>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"display-table-cell text-center v-mid w20\">\n                        <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" className=\"team-img\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n    getPrizeAmount = (prize_data) => {\n        let prize_text = \"Prizes\";\n        let is_tie_breaker = 0;\n        let prizeAmount = { 'real': 0, 'bonus': 0, 'point': 0 };\n        return (\n            <React.Fragment>\n                {\n                    prize_data && prize_data.map(function (lObj, lKey) {\n                        var amount = 0;\n                        if (lObj.max_value) {\n                            amount = parseFloat(lObj.max_value);\n                        } else {\n                            amount = parseFloat(lObj.amount);\n                        }\n                        if (lObj.prize_type == 3) {\n                            is_tie_breaker = 1;\n                        }\n                        if (lObj.prize_type == 0) {\n                            prizeAmount['bonus'] = parseFloat(prizeAmount['bonus']) + amount;\n                        } else if (lObj.prize_type == 2) {\n                            prizeAmount['point'] = parseFloat(prizeAmount['point']) + amount;\n                        } else {\n                            prizeAmount['real'] = parseFloat(prizeAmount['real']) + amount;\n                        }\n                    })\n                }\n                \n                {\n                    is_tie_breaker == 0 && prizeAmount.real > 0 ?\n                    <span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}{parseFloat(prizeAmount.real).toFixed(0)}</span>\n                    : is_tie_breaker == 0 && prizeAmount.bonus > 0 ? <span className=\"contest-prizes margin-contest\"><i className=\"icon-bonus\" />{parseFloat(prizeAmount.bonus).toFixed(0)}</span>\n                    :is_tie_breaker == 0 && prizeAmount.point > 0 ? <span style={{marginLeft: '14px',display: 'inlineBlock' }}> <img className=\"img-coin-contest\" src={Images.IC_COIN} />{parseFloat(prizeAmount.point).toFixed(0)}</span>\n                    : AppLabels.PRIZES\n                }\n            </React.Fragment>\n        )\n\n\n    }\n\n    render() {\n        globalThis = this;\n        const {\n            contestData,\n            showContestDetail,\n            FixtureData,\n            allowCollection\n        } = this.state;\n\n        const HeaderOption = {\n            back: false,\n            filter: false,\n            title: AppLabels.Contest\n        }\n\n        var settings = {\n            infinite: false,\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            variableWidth: false,\n            centerPadding: '100px 0 5px',\n            initialSlide: 0,\n            className: \"center\",\n            centerMode: true,\n            responsive: [\n                {\n                    breakpoint: 767,\n                    settings: {\n                        slidesToShow: 1,\n                    }\n                },\n                {\n                    breakpoint: 414,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '60px 0 10px',\n                    }\n                },\n                {\n                    breakpoint: 320,\n                    settings: {\n                        slidesToShow: 1,\n                        centerPadding: '20px 0 10px',\n                        afterChange: '',\n                    }\n                }\n            ]\n        };\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className={\"web-container header-margin web-container-fixed share-contest-wrapper\" + ( Constants.SELECTED_GAMET == Constants.GameType.MultiGame  && contestData && contestData.match_list&&contestData.match_list.length > 1 ? ' share-collection-wrapper' : ' ')}>\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <meta name=\"keywords\" content={MetaData.sharedcontest.keywords} />\n\n                            <title>{MetaData.sharedcontest.title}</title>\n                            <meta name=\"description\" content={contestData ? contestData.collection_name+\" | \"+contestData.contest_name : MetaData.sharedcontest.description} />                            \n                            {/* <meta property=\"og:description\" content={contestData ? contestData.collection_name+\" | \"+contestData.contest_name : MetaData.sharedcontest.description} /> */}\n                            <meta property=\"og:title\" content={contestData ? contestData.contest_name : MetaData.sharedcontest.title}></meta>\n                            <link rel=\"canonical\" href={window.location.href} />\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                            <div className=\"contest-card contest-card-wrapper\">\n                                <div className=\"contest-card-header \">\n                                    <ul className={ Constants.SELECTED_GAMET == Constants.GameType.MultiGame  ? \"fixture-list-content\" : \"\"}>\n                                        { Constants.SELECTED_GAMET != Constants.GameType.MultiGame  &&\n                                            <React.Fragment>\n                                                <li className=\"team-left-side\">\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.home_flag ? Utilities.teamFlagURL(contestData.home_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                    <span className=\"team-name\">{contestData.home}</span> \n                                                </li>\n                                                <li className=\"progress-middle\">\n                                                    <div className=\"team-content pb10 public-contest\">\n                                                        <p>{contestData.league_name}</p>\n                                                        {\n                                                            Utilities.showCountDown(contestData) ?\n\n                                                                <div className=\"share-contest-countdown\">\n                                                                    {contestData.game_starts_in && <CountdownTimer deadlineTimeStamp={contestData.game_starts_in} />}\n                                                                </div> :\n                    \n                                                                <span className=\"share-contest-time-date\"> \n                                                                    <MomentDateComponent data={{date:contestData.season_scheduled_date,format:\"D MMM - hh:mm A \"}} /> \n                                                                </span>\n\n                                                        }\n                                                    </div>\n                                                </li>\n                                                <li className=\"team-right-side\">\n                                                    <span className=\"team-name\">{contestData.away}</span>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.away_flag ? Utilities.teamFlagURL(contestData.away_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                </li>\n                                            </React.Fragment>\n                                        }\n                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame  && contestData &&contestData.match_list&& contestData.match_list.length == 1 &&\n                                            <React.Fragment>\n                                                <li className=\"team-left-side\">\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.match_list ? Utilities.teamFlagURL(contestData.match_list[0].home_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                    <span className=\"team-name\">{contestData.match_list[0].home}</span> \n                                                </li>\n                                                <li className=\"progress-middle\">\n                                                    <div className=\"team-content pb10 public-contest\">\n                                                        <p>{contestData.match_list[0].league_name}</p>\n                                                        {\n                                                            Utilities.showCountDown(contestData) && contestData.today ?\n\n                                                                <div className=\"share-contest-countdown\">\n                                                                    {contestData.game_starts_in && <CountdownTimer deadlineTimeStamp={contestData.game_starts_in} currentDateTimeStamp={contestData.today} />}\n                                                                </div> :\n                    \n                                                                <span className=\"share-contest-time-date\"> \n                                                                    <MomentDateComponent data={{date:contestData.season_scheduled_date,format:\"D MMM - hh:mm A \"}} /> \n                                                                </span>\n\n                                                        }\n                                                    </div>\n                                                </li>\n                                                <li className=\"team-right-side\">\n                                                    <span className=\"team-name\">{contestData.match_list[0].away}</span>\n                                                    <div className=\"team-content-img\">\n                                                        <img src={contestData.match_list ? Utilities.teamFlagURL(contestData.match_list[0].away_flag) : \"\"} alt=\"\" />\n                                                    </div>\n                                                </li>\n                                            </React.Fragment>\n                                        }\n                                        {Constants.SELECTED_GAMET == Constants.GameType.MultiGame  && contestData && contestData.match_list&& contestData.match_list.length > 1 &&\n                                            <li className=\"progress-middle progress-middle-fullwidth \">\n                                                <div className=\"team-content pb10\">\n                                                    <p>{contestData.collection_name}</p>\n                                                    <div className=\"collection-match-info\">\n                                                        {contestData.match_list.length} {AppLabels.MATCHES}\n                                                        <span className=\"circle-divider\"></span>\n                                                        {\n                                                            Utilities.showCountDown(contestData) && contestData.today ?\n\n                                                                <div className=\"share-contest-countdown\">\n                                                                    {contestData.game_starts_in && <CountdownTimer deadlineTimeStamp={contestData.game_starts_in} currentDateTimeStamp={contestData.today} />}\n                                                                </div> :\n                    \n                                                                <span className=\"share-contest-time-date\"> \n                                                                    <MomentDateComponent data={{date:contestData.season_scheduled_date,format:\"D MMM - hh:mm A \"}} /> \n                                                                </span>\n\n                                                        }\n                                                    </div>\n                                                </div>\n                                                <div className=\"collection-body\">\n                                                    <Slider ref={sliderWrapper => this.sliderWrapper = sliderWrapper} {...settings} \n                                                            slideIndex={this.state.slideIndex}\n                                                    >\n                                                        {contestData.match_list && contestData.match_list.map((item, index) => {\n                                                                return (\n                                                                    <React.Fragment>\n                                                                        <div className=\"collection-list-slider\">\n                                                                            {this.FixtureListFunction(item)}\n                                                                        </div>\n                                                                    </React.Fragment>\n                                                                );\n                                                            })\n                                                        }                                                        \n                                                    </Slider>\n                                                </div>\n                                            </li>\n                                        }\n                                    </ul>\n                                </div>\n\n\n                                <div className=\"contest-list contest-card-body\" >\n                                    <div className=\"contest-list-header\">\n                                        <div className=\"contest-heading\">\n                                           \n                                            {/* <div className=\"contest-name\">{contestData.contest_name} </div> */}\n                                            {contestData.multiple_lineup > 0 &&\n                                                // <i className={\"icon-m  contest-type \" + ((contestData.guaranteed_prize == 2 && parseInt(contestData.total_user_joined) >= parseInt(contestData.minimum_size)) ? '' : 'right-0')}></i>\n\n                                                <span className=\"featured-icon\" onClick={(e)=>e.stopPropagation()}>m</span>\n                                            }\n                                            {\n                                                // contestData.guaranteed_prize == 2 && \n                                                parseInt(contestData.total_user_joined) >= parseInt(contestData.minimum_size) &&\n                                                // <i className=\"icon-g contest-type\"></i>\n                                                <span className=\"featured-icon\" onClick={(e)=>e.stopPropagation()}>g</span>\n\n                                            }\n                                            {\n                                                contestData.is_confirmed == 1 && parseInt(contestData.total_user_joined) >= parseInt(contestData.minimum_size) &&\n                                                <span className=\"featured-icon\" onClick={(e)=>e.stopPropagation()}>c</span>\n\n                                            }\n                                            {/* -----assured code here----*/}\n                                            <h3 className=\"win-type\">\n                                                {\n                                                    contestData.contest_title ?\n                                                    <span>{contestData.contest_title}</span>\n                                                    :\n                                                    <span >\n                                                        <span className=\"text-uppercase \" >\n                                                            {AppLabels.WIN + \" \" }\n                                                        </span>\n                                                        {this.getPrizeAmount(this.state.prizeList) }                                                        \n                                                    </span>\n                                                }\n                                            </h3>\n                                            {\n                                                contestData.max_bonus_allowed != '0' &&\n                                                <div className=\"text-small-italic\">\n                                                    {contestData.max_bonus_allowed}{'% '}{AppLabels.BONUS}\n                                                </div>\n                                            }\n                                        </div>\n                                        <div className=\"display-table\">\n                                            <div className=\"progress-bar-default display-table-cell v-mid\" >\n                                                <ProgressBar now={globalThis.ShowProgressBar(contestData.total_user_joined, contestData.minimum_size)} className={parseInt(contestData.total_user_joined) >= parseInt(contestData.minimum_size) ? ' ' : 'danger-area'} />\n                                                <div className=\"progress-bar-value\" >\n                                                    <span className=\"user-joined\">{contestData.total_user_joined}</span><span className=\"total-entries\"> / {contestData.size} {AppLabels.ENTRIES}</span>\n                                                    <span className=\"min-entries\">{AppLabels.MIN} {contestData.minimum_size}</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"display-table-cell v-mid position-relative entry-criteria pl15\" >\n                                                {parseInt(contestData.total_user_joined) < parseInt(contestData.size) && <button onClick={() => this.ContestDetailShow(contestData)} \n                                                className=\"white-base btnStyle btn-rounded btn btn-primary \">\n                                                {/* {AppLabels.JOIN}  */}\n                                                {\n                                                    contestData.currency_type == 2 ?\n                                                    <React.Fragment> \n                                                        <img src={Images.IC_COIN} alt=\"\" className=\"img-coin\" />\n                                                        {contestData.entry_fee}\n                                                    </React.Fragment>\n                                                    :\n                                                    <>\n                                                        {(contestData.prize_type == 0) &&\n                                                            <React.Fragment>\n                                                                <span> <i className=\"icon-bonus\"></i> </span>{contestData.entry_fee}\n                                                            </React.Fragment>\n                                                        }\n\n                                                        {(contestData.prize_type == 1) &&\n                                                            <React.Fragment> \n                                                                <span className=\"currency-span\">{Utilities.getMasterData().currency_code}</span>\n                                                                {contestData.entry_fee}\n                                                            </React.Fragment>\n                                                        }\n\n\n                                                        {contestData.prize_type == 2 &&\n                                                            <React.Fragment> \n                                                                <img src={Images.COINS} alt=\"\" className=\"beans-img\" />\n                                                                {contestData.entry_fee}\n                                                            </React.Fragment>\n                                                        }\n                                                    </>\n                                                }\n                                                </button>}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <button className=\"btn-block btn-primary bottom btn btn-default\" onClick={() => this.props.history.push('/lobby')}>{AppLabels.GO_TO_LOBBY}</button>\n                            {showContestDetail &&\n                                <ContestDetailModal showPCError={true} LobyyData={contestData} IsContestDetailShow={showContestDetail} onJoinBtnClick={this.onSubmitBtnClick} IsContestDetailHide={this.ContestDetailHide} OpenContestDetailFor={FixtureData}  />\n                            }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/views/MyTeams.jsx",["3878","3879","3880","3881","3882","3883","3884","3885","3886","3887","3888","3889","3890","3891","3892","3893","3894","3895","3896","3897","3898","3899","3900"],"import React from 'react';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport { Button, Table } from 'react-bootstrap';\nimport { getFixtureDetail, getFixtureDetailMultiGame,getUserTeams, getUserLineUpDetail } from \"../WSHelper/WSCallings\";\nimport { Utilities, _isEmpty } from '../Utilities/Utilities';\nimport { Sports } from \"../JsonFiles\";\nimport { AppSelectedSport, preTeamsList,Constants, setValue, SELECTED_GAMET, GameType } from '../helper/Constants';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport ls from 'local-storage';\nimport Images from '../components/images';\nimport WSManager from \"../WSHelper/WSManager\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport MyTeamViewAllModal from '../Modals/MyTeamViewAllModal/MyTeamViewAllModal';\nimport CustomHeader from '../components/CustomHeader';\nimport CountdownTimer from '../views/CountDownTimer';\nimport FieldViewRight from \"./FieldViewRight\";\nimport { NoDataView, MomentDateComponent } from '../Component/CustomComponent';\n\nexport default class MyTeams extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            TeamsList: [],\n            CollectionData: undefined,\n            isFromCreateTeam: false,\n            hasMore: false,\n            isLoaderShow: false,\n            offset: 0,\n            selectedTeam: '',\n            openTeam: '',\n            isViewAllShown: false,\n            allowCollection: Utilities.getMasterData().allow_collection,\n            sideView: false,\n            fieldViewRightData: [],\n            rootitem: []\n        }\n    }\n\n    componentWillMount() {\n        this.setLocationStateData();\n    }\n\n    componentDidMount() {\n        if (this.state.CollectionData) {\n            if (this.state.TeamsList.length === 0) {\n                this.getUserLineUpListApi(this.state.CollectionData)\n            }\n        }\n        else {\n            \n            let sportsId = this.props.match.params.sportsId;\n            let collection_master_id = this.props.match.params.collection_master_id;\n\n            sportsId = Sports[sportsId];\n            this.FixtureDetail(sportsId, collection_master_id);\n            if (sportsId) {\n                ls.set('selectedSports', sportsId.toString() || sportsId);\n                setValue.setAppSelectedSport(sportsId);\n            }\n        }\n    }\n\n    setLocationStateData() {\n        if (this.props.location && this.props.location.state) {\n            const { LobyyData, isFromCreateTeam } = this.props.location.state;\n\n            let keyName = 'my-teams' + Utilities.getSelectedSportsForUrl() + LobyyData.collection_master_id;\n            this.setState({\n                CollectionData: LobyyData ? LobyyData : undefined,\n                isFromCreateTeam: isFromCreateTeam ? isFromCreateTeam : false,\n                TeamsList: (preTeamsList[keyName] && preTeamsList[keyName].length > 0) ? preTeamsList[keyName] : []\n            })\n            setTimeout(() => {\n                if(this.headerRef){\n                    this.headerRef.GetHeaderProps(\"lobbyheader\", '', '', LobyyData ? LobyyData : '');\n                }                \n            }, 100);\n        }\n    }\n\n\n    sideViewHide = () => {\n        this.setState({\n            sideView: false,\n        })\n    }\n\n\n\n    createTeam() {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    getUserLineUpListApi = async (CollectionData) => {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"collection_master_id\": CollectionData.collection_master_id,\n        }\n        this.setState({ isLoaderShow: true })\n        let user_data = ls.get('profile');\n        var user_unique_id = 0;\n        if (user_data && user_data.user_unique_id) {\n            user_unique_id = user_data.user_unique_id;\n        }\n        var api_response_data = await getUserTeams(param, user_unique_id);\n        if (api_response_data) {\n            this.setState({ isLoaderShow: false })\n            this.setState({\n                TeamsList: api_response_data\n            },()=>{\n                let keyName = 'my-teams' + Utilities.getSelectedSportsForUrl() + CollectionData.collection_master_id;\n                preTeamsList[keyName] = api_response_data;\n            })\n        }\n    }\n\n    /**\n     * @description method to get fixture detail\n     */\n    FixtureDetail = async (sportsId, collection_master_id) => {\n        let param = {\n            \"sports_id\": sportsId,\n            \"collection_master_id\": collection_master_id,\n        }\n        this.setState({ isLoaderShow: true })\n        let methodApi = SELECTED_GAMET == GameType.MultiGame ? getFixtureDetailMultiGame : getFixtureDetail\n        var api_response_data = await methodApi(param);\n\n        if (api_response_data) {\n            this.setState({ isLoaderShow: false })\n            this.setState({\n                CollectionData: api_response_data\n            }, () => {\n                this.getUserLineUpListApi(this.state.CollectionData)\n            })\n            if(SELECTED_GAMET != GameType.MultiGame && SELECTED_GAMET != GameType.OpenPred){\n                WSManager.setPickedGameType(GameType.DFS);\n              }\n               setTimeout(() => {\n                if(this.headerRef){\n                    this.headerRef.GetHeaderProps(\"lobbyheader\", '', '', api_response_data ? api_response_data : '');\n                }                \n            }, 100);\n        }\n    }\n\n\n\n    fetchMoreData = () => {\n        this.getUserLineUpListApi()\n    }\n\n    createLineup = (CollectionData) => {\n        const { allowCollection } = this.state;\n        if (CollectionData) {\n            WSManager.clearLineup();\n            let urlParams = '';\n            if (SELECTED_GAMET != GameType.MultiGame || (SELECTED_GAMET == GameType.MultiGame && CollectionData.match_list.length == 1)) {\n                urlParams = Utilities.setUrlParams(CollectionData)\n            }\n            else {\n                urlParams = Utilities.replaceAll(CollectionData.collection_name, ' ', '_')\n            }\n            this.props.history.push({ pathname: '/lineup/' + urlParams, state: { FixturedContest: CollectionData, LobyyData: CollectionData, from: 'MyTeams', isFromMyTeams: true, isFrom: \"MyTeams\", resetIndex: 1 } })\n        }\n    }\n\n    openAllPlayer(item) {\n        this.setState({ openTeam: item, isViewAllShown: true })\n    }\n\n    onViewAllHide = () => {\n        this.setState({ isViewAllShown: false })\n    }\n\n    openContestListing() {\n        let dateformaturl = Utilities.getUtcToLocal(this.state.CollectionData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n        let gametype=SELECTED_GAMET;\n\n        if(gametype == GameType.MultiGame){\n            let collectionName = Utilities.replaceAll(this.state.CollectionData.collection_name, ' ', '_');\n            let contestListingPath = '/' + Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + this.state.CollectionData.collection_master_id + '/' + collectionName + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(SELECTED_GAMET);\n            this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: this.state.CollectionData, from: 'MyTeams', lineup_master_id: this.state.selectedTeam.lineup_master_id } })\n        }\n        else{\n            let contestListingPath = '/' + Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + this.state.CollectionData.collection_master_id + '/' + this.state.CollectionData.home + \"-vs-\" + this.state.CollectionData.away + \"-\" + dateformaturl + \"?sgmty=\" +  btoa(SELECTED_GAMET);\n            this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.CollectionData, LobyyData: this.state.CollectionData, from: 'MyTeams', lineup_master_id: this.state.selectedTeam.lineup_master_id } })\n        }\n    }\n\n    cloneLineup(rootItem, teamItem) {\n        let urlData = rootItem;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n        //count home and away player count to set on local storage\n        let homePlayerCount = 0;\n        let awayPlayerCount = 0;\n\n        this.getUserLineup(rootItem, teamItem).then((lineupData) => {\n\n            if (lineupData != '') {\n\n                let MasterData = lineupData;\n                let lineupArr = lineupData.lineup;\n\n                if (typeof lineupArr != 'undefined' && lineupArr.length > 0) {\n                    lineupArr.map((lineupItem, lineupIndex) => {\n\n                        if (lineupItem.team_abbreviation == urlData.home || lineupItem.team_abbr == urlData.home) {\n                            homePlayerCount = homePlayerCount + 1;\n                        }\n                        else {\n                            awayPlayerCount = awayPlayerCount + 1;\n                        }\n                    });\n                }\n\n                ls.set('home_player_count', homePlayerCount);\n                ls.set('away_player_count', awayPlayerCount);\n                ls.set('Lineup_data', lineupArr);\n                teamItem['team_name'] = '';\n                let lineupPath = '';\n                if (urlData.home) {\n                    lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: lineupArr, MasterData: MasterData, LobyyData: rootItem, FixturedContest: rootItem, team: teamItem, from: 'editView', rootDataItem: rootItem, isFromMyTeams: true, ifFromSwitchTeamModal: false, resetIndex: 1, isClone: true, teamitem: teamItem, collection_master_id: teamItem.collection_master_id } });\n                }\n                else {\n                    let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_').toLowerCase();\n                    lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n                    this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: lineupArr, MasterData: MasterData, LobyyData: rootItem, FixturedContest: rootItem, team: teamItem, from: 'editView', rootDataItem: rootItem, isFromMyTeams: true, ifFromSwitchTeamModal: false, resetIndex: 1, isClone: true, teamitem: teamItem, collection_master_id: teamItem.collection_master_id } });\n                }\n            }\n        });\n\n    }\n\n    async getUserLineup(rootItem, teamItem) {\n\n        let param = {\n            \"lineup_master_id\": teamItem.lineup_master_id,\n            \"collection_master_id\": rootItem.collection_master_id,\n            \"sports_id\": AppSelectedSport,\n        }\n\n        let responseJson = await getUserLineUpDetail(param);\n        let lineupData = '';\n\n        if (responseJson.response_code == WSC.successCode) {\n            lineupData = responseJson.data;\n        }\n\n        return lineupData;\n    }\n\n\n    openLineup(rootitem, contestItem, teamitem, isEdit, isFromtab, sideView) {\n        const { allowCollection } = this.state;\n        this.setState({\n            sideView: sideView,\n            fieldViewRightData: teamitem,\n            rootitem: rootitem\n        })\n        let urlData = rootitem;\n        let dateformaturl = Utilities.getUtcToLocal(urlData.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n\n        let lineupPath = '';\n\n        if(sideView == false || isEdit == true){\n\n        if (isEdit == false) {\n            if (urlData.home) {\n                let fieldViewPath = '/field-view/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n                this.props.history.push({ pathname: fieldViewPath.toLowerCase(), state: { team: teamitem, contestItem: contestItem, rootitem: rootitem, isEdit: isEdit, from: 'MyContest', isFromtab: isFromtab, isFromMyTeams: true, FixturedContest: contestItem, LobyyData: rootitem, resetIndex: 1 } });\n            }\n            else {\n                let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n                let fieldViewPath = '/field-view/' + pathurl + \"-\" + dateformaturl\n                this.props.history.push({ pathname: fieldViewPath.toLowerCase(), state: { team: teamitem, contestItem: contestItem, rootitem: rootitem, isEdit: isEdit, from: 'MyContest', isFromtab: isFromtab, isFromMyTeams: true, FixturedContest: contestItem, LobyyData: rootitem, resetIndex: 1 } });\n            }\n        }\n\n        else if (SELECTED_GAMET != GameType.MultiGame) {\n            lineupPath = '/lineup/' + urlData.home + \"-vs-\" + urlData.away + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? urlData : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: urlData, isFromMyTeams: this.state.isFromMyTeams ? this.state.isFromMyTeams : isEdit, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: 1, teamitem: teamitem, collection_master_id: contestItem.collection_master_id, league_id: contestItem.league_id } });\n        }\n        else {\n            let pathurl = Utilities.replaceAll(urlData.collection_name, ' ', '_');\n            lineupPath = '/lineup/' + pathurl + \"-\" + dateformaturl\n            this.props.history.push({ pathname: lineupPath.toLowerCase(), state: { SelectedLineup: this.state.lineupArr, MasterData: this.state.MasterData, LobyyData: _isEmpty(this.state.LobyyData) ? urlData : this.state.LobyyData, FixturedContest: this.state.myContestData, team: this.state.TeamMyContestData, from: 'editView', rootDataItem: this.state.rootDataItem, isFromMyTeams: true, ifFromSwitchTeamModal: this.state.ifFromSwitchTeamModal, resetIndex: 1, teamitem: teamitem, collection_master_id: contestItem.collection_master_id, league_id: contestItem.league_id } });\n        }\n    }\n    }\n\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            isFromCreateTeam: this.state.isFromCreateTeam,\n            // title: AppLabels.MY_TEAM,\n            fixture: true,\n        }\n\n        const {\n            hasMore,\n            isLoaderShow,\n            CollectionData\n        } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container account-wrapper my-team-root web-container-fixed\" >\n                        <CustomHeader {...this.props} ref={(ref) => this.headerRef = ref} HeaderOption={HeaderOption} />\n                        <div className=\"webcontainer-inner\">\n                            {\n                                this.state.TeamsList.length > 0 &&\n\n                                <div className=\"header-content hide\">\n                                    <div className=\"team-img-block\">\n                                        <img src={CollectionData ? Utilities.teamFlagURL(CollectionData.home_flag) : ''} alt=\"\" />\n                                    </div>\n                                    <div className=\"team-header-detail\">\n                                        <div className=\"team-header-content\">\n                                            {\n                                                CollectionData && CollectionData.home ?\n                                                    <span> <span>{CollectionData.home}</span> <small> {AppLabels.VS} </small> <span>{CollectionData.away}</span></span>\n                                                    :\n                                                    <span>{CollectionData ? CollectionData.collection_name : ''}</span>\n                                            }\n                                        </div>\n\n                                        <p>\n                                            {\n                                                CollectionData && Utilities.showCountDown(CollectionData) ?\n\n                                                    <div className=\"countdown time-line\">\n                                                        {CollectionData.game_starts_in && <CountdownTimer deadlineTimeStamp={CollectionData.game_starts_in} currentDateTimeStamp={CollectionData.today} />}\n                                                    </div>\n                                                    :\n                                                    CollectionData &&\n                                                    <span className='date'>\n                                                        <MomentDateComponent data={{date:CollectionData.season_scheduled_date,format:\"D MMM - hh:mm A \"}} />\n                                                    </span>\n\n                                            }\n\n                                        </p>\n                                    </div>\n                                    <div className=\"team-img-block\">\n                                        <img src={CollectionData ? Utilities.teamFlagURL(CollectionData.away_flag) : ''} alt=\"\" />\n                                    </div>\n                                </div>\n\n                            }\n\n                            {\n                                !this.state.isLoaderShow && this.state.TeamsList.length < 10 && this.state.TeamsList.length > 0 &&\n                                <div className=\"text-center\">\n                                    <Button className=\"btn create-team-button mt15\" onClick={() => this.createLineup(CollectionData)}>\n                                        <span className=\"text-uppercase\" >{AppLabels.CREATE_NEW_TEAM}</span>\n                                    </Button>\n                                </div>\n                            }\n\n                            <InfiniteScroll\n                                dataLength={this.state.TeamsList.length}\n                                next={this.fetchMoreData.bind(this)}\n                                hasMore={hasMore}\n                                scrollableTarget='test'\n                                loader={\n                                    isLoaderShow == true &&\n                                    <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                }>\n                                <ul className=\"transaction-list transaction-class-scroll no-height\" id=\"test\">\n                                    {\n                                        this.state.TeamsList && this.state.TeamsList.map((item, index) => {\n                                            return (\n                                                <li className=\"my-team-list-item\" key={item + index}>\n                                                    <div className={\"my-teams-item \" + (this.state.selectedTeam.lineup_master_id == item.lineup_master_id ? 'selected' : '')}>\n\n                                                        <div className=\"row-header\">\n                                                            <div className=\"name-container\">\n                                                                <div className=\"team-name\">{item.team_name}</div>\n                                                                <div className=\"contests-joined\">{item.total_joined} {AppLabels.CONTEST_JOINED}</div>\n                                                            </div>\n\n\n                                                            <div onClick={() => this.setState({ selectedTeam: item })} className={\"select-team-checkbox \" + (this.state.selectedTeam.lineup_master_id == item.lineup_master_id ? 'selected' : '')} />\n                                                        </div>\n\n                                                        {(Utilities.getMasterData().c_point > 0 || Utilities.getMasterData().vc_point > 0) &&\n                                                            <Table>\n                                                                <tbody>\n                                                                    <tr className={\"captain-vice-captain\" + ((Utilities.getMasterData().c_point > 0 && Utilities.getMasterData().vc_point <= 0) || (Utilities.getMasterData().c_point <= 0 && Utilities.getMasterData().vc_point > 0) ? ' full-width-content' : '')}>\n                                                                        {Utilities.getMasterData().c_point > 0  &&\n                                                                            <td>\n                                                                                <div className=\"image-container\">\n                                                                                    <img className=\"player-image\" alt=\"\" src={Utilities.playerJersyURL(item.captain_jersey)} />\n                                                                                    <span className=\"player-post captain\">{AppLabels.C.toLowerCase()}</span>\n                                                                                </div>\n\n\n\n                                                                                <div className=\"player-name-container\">\n                                                                                    <div className=\"player-name\">{item.captain_display_name}</div>\n                                                                                    <div className=\"team-vs-team\">{item.captain_team + \" | \" + item.captain_position}</div>\n                                                                                </div>\n                                                                            </td>\n                                                                        }\n                                                                        {Utilities.getMasterData().vc_point > 0 &&\n                                                                            <React.Fragment>\n                                                                                {\n                                                                                    item.vice_captain != null && item.vice_captain_team != null &&\n            \n                                                                                    <td>\n                                                                                        <div className=\"image-container\">\n                                                                                            <img alt=\"\" className=\"player-image\" src={Utilities.playerJersyURL(item.vice_captain_jersey)} />\n                                                                                            <span className=\"player-post vice-captain\">{AppLabels.VC.toLowerCase()}</span>\n                                                                                        </div>\n            \n                                                                                        <div className=\"player-name-container\">\n                                                                                            <div className=\"player-name\">{item.vice_captain_display_name}</div>\n                                                                                            <div className=\"team-vs-team\">{item.vice_captain_team + \" | \" + item.vice_captain_position}</div>\n                                                                                        </div>\n                                                                                    </td>\n                                                                                }\n                                                                            </React.Fragment>\n                                                                        }\n\n                                                                    </tr>\n                                                                </tbody>\n                                                            </Table>\n                                                        }    \n                                                        {/* </div> */}\n\n                                                        {(this.state.TeamsList && this.state.TeamsList.length < 10) &&\n                                                            <a href id='clone-button' title=\"Clone this team\" className=\"clone-team\" onClick={() => this.cloneLineup(CollectionData, item)}>\n                                                                <i className=\"icon-edit-copy\"></i>\n                                                            </a>\n                                                        }\n                                                        <a href title=\"Edit this team\" className=\"edit-team\" onClick={() => this.openLineup(CollectionData, CollectionData, item, true, null)}>\n                                                            <i className=\"icon-edit-line\"></i>\n                                                        </a>\n\n                                                        <div className=\"bottom-row visible-for-desktop\" \n                                                            onClick={() => this.openLineup(item, '', item,'', false, true)}\n                                                            // onClick={() => this.openAllPlayer(item)}\n                                                        >\n                                                            <span>{AppLabels.View_All_Players}</span>\n                                                            <i className='icon-next-arrow'></i>\n                                                        </div>\n                                                        <div className=\"bottom-row visible-for-mobile\" \n                                                            onClick={() => this.openLineup(CollectionData, '', item,'', false, false)}\n                                                        >\n                                                            <span>{AppLabels.View_All_Players}</span>\n                                                            <i className='icon-next-arrow'></i>\n                                                        </div>\n\n                                                        {this.state.sideView &&\n                                                            <FieldViewRight\n                                                                SelectedLineup={this.state.lineupArr ? this.state.lineupArr : []}\n                                                                MasterData={this.state.masterData}\n                                                                LobyyData={this.state.LobyyData}\n                                                                FixturedContest={this.state.FixturedContest}\n                                                                isFrom={this.state.isFrom}\n                                                                isFromUpcoming={true}\n                                                                rootDataItem={this.state.rootDataItem}\n                                                                team={this.state.team}\n                                                                team_name={this.state.teamName}\n                                                                resetIndex={1}\n                                                                TeamMyContestData={this.state.fieldViewRightData}\n                                                                isFromMyTeams={this.state.isFromMyTeams}\n                                                                ifFromSwitchTeamModal={this.state.ifFromSwitchTeamModal}\n                                                                rootitem={this.state.rootitem}\n                                                                sideViewHide={this.sideViewHide}\n                                                            />\n                                                        }\n                                                    </div>\n\n                                                </li>\n                                            )\n                                        })\n                                    }\n\n\n                                    {\n                                        this.state.isViewAllShown &&\n                                        <MyTeamViewAllModal CollectionData={CollectionData} openTeam={this.state.openTeam} isViewAllShown={this.state.isViewAllShown} onViewAllHide={this.onViewAllHide} />\n                                    }\n\n                                    {\n                                        this.state.TeamsList.length == 0 && !this.state.isLoaderShow &&\n                                        <NoDataView\n                                            BG_IMAGE={Images.no_data_bg_image}\n                                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                            MESSAGE_1={AppLabels.NO_TEAM_MSG}\n                                            MESSAGE_2={AppLabels.THIS_CONTEST}\n                                            BUTTON_TEXT={AppLabels.CREATE_NEW_TEAM}\n                                            onClick={() => this.createLineup(this.state.CollectionData)}\n                                        />\n                                    }\n                                </ul>\n                            </InfiniteScroll>\n\n                        </div>\n                        {\n                            this.state.selectedTeam &&\n                            <Button\n                                onClick={() => this.openContestListing()}\n                                className=\"bottom\">\n                                {AppLabels.JOIN_CONTEST}\n                            </Button>\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/views/PageNotFound/PageNoFound.jsx",["3901","3902"],"import React from 'react';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport {Utilities} from '../../Utilities/Utilities';\n\nexport default class PageNotFound extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                    <title>{MetaData.PageNotFound.title}</title>\n                </Helmet>\n\n                <div className=\"container-404\">\n                    <div className=\"content-wrapper\">\n                        <h1>{AppLabels.Oops}</h1>\n                        <p>\n                            {AppLabels.Looks_like_you_have} <a onClick={() => this.props.history.replace('/lobby#'+Utilities.getSelectedSportsForUrl())} className=\"lobby-a\">{AppLabels.Lobby}</a>\n                        </p>\n                        <button onClick={() => this.props.history.replace('/lobby#'+Utilities.getSelectedSportsForUrl())} className=\"btn lobby-btn\">\n                            {AppLabels.Go_Back_to_Lobby}\n\n                </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}","/var/www/html/framework/frontend/src/Modals/ReferalPrizesModal.jsx",["3903","3904","3905","3906","3907","3908","3909","3910","3911","3912","3913","3914","3915","3916","3917","3918","3919","3920","3921","3922","3923","3924","3925","3926"],"import React from 'react';\nimport { Modal, Button, Label } from 'react-bootstrap';\nimport { getReferalPrizes } from \"../WSHelper/WSCallings\";\nimport * as AL from \"../helper/AppLabels\";\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport { Utilities, _times, _debounce, _Map, _filter } from '../Utilities/Utilities';\nimport Moment from 'react-moment';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport Images from '../components/images';\n\nexport default class ReferalPrizesModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            show: false,\n            referalPrizeDataList: [],\n            sponsorLogo:'',\n            sponsorLink:'',\n            prize_distribution_detail: [],\n            filerByTime: [\n                {\n                    value: 'today',\n                    label: AL.TODAY,\n                    prize_cat_id: '1'\n                },\n                {\n                    value: 'this_week',\n                    label: AL.THIS_WEEK,\n                    prize_cat_id: '2'\n                },\n                {\n                    value: 'this_month',\n                    label: AL.THIS_MONTH,\n                    prize_cat_id: '3'\n                },\n            ],\n            filterDataBy: 'today',\n            filterById: '1',\n        };\n    }\n\n    handleTimeFilter = (filterBy, id) => {\n        this.setState({\n            filterDataBy: filterBy,\n            filterById: id,\n\n        }, () => {\n            this.getLeaderboardData();\n        })\n    }\n\n    componentDidMount() {\n        //this.getCategory();\n        this.setState({\n            filterDataBy:this.props.filterDataBy,\n            filterById:this.props.filterById\n        })\n        this.getLeaderboardData();\n    }\n\n\n    getLeaderboardData() {\n        let param = {}\n        getReferalPrizes(param).then((responseJson) => {\n            let prize_distribution = [];\n            let sponsorLogVar = '';\n            let sponsorLinkvar ='';\n            if (responseJson.response_code === WSC.successCode) {\n                responseJson.data && responseJson.data.map((item, index) => {\n\n                    if (this.state.filterDataBy == 'today' && item.name == 'Daily') {\n                        prize_distribution = item.prize_distribution_detail\n                        sponsorLogVar = item.sponsor_logo\n                        sponsorLinkvar = item.sponsor_link\n\n                    }\n                    else if (this.state.filterDataBy == 'this_week' && item.name == 'Weekly') {\n                        prize_distribution = item.prize_distribution_detail\n                        sponsorLogVar = item.sponsor_logo\n                        sponsorLinkvar = item.sponsor_link\n                        \n\n                    }\n                    else if (this.state.filterDataBy == 'this_month' && item.name == 'Monthly') {\n                        prize_distribution = item.prize_distribution_detail\n                        sponsorLogVar = item.sponsor_logo\n                        sponsorLinkvar = item.sponsor_link\n                    \n\n                    }\n\n                })\n                this.setState({\n                    referalPrizeDataList: responseJson.data,\n                    prize_distribution_detail: prize_distribution,\n                    sponsorLogo :sponsorLogVar,\n                    sponsorLink:sponsorLinkvar\n                }, () => {\n                    // this.showSponser()\n\n\n                })\n            }\n        })\n    }\n\n    render() {\n        const { IsCollectionInfoShow, IsCollectionInfoHide } = this.props;\n        const { filterDataBy, filerByTime, filterById, prize_distribution_detail } = this.state\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsCollectionInfoShow} onHide={() => IsCollectionInfoHide()} bsSize=\"large\" dialogClassName=\"referal-prize-modal\" className=\"center-modal\">\n                            <Modal.Header closeButton>\n                                <div className=\"header-modal-title\">{AL.ALL_PRIZES} </div>\n\n                            </Modal.Header>\n                            <Modal.Body>\n\n                                <div>\n                                    <img src={Images.REFERAL_BG} className='modal-referal-img'></img>\n                                    <div className=\"strip-prize-status\">\n                                        <div className=\"fixed-ch-view-prizes-modal\">\n                                            <div className=\"filter-time-section-prizes-modal\">\n                                                <ul className=\"filter-time-wrap-prizes-modal\">\n                                                    {\n                                                        _Map(filerByTime, (item, idx) => {\n                                                            return (\n                                                                <li\n                                                                    href\n                                                                    className={\"filter-time-btn-modal\" +\n                                                                        (item.value == filterDataBy ? ' active' : '') +\n                                                                        (item.prize_cat_id == 2 && filterById == 2 && this.props.STARTDATE ? ' with-date' : '')\n                                                                    }\n                                                                    onClick={() => this.handleTimeFilter(item.value, item.prize_cat_id)}\n                                                                >\n                                                                    {item.label}\n                                                                    {\n                                                                        (item.prize_cat_id == 2 && filterById == 2) && this.props.STARTDATE &&\n                                                                        <span>\n                                                                            <Moment date={this.props.STARTDATE} format={\"D MMM \"} />\n                                                                            {/* <MomentDateComponent data={{ date: STARTDATE, format: \"D MMM \" }} /> */}\n                                                            -\n                                                            <Moment date={this.props.ENDDATE} format={\" D MMM \"} />\n                                                                            {/* <MomentDateComponent data={{ date: ENDDATE, format: \"D MMM \" }} /> */}\n                                                                        </span>\n                                                                    }\n                                                                </li>\n                                                            )\n                                                        })\n                                                    }\n                                                </ul>\n                                            </div>\n\n\n                                        </div>\n                                    </div>\n\n                                    {\n\n\n\n                                        prize_distribution_detail && prize_distribution_detail.map((itemPrize, index) => {\n                                            return (\n                                                <div className=\"referal-strip\">\n                                                    <div className=\"referal-prize-rank\" >\n\n                                                        {itemPrize.min == itemPrize.max ? itemPrize.min : itemPrize.min + \"-\" + itemPrize.max}\n\n                                                    </div>\n                                                    <div className=\"win-amount\" >\n\n                                                        {itemPrize.prize_type == 0 ?\n                                                            <div>\n                                                                <div className=\"contest-listing-prizes\"><i className=\"icon-bonus\" /></div>\n                                                                {itemPrize.amount}\n                                                            </div>\n                                                            :\n                                                            itemPrize.prize_type == 1 ?\n                                                                <div>\n                                                                    <span className=\"contest-prizes\">{Utilities.getMasterData().currency_code}</span>\n                                                                    {itemPrize.amount}\n                                                                </div>\n                                                                :\n                                                                itemPrize.prize_type == 2 ?\n                                                                    <span style={{ marginLeft: '13px', display: 'inlineBlock' }}> <img style={{ height: '14px', width: '14px', marginTop: '-5px' }} className=\"img-coin\" src={Images.IC_COIN} />{itemPrize.amount}</span>\n                                                                    :\n                                                                    itemPrize.amount\n\n\n\n                                                        }\n\n                                                    </div>\n                                                </div>\n\n                                            );\n\n                                        })\n                                    }\n                                  {\n                                        this.state.sponsorLogo && this.state.sponsorLogo != '' &&\n                                        <div className=\"sponsored-section\">\n                                        <span className=\"sponsored-text\">{AL.SPONSOR_BY}</span>\n                                        <img src={Utilities.getOpenPredFPPURL(this.state.sponsorLogo)} alt=\"\"/>\n                                    </div>\n\n                                  }\n\n                                </div>\n\n                            </Modal.Body>\n                        </Modal>\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/views/Leaderboard/index.js",[],"/var/www/html/framework/frontend/src/Component/Profile/index.js",[],"/var/www/html/framework/frontend/src/Component/Finance/index.js",[],"/var/www/html/framework/frontend/src/Component/StaticPages/index.js",[],"/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/index.js",[],"/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/index.js",[],"/var/www/html/framework/frontend/src/Component/Pickem/NewPickemCompleted.jsx",["3927","3928","3929","3930"],"import React from 'react';\nimport { NoDataView } from '../CustomComponent';\nimport { _times, _Map } from '../../Utilities/Utilities';\nimport { getMyPicks } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport NewPickemPredictionCard from './NewPickemPredictionCard';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nclass NewPickemCompleted extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ccList: [],\n            isLoading: false,\n            showProofModal: false,\n            viewProofData: '',\n            sports_id: Constants.AppSelectedSport,\n            limit: 20,\n            offset: 0,\n            hasMore: false,\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n\n        if (this.state.sports_id == null)\n            return;\n\n        var param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"status\": this.props.status || 2\n        }\n\n        param['limit'] = this.state.limit;\n        param['offset'] = this.state.offset;\n        \n        if (!param.offset || param.offset == 0) {\n            this.setState({ isListLoading: true })\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyPicks(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let data = responseJson.data;\n                if (param.offset == 0) {\n                    this.setState({\n                        ccList: data.fixtures,\n                        hasMore : data.fixtures.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n                else{\n                    this.setState({\n                        ccList: [...this.state.ccList, ...data.fixtures],\n                        hasMore : data.fixtures.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList()\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    showProofModalFn=(item)=>{\n        let traverse = true;\n        _Map(item.option,(opt,idx)=>{\n            if(traverse && opt.is_correct == 1){\n                this.setState({\n                    correctAns: opt.option\n                },()=>{\n                    this.setState({\n                        viewProofData: item,\n                        showProofModal: true\n                    })\n                })\n            }\n            traverse = true\n        })\n    }\n    hideProofModalFn=()=>{\n        this.setState({\n            showProofModal: false\n        })\n    }\n\n    fetchMoreData = () => {\n        if (!this.state.isLoading && this.state.hasMore) {\n            this.getMyContestList()\n        }\n    }\n\n    render() {\n        const {ccList, isLoading, hasMore} = this.state;\n        return (\n            <div>\n                 <InfiniteScroll\n                    \n                    dataLength={ccList.length}\n                    pullDownToRefresh={false}\n                    hasMore={hasMore && !isLoading}\n                    next={this.fetchMoreData.bind(this)}\n                >\n                    {\n                        ccList.length > 0 && <ul className=\"list-pred\">\n                            {\n                                ccList.map((item, indx) => {\n                                    return (\n                                        <NewPickemPredictionCard\n                                            {...this.props}\n                                            key={item.pickem_id}\n                                            isFrom='Completed'\n                                            item={item} \n                                        />\n                                    )\n                                })\n                            }\n                        </ul>\n                    }\n                </InfiniteScroll>\n                {\n                    ccList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_COMPLETED_PICKEM1 + ' ' + AppLabels.NO_COMPLETED_PICKEM2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    ccList.length === 0 && this.state.isLoading &&\n                    <div className=\"mycontest-shimmer-wrap\">\n                    {\n                        _times(7, (idx) => {\n                            return (\n                                this.Shimmer(idx)\n                            )\n                        })\n                    }\n                    </div>\n                }\n            </div>\n        )\n    }\n    Shimmer = (index) => {\n        return (\n            <div className=\"contest-list pickem-lobby-shimmer\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-top-inner-view\">\n                            <div className=\"shimmer-image predict \">\n                                <Skeleton width={24} height={24} circle={true} />\n                            </div>\n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={34} width={34} />\n                            </div>                                                        \n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={14} width={'50%'} />\n                            </div>                                                        \n                        </div>\n                        <div className=\"shimmer-top-inner-view\">\n                            <div className=\"shimmer-image predict\">\n                                <Skeleton width={24} height={24} circle={true} />\n                            </div>\n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={34} width={34} />\n                            </div>                                                        \n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={14} width={'50%'} />\n                            </div>                                                        \n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'100%'} />\n                        </div>\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'100%'} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default NewPickemCompleted;","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemMyContest.jsx",["3931","3932","3933","3934","3935","3936","3937","3938","3939"],"import React from 'react';\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { _debounce } from '../../Utilities/Utilities';\nimport { NewPickemUpcoming, NewPickemLive, NewPickemCompleted } from './index';\nimport { my_contest_config } from '../../JsonFiles';\nimport Skeleton from 'react-loading-skeleton';\nimport queryString from 'query-string';\nimport CustomHeader from '../../components/CustomHeader';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as AL from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\n\n/**\n  * @class MyContest\n  * @description My contest listing of current loggedin user for selected sports\n  * @author Vinfotech\n*/\nclass NewPickemMyContest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            selectedTab: (this.props.location && this.props.location.state) ? (this.props.location.state.from == 'notification' ? Constants.CONTEST_COMPLETED : Constants.CONTEST_UPCOMING) : Constants.CONTEST_UPCOMING,\n            sports_id: Constants.AppSelectedSport ? Constants.AppSelectedSport : '',\n            selectedFixture: '',\n            refreshList: true\n        }\n    }\n\n    componentDidMount() {\n        let url = this.props.location.search;\n        let urlParams = queryString.parse(url);\n\n        let contest = urlParams.contest;\n        if (contest in my_contest_config.contest_url) {\n            let sports_id = Constants.AppSelectedSport;\n            this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n            })\n        }\n        else {\n            if (contest in my_contest_config.contest) {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n            }\n            else {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n            }\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (WSManager.loggedIn() && this.props.history.location.pathname == '/my-contests') {\n\n            if (this.state.sports_id != nextProps.selectedSport) {\n                console.log('asfsaf');\n                this.reload(nextProps);\n            }\n            else {\n                var url = this.props.location.search;\n                if (window.location.search != url) {\n                    url = window.location.search;\n                }\n                let urlParams = queryString.parse(url);\n                let contest = urlParams.contest;\n                if (contest in my_contest_config.contest_url) {\n                    let sports_id = Constants.AppSelectedSport;\n                    if (my_contest_config.contest_url[contest] != this.state.selectedTab) {\n                        this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                        })\n                    } else {\n                        this.setState({ sports_id })\n                    }\n                }\n                else {\n                    if (contest in my_contest_config.contest) {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n                    }\n                    else {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        if (this.state.selectedTab !== selectedTab) {\n            window.history.replaceState(\"\", \"\", \"/my-contests?contest=\" + my_contest_config.contest[selectedTab]);\n            this.setState({\n                selectedTab: selectedTab,\n            }, () => {\n            });\n        }\n    }, 300)\n\n\n    /**\n     * @description This function is called when sports changed from header\n     * @static A static function \n    */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/my-contests\")) {\n            this.setState({\n                sports_id: nextProps.selectedSport,\n                refreshList: false\n            }, () => {\n                this.setState({\n                    refreshList: true\n                })\n            })\n        }\n    }\n\n    /**\n     * @description This function render all UI components. It is the React lifecycle methods that called after @see componentWillMount()\n     * @return UI Components\n    */\n    render() {\n\n        let HeaderOption = {\n            title: AL.MY_CONTEST,\n            notification: true,\n            hideShadow: true,\n            back: true\n        };\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container open-predict-web-container my-contest-style tab-two-height web-container-fixed prediction-wrap-v\">\n                        {\n                            !this.props.hideHeader &&\n                            <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        }\n                        <div className={\"tabs-primary \" + (!this.props.hideHeader ? ' mt50' : '')}>\n                            <Tab.Container id='my-contest-tabs' activeKey={this.state.selectedTab} onSelect={() => console.log('clicked')} defaultActiveKey={this.state.selectedTab}>\n                                <Row className=\"clearfix\">\n                                    <Col className=\"top-fixed my-contest-tab circular-tab\" xs={12}>\n                                        <Nav>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_LIVE)} eventKey={Constants.CONTEST_LIVE} className=\"live-contest\"><span className=\"live-indicator\"></span> {AL.LIVE} </NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_UPCOMING)} eventKey={Constants.CONTEST_UPCOMING}>{AL.UPCOMING}</NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_COMPLETED)} eventKey={Constants.CONTEST_COMPLETED}>{AL.COMPLETED}</NavItem>\n                                        </Nav>\n                                    </Col>\n                                    <Col className=\"top-tab-margin\" xs={12}>\n                                        <Tab.Content animation>\n                                            <Tab.Pane eventKey={Constants.CONTEST_LIVE}>\n                                                {\n                                                    this.state.selectedTab == Constants.CONTEST_LIVE &&  this.state.refreshList &&\n                                                    <NewPickemLive\n                                                        {...this.props}\n                                                        status={this.state.selectedTab}\n                                                    />\n                                                }\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_UPCOMING}>\n                                                {\n                                                    this.state.selectedTab == Constants.CONTEST_UPCOMING &&  this.state.refreshList &&\n                                                    <React.Fragment>\n                                                        <NewPickemUpcoming\n                                                            {...this.props}\n                                                            status={this.state.selectedTab} \n                                                        />\n                                                    </React.Fragment>\n                                                }\n\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_COMPLETED}>\n                                                {\n                                                     this.state.selectedTab == Constants.CONTEST_COMPLETED &&  this.state.refreshList &&\n                                                    <NewPickemCompleted\n                                                        {...this.props}\n                                                        status={this.state.selectedTab}\n                                                    />\n                                                }\n\n                                            </Tab.Pane>\n                                        </Tab.Content>\n                                    </Col>\n                                </Row>\n                            </Tab.Container>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n/**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nconst Shimmer = ({ idx }) => {\n    return (\n        <div className=\"contest-list pickem-lobby-shimmer\">\n            <div className=\"shimmer-container\">\n                <div className=\"shimmer-top-view\">\n                    <div className=\"shimmer-top-inner-view\">\n                        <div className=\"shimmer-image predict \">\n                            <Skeleton width={24} height={24} circle={true} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <Skeleton height={34} width={34} />\n                        </div>                                                        \n                        <div className=\"shimmer-line predict\">\n                            <Skeleton height={14} width={'50%'} />\n                        </div>                                                        \n                    </div>\n                    <div className=\"shimmer-top-inner-view\">\n                        <div className=\"shimmer-image predict\">\n                            <Skeleton width={24} height={24} circle={true} />\n                        </div>\n                        <div className=\"shimmer-line predict\">\n                            <Skeleton height={34} width={34} />\n                        </div>                                                        \n                        <div className=\"shimmer-line predict\">\n                            <Skeleton height={14} width={'50%'} />\n                        </div>                                                        \n                    </div>\n                </div>\n                <div className=\"shimmer-bottom-view m-0\">\n                    <div className=\"progress-bar-default\">\n                        <Skeleton height={8} width={'100%'} />\n                    </div>\n                    <div className=\"progress-bar-default\">\n                        <Skeleton height={8} width={'100%'} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NewPickemMyContest","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemLive.jsx",["3940","3941","3942"],"import React from 'react';\nimport { _times } from '../../Utilities/Utilities';\nimport { AppSelectedSport } from '../../helper/Constants';\nimport { getMyPicks } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../CustomComponent';\nimport Skeleton from 'react-loading-skeleton';\nimport NewPickemPredictionCard from './NewPickemPredictionCard';\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\n\nclass NewPickemLive extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            lcList: this.props.List || [],\n            isLoading: false,\n            sports_id: AppSelectedSport,\n            limit: 20,\n            offset: 0,\n            hasMore: false,\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList(item) {\n\n        if (this.state.sports_id == null)\n            return;\n\n        var param = {\n            \"sports_id\": AppSelectedSport,\n            \"status\": this.props.status || 1\n        }\n\n        param['limit'] = this.state.limit;\n        param['offset'] = this.state.offset;\n        \n        if (!param.offset || param.offset == 0) {\n            this.setState({ isListLoading: true })\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyPicks(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let data = responseJson.data;\n                if (param.offset == 0) {\n                    this.setState({\n                        lcList: data.fixtures,\n                        hasMore : data.fixtures.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n                else{\n                    this.setState({\n                        lcList: [...this.state.lcList, ...data.fixtures],\n                        hasMore : data.fixtures.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList()\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    fetchMoreData = () => {\n        if (!this.state.isLoading && this.state.hasMore) {\n            this.getMyContestList()\n        }\n    }\n\n    render() {\n        \n        const { lcList, isLoading, hasMore } = this.state;\n        return (\n            <div>\n                <InfiniteScroll\n                    \n                    dataLength={lcList.length}\n                    pullDownToRefresh={false}\n                    hasMore={hasMore && !isLoading}\n                    next={this.fetchMoreData.bind(this)}\n                >\n                    {\n                        lcList.length > 0 && <ul className=\"list-pred\">\n                            {\n                                lcList.map((item, indx) => {\n                                    return (\n                                        <NewPickemPredictionCard\n                                            {...this.props}\n                                            key={item.pickem_id}\n                                            isFrom='Live'\n                                            item={item}\n                                        />\n                                    )\n                                })\n                            }\n                        </ul>\n                    }\n                </InfiniteScroll>\n                {\n                    lcList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AppLabels.NO_LIVE_PICKEM1 + ' ' + AppLabels.NO_LIVE_PICKEM2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    lcList.length === 0 && this.state.isLoading &&\n                    <div className=\"mycontest-shimmer-wrap\">\n                        {\n                            _times(7, (idx) => {\n                                return (\n                                    this.Shimmer(idx)\n                                )\n                            })\n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n    Shimmer = (index) => {\n        return (\n            <div className=\"contest-list pickem-lobby-shimmer\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-top-inner-view\">\n                            <div className=\"shimmer-image predict \">\n                                <Skeleton width={24} height={24} circle={true} />\n                            </div>\n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={34} width={34} />\n                            </div>                                                        \n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={14} width={'50%'} />\n                            </div>                                                        \n                        </div>\n                        <div className=\"shimmer-top-inner-view\">\n                            <div className=\"shimmer-image predict\">\n                                <Skeleton width={24} height={24} circle={true} />\n                            </div>\n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={34} width={34} />\n                            </div>                                                        \n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={14} width={'50%'} />\n                            </div>                                                        \n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'100%'} />\n                        </div>\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'100%'} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NewPickemLive;","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemUpcoming.jsx",["3943","3944","3945","3946"],"import React from 'react';\nimport { NoDataView } from '../CustomComponent';\nimport { _filter, _times } from '../../Utilities/Utilities';\nimport { getMyPicks } from '../../WSHelper/WSCallings';\nimport Skeleton from 'react-loading-skeleton';\nimport NewPickemPredictionCard from './NewPickemPredictionCard';\nimport Images from '../../components/images';\nimport * as Constants from \"../../helper/Constants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport * as AL from \"../../helper/AppLabels\";\n\nclass NewPickemUpcoming extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ucList: [],\n            isLoading: false,\n            sports_id: Constants.AppSelectedSport ? Constants.AppSelectedSport : '',\n            limit: 20,\n            offset: 0,\n            hasMore: false,\n        };\n    };\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    getMyContestList() {\n        if (this.state.sports_id == null)\n            return;\n\n        var param = {\n            \"sports_id\": Constants.AppSelectedSport,\n            \"status\": this.props.status || 0\n        }\n\n        param['limit'] = this.state.limit;\n        param['offset'] = this.state.offset;\n\n        if (!param.offset || param.offset == 0) {\n            this.setState({ isListLoading: true })\n        }\n        this.setState({\n            isLoading: true\n        })\n        getMyPicks(param).then((responseJson) => {\n            this.setState({\n                isLoading: false\n            })\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                let data = responseJson.data;\n                if (param.offset == 0) {\n                    this.setState({\n                        ucList: data.fixtures,\n                        hasMore: data.fixtures.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n                else {\n                    this.setState({\n                        ucList: [...this.state.ucList, ...data.fixtures],\n                        hasMore: data.fixtures.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.getMyContestList()\n    }\n\n    timerCallback = (item) => {\n        this.deleteFixture(item)\n    }\n\n    deleteFixture = (item) => {\n\n        let list = this.state.ucList ? this.state.ucList : this.props.List;\n        let fArray = _filter(list, (obj) => {\n            return item.pickem_id != obj.pickem_id\n        })\n        this.setState({\n            ucList: fArray\n        }, () => {\n        })\n    }\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    fetchMoreData = () => {\n        if (!this.state.isLoading && this.state.hasMore) {\n            this.getMyContestList()\n        }\n    }\n\n    render() {\n        const { ucList, hasMore, isLoading } = this.state;\n        return (\n            <div>\n                <InfiniteScroll\n                    \n                    dataLength={ucList.length}\n                    pullDownToRefresh={false}\n                    hasMore={hasMore && !isLoading}\n                    next={this.fetchMoreData.bind(this)}\n                >\n                    {\n                        ucList.length > 0 && !this.state.isLoading && \n                        <React.Fragment>\n                            <div className=\"pick-highlight\">{AL.YOUR_PICKS_HGHT}</div>\n                            <ul className=\"list-pred\">\n                                {\n                                    ucList.map((item, indx) => {\n                                        return (\n                                            <NewPickemPredictionCard\n                                                {...this.props}\n                                                key={item.pickem_id}\n                                                isFrom='Upcoming'\n                                                item={item}\n                                                timerCallback={() => this.timerCallback(item)}\n                                            />\n                                        )\n                                    })\n                                }\n                            </ul>\n                        </React.Fragment>\n                    }\n\n                </InfiniteScroll>\n                {\n                    ucList.length === 0 && !this.state.isLoading &&\n                    <NoDataView\n                        BG_IMAGE={Images.no_data_bg_image}\n                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                        MESSAGE_1={AL.NO_UPCOMING_PICKEM1 + ' ' + AL.NO_UPCOMING_PICKEM2}\n                        MESSAGE_2={''}\n                        BUTTON_TEXT={AL.GO_TO_LOBBY}\n                        onClick={this.goToLobby}\n                    />\n                }\n                {\n                    ucList.length === 0 && this.state.isLoading &&\n                    <div className=\"mycontest-shimmer-wrap\">{\n                        _times(7, (idx) => {\n                            return (\n                                    this.Shimmer(idx)\n                                )\n                            })\n                            \n                        }\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    Shimmer = (index) => {\n        return (\n            <div className=\"contest-list pickem-lobby-shimmer\">\n                <div className=\"shimmer-container\">\n                    <div className=\"shimmer-top-view\">\n                        <div className=\"shimmer-top-inner-view\">\n                            <div className=\"shimmer-image predict \">\n                                <Skeleton width={24} height={24} circle={true} />\n                            </div>\n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={34} width={34} />\n                            </div>                                                        \n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={14} width={'50%'} />\n                            </div>                                                        \n                        </div>\n                        <div className=\"shimmer-top-inner-view\">\n                            <div className=\"shimmer-image predict\">\n                                <Skeleton width={24} height={24} circle={true} />\n                            </div>\n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={34} width={34} />\n                            </div>                                                        \n                            <div className=\"shimmer-line predict\">\n                                <Skeleton height={14} width={'50%'} />\n                            </div>                                                        \n                        </div>\n                    </div>\n                    <div className=\"shimmer-bottom-view m-0\">\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'100%'} />\n                        </div>\n                        <div className=\"progress-bar-default\">\n                            <Skeleton height={8} width={'100%'} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NewPickemUpcoming;","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemPredictionCard.jsx",["3947","3948","3949","3950","3951","3952","3953","3954","3955","3956","3957","3958","3959","3960","3961","3962","3963","3964","3965","3966","3967","3968","3969","3970","3971","3972","3973","3974","3975","3976","3977","3978","3979","3980","3981","3982","3983","3984","3985","3986","3987","3988","3989","3990","3991","3992"],"import React, { Component } from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport NewConfirmPickem from './NewPickemConfirmModal';\nimport { CircularProgressBar, MomentDateComponent } from \"../CustomComponent\";\nimport CountdownTimer from '../../views/CountDownTimer';\nimport Skeleton from 'react-loading-skeleton';\nimport { Utilities } from '../../Utilities/Utilities';\nimport { MyContext } from '../../views/Dashboard';\nimport * as AL from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as Constants from \"../../helper/Constants\";\n\nclass NewPickemPredictionCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showSelected: '',\n            showCP: false,\n            selectedData: '',\n            sports_id: Constants.AppSelectedSport ? Constants.AppSelectedSport : '',\n        }\n    }\n\n    onMakePrediction = (optName, optFlag, uid, schDate, startInTime) => {\n        if (WSManager.loggedIn()) {\n            this.setState({\n                selectedData: {\n                    'pickem_id': this.props.item.pickem_id,\n                    'Name': optName,\n                    'Flag': optFlag,\n                    'TeamUID': uid,\n                    'Date': schDate,\n                    'startInTime': startInTime\n                }\n            })\n            setTimeout(() => {\n                this.setState({\n                    showCP: true,\n                })\n            }, 200);\n        }\n        else {\n            this.goToSignup()\n        }\n    }\n\n    hideCP = () => {\n        this.setState({\n            showCP: false\n        })\n    }\n\n    PickedPercentage = (picked, total) => {\n        let pickedPer = picked == 0 ? 0 : ((picked / total) * 100).toFixed(2);\n        let checkpickedPer = (pickedPer % 1) == 0 ? Math.floor(pickedPer) : pickedPer;\n        pickedPer = Math.round(checkpickedPer);\n        return pickedPer;\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    showParticipants = () => {\n        const { item, isFrom } = this.props;\n        let pickem_id = item.pickem_id;\n        let mURL = Utilities.getSelectedSportsForUrl().toLowerCase() + \"/pickem/participants/\" + btoa(pickem_id);\n        let isLiveCom = isFrom == 'Live' ? 1 : (isFrom == 'Completed' ? 2 : '');\n        this.props.history.push({ \n            pathname: '/' + mURL, \n            state: { item: item,status: isLiveCom} \n        });\n    }\n\n    addClass=(ctID,item,isFrom)=>{\n        let addClass = '';\n        let stID = item.team_uid;\n        let is_correct = item.is_correct;\n        let result = item.result;\n\n        if(isFrom != 'Lobby' && stID == ctID){\n            if(isFrom != 'Completed'){\n                addClass = 'selected-option';\n            }\n            else if(isFrom == 'Completed'){\n                if(stID == ctID){\n                    if(is_correct == 1){\n                        addClass = 'correct-selected';\n                    }\n                    else{\n                        addClass = 'wrong-selected';\n                    }\n                }\n            }\n        }\n        else if(isFrom == 'Completed' && stID != ctID && result == ctID){\n            addClass = 'correct-option';\n        }\n        return addClass\n    }\n\n    render() {\n        const {\n            showCP,\n            selectedData\n        } = this.state;\n        const {\n            item,\n            isFrom,\n            PickemConfigData,\n            removePrecitedQue,\n            shareContest,\n            showShareM,\n            timerCallback\n        } = this.props;\n        let score_length = (isFrom == 'Live' && item.score_data) ? item.score_data.length : 0;\n        let scoreData = (isFrom == 'Live' && item.score_data) ? (Constants.AppSelectedSport == 7 ? item.score_data[score_length - 1] : item.score_data) : '';\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <React.Fragment>\n                        <div className={\"pickem-prediction-outer-card\" + ( isFrom == 'Lobby' ? '' : ' my-contest-pre-card') + (isFrom == 'Live' && !item.score_data ? ' pt-0' : '')}>\n                            \n                            {\n                                scoreData && \n                                    <div className={\"timer-section\" + ( Constants.AppSelectedSport == 7 ? \" cric-score\" :'')}>\n                                        {\n                                            Constants.AppSelectedSport == 7 ?\n                                            <React.Fragment>\n                                                <span>\n                                                    {item.home} - {scoreData.home_team_score}-{scoreData.home_wickets} {scoreData.home_overs}\n                                                </span> \n                                                / \n                                                <span>  \n                                                    {item.away} - {scoreData.away_team_score}-{scoreData.away_wickets} {scoreData.away_overs}\n                                                </span>\n                                            </React.Fragment>\n                                            :\n                                            <React.Fragment>\n                                                <span>\n                                                    {item.home} - {scoreData.home_score}\n                                                </span>\n                                                / \n                                                <span>  \n                                                    {item.away} - {scoreData.away_score}\n                                                </span>\n                                            </React.Fragment>\n                                        }\n                                    </div>  \n                            }\n                            {\n                                isFrom == 'Completed' &&\n                                    <div className=\"timer-section\">\n                                        <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM \" }} />\n                                    </div>\n                            }\n                            {\n                                isFrom != 'Completed' && isFrom != 'Live' &&\n                                <React.Fragment>\n                                    {\n                                        Utilities.showCountDown({ game_starts_in: item.game_starts_in })\n                                        ?\n                                        <div className=\"countdown-timer-section\">\n                                            {\n                                                item.game_starts_in && <CountdownTimer\n                                                    timerCallback={timerCallback}\n                                                    deadlineTimeStamp={item.game_starts_in} />\n                                            }\n                                        </div>\n                                        :\n                                        <div className=\"timer-section\">\n                                            <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D MMM - hh:mm A \" }} />\n                                        </div>\n                                    }\n                                </React.Fragment>\n                            }\n                            <div className={\"pickem-prediction-card\" + (item.allow_draw == 0 ? ' pick-pred-two' : '')}>\n                                <div className=\"option-section\">\n                                    <div \n                                        className={\"option-info \" + (this.addClass(item.home_uid,item,isFrom))}\n                                        onClick={() => (isFrom == 'Lobby' && this.onMakePrediction(\n                                            item.home_team_name,\n                                            item.home_flag,\n                                            item.home_uid,\n                                            item.season_scheduled_date, item.game_starts_in))\n                                        }\n                                    >\n\n                                        {\n                                            isFrom != 'Lobby' &&\n                                            <div className=\"shimmer-v\"><Skeleton duration={2} width={'100%'} height={'100%'} /></div>\n                                        }\n                                        <span className=\"correct-text\">{AL.CORRECT_ANS}</span>\n                                        <i className=\"icon-tick-circular\"></i>\n                                        <i className=\"icon-cross-circular\"></i>\n                                        {\n                                            isFrom != 'Completed' && this.PickedPercentage(item.home_coins,item.total_pool) > 0 &&\n                                                <CircularProgressBar\n                                                    progressPer={this.PickedPercentage(\n                                                        item.home_coins,\n                                                        item.total_pool\n                                                    )\n                                                    }\n                                                />\n                                        }\n                                        <div className={isFrom == 'Lobby' ? '' : 'option-info-inner'}>\n                                            <div className=\"option-img\">\n                                                <img src={Utilities.teamFlagURL(item.home_flag)} alt=\"\" />\n                                            </div>\n                                            <div className=\"option-name\">{item.home}</div>\n                                        </div>\n                                    </div>\n                                    {\n                                        item.allow_draw == 1 &&\n                                        <div \n                                            className={\"option-info \" + (this.addClass(0,item,isFrom))}\n                                            onClick={() => (isFrom == 'Lobby' && this.onMakePrediction(\n                                                'DRAW',\n                                                Images.DRAW_ICON,\n                                                0,\n                                                item.season_scheduled_date,\n                                                item.game_starts_in\n                                            ))\n                                            }\n                                        >   \n                                            {\n                                                isFrom != 'Lobby' &&\n                                                <div className=\"shimmer-v\"><Skeleton duration={2} width={'100%'} height={'100%'} /></div>\n                                            }\n                                            <i className=\"icon-tick-circular\"></i>\n                                            <i className=\"icon-cross-circular\"></i>\n                                            {\n                                                isFrom != 'Lobby' &&\n                                                    <div className=\"shimmer-v\"><Skeleton duration={2} width={'100%'} height={'100%'} /></div>\n                                            }\n                                            <span className=\"correct-text\">{AL.CORRECT_ANS}</span>\n                                            {\n                                                isFrom != 'Completed' && this.PickedPercentage(item.draw_coins,item.total_pool) > 0 &&\n                                                <CircularProgressBar\n                                                    progressPer={this.PickedPercentage(\n                                                        item.draw_coins,\n                                                        item.total_pool\n                                                    )\n                                                    }\n                                                />\n                                            }\n                                            <div className={isFrom == 'Lobby' ? '' : 'option-info-inner'}>\n                                                <div className=\"option-img\">\n                                                    <img src={Images.DRAW_ICON} alt=\"\" />\n                                                </div>\n                                                <div className=\"option-name\">DRAW</div>\n                                            </div>\n                                        </div>\n                                    }\n                                    <div \n                                        className={\"option-info \" + (this.addClass(item.away_uid,item,isFrom))}\n                                        onClick={() => (isFrom == 'Lobby' && this.onMakePrediction(\n                                            item.away_team_name,\n                                            item.away_flag,\n                                            item.away_uid,\n                                            item.season_scheduled_date,\n                                            item.game_starts_in\n                                        ))\n                                        }\n                                    >\n                                        {\n                                            isFrom != 'Lobby' &&\n                                                <div className=\"shimmer-v\"><Skeleton duration={2} width={'100%'} height={'100%'} /></div>\n                                        }\n                                        <span className=\"correct-text\">{AL.CORRECT_ANS}</span>\n                                        <i className=\"icon-tick-circular\"></i>\n                                        <i className=\"icon-cross-circular\"></i>\n                                        {\n                                            isFrom != 'Completed' && this.PickedPercentage(item.away_coins,item.total_pool) > 0 &&\n                                            <CircularProgressBar\n                                                progressPer={this.PickedPercentage(\n                                                    item.away_coins,\n                                                    item.total_pool\n                                                )\n                                                }\n                                            />\n                                        }\n                                        <div className={isFrom == 'Lobby' ? '' : 'option-info-inner'}>\n                                            <div className=\"option-img\">\n                                                <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" />\n                                            </div>\n                                            <div className=\"option-name\">{item.away}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                {\n                                    isFrom == 'Lobby' ?\n                                    <div className=\"pickem-pred-info\">\n                                        <div className=\"league-name\">{item.league_name}</div>\n                                        {\n                                            item.total_user_joined == 0 ?\n                                                <div className=\"first-to-predict\">\n                                                    {AL.BE_FIRST}\n                                                </div>\n                                                :\n                                                <div className=\"first-to-predict\">\n                                                    {AL.PRIZE_POOL} <img src={Images.IC_COIN} alt=\"\" className=\"coin-img\" /> {item.total_pool}\n                                                </div>\n                                        }\n                                    </div>\n                                    :\n                                    <div className={\"pickem-pred-coin-info \" + (isFrom == 'Completed' ? 'pickem-pred-completed-info' : '')}>\n                                        <div className=\"display-table-cell\">\n                                            <p>{AL.YOUR_BET}</p>\n                                            <div className=\"amt\">\n                                                <img src={Images.IC_COIN} alt=\"\"/> {item.bet_coins}\n                                            </div>\n                                        </div>\n                                        <div className=\"display-table-cell\">\n                                            <p>{AL.PRIZE_POOL}</p>\n                                            <div className=\"amt\">\n                                                <img src={Images.IC_COIN} alt=\"\"/> {item.total_pool}\n                                            </div>\n                                        </div>\n                                        {\n                                            isFrom == 'Completed' ?\n                                            <div className=\"display-table-cell\">\n                                                <p>{AL.YOU_WON}</p>\n                                                <div className=\"amt\">\n                                                    <img src={Images.IC_COIN} alt=\"\"/> {Utilities.kFormatter(item.won_amount)} \n                                                    <OverlayTrigger trigger={['hover', 'focus']} placement={'bottom'} overlay={\n                                                        <Tooltip id=\"tooltip\">\n                                                            <strong>{AL.EST_WIN_FORMULA}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <i className=\"icon-info\" />\n                                                    </OverlayTrigger>\n                                                </div>\n                                            </div>\n                                            :\n                                            <div className=\"display-table-cell\">\n                                                <p>{AL.EST_WIN}</p>\n                                                <div className=\"amt\">\n                                                    <img src={Images.IC_COIN} alt=\"\"/> {Utilities.kFormatter(item.estimated_winning)} \n                                                    <OverlayTrigger trigger={['hover', 'focus']} placement={'bottom'} overlay={\n                                                        <Tooltip id=\"tooltip\">\n                                                            <strong>{AL.EST_WIN_FORMULA}</strong>\n                                                        </Tooltip>\n                                                    }>\n                                                        <i className=\"icon-info\" />\n                                                    </OverlayTrigger>\n                                                </div>\n                                            </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n                            {\n                                isFrom != 'Lobby' && \n                                <div className={\"pickem-pred-footer\" + (isFrom != 'Upcoming' ? '' : ' center')}>\n                                    <div>{item.league_name}</div>\n                                    {\n                                        isFrom != 'Upcoming' &&\n                                            <a \n                                                href\n                                                onClick={()=>this.showParticipants()}\n                                                >\n                                                {item.total_user_joined} {AL.PARTICIPANTS}\n                                            </a>\n                                    }\n                                </div>\n                            }\n                        </div>\n                        {\n                            showCP && <NewConfirmPickem {...this.props} preData={{\n                                mShow: showCP,\n                                mHide: this.hideCP,\n                                selectedData: selectedData,\n                                successAction: removePrecitedQue,\n                                PickemConfigData: PickemConfigData,\n                                showShareM: showShareM,\n                                shareContest: this.props.shareContest,\n                                item: item,\n                                isFrom : isFrom \n                            }} />\n                        }\n                    </React.Fragment>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default NewPickemPredictionCard;","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemLobby.jsx",["3993","3994","3995","3996","3997","3998","3999","4000","4001","4002","4003","4004","4005","4006"],"import React, { Component } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { MyContext } from '../../views/Dashboard';\nimport NewPickemPredictionCard from './NewPickemPredictionCard';\nimport NewPIckemHTPModal from './NewPickemHTPModal';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport SocketIOClient from \"socket.io-client\";\nimport CustomHeader from '../../components/CustomHeader';\nimport NewPickemShareModal from \"./NewPickemShareModal\";\nimport { _filter, _Map, Utilities } from '../../Utilities/Utilities';\nimport * as Constants from \"../../helper/Constants\";\nimport ls from 'local-storage';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { getPickemFixtureList, getPickemLeagueFilter } from '../../WSHelper/WSCallings';\nimport Images from '../../components/images';\nimport { NoDataView } from '../CustomComponent';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport Filter from '../../components/filter';\n\nvar socket = '';\n\nclass NewPickemLobby extends Component {\n    constructor(props) {\n        super(props);\n        this._isMounted = false;\n        this.state = {\n            LData: this.props.data || '',\n            sports_id: Constants.AppSelectedSport,\n            showHTP: false,\n            PickemConfigData: '',\n            FixtureList: [],\n            league_id: \"\",\n            feed_type: \"\",\n            filterArray: [],\n            showPickLFitlers: false,\n            isListLoading: false,\n            ShimmerList: [1, 2, 3, 4, 5, 6, 7],\n            limit: 20,\n            offset: 0,\n            hasMore: false,\n            showShareM: false,\n            ShareItem:''\n        }\n    }\n\n    componentDidMount() {\n        if(Constants.IS_PICKEM){\n            socket = SocketIOClient(WSC.nodeBaseURL);\n        }\n        if (window.location.pathname === '/lobby') {        \n            this.getLeagueFilter();        \n            this.checkOldUrl();\n            this._isMounted = true;\n            this.parseHistoryStateData(this.state.LData);\n        }\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        let sports = '#' + Utilities.getSelectedSportsForUrl();\n        if (!url.includes(sports)) {\n            url = url + sports\n        }\n        if (!url.includes('#pickem')) {\n            url = url + \"#pickem\";\n        }\n        window.history.replaceState(\"\", \"\", url);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        socket.disconnect();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.reload(nextProps);\n        }\n        if (this.state.showPickLFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showPickLFitlers: nextProps.showLobbyFitlers })\n        }\n    }\n\n    /**\n     * @description method will be called when changing sports\n     */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/lobby\")) {\n            \n            this.setState({\n                FixtureList: [],\n                \n                offset: 0,\n                sports_id: nextProps.selectedSport\n            }, () => {\n                \n                WSManager.setFromConfirmPopupAddFunds(false);\n                this.PickemFixtureList(0);\n                \n                this.getLeagueFilter();\n            })\n        }\n    }\n\n    parseHistoryStateData = (data) => {\n        socket.disconnect();\n        this.PickemFixtureList();\n        this.joinPredictionRoom()\n    }\n\n    joinPredictionRoom = () => {\n        socket.connect()\n        socket.emit('JoinAddPickemRoom', {});\n        socket.emit('JoinDeletePickemRoom', {});\n        socket.on('NotifyNewPickem', (obj) => {\n            if (this._isMounted && obj.pickem.sports_id === Constants.AppSelectedSport) {\n                this.addFixture(obj)\n                CustomHeader.showNewPToast(AL.NEW_PICKEM)\n            }\n        })\n        socket.on('NotifyDeletePickem', (obj) => {\n            if (this._isMounted && obj.sports_id === Constants.AppSelectedSport) {\n                this.deleteFixture(obj)\n            }\n        })\n    }\n\n    addFixture = (obj) => {\n        let pinnedArray = [];\n        let tmpArray = [];\n        this.setState({\n            isListLoading: true\n        })\n        _Map(this.state.FixtureList, (item) => {\n            if (item.is_pin == 1) {\n                pinnedArray.push(item)\n            } else {\n                tmpArray.push(item)\n            }\n        })\n        this.setState({\n            FixtureList: [...pinnedArray, obj.pickem, ...tmpArray]\n        },()=>{\n            this.setState({\n                isListLoading: false\n            })\n        });\n    }\n\n    getSportsLeagueId(sports_id, filterArray) {\n\n        let league_id = '';\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == sports_id) {\n                league_id = filterArray[i].league_id;\n            }\n        }\n        return league_id;\n    }\n\n    getLeagueFilter = async () => {\n        if (this.state.sports_id == null)\n            return;\n\n        let param = {\n            \"sports_id\": this.state.sports_id\n        }\n\n        this.setState({ isListLoading: true })\n        delete param.limit;\n        var api_response_data = await getPickemLeagueFilter(param);\n        if (api_response_data) {\n            this.setState({\n                filterArray: api_response_data.data.league_list\n            })\n        }\n        this.setState({ isListLoading: false })\n    }\n\n    fetchMoreData = () => {\n        if (!this.state.isListLoading && this.state.hasMore) {\n            this.PickemFixtureList()\n        }\n    }\n\n    showHTPModal = () => {\n        this.setState({\n            showHTP: true\n        })\n    }\n\n    hideHTPModal = () => {\n        this.setState({\n            showHTP: false\n        })\n    }\n\n    clickEarnCoins = () => {\n        if (WSManager.loggedIn()) {\n            this.props.history.push(\"/earn-coins\")\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToSignup = () => {\n        this.props.history.push(\"/signup\")\n    }\n\n    /**\n     * @description - method to get fixtures listing from server/s3 bucket\n     */\n    PickemFixtureList = async () => {\n        if (this.state.sports_id == null)\n            return;\n        let param = {\n            \"sports_id\": this.state.sports_id,\n            \"league_id\": this.state.league_id\n        }\n\n        param['limit'] = this.state.limit;\n        param['offset'] = this.state.offset;\n        if(this.state.feed_type != ''){\n            param['feed_type'] = this.state.feed_type;\n        }\n\n        if (!param.offset || param.offset == 0) {\n            this.setState({ isListLoading: true })\n        }\n        getPickemFixtureList(param).then((responseJson) => {\n            this.setState({ isListLoading: false })\n            if (responseJson.response_code === WSC.successCode) {\n                let data = responseJson.data || [];\n                if (param.offset == 0) {\n                    this.setState({\n                        FixtureList: data.fixture_list || [],\n                        PickemConfigData: data.pickem_coin_config,\n                        hasMore : data.fixture_list.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n                else{\n                    this.setState({\n                        FixtureList: [...this.state.FixtureList, ...data.fixture_list],\n                        PickemConfigData: this.state.PickemConfigData || data.pickem_coin_config,\n                        hasMore : data.fixture_list.length >= param.limit,\n                        offset: data.offset\n                    });\n                }\n            }\n        })\n    }\n\n    removePrecitedQue = (item) => {\n        this.deleteFixture(item)\n    }\n\n    timerCallback = (item) => {\n        console.log('====================================');\n        console.log('timerCompletionCall');\n        console.log('====================================');\n        this.deleteFixture(item)\n    }\n\n    deleteFixture = (item) => {\n        this.setState({\n            isListLoading: true\n        })\n        let fArray = _filter(this.state.FixtureList, (obj) => {\n            return item.pickem_id != obj.pickem_id\n        })\n        this.setState({\n            FixtureList: fArray,\n            isListLoading: false\n        },()=>{\n            if(fArray.length <= 5 && this.state.hasMore){\n                this.setState({\n                    offset: fArray.length\n                },()=>{\n                    this.fetchMoreData()\n                })\n            }\n        })\n    }\n    /** \n    @description show lobby filters \n    */\n    showFilter = () => {\n        this.setState({ showPickLFitlers: true })\n    }\n    /** \n   @description hide lobby filters \n   */\n    hideFilter = () => {\n        this.setState({ showPickLFitlers: false })\n        this.props.hideFilterData()\n    }\n    /** \n    @description Apply filters and load data accordingly\n    */\n    filterByLeague = (filterBy) => {\n        let league_id = filterBy && filterBy.league_id ? filterBy.league_id : '';\n        let feed_type = filterBy && filterBy.feed_type ? filterBy.feed_type : '';\n        this.setState({\n            FixtureList: this.state.league_id != filterBy ? [] : this.state.FixtureList,\n            league_id: league_id,\n            feed_type: feed_type,\n            showPickLFitlers: false,\n            offset: 0\n        }, () => {\n            Utilities.scrollToTop()\n            this.PickemFixtureList()\n        })\n    }\n\n    showShareM = (data) => {\n        this.setState({\n            showShareM: true,\n        });\n    }\n\n    hideShareM = () => {\n        this.setState({\n            showShareM: false,\n        });\n    }\n\n    shareContest(event, data) {\n        if (WSManager.loggedIn()) {\n            event.stopPropagation();\n            this.setState({ \n                showShareM: true, \n                ShareItem: data \n            })\n        } else {\n            this.goToSignup()\n        }\n    }\n\n    goToPRED = () => {\n        WSManager.setPickedGameType(Constants.GameType.Pred);\n        \n        \n\n        let gameType = Utilities.getMasterData().sports_hub;\n        let HGLIST = _filter(gameType, (obj) => {\n            return obj.game_key == Constants.GameType.Pred;\n        })\n        let lsSport = ls.get('selectedSports');\n        if(HGLIST[0].allowed_sports.includes(lsSport)){\n            window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n        }\n        else{\n            let sport = HGLIST[0].allowed_sports[0];\n            ls.set('selectedSports', sport);\n            Constants.setValue.setAppSelectedSport(sport);\n            window.location.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n        }\n    }\n\n    renderPREDCard = () => {\n        if(Utilities.getMasterData().allow_sports_prediction_bnr != 1){\n            return ''\n        }\n        let bannerImg = Utilities.getMasterData().sports_prediction_bnr;\n        if (Constants.IS_PREDICTION) {\n            return ( bannerImg ?\n                    <div onClick={this.goToPRED} className=\"prd-card-img-only\" >\n                        <img className=\"img-shape\" src={Utilities.getSettingURL(bannerImg)} alt='' />\n                    </div>\n                    :\n                <div onClick={this.goToPRED} className=\"pickem-prediction-outer-card is-card\">\n                    <div className=\"dfs-card\" >\n                        <img className=\"img-dfs-shape\" src={Images.PICKEM_SHAPE_IMG} alt='' />\n                        <div className=\"dfs-c\">\n                            <p>\n                                {/* Pool betting is always fun, Bet on Correct Prediction and Win Huge */}\n                                Picking a winner is always fun, stake coins on correct prediction and win huge\n                                <a href className=\"button\">Play Now!</a>\n                            </p>\n                            <img className=\"img-dfs\" src={Images.PICKEM_IMG} alt='' />\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n        return ''\n    }\n\n    render() {\n        const { \n            showHTP, \n            FixtureList, \n            PickemConfigData, \n            showPickLFitlers, \n            league_id, \n            filterArray,\n            isListLoading, \n            ShimmerList,\n            hasMore,\n            showShareM,\n            ShareItem,\n            feed_type\n        } = this.state;\n        let FitlerOptions = {\n            showPickLFitlers: showPickLFitlers,\n            filtered_league_id: league_id\n        }\n        var showLobbySportsTab = process.env.REACT_APP_LOBBY_SPORTS_ENABLE == 1 ? true : false\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"transparent-header web-container pickem-web-container\">\n                        <Filter\n                            {...this.props}\n                            selectedFilter={{league_id:league_id,feed_type: feed_type}}\n                            leagueList={filterArray}\n                            FitlerOptions={FitlerOptions}\n                            hideFilter={this.hideFilter}\n                            filterByLeague={this.filterByLeague}\n                        ></Filter>\n                        <div className={\"header-fixed-strip\" + (showLobbySportsTab ? \" header-fixed-strip-2\" : '')}>\n                            <div className=\"strip-content\">\n                                <span>{AL.PICKEM}</span>\n                                <a\n                                    href\n                                    onClick={() => { this.showHTPModal() }}\n                                >\n                                    <i className=\"icon-question\"></i>\n                                    {AL.HOW_TO_PLAY}\n                                </a>\n                                <a\n                                    href\n                                    onClick={() => { this.clickEarnCoins() }}\n                                >\n                                    <img className=\"coin-img\" src={Images.IC_COIN} alt=\"\" />\n                                    {AL.EARN_COINS_LOWCASE}\n                                </a>\n                            </div>\n                        </div>\n                        <InfiniteScroll\n                                \n                                dataLength={FixtureList.length}\n                                pullDownToRefresh={false}\n                                hasMore={hasMore && !isListLoading}\n                                next={this.fetchMoreData.bind(this)}\n                            >\n                                {\n                                    !isListLoading && FixtureList && FixtureList.length > 0 && FixtureList.map((item, idx) => {\n                                        return (\n                                            <React.Fragment>\n                                                <NewPickemPredictionCard \n                                                    {...this.props} \n                                                    isFrom='Lobby'\n                                                    item={item} \n                                                    removePrecitedQue={this.removePrecitedQue} \n                                                    PickemConfigData={PickemConfigData} \n                                                    timerCallback= {() => this.timerCallback(item)}\n                                                    showShareM={showShareM}\n                                                    shareContest= {this.shareContest.bind(this)}\n                                                />\n                                                {\n                                                    FixtureList.length < 3 &&                                                    \n                                                    idx === 0 && this.renderPREDCard()\n                                                }\n                                                {\n                                                    FixtureList.length > 2 &&\n                                                    idx === 2 && this.renderPREDCard()\n                                                }\n                                            </React.Fragment>\n                                        )\n                                    })\n                                }\n                        </InfiniteScroll>\n                        {\n                            FixtureList && FixtureList.length == 0 && !isListLoading &&\n                            <NoDataView\n                                BG_IMAGE={Images.no_data_bg_image}\n                                CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                MESSAGE_1={AL.NO_DATA_FOUND}\n                                MESSAGE_2={league_id != '' ? AL.NO_DATA_FOR_FILTER : AL.NO_DATA_TO_SHOW}\n                            />\n                        }\n                        {\n                            (FixtureList.length === 0 && isListLoading) &&\n                            ShimmerList.map((item, index) => {\n                                return (\n                                    <React.Fragment key={index} >                                       \n                                        <div className=\"contest-list pickem-lobby-shimmer\">\n                                            <div className=\"shimmer-container\">\n                                                <div className=\"shimmer-top-view\">\n                                                    <div className=\"shimmer-top-inner-view\">\n                                                        <div className=\"shimmer-image predict \">\n                                                            <Skeleton width={24} height={24} circle={true} />\n                                                        </div>\n                                                        <div className=\"shimmer-line predict\">\n                                                            <Skeleton height={34} width={34} />\n                                                        </div>                                                        \n                                                        <div className=\"shimmer-line predict\">\n                                                            <Skeleton height={14} width={'50%'} />\n                                                        </div>                                                        \n                                                    </div>\n                                                    <div className=\"shimmer-top-inner-view\">\n                                                        <div className=\"shimmer-image predict\">\n                                                            <Skeleton width={24} height={24} circle={true} />\n                                                        </div>\n                                                        <div className=\"shimmer-line predict\">\n                                                            <Skeleton height={34} width={34} />\n                                                        </div>                                                        \n                                                        <div className=\"shimmer-line predict\">\n                                                            <Skeleton height={14} width={'50%'} />\n                                                        </div>                                                        \n                                                    </div>\n                                                </div>\n                                                <div className=\"shimmer-bottom-view m-0\">\n                                                    <div className=\"progress-bar-default\">\n                                                        <Skeleton height={8} width={'100%'} />\n                                                    </div>\n                                                    <div className=\"progress-bar-default\">\n                                                        <Skeleton height={8} width={'100%'} />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </React.Fragment>\n                                )\n                            })\n                        }\n\n                        {\n                            showHTP &&\n                            <NewPIckemHTPModal\n                                ModalData={{\n                                    show: showHTP,\n                                    hide: this.hideHTPModal\n                                }}\n                            />\n                        }\n\n                        {\n                            showShareM &&\n                            <NewPickemShareModal\n                                {...this.props}\n                                preData={{\n                                    mShow: showShareM,\n                                    mHide: this.hideShareM,\n                                    spData: ShareItem\n                                }}\n                             />\n                        }\n\n                    </div>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default NewPickemLobby;\n","/var/www/html/framework/frontend/src/Component/Pickem/PickemStatsUser.jsx",["4007"],"import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport CustomHeader from '../../components/CustomHeader';\n\nexport default class PickemStatsUser extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            isLoadMoreLoaderShow: false,\n            hasMore: true            \n        }\n        this.headerRef = React.createRef();\n    }\n\n    componentWillMount() {\n        \n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    componentDidMount() {\n        \n    }\n\n\n  \n\n    render() {\n        const HeaderOption = {\n            back: true,\n            notification: true,\n            title: \"Maria Gonzalez\",\n            hideShadow: true\n        }\n        const {  } = this.state\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.leaderboard.title}</title>\n                            <meta name=\"description\" content={MetaData.leaderboard.description} />\n                            <meta name=\"keywords\" content={MetaData.leaderboard.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader\n                            ref={(ref) => this.headerRef = ref}\n                            HeaderOption={HeaderOption}\n                            {...this.props} />\n                        <Row>\n                            <Col sm={12}>\n\n                                <div className=\"leaderboard-wrapper pickem-leaderbord dashboard-container without-sports-tab \">\n                                    <div className=\"stats-header\">\n                                        <div  className=\"stats-header-item\">\n                                            <h4>80</h4>\n                                            <div className=\"stats-info\">\n                                                <span>This Month’s Rank</span>\n                                                <span>80.0 Pts</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"stats-sub-header\">Picks of this week</div>\n                                    \n\n                                </div>\n                            </Col>\n                        </Row>\n\n                        \n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Pickem/PickemYourStats.jsx",["4008","4009","4010","4011","4012","4013","4014"],"import React, { Fragment } from 'react';\nimport { Tab, Tabs, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as NC from \"../../WSHelper/WSConstants\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\nimport { _Map, _debounce } from '../../Utilities/Utilities';\nimport CustomHeader from '../../components/CustomHeader';\nimport { GetUserWeeklyLeaderboard, GetUserMonthlyLeaderboard } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../../Component/CustomComponent';\n\n\n\nconst Shimmer = () => {\n    return (\n        <div className=\"ranking-list shimmer margin-2p\">\n            <div className=\"display-table-cell text-center\">\n                <div className=\"rank\">-</div>\n                <div className=\"rank-heading\">{AppLabels.RANK}</div>\n            </div>\n            <div className=\"display-table-cell pl-1 pointer-cursor\">\n                <figure className=\"user-img shimmer\">\n                    <Skeleton circle={true} width={40} height={40} />\n                </figure>\n                <div className=\"user-name-container shimmer\">\n                    <Skeleton count={2} />\n                </div>\n            </div>\n            <div className=\"display-table-cell\">\n                <div className=\"points\">-</div>\n                <div className=\"points-heading\">{AppLabels.POINTS}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default class PickemYourStats extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            isLoadMoreLoaderShow: false,\n            hasMore: true,\n            leaderboardList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            user_id: '',\n            selectedTab: '',\n            weekRank: [],\n            monthRank: []\n        }\n        this.headerRef = React.createRef();\n    }\n\n    componentWillMount() {\n        if (this.props.location.state) {\n            this.setState({\n                user_id: this.props.location.state.user_id,\n                selectedTab: this.props.location.state.selectedTab,\n            })\n        } else {\n            \n        }\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    componentDidMount() {\n        if (this.props.location.state) {\n            this.getLeaderboard();\n        }\n    }\n\n    getLeaderboard() {\n        const { selectedTab, user_id } = this.state;\n        let param = {\n            user_id: user_id\n        }\n        let callService = selectedTab == 1 ? GetUserWeeklyLeaderboard(param) : GetUserMonthlyLeaderboard(param)\n\n        this.setState({ isLoaderShow: true })\n        callService.then((responseJson) => {\n            setTimeout(() => {\n                this.setState({ isLoaderShow: false })\n            }, 100);\n            if (responseJson && responseJson.response_code == NC.successCode) {\n                this.setState({\n                    leaderboardList: responseJson.data.leaderboard,\n                    hasMore: responseJson.data.leaderboard.length === 20,\n                    weekRank: responseJson.data.week_rank !== null ? responseJson.data.week_rank : [],\n                    monthRank: responseJson.data.month_rank !== null ? responseJson.data.month_rank : [],\n                });\n            }\n        })\n    }\n\n    onLoadMore() {\n        if (!this.state.isLoaderShow && this.state.hasMore) {\n            this.setState({ hasMore: false })\n            this.getLeaderboard()\n        }\n    }\n\n\n\n\n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        this.setState({ selectedTab: selectedTab }, () => {\n            this.getLeaderboard()\n        });\n    }, 300)\n\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            notification: true,\n            title: AppLabels.YOUR_STATS,\n            hideShadow: true\n        }\n        const { selectedTab, weekRank, monthRank } = this.state\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.leaderboard.title}</title>\n                            <meta name=\"description\" content={MetaData.leaderboard.description} />\n                            <meta name=\"keywords\" content={MetaData.leaderboard.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader\n                            ref={(ref) => this.headerRef = ref}\n                            HeaderOption={HeaderOption}\n                            {...this.props} />\n                        <Row>\n                            <Col sm={12}>\n\n                                <div className=\"leaderboard-wrapper pickem-leaderbord dashboard-container without-sports-tab \">\n                                    <div className=\"stats-header\">\n                                        <div className=\"stats-header-item\">\n                                            <h4>{weekRank.user_rank ? weekRank.user_rank : \"-\"}</h4>\n                                            <div className=\"stats-info\">\n                                                <span>{AppLabels.THIS_WEEK_RANK}</span>\n                                                <span>{weekRank.coins ? weekRank.coins : \"-\"} {AppLabels.PTS}</span>\n                                            </div>\n                                        </div>\n                                        <div className=\"stats-header-item\">\n                                            <h4>{monthRank.user_rank ? monthRank.user_rank : \"-\"}</h4>\n                                            <div className=\"stats-info\">\n                                                <span>{AppLabels.THIS_MONTH_RANK}</span>\n                                                <span>{monthRank.user_rank ? monthRank.user_rank : \"-\"} {AppLabels.PTS}</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"tabs-custom p-t-10\">\n                                        <Tabs defaultActiveKey={selectedTab} id={'leaderboard-tab'}>\n                                            <Row className=\"clearfix\">\n                                                <Col className=\"\" xs={12}>\n                                                    <Nav>\n                                                        <NavItem onClick={() => this.onTabClick(1)} eventKey={1} className=\"live-contest\"> {AppLabels.WEEKS} </NavItem>\n                                                        <NavItem onClick={() => this.onTabClick(2)} eventKey={2}>{AppLabels.MONTHS}</NavItem>\n                                                    </Nav>\n                                                </Col>\n                                                <Col xs={12}>\n                                                    <Tab.Content animation>\n                                                        <Tab.Pane eventKey={1}>\n                                                            {\n                                                                (this.state.leaderboardList.length == 0 && this.state.isLoaderShow) ?\n                                                                    this.state.ShimmerList.map((item, index) => {\n                                                                        return (\n                                                                            <Shimmer key={index} />\n                                                                        )\n                                                                    })\n                                                                    :\n                                                                    (this.state.leaderboardList.length == 0 && !this.state.isLoaderShow) ?\n                                                                        <NoDataView\n                                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                                            CENTER_IMAGE={Images.teams_ic}\n                                                                            MESSAGE_1={AppLabels.NO_DATA_AVAILABLE}\n                                                                            MESSAGE_2={''}\n                                                                            BUTTON_TEXT={AppLabels.GO_TO_MY_CONTEST}\n                                                                            onClick={this.goBack.bind(this)}\n                                                                        />\n                                                                        :\n\n                                                                        <div>\n                                                                            <div className=\"leaderboard-header m-t-10\">\n\n                                                                                <div className=\"ranking-list wid-full user-list-header\">\n                                                                                    <div className=\"display-table-cell text-left\">\n                                                                                        <div className=\"list-header-text text-left\">{AppLabels.WEEKS}</div>\n                                                                                    </div>\n                                                                                    <div className=\"display-table-cell pl-1 pointer-cursor\">\n                                                                                        <div className=\"list-header-text left pl6\">{AppLabels.RANK}</div>\n                                                                                    </div>\n                                                                                    <div className=\"display-table-cell\">\n                                                                                        <div className=\"list-header-text text-right mr10\">{AppLabels.PTS}</div>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </div>\n                                                                            <div className='p-height' id='scrollableTarget'>\n                                                                                <InfiniteScroll\n                                                                                    dataLength={this.state.leaderboardList.length}\n                                                                                    next={() => this.onLoadMore()}\n                                                                                    hasMore={!this.state.isLoaderShow && this.state.hasMore}\n                                                                                    scrollableTarget={'scrollableTarget'}\n                                                                                    loader={\n                                                                                        this.state.isLoadMoreLoaderShow &&\n                                                                                        <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                                                    }>\n                                                                                    <div className=\"leaderboard-listing\">\n\n                                                                                        {_Map(this.state.leaderboardList, (item, idx) => {\n\n                                                                                            return (\n                                                                                                <div className=\"ranking-list wid-full\" key={idx}>\n                                                                                                    <div className=\"display-table-cell text-left\">\n                                                                                                        <div>{item.label}</div>\n                                                                                                    </div>\n                                                                                                    <div className=\"display-table-cell pl-1 pos-r\">\n                                                                                                        <div className=\"user-name-container\">\n                                                                                                            <div className=\"points\">{item.user_rank}</div>\n                                                                                                        </div>\n                                                                                                    </div>\n                                                                                                    <div className=\"display-table-cell\">\n                                                                                                        <div className=\"points\">{item.coins}</div>\n                                                                                                    </div>\n                                                                                                </div>\n                                                                                            )\n                                                                                        })}\n\n                                                                                    </div>\n\n                                                                                </InfiniteScroll>\n                                                                            </div>\n\n\n                                                                        </div>\n                                                            }\n                                                        </Tab.Pane>\n                                                        <Tab.Pane eventKey={2}>\n                                                            {\n                                                                (this.state.leaderboardList.length == 0 && this.state.isLoaderShow) ?\n                                                                    this.state.ShimmerList.map((item, index) => {\n                                                                        return (\n                                                                            <Shimmer key={index} />\n                                                                        )\n                                                                    })\n                                                                    :\n                                                                    (this.state.leaderboardList.length == 0 && !this.state.isLoaderShow) ?\n                                                                        <NoDataView\n                                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                                            CENTER_IMAGE={Images.teams_ic}\n                                                                            MESSAGE_1={AppLabels.NO_DATA_AVAILABLE}\n                                                                            MESSAGE_2={''}\n                                                                            BUTTON_TEXT={AppLabels.GO_TO_MY_CONTEST}\n                                                                            onClick={this.goBack.bind(this)}\n                                                                        />\n                                                                        :\n\n                                                                        <div>\n                                                                            <div className=\"leaderboard-header m-t-10\">\n\n                                                                                <div className=\"ranking-list wid-full user-list-header\">\n                                                                                    <div className=\"display-table-cell text-left\">\n                                                                                        <div className=\"list-header-text text-left\">{AppLabels.MONTHS}</div>\n                                                                                    </div>\n                                                                                    <div className=\"display-table-cell pl-1 pointer-cursor\">\n                                                                                        <div className=\"list-header-text left pl6\">{AppLabels.RANK}</div>\n                                                                                    </div>\n                                                                                    <div className=\"display-table-cell\">\n                                                                                        <div className=\"list-header-text text-right mr10\">{AppLabels.PTS}</div>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </div>\n                                                                            <div className='p-height' id='scrollableTarget'>\n                                                                                <InfiniteScroll\n                                                                                    dataLength={this.state.leaderboardList.length}\n                                                                                    next={() => this.onLoadMore()}\n                                                                                    hasMore={!this.state.isLoaderShow && this.state.hasMore}\n                                                                                    scrollableTarget={'scrollableTarget'}\n                                                                                    loader={\n                                                                                        this.state.isLoadMoreLoaderShow &&\n                                                                                        <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                                                    }>\n                                                                                    <div className=\"leaderboard-listing\">\n\n                                                                                        {_Map(this.state.leaderboardList, (item, idx) => {\n\n                                                                                            return (\n                                                                                                <div className=\"ranking-list wid-full\" key={idx}>\n                                                                                                    <div className=\"display-table-cell text-left\">\n                                                                                                        <div>{item.label}</div>\n                                                                                                    </div>\n                                                                                                    <div className=\"display-table-cell pl-1 pos-r\">\n                                                                                                        <div className=\"user-name-container\">\n                                                                                                            <div className=\"points\">{item.user_rank}</div>\n                                                                                                        </div>\n                                                                                                    </div>\n                                                                                                    <div className=\"display-table-cell\">\n                                                                                                        <div className=\"points\">{item.coins}</div>\n                                                                                                    </div>\n                                                                                                </div>\n                                                                                            )\n                                                                                        })}\n\n                                                                                    </div>\n\n                                                                                </InfiniteScroll>\n                                                                            </div>\n\n\n                                                                        </div>\n                                                            }\n                                                        </Tab.Pane>\n                                                    </Tab.Content>\n                                                </Col>\n                                            </Row>\n                                        </Tabs>\n                                    </div>\n\n                                </div>\n                            </Col>\n                        </Row>\n\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Pickem/PickemLeaderboard.jsx",["4015","4016","4017","4018","4019","4020","4021","4022","4023","4024","4025","4026","4027","4028"],"import React, { Fragment } from 'react';\nimport { Tab, Tabs, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as NC from \"../../WSHelper/WSConstants\";\nimport PickemLeaderboardItem from \"./PickemLeaderboardItem\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport Skeleton from 'react-loading-skeleton';\nimport { _debounce } from '../../Utilities/Utilities';\nimport CustomHeader from '../../components/CustomHeader';\nimport { GetPickemLeaderboard, GetWeekList, GetMonthList } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../../Component/CustomComponent';\nimport Select from 'react-select';\n\n\n\nconst Shimmer = () => {\n    return (\n        <div className=\"ranking-list shimmer margin-2p\">\n            <div className=\"display-table-cell text-center\">\n                <div className=\"rank\">-</div>\n                <div className=\"rank-heading\">{AppLabels.RANK}</div>\n            </div>\n            <div className=\"display-table-cell pl-1 pointer-cursor\">\n                <figure className=\"user-img shimmer\">\n                    <Skeleton circle={true} width={40} height={40} />\n                </figure>\n                <div className=\"user-name-container shimmer\">\n                    <Skeleton count={2} />\n                </div>\n            </div>\n            <div className=\"display-table-cell\">\n                <div className=\"points\">-</div>\n                <div className=\"points-heading\">{AppLabels.POINTS}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default class PickemLeaderboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            isLoadMoreLoaderShow: false,\n            hasMore: true,\n            leaderboardList: [],\n            userRankList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            status: '',\n            selectedTab: 1,\n            WeekList: [],\n            selectedWeek: '',\n            curentWeek: '',\n            MonthList: [],\n            selectedMonth: '',\n            curentMonth: ''\n        }\n        this.headerRef = React.createRef();\n    }\n\n\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    componentDidMount() {\n        this.getLeaderboard();\n        this.GetWeeks()\n    }\n\n    onLoadMore() {\n        if (!this.state.isLoaderShow && this.state.hasMore) {\n            this.setState({ hasMore: false })\n            this.getLeaderboard()\n        }\n    }\n\n    GetWeeks() {\n        let param = {\n\n        }\n        this.setState({ isLoaderShow: true })\n        GetWeekList(param).then((responseJson) => {\n\n            if (responseJson && responseJson.response_code == NC.successCode) {\n                this.setState({\n                    WeekList: responseJson.data\n                }, () => {\n                    this.handleWeekChange(responseJson.data[0])\n                });\n                this.setState({ isLoaderShow: false })\n            }\n        })\n    }\n    GetMonths() {\n        let param = {\n\n        }\n        this.setState({ isLoaderShow: true })\n        GetMonthList(param).then((responseJson) => {\n\n            if (responseJson && responseJson.response_code == NC.successCode) {\n\n                this.setState({\n                    MonthList: responseJson.data\n                }, () => {\n                    this.handleMonthChange(responseJson.data[0])\n                });\n                this.setState({ isLoaderShow: false })\n            }\n        })\n    }\n\n\n    getLeaderboard() {\n        const { selectedTab, curentWeek, curentMonth } = this.state;\n        var param = {\n\n        }\n        if (selectedTab == 1) {\n            param = {\n                \"type\": selectedTab,\n                \"week\": curentWeek\n            }\n        } else {\n            param = {\n                \"type\": selectedTab,\n                \"month\": curentMonth\n            }\n        }\n        this.setState({ isLoaderShow: true })\n        GetPickemLeaderboard(param).then((responseJson) => {\n            setTimeout(() => {\n                this.setState({ isLoaderShow: false })\n            }, 100);\n            if (responseJson && responseJson.response_code == NC.successCode) {\n                this.setState({\n                    leaderboardList: responseJson.data.leaderboard,\n                    userRankList: responseJson.data.you !== null ? responseJson.data.you : [],\n                    hasMore: responseJson.data.leaderboard.length === 20,\n                });\n            }\n        })\n    }\n\n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        this.setState({ selectedTab: selectedTab }, () => {\n            if (selectedTab == 2) {\n                this.GetMonths()\n            } else\n                this.GetWeeks()\n        });\n    }, 300)\n\n    handleWeekChange = (week) => {\n        this.setState({ selectedWeek: week, curentWeek: week.week_id }, () => {\n            this.getLeaderboard()\n        })\n    }\n\n    handleMonthChange = (month) => {\n        this.setState({ selectedMonth: month, curentMonth: month.month }, () => {\n            this.getLeaderboard()\n        })\n    }\n\n\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            notification: true,\n            title: AppLabels.LEADERBOARD,\n            hideShadow: true\n        }\n        const leaderboardItemProps = {\n            userRank: this.state.userRankList,\n            leaderboardData: this.state.leaderboardList,\n            selectedTab: this.state.selectedTab\n        }\n        const { selectedTab, WeekList, selectedWeek, MonthList, selectedMonth } = this.state\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.leaderboard.title}</title>\n                            <meta name=\"description\" content={MetaData.leaderboard.description} />\n                            <meta name=\"keywords\" content={MetaData.leaderboard.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader\n                            ref={(ref) => this.headerRef = ref}\n                            HeaderOption={HeaderOption}\n                            {...this.props} />\n                        <Row>\n                            <Col sm={12}>\n\n                                <div className=\"leaderboard-wrapper pickem-leaderbord dashboard-container without-sports-tab \">\n                                    <div className=\"tabs-custom p-t-10\">\n                                        <Tabs defaultActiveKey={selectedTab} id={'leaderboard-tab'}>\n                                            <Row className=\"clearfix\">\n                                                <Col className=\"\" xs={12}>\n                                                    <Nav>\n                                                        <NavItem onClick={() => this.onTabClick(1)} eventKey={1} className=\"live-contest\">{AppLabels.WEEKLY} </NavItem>\n                                                        <NavItem onClick={() => this.onTabClick(2)} eventKey={2}>{AppLabels.MONTHLY}</NavItem>\n                                                    </Nav>\n                                                </Col>\n                                                <Col xs={12}>\n                                                    <Tab.Content animation>\n                                                        <Tab.Pane eventKey={1}>\n                                                            <div className=\"custom-dropd\">\n                                                                <Select\n                                                                    onChange={this.handleWeekChange}\n                                                                    classNamePrefix=\"secondary\"\n                                                                    options={WeekList}\n                                                                    value={selectedWeek}\n                                                                    arrowRenderer={this.arrowRenderer}\n                                                                    placeholder=\"--\"\n                                                                    isSearchable={false}\n                                                                    isClearable={false}\n                                                                    theme={(theme) => ({\n                                                                        ...theme,\n                                                                        borderRadius: 0,\n                                                                        colors: {\n                                                                            ...theme.colors,\n                                                                            primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                                        },\n                                                                    })}\n                                                                />\n                                                            </div>\n                                                            {\n                                                                (this.state.userRankList.length == 0 && this.state.leaderboardList.length == 0 && this.state.isLoaderShow) ?\n                                                                    this.state.ShimmerList.map((item, index) => {\n                                                                        return (\n                                                                            <Shimmer key={index} />\n                                                                        )\n                                                                    })\n                                                                    :\n                                                                    (this.state.userRankList.length == 0 && this.state.leaderboardList.length == 0 && !this.state.isLoaderShow) ?\n                                                                        <NoDataView\n                                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                                            CENTER_IMAGE={Images.teams_ic}\n                                                                            MESSAGE_1={AppLabels.NO_DATA_AVAILABLE}\n                                                                            MESSAGE_2={''}\n                                                                            BUTTON_TEXT={AppLabels.GO_TO_MY_CONTEST}\n                                                                            onClick={this.goBack.bind(this)}\n                                                                        />\n                                                                        :\n\n                                                                        <div>\n                                                                            <div className=\"leaderboard-header\">\n                                                                                <PickemLeaderboardItem {...leaderboardItemProps} />\n                                                                            </div>\n\n\n\n                                                                        </div>\n                                                            }\n                                                        </Tab.Pane>\n                                                        <Tab.Pane eventKey={2}>\n                                                            <div className=\"custom-dropd\">\n                                                                <Select\n                                                                    onChange={this.handleMonthChange}\n                                                                    classNamePrefix=\"secondary\"\n                                                                    options={MonthList}\n                                                                    value={selectedMonth}\n                                                                    arrowRenderer={this.arrowRenderer}\n                                                                    placeholder=\"--\"\n                                                                    isSearchable={false}\n                                                                    isClearable={false}\n                                                                    theme={(theme) => ({\n                                                                        ...theme,\n                                                                        borderRadius: 0,\n                                                                        colors: {\n                                                                            ...theme.colors,\n                                                                            primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                                        },\n                                                                    })}\n                                                                />\n                                                            </div>\n                                                            {\n                                                                (this.state.userRankList.length == 0 && this.state.leaderboardList.length == 0 && this.state.isLoaderShow) ?\n                                                                    this.state.ShimmerList.map((item, index) => {\n                                                                        return (\n                                                                            <Shimmer key={index} />\n                                                                        )\n                                                                    })\n                                                                    :\n                                                                    (this.state.userRankList.length == 0 && this.state.leaderboardList.length == 0 && !this.state.isLoaderShow) ?\n                                                                        <NoDataView\n                                                                            BG_IMAGE={Images.no_data_bg_image}\n                                                                            CENTER_IMAGE={Images.teams_ic}\n                                                                            MESSAGE_1={AppLabels.NO_DATA_AVAILABLE}\n                                                                            MESSAGE_2={''}\n                                                                            BUTTON_TEXT={AppLabels.GO_TO_MY_CONTEST}\n                                                                            onClick={this.goBack.bind(this)}\n                                                                        />\n                                                                        :\n\n                                                                        <div>\n                                                                            <div className=\"leaderboard-header\">\n\n                                                                                <PickemLeaderboardItem {...leaderboardItemProps} />\n\n\n                                                                            </div>\n                                                                        </div>\n                                                            }\n                                                        </Tab.Pane>\n                                                    </Tab.Content>\n                                                </Col>\n                                            </Row>\n                                        </Tabs>\n                                    </div>\n\n\n\n\n                                </div>\n                            </Col>\n                        </Row>\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Pickem/DeletePickConfirmation.jsx",[],"/var/www/html/framework/frontend/src/Component/Pickem/PickemMycontest.jsx",["4029","4030","4031","4032","4033","4034","4035","4036","4037","4038","4039","4040","4041","4042","4043","4044","4045","4046","4047","4048","4049"],"import React from 'react';\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities, _isUndefined, _isEmpty, _debounce, _filter } from '../../Utilities/Utilities';\nimport { my_contest_config } from '../../JsonFiles';\nimport { joinContest, getUserLineUps, getMyCollection } from '../../WSHelper/WSCallings';\nimport ls from 'local-storage';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\nimport Skeleton from 'react-loading-skeleton';\nimport queryString from 'query-string';\nimport CustomHeader from '../../components/CustomHeader';\nimport { NoDataView } from '../CustomComponent';\nimport PickemFixtureCard from './PickemFixtureCard';\nimport { AppSelectedSport } from '../../helper/Constants';\nimport { getMyPicks, updatePickemFixture, deletePickFixture } from '../../WSHelper/WSCallings';\nimport DeletePickConfirmation from './DeletePickConfirmation'\n\n/**\n  * @class PickemMycontest\n  * @description My pick em contest listing of current loggedin user for selected sports\n  * @author Vinfotech\n*/\nexport default class PickemMycontest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            selectedTab: (this.props.location && this.props.location.state) ? (this.props.location.state.from == 'notification' ? Constants.CONTEST_COMPLETED : Constants.CONTEST_UPCOMING) : Constants.CONTEST_UPCOMING,\n            liveContestList: [],\n            upcomingContestList: [],\n            ShimmerList: [1, 2, 3, 4, 5],\n            completedContestList: [],\n            sports_id: AppSelectedSport ? AppSelectedSport : '',\n            ISLOAD: false,\n            isListLoading: false,\n            PickemFixtureList: [],\n            IsShow: false,\n            curentIdx: '',\n            user_pickem_id: ''\n\n        }\n    }\n\n    timerCompletionCall = (item) => {\n        let fArray = _filter(this.state.PickemFixtureList, (obj) => {\n            return item.pickem_id != obj.pickem_id\n        })\n        this.setState({\n            PickemFixtureList: fArray\n        })\n    }\n    componentDidMount() {\n\n        let url = this.props.location.search;\n        let urlParams = queryString.parse(url);\n\n        let contest = urlParams.contest;\n        if (contest in my_contest_config.contest_url) {\n            let { sports_id } = this.state;\n            sports_id = AppSelectedSport;\n\n            this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                this.callApiMyFixList(this.state.selectedTab)\n            })\n        }\n        else {\n            if (contest in my_contest_config.contest) {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n            }\n            else {\n                this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n            }\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (WSManager.loggedIn() && this.props.history.location.pathname == '/my-contests') {\n\n            if (this.state.sports_id != nextProps.selectedSport) {\n                this.reload(nextProps);\n            }\n            else {\n                let url = this.props.location.search;\n                let urlParams = queryString.parse(url);\n\n                let contest = urlParams.contest;\n                if (contest in my_contest_config.contest_url) {\n                    let { sports_id } = this.state;\n                    sports_id = AppSelectedSport;\n\n                    this.setState({ selectedTab: my_contest_config.contest_url[contest], sports_id }, () => {\n                        this.callApiMyFixList(this.state.selectedTab)\n                    })\n                }\n                else {\n                    if (contest in my_contest_config.contest) {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[contest])\n                    }\n                    else {\n                        this.props.history.replace(\"/my-contests?contest=\" + my_contest_config.contest[this.state.selectedTab])\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * @description Call this function when you want to go fo lobby screen\n    */\n    goToLobby = () => {\n        this.props.history.push({ pathname: '/' })\n    }\n\n    \n\n    /**\n     * @description Event of tab click (Live, Upcoming, Completed)\n     * @param selectedTab value of selected tab\n     */\n    onTabClick = _debounce((selectedTab) => {\n        window.history.replaceState(\"\", \"\", \"/my-contests?contest=\" + my_contest_config.contest[selectedTab]);\n        this.setState({ selectedTab: selectedTab }, () => {\n            this.callApiMyFixList(this.state.selectedTab)\n        });\n    }, 300)\n\n    /**\n     * @description This function is responsible to get Live Contests response\n     * @param status selected tab (Live, Upcoming, Completed)\n     */\n    callApiMyFixList = (status) => {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"status\": status,\n        }\n        this.setState({ ISLOAD: true, isListLoading: true })\n        getMyPicks(param).then((responseJson) => {\n            this.setState({ ISLOAD: false })\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    PickemFixtureList: responseJson.data\n                })\n            }\n            this.setState({ isListLoading: false })\n        })\n    }\n\n\n\n\n    /**\n     * @description This function is called when sports changed from header\n     * @static A static function \n    */\n    reload = (nextProps) => {\n        if (window.location.pathname.startsWith(\"/my-contests\")) {\n            this.setState({ PickemFixtureList: [], sports_id: nextProps.selectedSport }, () => {\n                this.callApiMyFixList(this.state.selectedTab)\n            })\n        }\n    }\n\n    /**\n  * @description Display shimmer effects while loading list\n  * @return UI components\n*/\nShimmer = (index) => {\n    return (\n        <div className=\"collection-list\">\n        <div className=\"display-table row\">\n            <div className=\"display-table-cell text-center v-mid circle\">\n                <Skeleton width={54} height={54}/>\n            </div>\n            <div className=\"display-table-cell text-center v-mid pt-2\">\n                <Skeleton height={8} />\n                <Skeleton height={6} width={'70%'} />\n            </div>\n            <div className=\"display-table-cell text-center v-mid circle\">\n                <Skeleton width={54} height={54} />\n            </div>\n        </div>\n    </div>\n    )\n}\n    /**\n     * @description will be called for Selected fixture\n     * @return selected fixture \n    */\n    selctedFixture = (user_pickem_id, team_uid, index) => {\n\n        let param = {\n            user_pickem_id: user_pickem_id,\n            team_uid: team_uid\n        }\n        this.setState({ ISLOAD: true, isListLoading: true })\n        updatePickemFixture(param).then((responseJson) => {\n            this.setState({ ISLOAD: false })\n\n            if (responseJson.response_code === WSC.successCode) {\n                Utilities.showToast(responseJson.message, 3000, Images.TICK_IC);\n                this.callApiMyFixList(this.state.selectedTab)\n\n            }\n            this.setState({ isListLoading: false })\n        })\n\n\n    }\n\n    ShowDeletConfirmModal = (index, user_pickem_id) => {\n        this.setState({\n            IsShow: true,\n            curentIdx: index,\n            user_pickem_id: user_pickem_id\n        })\n    }\n    HideDeletConfirmModal = () => {\n        this.setState({\n            IsShow: false\n        })\n    }\n    onDelete = () => {\n        const { curentIdx, user_pickem_id } = this.state\n        let param = {\n            \"user_pickem_id\": user_pickem_id,\n        }\n        this.setState({ ISLOAD: true, isListLoading: true })\n\n        deletePickFixture(param).then((responseJson) => {\n            this.setState({ ISLOAD: false })\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    IsShow: false\n                })\n                let tempArr = this.state.PickemFixtureList\n                        if (curentIdx > -1) {\n                            tempArr.splice(curentIdx, 1);\n                        }\n                        this.setState({\n                            PickemFixtureList: tempArr\n                        })\n                    \n                \n                Utilities.showToast(responseJson.message, 1500, Images.DELETE);\n            }\n            this.setState({ isListLoading: false })\n        })\n    }\n\n    /**\n     * @description This function render all UI components. It is the React lifecycle methods that called after @see componentWillMount()\n     * @return UI Components\n    */\n    render() {\n\n        let MESSAGE_1 = this.state.selectedTab == Constants.CONTEST_UPCOMING ?\n            AppLabels.PICK_NO_UPCOMING_CONTEST1\n            :\n            this.state.selectedTab == Constants.CONTEST_LIVE ?\n                AppLabels.PICK_NO_LIVE_CONTEST1\n                :\n                AppLabels.PICK_NO_COMPLETED_CONTEST1\n\n        let MESSAGE_2 = this.state.selectedTab == Constants.CONTEST_UPCOMING ?\n            AppLabels.PICK_UPCOMING_CONTEST2\n            :\n            this.state.selectedTab == Constants.CONTEST_LIVE ?\n                AppLabels.PICK_NO_LIVE_CONTEST2\n                :\n                AppLabels.PICK_NO_COMPLETED_CONTEST2\n\n        \n        const { selectedTab, PickemFixtureList, isListLoading, ShimmerList, IsShow } = this.state\n        const PickemFixtureCardProps = {\n            isFromLobby: false,\n            selectedTab: selectedTab,\n            PickemFixtureList: PickemFixtureList,\n            selctedFixture: this.selctedFixture,\n            ShowDeletConfirmModal: this.ShowDeletConfirmModal\n        }\n        const deleteCardProps = {\n            IsShow: IsShow,\n            IsHide: this.HideDeletConfirmModal,\n            onDelete: this.onDelete\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"transparent-header web-container tab-two-height pb0\">\n                        \n                        <div className={\"tabs-primary \" + (!this.props.hideHeader ? ' mt50' : '')}>\n                            <Tab.Container id='my-contest-tabs' activeKey={this.state.selectedTab} onSelect={() => console.log('clicked')} defaultActiveKey={this.state.selectedTab}>\n                                <Row className=\"clearfix\">\n                                    <Col className=\"top-fixed my-contest-tab circular-tab\" xs={12}>\n                                        <Nav>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_LIVE)} eventKey={Constants.CONTEST_LIVE} className=\"live-contest\"><span className=\"live-indicator\"></span> {AppLabels.LIVE} </NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_UPCOMING)} eventKey={Constants.CONTEST_UPCOMING}>{AppLabels.UPCOMING}</NavItem>\n                                            <NavItem onClick={() => this.onTabClick(Constants.CONTEST_COMPLETED)} eventKey={Constants.CONTEST_COMPLETED}>{AppLabels.COMPLETED}</NavItem>\n                                        </Nav>\n                                    </Col>\n                                    <Col  xs={12}>\n                                        <Tab.Content animation>\n                                            <Tab.Pane eventKey={Constants.CONTEST_LIVE}>\n                                                {\n                                                    (PickemFixtureList.length == 0 && isListLoading) ?\n                                                        ShimmerList.map((item, index) => {\n                                                            return this.Shimmer(index)\n                                                        }) :\n                                                        PickemFixtureList.length > 0 ?\n                                                            <PickemFixtureCard {...PickemFixtureCardProps} timerCallback={this.timerCompletionCall}/> :\n                                                            (PickemFixtureList.length == 0 && !isListLoading) &&\n                                                            <NoDataView\n                                                                BG_IMAGE={Images.no_data_bg_image}\n                                                                CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                                MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                                MESSAGE_2={''}\n                                                                BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                                onClick={this.goToLobby}\n                                                            />\n                                                }\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_UPCOMING}>\n                                                <div className=\"help-text-contest upcoming-help-text\">\n                                                    {AppLabels.EDIT_PICKS_DEADLINE}\n                                                </div>\n                                                {\n                                                    (PickemFixtureList.length == 0 && isListLoading) ?\n                                                        ShimmerList.map((item, index) => {\n                                                            return this.Shimmer(index)\n                                                        }) :\n                                                        PickemFixtureList.length > 0 ?\n                                                            <PickemFixtureCard {...PickemFixtureCardProps} timerCallback={this.timerCompletionCall}/> :\n                                                            (PickemFixtureList.length == 0 && !isListLoading) &&\n                                                            <NoDataView\n                                                                BG_IMAGE={Images.no_data_bg_image}\n                                                                CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                                MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                                MESSAGE_2={''}\n                                                                BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                                onClick={this.goToLobby}\n                                                            />\n                                                }\n\n\n                                            </Tab.Pane>\n                                            <Tab.Pane eventKey={Constants.CONTEST_COMPLETED}>\n                                                {\n                                                    (PickemFixtureList.length == 0 && isListLoading) ?\n                                                        ShimmerList.map((item, index) => {\n                                                            return this.Shimmer(index)\n                                                        }) :\n                                                        PickemFixtureList.length > 0 ?\n                                                            <PickemFixtureCard {...PickemFixtureCardProps} timerCallback={this.timerCompletionCall}/> :\n                                                            (PickemFixtureList.length == 0 && !isListLoading) &&\n\n                                                            <NoDataView\n                                                                BG_IMAGE={Images.no_data_bg_image}\n                                                                CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                                MESSAGE_1={MESSAGE_1 + ' ' + MESSAGE_2}\n                                                                MESSAGE_2={''}\n                                                                BUTTON_TEXT={AppLabels.GO_TO_LOBBY}\n                                                                onClick={this.goToLobby}\n                                                            />\n                                                }\n\n\n                                            </Tab.Pane>\n                                        </Tab.Content>\n                                    </Col>\n                                </Row>\n                            </Tab.Container>\n\n\n                        </div>\n                        <DeletePickConfirmation {...deleteCardProps} />\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n\n","/var/www/html/framework/frontend/src/Component/Pickem/PickemFixtureCard.jsx",["4050","4051","4052","4053","4054","4055","4056","4057","4058","4059","4060","4061","4062","4063","4064","4065","4066","4067","4068","4069","4070","4071","4072","4073","4074","4075","4076","4077","4078","4079","4080","4081","4082","4083","4084","4085","4086","4087"],"import React, { Component } from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { MyContext } from '../../views/Dashboard';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\nimport CountdownTimer from '../../views/CountDownTimer';\nimport { MomentDateComponent } from \"../../Component/CustomComponent\";\n\n\nclass PickemLobby extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ISLOAD: false,\n            slectedIndex: -1,\n            slectedClass: -1,\n            slectedId: -1\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    showDropdown = (index) => {\n        if (this.state.slectedIndex === index) {\n            this.setState({ slectedIndex: -1 })\n        }\n        else\n            this.setState({ slectedIndex: index })\n    }\n\n    addClass = (id,sid) => {\n        if (this.state.slectedClass === id || this.props.selectedTab == Constants.CONTEST_UPCOMING) {\n            this.setState({ slectedClass: -1, slectedId:-1 })\n        }\n        else\n            this.setState({ slectedClass: id, slectedId:sid })\n    }\n\n\n    timerCallback = (item) => {\n        this.props.timerCallback(item)\n    }\n\n    render() {\n        const { selectedTab, PickemFixtureList, selctedFixture, ShowDeletConfirmModal } = this.props\n        const { slectedIndex, slectedClass, slectedId } = this.state\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    _Map(PickemFixtureList, (item, idx) => {\n                        return (\n                            <div key={idx} className={\"pem-fixture-list \"}>\n                                <div className=\"pem-fixture-item-new\">\n                                    <div className=\"fixture-info-wrapper\">\n                                    {selectedTab == Constants.CONTEST_UPCOMING &&\n                                        <div className=\"custom-dropdwon\">\n                                            <a href className=\"t-click\" onClick={() => this.showDropdown(idx)}><i className=\"icon-more\"></i></a>\n                                            <ul className={idx === slectedIndex ? '' : 'hide'}>\n                                                <li>\n                                                    <a href onClick={() => [ShowDeletConfirmModal(idx, item.user_pickem_id), this.showDropdown(idx)]}>{AppLabels.DELETE}</a>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    }\n                                        <div className=\"fixture-counter-wrapper\">\n                                            {\n                                                (Utilities.showCountDown(item) && selectedTab !== Constants.CONTEST_COMPLETED && selectedTab !== Constants.CONTEST_LIVE) ?\n                                                    <div className=\"countdown time-line\">\n                                                        {item.game_starts_in && <CountdownTimer\n                                                            deadlineTimeStamp={item.game_starts_in}\n                                                            timerCallback={this.timerCallback.bind(item)}\n                                                        />}\n                                                    </div> :\n                                                    (selectedTab == Constants.CONTEST_LIVE) ?\n                                                        <span>{AppLabels.IN_PROGRESS}</span>\n                                                    :\n                                                    <span>\n                                                        {selectedTab !== Constants.CONTEST_LIVE && <MomentDateComponent data={{ date: item.season_scheduled_date, format: \"D/MM  hh:mm a \" }} />}\n                                                    </span>\n                                            }\n                                            \n                                        </div>\n                                        <div className={\"fixture-itrm-inner-new fixture-left-after odd \" +\n                                            ((selectedTab == Constants.CONTEST_LIVE && item.home_uid == item.team_uid) ? 'selectedfixture' : selectedTab == Constants.CONTEST_UPCOMING && item.home_uid == item.team_uid ? 'selectedfixture' : '') \n                                            + ((selectedTab == Constants.CONTEST_COMPLETED && item.home_uid == item.team_uid) ? (\n                                                item.is_correct == 1 ? 'correct-ans' :\n                                                    item.is_correct == 2 ? 'wrong-ans' :\n                                                        ''\n                                            ) : (selectedTab == Constants.CONTEST_COMPLETED && item.home_uid == item.team_uid && item.is_correct == 2 ? 'wrong-ans' : '')) +  (slectedClass == item.pickem_id && slectedId == item.home_uid ? 'selectedfixture' : '')}\n                                            onClick={() => [selctedFixture(selectedTab == Constants.CONTEST_UPCOMING ? item.user_pickem_id : item.pickem_id, item.home_uid, idx), this.addClass(item.pickem_id, item.home_uid)]}\n                                        >\n                                            {selectedTab == Constants.CONTEST_COMPLETED && item.home_uid != item.team_uid && item.is_correct == 2 &&\n                                                <OverlayTrigger  trigger={['hover']} placement=\"bottom\" overlay={\n                                                    <Tooltip id=\"tooltip\" className=\"tooltip-featured\">\n                                                         <strong>Correct Answer</strong> \n                                                    </Tooltip>\n                                                }>\n                                                <i className=\"icon-tick-circular\" onClick={(e)=>e.stopPropagation()}></i>\n                                                </OverlayTrigger>\n                                            }\n\n                                            <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" />\n                                            <h4>{item.away}</h4>\n                                        </div>\n\n                                        <div className={\"fixture-itrm-inner-new even \" +\n                                            ((selectedTab == Constants.CONTEST_LIVE && item.away_uid == item.team_uid) ? 'selectedfixture' : selectedTab == Constants.CONTEST_UPCOMING && item.away_uid == item.team_uid ? 'selectedfixture' : '') \n                                            + ((selectedTab == Constants.CONTEST_COMPLETED && item.away_uid == item.team_uid) ? (\n                                                item.is_correct == 1 ? 'correct-ans' :\n                                                    item.is_correct == 2 ? 'wrong-ans' :\n                                                        ''\n\n                                            ) : (selectedTab == Constants.CONTEST_COMPLETED && item.away_uid == item.team_uid && item.is_correct == 2 ? 'wrong-ans' : '')) +  (slectedClass == item.pickem_id && slectedId == item.away_uid ? 'selectedfixture' : '')} onClick={() => [selctedFixture(selectedTab == Constants.CONTEST_UPCOMING ? item.user_pickem_id : item.pickem_id, item.away_uid, idx), this.addClass(item.pickem_id, item.away_uid)]}>\n\n                                            {selectedTab == Constants.CONTEST_COMPLETED && item.away_uid != item.team_uid && item.is_correct == 2 &&\n                                                <OverlayTrigger trigger={['hover']} placement=\"bottom\" overlay={\n                                                    <Tooltip id=\"tooltip\" className=\"tooltip-featured\">\n                                                         <strong>Correct Answer</strong> \n                                                    </Tooltip>\n                                                }>\n                                                <i className=\"icon-tick-circular\" onClick={(e)=>e.stopPropagation()}></i>\n                                                </OverlayTrigger>\n                                            }\n                                            <img src={Utilities.teamFlagURL(item.away_flag)} alt=\"\" />\n                                            <h4>{item.away}</h4>\n                                        </div>\n                                    </div>\n                                    <div className=\"fixture-league-wrapper\">\n                                            {item.is_correct == 3 &&\n                                                <span className=\"tie-wrapper\">T</span>\n                                            }\n                                        <span>\n                                            {item.league_name} {selectedTab !== Constants.CONTEST_LIVE ? \" \" : ''}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })\n                )\n                }\n            </MyContext.Consumer >\n        )\n    }\n}\n\nexport default PickemLobby;","/var/www/html/framework/frontend/src/Component/Pickem/PickemLobby.jsx",["4088","4089","4090","4091","4092","4093","4094","4095","4096","4097","4098","4099","4100","4101","4102","4103","4104","4105","4106","4107","4108","4109","4110","4111","4112","4113","4114","4115","4116","4117","4118","4119","4120","4121","4122","4123","4124","4125","4126","4127","4128","4129","4130","4131","4132","4133","4134","4135","4136","4137","4138","4139","4140","4141","4142","4143","4144","4145","4146","4147"],"import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { Helmet } from \"react-helmet\";\nimport Skeleton from 'react-loading-skeleton';\nimport { MyContext } from '../../views/Dashboard';\nimport CustomHeader from '../../components/CustomHeader';\nimport PickemFixtureCard from './PickemFixtureCard';\nimport MD from \"../../helper/MetaData\";\nimport { Utilities, _isEmpty, _filter, _Map } from '../../Utilities/Utilities';\nimport ls from 'local-storage';\nimport * as Constants from \"../../helper/Constants\";\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { getPickemFixtureList, submitPickemFixture, getLobbyBanner, updateDeviceToken } from '../../WSHelper/WSCallings';\nimport { AppSelectedSport } from '../../helper/Constants';\nimport Images from '../../components/images';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { NoDataView } from '../CustomComponent';\nimport Slider from \"react-slick\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport Filter from '../../components/filter';\nvar bannerData = {}\nclass PickemLobby extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ISLOAD: false,\n            isListLoading: false,\n            showLobbyFitlers: false,\n            ShimmerList: [1, 2, 3, 4, 5],\n            PickemFixtureList: [],\n            OriginalFixtureList:[],\n            filterArray: [],\n            league_id: \"\",\n            BannerList: [],\n            filterLeagueList:[],\n            sports_id: Constants.AppSelectedSport,\n        }\n    }\n\n    componentDidMount() {\n        let { sports_id } = this.state;\n        let league_id = this.getSportsLeagueId(sports_id, Constants.LOBBY_FILTER_ARRAY);\n        this.setState({ sports_id, league_id ,filterArray: Constants.LOBBY_FILTER_ARRAY }, () => {\n            this.callApiFixList();\n            \n        })\n        \n        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'fixture');\n        if (WSManager.loggedIn()) {\n            WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'loggedInusers');\n        }\n        this.checkOldUrl();\n        this.handelNativeGoogleLogin()\n        if (!(ls.get('isDeviceTokenUpdated') && ls.get('isDeviceTokenUpdated'))) {\n\n            let token_data = {\n                action: 'push',\n                type: 'deviceid',\n            }\n            this.sendMessageToApp(token_data)\n        }\n        setTimeout(() => {\n            let push_data = {\n                action: 'push',\n                type: 'receive',\n            }\n            this.sendMessageToApp(push_data)\n        }, 300);\n    }\n    componentWillReceiveProps(nextProps) {\n        if (this.state.showLobbyFitlers != nextProps.showLobbyFitlers) {\n            this.setState({ showLobbyFitlers: nextProps.showLobbyFitlers })\n        }\n\n        if (this.state.sports_id != nextProps.selectedSport) {\n            this.setState({\n                sports_id: nextProps.selectedSport,\n            },()=>{\n                this.callApiFixList();\n            })\n        }\n       \n\n    }\n\n    componentWillMount =() => {\n      \n        let data = {\n            action: 'back',\n            type: true,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            type: false,\n        }\n        this.sendMessageToApp(data);\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n            if (e.data.action == 'push' && e.data.type == 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n                this.updateDeviceToken();\n            }\n            else if (e.data.action == 'push' && e.data.type == 'receive') {\n                let pathName = '';\n                if (e.data.notif.notification_type == '120') {\n                    pathName = 'add-funds';\n                }\n                else if (e.data.notif.notification_type == '121') {\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest/' + e.data.notif.contest_unique_id\n                }\n                else if (e.data.notif.notification_type == '123') {\n                    pathName = 'refer-friend';\n                }\n                else if (e.data.notif.notification_type == '124' ||\n                    e.data.notif.notification_type == '131' ||\n                    e.data.notif.notification_type == '132') {\n                    ls.set('selectedSports', e.data.notif.sports_id);\n                    Constants.setValue.setAppSelectedSport(e.data.notif.sports_id);\n                    let dateformaturl = Utilities.getUtcToLocal(e.data.notif.season_scheduled_date);\n                    dateformaturl = new Date(dateformaturl);\n                    let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n                    let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n                    dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n                    pathName = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + e.data.notif.collection_master_id + '/' + e.data.notif.home + \"-vs-\" + e.data.notif.away + \"-\" + dateformaturl;\n                }\n                else if (e.data.notif.notification_type == '135') {\n                    if (e.data.notif.custom_notification_type == 1) {\n                        pathName = 'lobby';\n                    }\n                    else if (e.data.notif.custom_notification_type == 2) {\n                        pathName = 'my-wallet';\n                    }\n                    else if (e.data.notif.custom_notification_type == 3) {\n                        pathName = 'my-profile';\n                    }\n                    else if (e.data.notif.custom_notification_type == 4) {\n                        pathName = 'my-contests?contest=upcoming';\n                    }\n                    else if (e.data.notif.custom_notification_type == 5) {\n                        pathName = 'refer-friend';\n                    }\n                    else {\n                        pathName = 'lobby';\n                    }\n                }\n                if (pathName != '') {\n                    this.props.history.push({ pathname: pathName });\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'android') {\n                let can = ls.get('canRedirect');\n                if (can == null || can) {\n                    this.blockMultiRedirection()\n                    let pathName = e.data.pathName;\n                    if (pathName != '') {\n                        this.props.history.push(pathName);\n                    }\n                }\n            }\n            else if (e.data.action == 'app_dep_linking' && e.data.type == 'reset') {\n                ls.set('canRedirect', true)\n            }\n        });\n    }\n\n    blockMultiRedirection() {\n        ls.set('canRedirect', false)\n        setTimeout(() => {\n\n            ls.set('canRedirect', true)\n        }, 1000 * 5);\n    }\n\n    updateDeviceToken = () => {\n        let param = {\n            \"device_type\": WSC.deviceTypeAndroid,\n            \"device_id\": WSC.DeviceToken.getDeviceId(),\n        }\n        if(WSManager.loggedIn()){\n            updateDeviceToken(param).then((responseJson) => {\n            })\n        }\n    }\n\n    checkOldUrl() {\n        let url = window.location.href;\n        if (!url.includes('#') && window.location.pathname === \"/lobby\") {\n            if (Utilities.getSelectedSportsForUrl())\n                window.history.replaceState(\"\", \"\", window.location.pathname + \"#\" + Utilities.getSelectedSportsForUrl());\n        }\n    }\n\n    /** \n     * @description api call to get baner listing from server\n    */\n    getBannerList = () => {\n        let sports_id = Constants.AppSelectedSport;\n        if (sports_id == null)\n            return;\n        if (bannerData[sports_id]) {\n            let temp = [];\n            _Map(this.getSelectedbanners(bannerData[sports_id]), (item, idx) => {\n                if (item.banner_type_id == 1) {\n                    let dateObj = Utilities.getUtcToLocal(item.schedule_date)\n                    if (Utilities.minuteDiffValue({ date: dateObj }) < 0) {\n                        temp.push(item);\n                    }\n                }\n                else {\n                    temp.push(item);\n                }\n            })\n            this.setState({ BannerList: temp })\n        } else {\n            setTimeout(async () => {\n                this.setState({ isLoaderShow: true })\n                let param = {\n                    \"sports_id\": sports_id\n                }\n                var api_response_data = await getLobbyBanner(param);\n                if (api_response_data) {\n                    bannerData[sports_id] = api_response_data;\n                    let temp = [];\n                    _Map(this.getSelectedbanners(api_response_data), (item, idx) => {\n                        if (item.banner_type_id == 1) {\n                            let dateObj = Utilities.getUtcToLocal(item.schedule_date)\n                            if (Utilities.minuteDiffValue({ date: dateObj }) < 0) {\n                                temp.push(item);\n                            }\n                        }\n                        else {\n                            temp.push(item);\n                        }\n                    })\n                    this.setState({ BannerList: temp })\n                }\n                this.setState({ isLoaderShow: false })\n            }, 1500);\n        }\n    }\n\n    getSelectedbanners(api_response_data) {\n        let tempBannerList = [];\n        for (let i = 0; i < api_response_data.length; i++) {\n            let banner = api_response_data[i];\n            if (WSManager.getToken() && WSManager.getToken() != '') {\n                if (banner.banner_type_id == Constants.BANNER_TYPE_REFER_FRIEND\n                    || banner.banner_type_id == Constants.BANNER_TYPE_DEPOSITE) {\n                    if (banner.amount > 0)\n                        tempBannerList.push(api_response_data[i]);\n                }\n                else if (banner.banner_type_id == '6') {\n                    \n                }\n                else {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n            else {\n                if (banner.banner_type_id == '6') {\n                    tempBannerList.push(api_response_data[i]);\n                }\n            }\n        }\n\n        return tempBannerList;\n    }\n    /**\n         * @description method to redirect user on appopriate screen when user click on banner\n         * @param {*} banner_type_id - id of banner on which clicked\n         */\n    redirectLink = (result) => {\n        \n        \n        if (result.banner_type_id == 1) {\n            let dateformaturl = Utilities.getUtcToLocal(result.schedule_date);\n            dateformaturl = new Date(dateformaturl);\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n            let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + result.collection_master_id + '/' + result.home + \"-vs-\" + result.away + \"-\" + dateformaturl;\n            this.props.history.push({ pathname: contestListingPath });\n        }\n        else if (result.banner_type_id == 2) {\n            this.props.history.push({ pathname: '/refer-friend' });\n        }\n        else if (result.banner_type_id == 3) {\n            this.props.history.push({ pathname: '/add-funds' });\n        }\n        else if (result.banner_type_id == 4) {\n            window.open(result.target_url, \"_blank\")\n        }\n\n    }\n\n    /**\n     * @description will be called for get fixture list\n     * @return fixture list\n    */\n    callApiFixList = () => {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n        }\n        this.setState({ ISLOAD: true, isListLoading: true })\n        getPickemFixtureList(param).then((responseJson) => {\n            this.setState({ ISLOAD: false })\n            if (responseJson.response_code === WSC.successCode) {\n                this.setState({\n                    PickemFixtureList: responseJson.data.fixture_list,\n                    filterLeagueList:responseJson.data.filters,\n                    OriginalFixtureList:responseJson.data.fixture_list\n                },()=>{\n                    if (Constants.LOBBY_FILTER_ARRAY.length > 0) {\n                        this.filterLobbyResults({ league_id: Constants.LOBBY_FILTER_ARRAY[0].league_id })\n                    }\n                })\n            }\n            this.setState({ isListLoading: false })\n        })\n    }\n    getSportsLeagueId(sports_id, filterArray) {\n\n        let league_id = '';\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == sports_id) {\n                league_id = filterArray[i].league_id;\n            }\n        }\n        return league_id;\n    }\n    /**\n        * @description will be called for Selected fixture\n        * @return selected fixture \n       */\n    selctedFixture = (pickem_id, team_uid, index) => {\n        if (!WSManager.loggedIn()) {\n            this.props.history.push({\n                pathname: '/signup', state: {}\n            })\n        }\n        else {\n            let param = {\n                pickem_id: pickem_id,\n                team_uid: team_uid\n            }\n\n            this.setState({ ISLOAD: true, isListLoading: true })\n            \n            submitPickemFixture(param).then((responseJson) => {\n                this.setState({ ISLOAD: false })\n                \n                if (responseJson.response_code === WSC.successCode) {\n                    Utilities.showToast(responseJson.message, 3000, Images.TICK_IC);\n                    let tempArr = this.state.PickemFixtureList\n                    setTimeout(() => {\n                        if (index > -1) {\n                            tempArr.splice(index, 1);\n                        }\n                        let filterArr =   _filter(this.state.OriginalFixtureList,(item)=>{\n                            return item.pickem_id != pickem_id\n                        })\n                        this.setState({\n                            PickemFixtureList: tempArr,\n                            OriginalFixtureList:filterArr\n                        })\n                    }, 3000);\n                }\n                this.setState({ isListLoading: false })\n            })\n\n        }\n    }\n\n\n    Shimmer = (index) => {\n        return (\n            <div className=\"collection-list\">\n            <div className=\"display-table row\">\n                <div className=\"display-table-cell text-center v-mid circle\">\n                    <Skeleton width={54} height={54}/>\n                </div>\n                <div className=\"display-table-cell text-center v-mid pt-2\">\n                    <Skeleton height={8} />\n                    <Skeleton height={6} width={'70%'} />\n                </div>\n                <div className=\"display-table-cell text-center v-mid circle\">\n                    <Skeleton width={54} height={54} />\n                </div>\n            </div>\n        </div>\n        )\n    }\n    /** \n    @description hide lobby filters \n    */\n   hideFilter = () => {\n    this.setState({ showLobbyFitlers: false })\n    this.props.hideFilterData()\n}\n/** \n@description show lobby filters \n*/\nshowFilter = () => {\n    this.setState({ showLobbyFitlers: true })\n}\n/** \n@description Apply filters and load data accordingly\n*/\nfilterLobbyResults = (filterObj) => {\n    let league_id = (!_isEmpty(filterObj.league_id) && typeof filterObj.league_id != 'undefined') ? filterObj.league_id : \"\";\n    this.setState({ league_id: league_id }, function () {\n        \n        this.filterFixturesLocally(league_id)\n    })\n\n    let filterArray = this.setFilterArray(league_id);\n    Constants.setValue.setFilter(filterArray);\n    this.setState({ league_id: league_id, showLobbyFitlers: false, offset: 0, filterArray: filterArray })\n    this.props.hideFilterData()\n}\n\nfilterFixturesLocally(leagueIds) {\n    let allFixtures = this.state.OriginalFixtureList;\n    if (leagueIds == '') {\n        this.setState({ PickemFixtureList: allFixtures })\n    }\n    else {\n        let filteredList = [];\n        for (var i = 0; i < allFixtures.length; i++) {\n            if (leagueIds.includes(allFixtures[i].league_id)) {\n                filteredList.push(allFixtures[i])\n            }\n\n        }\n\n        this.setState({ PickemFixtureList: filteredList })\n    }\n}\n\nsetFilterArray(league_id) {\n    let { filterArray } = this.state;\n\n    let hasFilter = false;\n    if (filterArray.length > 0) {\n        for (let i = 0; i < filterArray.length; i++) {\n            if (filterArray[i].sports_id == this.state.sports_id) {\n                hasFilter = true;\n                filterArray[i].league_id = league_id;\n            }\n        }\n    }\n\n    if (!hasFilter && league_id != \"\") {\n        let filterObj = {\n            'sports_id': this.state.sports_id,\n            'league_id': league_id,\n        }\n        filterArray.push(filterObj);\n    }\n\n    return filterArray;\n}\ntimerCompletionCall = (item) => {\n    let fArray = _filter(this.state.PickemFixtureList, (obj) => {\n        return item.pickem_id != obj.pickem_id\n    })\n    this.setState({\n        PickemFixtureList: fArray\n    })\n}\n\n\n\n    render() {\n        const {  showLobbyFitlers, PickemFixtureList, ShimmerList, isListLoading, filterLeagueList } = this.state\n        var settings = {\n            touchThreshold: 10,\n            infinite: true,\n            slidesToScroll: 1,\n            slidesToShow: 1,\n            variableWidth: false,\n            initialSlide: 0,\n            dots: false,\n            centerMode: this.state.BannerList.length == 1 ? false : true,\n            responsive: [\n                {\n                    breakpoint: 500,\n                    settings: {\n                        className: \"center\",\n                        centerPadding: \"20px\",\n                    }\n\n                },\n                {\n                    breakpoint: 360,\n                    settings: {\n                        className: \"center\",\n                        centerPadding: \"15px\",\n                    }\n\n                }\n            ]\n        };\n        const PickemFixtureCardProps = {\n            isFromLobby: true,\n            PickemFixtureList: PickemFixtureList,\n            selctedFixture: this.selctedFixture\n        }\n        let FitlerOptions = {\n            showLobbyFitler: showLobbyFitlers,\n            filtered_league_id: this.state.league_id\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"transparent-header web-container tab-two-height pb0\">\n                            {filterLeagueList.length > 0 && <Filter leagueList={this.state.league_id} customLeagues={filterLeagueList} {...this.props} FitlerOptions={FitlerOptions} hideFilter={this.hideFilter} filterLobbyResults={this.filterLobbyResults}></Filter>}\n                        <div >\n                            {\n                                PickemFixtureList.length > 0 &&\n                                    <div className=\"pickem-sub-header\" >\n                                        <div className=\"upcoming-text\">\n                                            <span>{AppLabels.PICK_LOBBY_TEXT}</span>\n                                        </div>\n                                    </div>\n                            }\n                            <Row>\n                                <Col sm={12}>\n                                <div className={this.state.BannerList.length > 0 ? 'banner-vms animation' : 'banner-vms'}>\n                                    <div className={this.state.BannerList.length == 1 ? 'single-banner-wrap' : ''}>\n                                        <Slider {...settings}>\n                                            {this.state.BannerList.map((item, index) => {\n                                                return (\n                                                    <div className=\"banner-container no-margin-b\" key={index}>\n                                                        {item.banner_type_id == '1' || item.banner_type_id == '6' || item.banner_type_id == '4' ?\n                                                            <div className='banner-item'>\n                                                                <img alt='' onClick={() => this.redirectLink(item)} src={Utilities.getBannerURL(item.image)} />\n                                                            </div>\n                                                            :\n                                                            <div className='banner-item'>\n                                                                <img alt='' className='banner-logo' src={item.banner_type_id == '2' ? Images.REFER_FRIEND_SM : item.banner_type_id == '3' ? Images.BANNER_ADD_FUND : ''} ></img>\n                                                                <div onClick={() => this.redirectLink(item)} className='info-container'>\n                                                                    <div className='title-style'>{item.name}</div>\n                                                                    <div className='message-style'>\n                                                                        {item.banner_type_id == '2' ? AppLabels.GET + ' ' : item.banner_type_id == '3' ? ' ' + AppLabels.Earn + ' ' : ''}\n                                                                        <span className='highlighted-text'>{item.currency_type == 'INR' ? (Utilities.getMasterData().currency_code) : (item.currency_type == 'Bonus' ? <i className=\"icon-bonus bonus-ic\"></i> : '')}\n                                                                            {item.amount}</span>\n                                                                        {item.currency_type == 'Coin' ? \" \" + AppLabels.Coin : ''}\n                                                                        {item.banner_type_id == '2' ? ' ' + AppLabels.on_your_friends_signup : item.banner_type_id == '3' ? ' ' + AppLabels.on_your_first_cash_contest : ''}\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        }\n                                                    </div>);\n                                            })\n                                            }\n                                        </Slider>\n                                    </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                            {\n                                (PickemFixtureList.length == 0 && isListLoading) ?\n                                    ShimmerList.map((item, index) => {\n                                        return this.Shimmer(index)\n                                    }) :\n                                    PickemFixtureList.length > 0 ?\n                                        <PickemFixtureCard {...PickemFixtureCardProps} timerCallback={this.timerCompletionCall} /> :\n                                        (PickemFixtureList.length == 0 && !isListLoading) &&\n                                        <NoDataView\n                                            BG_IMAGE={Images.no_data_bg_image}\n                                            CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                            MESSAGE_1={AL.NO_FIXTURES_MSG1}\n                                            MESSAGE_2={AL.PICK_NO_FIXTURES_MSG}\n                                        />\n                            }\n                        </div>\n                    </div>\n                )\n                }\n            </MyContext.Consumer>\n        )\n    }\n}\n\nexport default PickemLobby;","/var/www/html/framework/frontend/src/Component/OpenPredictorFPPModule/ViewProofFPPModal.jsx",["4148","4149","4150","4151","4152","4153"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { FacebookShareButton, WhatsappShareButton, EmailShareButton } from 'react-share';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport WSManager from '../../WSHelper/WSManager';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nclass ViewProofFPPModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n\n        const { mShow, mHide, viewProofData, correctAns} = this.props.data;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"custom-modal view-proof-modal\"\n                        className=\"center-modal\"\n                    >\n                        <div className=\"modal-header\">\n                            <div className=\"que\">\n                                {viewProofData.desc}\n                            </div>\n                            <div className=\"ans\">\n                                {correctAns}\n                            </div>\n                            <div className=\"correct-ans-text\">\n                                {AL.CORRECT_ANS}\n                            </div>\n                        </div>    \n                        <div className=\"modal-body\">\n                            <div className=\"proof-text\">\n                                {AL.PROOF}\n                            </div>\n                            <div className=\"proof-section\">\n                                <p>{viewProofData.proof_desc}</p>\n                                <img src={Utilities.getOpenPredURL(viewProofData.proof_image)} alt=\"\"/>\n                            </div>\n                        </div> \n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default ViewProofFPPModal;","/var/www/html/framework/frontend/src/components/filterByteam.jsx",["4154","4155"],"import React, { } from 'react';\nimport { FormGroup, Button, Checkbox } from 'react-bootstrap';\nimport SlidingPane from 'react-sliding-pane';\nimport Modal from 'react-modal';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { _isEmpty } from \"../Utilities/Utilities\";\nimport { MyContext } from './../InitialSetup/MyProvider';\nimport 'react-sliding-pane/dist/react-sliding-pane.css';\n\nexport default class FilterByTeam extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isPaneOpen: false,\n            isPaneOpenLeft: false,\n            isPaneOpenBottom: true,\n            checkbox: false,\n            selectedTeamOption: this.props.selectedTeamOption\n        };\n    }\n\n    componentDidMount() {\n        Modal.setAppElement(this.el);\n    }\n\n    handleTeamChange = (item) => {\n        this.setState({\n            selectedTeamOption: item\n        })\n    }\n\n    render() {\n\n        const { teamName, onSelected } = this.props;\n\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"filter-container\">\n                        <div ref={ref => this.el = ref} >\n                            <SlidingPane\n                                isOpen={this.state.isPaneOpenBottom}\n                                from='bottom'\n                                width='100%'\n                                overlayClassName={'filter-custom-overlay bottom-tab-height'}\n                                onRequestClose={this.handleFilterClose}\n                            >\n                                <div className=\"filter-header shadow\">\n                                    <i className=\"icon-reload\" onClick={() => onSelected(teamName[0])}></i>\n                                    {AppLabels.Filters}\n                                    <Button className=\"done-btn active\" onClick={() => onSelected(this.state.selectedTeamOption)}>{AppLabels.DONE}</Button>\n                                </div>\n                                <div className=\"filter-body\">\n                                    <ul className='pt10'>\n                                        {\n                                            !_isEmpty(teamName)\n                                                ?\n                                                teamName.map((item, index) => {\n                                                    return (\n                                                        <li className='pt10 pb10 pl15 pr15 bottom-padding' key={\"leagueList\" + index}>\n                                                            <FormGroup>\n                                                                <Checkbox className=\"custom-checkbox\" value={item.value.team_league_id} onChange={() => this.handleTeamChange(item)} checked={this.state.selectedTeamOption ? (this.state.selectedTeamOption.value.team_league_id == item.value.team_league_id) : index == 0 && true} name=\"lobby_filter_leagues\" id={\"lobbyfilter-\" + item.value.team_league_id}>\n                                                                    <span>{item.label}</span>\n                                                                </Checkbox>\n                                                            </FormGroup>\n                                                        </li>\n                                                    );\n\n\n                                                })\n\n\n                                                :\n                                                <li></li>\n\n                                        }\n\n                                    </ul>\n\n\n                                </div>\n                            </SlidingPane>\n                        </div>\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Modals/PlayerCard.jsx",["4156","4157","4158","4159","4160","4161","4162","4163","4164","4165"],"\nimport React from 'react';\nimport { Modal, Tabs, Tab } from 'react-bootstrap';\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport {SportsIDs} from \"../JsonFiles\";\nimport {_Map, _isUndefined, Utilities} from \"../Utilities/Utilities\";\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { getPlayerCard } from '../WSHelper/WSCallings';\n\nexport default class PlayerCardModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n            playerParams: props.playerDetails,\n            playerCard: {},\n            graphData: { has_data: false },\n        };\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    componentDidMount = () => {\n        this.getPlayerCardDetails(this.state.playerParams);\n    }\n\n\n    getPlayerCardDetails = async(playerParams) => {\n        let param = {\n            \"sports_id\": playerParams.sports_id,\n            \"collection_master_id\": playerParams.collection_master_id,\n            \"league_id\": playerParams.league_id,\n            \"player_team_id\": playerParams.player_team_id,\n            \"player_uid\": playerParams.player_uid,\n            \"against_team\": playerParams.against_team,\n            \"player_team\": playerParams.player_team,\n            \"no_of_match\": 5\n        }\n\n        var api_response_data = await getPlayerCard(param);\n        if(api_response_data){\n            this.setState({\n                playerCard: api_response_data,\n                graphData: api_response_data.graph_data,\n            }, () => {\n                this.makeChart();\n            })\n        }\n    }\n\n    checkPlayerExistInLineup(player) {\n        var isExist = false\n        for (var selectedPlayer of this.props.lineupArr) {\n            if (selectedPlayer.player_uid == player.player_uid) {\n                isExist = true\n                break\n            }\n        }\n        return isExist\n    }\n\n    makeChart() {\n        let { graphData } = this.state;\n        let barChartData = [];\n        let has_data = false;\n        for (let i = 0; i < graphData.fantasy_scores.length; i++) {\n            barChartData.push(graphData.fantasy_scores[i].y);\n            if (i == 0)\n                has_data = true;\n        }\n\n        const options = {\n            has_data: has_data,\n            chart: {\n                zoomType: 'xy',\n            },\n            title: {\n                text: '',\n            },\n            xAxis: [{\n                categories: graphData.date_month,\n                crosshair: true,\n            }],\n            yAxis: [{ // Primary yAxis\n                color: '#00E9B2',\n                labels: {\n                    enabled: false,\n                    format: '{value}',\n                    style: {\n                        color: Highcharts.getOptions().colors[1]\n                    }\n                },\n                title: {\n                    enabled: false,\n                    text: AppLabels.EXPECTED_SCORE,\n                    style: {\n                        color: Highcharts.getOptions().colors[1]\n                    }\n                }\n            },\n            { // Secondary yAxis\n                opposite: false,\n                labels: {\n                    enabled: true,\n                    format: '{value}',\n                    style: {\n                        color: Highcharts.getOptions().colors[1],\n                    }\n                },\n                title: {\n                    text: AppLabels.FANTASY_SPORTS,\n                    style: {\n                        color: Highcharts.getOptions().colors[1],\n                    }\n                }\n            }],\n            tooltip: {\n                shared: true,\n            },\n            legend: {\n                enabled: false,\n            },\n            series: [{\n                color:'#00E9B2',\n                name: 'Fantasy Score',\n                type: 'column',\n                yAxis: 1,\n                data: barChartData,\n                tooltip: {\n                    valueSuffix: ''\n                }\n\n            }, {\n                color:'#BDBDBD',\n                name: 'Expected Score',\n                type: 'spline',\n                data: graphData.expected_scores,\n                tooltip: {\n                    valueSuffix: ''\n                }\n            }]\n        }\n        this.setState({ graphData: options })\n    }\n\n    render() {\n        const { IsPlayerCardShow, IsPlayerCardHide, addPlayerToLineup } = this.props;\n        const { playerCard } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsPlayerCardShow} onHide={IsPlayerCardHide} bsSize=\"large\" dialogClassName=\"playercard-modal\" className=\"center-modal\">\n                            {/* <Modal.Header closeButton> */}\n                            <Modal.Header >\n                                <Modal.Title>\n                                    <div className=\"playercard-header\">\n                                        <div className=\"player-img\">\n                                            {playerCard.player_detail && <img src={Utilities.playerJersyURL(playerCard.player_detail.jersey)} alt=\"\" />}\n                                        </div>\n                                        {playerCard.player_detail && <div className=\"player-self-detail\">\n                                            <span className=\"f-name\">{playerCard.player_detail.first_name}</span>\n                                            <span className=\"l-name\">{playerCard.player_detail.last_name}</span>\n                                            <span className=\"player-postion\">{playerCard.player_detail.position}, {playerCard.player_detail.team_name}</span>\n                                        </div>}\n                                        {playerCard.player_detail &&\n                                            <a className={\"btn-roster-action \" + (this.checkPlayerExistInLineup(this.state.playerParams) || (this.state.SelectedPlayerPosition == 'ALL' && this.state.playerParams.player_uid) ? 'added' : '')} onClick={() => addPlayerToLineup(this.state.playerParams)}>\n                                                <i className={this.checkPlayerExistInLineup(this.state.playerParams) || (this.state.SelectedPlayerPosition == 'ALL' && this.state.playerParams.player_uid) ? \"icon-tick\" : \"icon-plus\"}></i>\n                                            </a>\n                                        }\n                                    </div>\n                                    {playerCard.player_detail &&\n                                        <ul className=\"list-player-detail\">\n                                            <li><h4>{playerCard.player_detail.fantasy_score}</h4> <span>{AppLabels.FANTASY_PTS}</span></li>\n                                            <li><h4><small className=\"font-16\">{Utilities.getMasterData().currency_code + \" \"}</small>{playerCard.player_detail.salary}</h4> <span>{AppLabels.SALARY}</span></li>\n                                            <li><h4>#{playerCard.player_detail.rank_value}{/*  <i className=\"icon-info\"></i> */}</h4> <span>{AppLabels.VALUE}</span></li>\n                                        </ul>}\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"tabs-secondary\">\n                                    <Tabs defaultActiveKey={2} id=\"uncontrolled-tab-example\">\n                                        <Tab eventKey={1} title={AppLabels.FORM}>\n                                            <div className=\"player-card-body\">\n                                                <span className='average-hardcoded-text'>{AppLabels.Average}</span>\n                                                <div className=\"player-average-data row\">\n\n                                                    <div className=\"average-container col-xs-4\">\n                                                        <div className=\"average-progress\">\n                                                            {\n                                                                playerCard.global_avg_format && playerCard.global_avg_format.length > 0 &&\n                                                                _Map(playerCard.global_avg_format, (item, index) => {\n                                                                    return (\n                                                                        <div className={\"progress-item\" + (item != '' ? ' green' : '')} />\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                        <div className=\"item-data\">\n                                                            <div className=\"average-value\">{playerCard.global_avg_arr ? playerCard.global_avg_arr.before_point : ''}.<span>{playerCard.global_avg_arr ? playerCard.global_avg_arr.after_point : ''}</span> </div>\n                                                            <div className=\"average-text\">{AppLabels.Season}</div>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"average-container col-xs-4\">\n                                                        <div className=\"average-progress\">\n                                                            {\n                                                                playerCard.last_5_game_avg_format && playerCard.last_5_game_avg_format.length > 0 &&\n                                                                _Map(playerCard.last_5_game_avg_format, (item, index) => {\n                                                                    return (\n                                                                        <div className={\"progress-item\" + (item != '' ? ' green' : '')} />\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                        <div className=\"item-data\">\n                                                            <div className=\"average-value\">{playerCard.last_5_game_avg_arr ? playerCard.last_5_game_avg_arr.before_point : ''}.<span>{playerCard.last_5_game_avg_arr ? playerCard.last_5_game_avg_arr.after_point : ''}</span> </div>\n                                                            <div className=\"average-text\">{AppLabels.Last_5_games}</div>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"average-container col-xs-4\">\n                                                        <div className=\"average-progress\">\n                                                            {\n                                                                playerCard.against_team_avg_format && playerCard.against_team_avg_format.length > 0 &&\n                                                                _Map(playerCard.against_team_avg_format, (item, index) => {\n                                                                    return (\n                                                                        <div className={\"progress-item \" + (item != '' ? 'green' : '')} />\n                                                                    )\n                                                                })\n                                                            }\n                                                        </div>\n                                                        <div className=\"item-data\">\n                                                            <div className=\"average-value\">{playerCard.against_team_avg_arr ? playerCard.against_team_avg_arr.before_point : ''}.<span>{playerCard.against_team_avg_arr ? playerCard.against_team_avg_arr.after_point : ''}</span> </div>\n                                                            <div className=\"average-text\">v {playerCard.player_detail ? playerCard.player_detail.against_team : ''}</div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                {\n                                                    this.state.graphData.has_data ?\n                                                        <HighchartsReact\n                                                            highcharts={Highcharts}\n                                                            options={this.state.graphData}\n                                                        />\n                                                        :\n                                                        <div className=\"no-data-available\">{AppLabels.NO_DATA_FOUND}</div>\n                                                }\n                                            </div>\n                                        </Tab>\n                                        <Tab eventKey={2} title={AppLabels.GAME_LOG}>\n                                            <div className=\"player-card-body\">\n                                                <h4 className=\"sub-heading\">{AppLabels.LAST_5_MATCHES}</h4>\n                                                {this.state.playerParams.sports_id == SportsIDs.cricket && <table className=\"table table-gamelog\">\n                                                        <thead>\n                                                            <tr>\n                                                                <th className=\"align-left\">{AppLabels.DATE}</th>\n                                                                <th>{AppLabels.FORMAT}</th>\n                                                                <th>{AppLabels.RUNS}</th>\n                                                                <th>{AppLabels.WKT}</th>\n                                                                <th>{AppLabels.E_R}</th>\n                                                                <th>{AppLabels.S_R}</th>\n                                                                <th>{AppLabels.PTS}</th>\n                                                            </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                            {playerCard.player_stats &&\n                                                                _Map(playerCard.player_stats, (item, idx) => {\n                                                                    return (\n                                                                        <tr>\n                                                                            <td className=\"align-left\"><span className=\"game-date\">{item.home} <small>v</small> {item.away}</span></td>\n                                                                            <td><span>{item.format}</span></td>\n                                                                            <td><span className=\"\">{item.batting_runs}</span></td>\n                                                                            <td><span>{item.bowling_wickets}</span></td>\n                                                                            <td><span>{item.bowling_strike_rate}</span></td>\n                                                                            <td><span>{item.batting_strike_rate}</span></td>\n                                                                            <td><span className=\"game-points\">{item.score}</span></td>\n                                                                            {/* <td className=\"align-left\"><span className=\"game-date\">{item.match_date} <small>v</small> {item.vs_team}</span></td>\n                                                                            <td><span>{item.format_text}</span></td>\n                                                                            <td><span className=\"\">{item.batting_runs}</span></td>\n                                                                            <td><span>{item.bowling_wickets}</span></td>\n                                                                            <td><span>{item.bowling_strike_rate}</span></td>\n                                                                            <td><span>{item.batting_strike_rate}</span></td>\n                                                                            <td><span className=\"game-points\">{item.score}</span></td> */}\n                                                                        </tr>\n                                                                    )\n                                                                })\n                                                            }\n                                                            {(_isUndefined(playerCard.player_stats) || !playerCard.player_stats.length) &&\n                                                                <tr>\n                                                                    <td className=\"text-center\" colSpan=\"7\">{AppLabels.NO_RESULT_FOUND_FILTER_1}</td>\n                                                                </tr>\n                                                            }\n                                                        </tbody>\n                                                    </table>}\n                                                    {this.state.playerParams.sports_id == SportsIDs.badminton && <table className=\"table table-gamelog\">\n                                                        <thead>\n                                                            <tr>\n                                                                <th>{AppLabels.DATE}</th>\n                                                                <th>{AppLabels.ROUND1}</th>\n                                                                <th>{AppLabels.ROUND2}</th>\n                                                                <th>{AppLabels.ROUND3}</th>\n                                                                <th>{AppLabels.PTS}</th>\n                                                            </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                            {playerCard.player_stats &&\n                                                                _Map(playerCard.player_stats, (item, idx) => {\n                                                                    return (\n                                                                        <tr>\n                                                                            <td><span className=\"game-date\">{item.match_date} <small>v</small> {item.vs_team}</span></td>\n                                                                            <td><span>{item.round_1_points}</span></td>\n                                                                            <td><span>{item.round_2_points}</span></td>\n                                                                            <td><span>{item.round_3_points}</span></td>\n                                                                            <td><span className=\"game-points\">{item.score}</span></td>\n                                                                        </tr>\n                                                                    )\n                                                                })\n                                                            }\n                                                            {(_isUndefined(playerCard.player_stats) || !playerCard.player_stats.length) &&\n                                                                <tr>\n                                                                    <td className=\"text-center\" colSpan=\"5\">{AppLabels.NO_RESULT_FOUND_FILTER_1}</td>\n                                                                </tr>\n                                                            }\n                                                        </tbody>\n                                                    </table>}\n                                            </div>\n                                        </Tab>\n                                    </Tabs>\n                                </div>\n                            </Modal.Body>\n                        </Modal>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\n","/var/www/html/framework/frontend/src/Modals/MyTeamViewAllModal/MyTeamViewAllModal.jsx",["4166","4167","4168","4169","4170","4171","4172","4173"],"import React from 'react';\nimport { Modal, Table } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { AppSelectedSport } from '../../helper/Constants';\nimport { Utilities } from '../../Utilities/Utilities';\nimport { getUserLineUpDetail } from '../../WSHelper/WSCallings';\n\nexport default class MyTeamViewAllModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            show: false,\n            openTeam: '',\n            teamPlayerData: {},\n            allPosition: '',\n            CollectionData: '',\n        };\n\n\n    }\n\n    componentDidMount() {\n        this.setState({ openTeam: this.props.openTeam, CollectionData: this.props.CollectionData, teamPlayerData: (this.props.teamPlayerData || {}) }, () => {\n            this.getTeamPlayers(this.state.openTeam)\n        })\n    }\n\n    getTeamPlayers = (item) => {\n\n        let param = {\n            \"lineup_master_id\": item.lineup_master_id,\n            \"collection_master_id\": this.state.CollectionData.collection_master_id,\n            \"sports_id\": AppSelectedSport,\n        }\n\n        this.setState({ isLoaderShow: true })\n        getUserLineUpDetail(param).then((responseJson) => {\n\n            this.setState({ isLoaderShow: false })\n\n            if (responseJson.response_code == WSC.successCode) {\n\n                let { teamPlayerData } = this.state;\n\n                teamPlayerData['lineup_master_id'] = item.lineup_master_id;\n                teamPlayerData.allPosition = responseJson.data.all_position;\n                teamPlayerData.teamPlayerList = this.getPlayerOrder(responseJson.data.lineup, responseJson.data.all_position);\n\n                this.setState({ teamPlayerData })\n            }\n        })\n    }\n\n    getPlayerOrder(lineupList, allPositionList) {\n\n        for (let i = 0; i < lineupList.length; i++) {\n\n            for (let j = 0; j < allPositionList.length; j++) {\n\n                if (lineupList[i].position_name == allPositionList[j].position) {\n\n                    lineupList[i]['position_display_name'] = allPositionList[j].position_display_name;\n                    lineupList[i]['position_order'] = allPositionList[j].position_order;\n                    break;\n                }\n            }\n        }\n\n        lineupList.sort(this.getSortOrder(\"position_order\"));\n\n        return lineupList;\n    }\n\n    //Comparer Function  \n    getSortOrder(prop) {\n        return function (a, b) {\n            if (a[prop] > b[prop]) {\n                return 1;\n            } else if (a[prop] < b[prop]) {\n                return -1;\n            }\n            return 0;\n        }\n    }\n\n    render() {\n        const { isViewAllShown, onViewAllHide } = this.props;\n        const { teamPlayerData, openTeam } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={isViewAllShown} onHide={onViewAllHide} bsSize=\"large\" dialogClassName=\"my-team-view-all-modal\">\n                            <Modal.Header>\n                                <Modal.Title>\n                                    <a onClick={onViewAllHide} className=\"modal-close\">\n                                        <i className=\"icon-close\"></i>\n                                    </a>\n                                    <div className=\"name-container\">\n                                        <div className=\"team-name\">{openTeam.team_name}</div>\n                                        <div className=\"contests-joined\">{openTeam.contest_joined_count} {AppLabels.CONTEST_JOINED}</div>\n                                    </div>\n\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"player-list-container\">\n                                    {\n                                        teamPlayerData.teamPlayerList && teamPlayerData.teamPlayerList.map((item, index) => {\n                                            return (\n                                                <div className=\"player-list-item\">\n                                                    {\n                                                        (index == 0 ? true : (item.position_name != teamPlayerData.teamPlayerList[index - 1].position_name)) &&\n\n                                                        <div className=\"item-header\">\n                                                            <span>{item.position_display_name}</span>\n                                                        </div>\n                                                    }\n                                                    <div className=\"item\">\n                                                        <Table>\n                                                            <tbody>\n                                                                <tr>\n                                                                    <td className=\"left\">\n                                                                        <div className=\"image-container\">\n                                                                            <img className=\"player-image\" src={Utilities.playerJersyURL(item.jersey)} alt=\"\" />\n                                                                            {\n                                                                                this.state.openTeam.captain_player_team_id == item.player_team_id ?\n                                                                                    <span className='player-post'>{AppLabels.C}</span> :\n                                                                                    this.state.openTeam.vice_captain_player_team_id == item.player_team_id ?\n                                                                                        <span className='player-post'>{AppLabels.VC}</span> :\n                                                                                        \"\"\n                                                                            }\n                                                                        </div>\n\n                                                                        <div className=\"player-name-container\">\n                                                                            <div className=\"player-name\">{item.full_name}</div>\n                                                                            <div className=\"team-vs-team\">{item.team_abbreviation || item.team_abbr}</div>\n                                                                        </div>\n                                                                    </td>\n\n                                                                    <td className=\"right\">\n                                                                        <div className=\"credit-container\">\n                                                                            <div className=\"credit-amount\">{item.salary}</div>\n                                                                            <div className=\"credit-text\">{AppLabels.credit}</div>\n                                                                        </div>\n                                                                    </td>\n                                                                </tr>\n                                                            </tbody>\n                                                        </Table>\n                                                    </div>\n                                                </div>\n                                            )\n                                        })\n                                    }\n                                </div>\n                            </Modal.Body>\n                        </Modal>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\n","/var/www/html/framework/frontend/src/views/Leaderboard/Leaderboard.jsx",["4174","4175","4176","4177","4178","4179","4180","4181","4182","4183","4184","4185","4186","4187","4188","4189","4190","4191","4192","4193","4194","4195","4196","4197","4198","4199","4200","4201","4202","4203","4204","4205","4206"],"import React, { Fragment } from 'react';\nimport { Row, Col, Alert } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport { notify } from 'react-notify-toast';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport { downloadContestTeam, getContestLeaderboard, getOwnLeaderboard, getLineupWithScore,getOwnLeaderboardNF,downloadContestTeamNF,getContestLeaderboardNF,getLineupWithScoreNF  } from '../../WSHelper/WSCallings';\nimport { NoDataView } from '../../Component/CustomComponent';\nimport { AppSelectedSport } from '../../helper/Constants';\nimport Images from '../../components/images';\nimport MyLeaderboardItem from \"./MyLeaderboardItem\";\nimport MetaData from \"../../helper/MetaData\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\nimport CustomHeader from '../../components/CustomHeader';\nimport FieldView from \"./../FieldView\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as NC from \"../../WSHelper/WSConstants\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\n/**\n  * @description This is the header of other user rank list.\n  * @return UI components\n  * @param context This is the instance of this component\n*/\nconst ListHeader = ({ context }) => {\n    return (\n        <div className=\"ranking-list user-list-header\" style={context.state.userRankList.length == 0 ? { marginTop: 0 } : {}}>\n            <div className=\"display-table-cell text-center\">\n                <div className=\"list-header-text\">{AppLabels.RANK}</div>\n            </div>\n            <div className=\"display-table-cell pl-1\">\n                <div className=\"list-header-text left pl6\">{AppLabels.NAME}</div>\n            </div>\n            <div className=\"display-table-cell\">\n                <div className=\"list-header-text text-right mr10\">{AppLabels.POINTS}</div>\n            </div>\n        </div>\n    )\n}\n\nconst Shimmer = () => {\n    return (\n        <div className=\"ranking-list shimmer margin-2p\">\n            <div className=\"display-table-cell text-center\">\n                <div className=\"rank\">--</div>\n                <div className=\"rank-heading\">{AppLabels.RANK}</div>\n            </div>\n            <div className=\"display-table-cell pl-1 pointer-cursor\">\n                <figure className=\"user-img shimmer\">\n                    <Skeleton circle={true} width={40} height={40} />\n                </figure>\n                <div className=\"user-name-container shimmer\">\n                    <Skeleton width={'80%'} height={8} />\n                    <Skeleton width={'40%'} height={5} />\n                </div>\n            </div>\n            <div className=\"display-table-cell\">\n                <div className=\"points\">--</div>\n            </div>\n        </div>\n    )\n}\n\nexport default class LeaderBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaderShow: false,\n            isLoadMoreLoaderShow: false,\n            hasMore: true,\n            leaderboardList: [],\n            userRankList: [],\n            ShimmerList: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],\n            status: '',\n            contestItem: '',\n            contestId: '',\n            rootItem: '',\n            mfileURL: '',\n            downloadFail: false,\n            isExpanded: false,\n            isExpandedWithDelay: false,\n            pageNo: 1,\n            page_size: 20,\n            AllLineUPData: {},\n            SelectedLineup: '',\n            showFieldV: false,\n            isRefresh: false,\n            UserName: '',\n            youData: '',\n            oppData: ''\n        }\n        this.headerRef = React.createRef();\n    }\n\n    componentWillMount() {\n        if (this.props.location.state) {\n            this.setState({\n                status: this.props.location.state.status,\n                contestItem: this.props.location.state.contestItem,\n                contestId: this.props.location.state.contestItem.contest_id,\n                rootItem: this.props.location.state.rootItem,\n            })\n        } else {\n            this.props.history.push(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n        }\n    }\n\n    goBack() {\n        this.props.history.goBack();\n    }\n\n    componentDidMount() {\n        if (this.props.location.state) {\n            this.getLeaderboard();\n            this.getUserRank()\n            if (this.headerRef) {\n                this.headerRef.GetHeaderProps('', {}, {}, this.state.rootItem);\n            }\n        }\n    }\n\n    onLoadMore() {\n        if (!this.state.isLoaderShow && this.state.hasMore) {\n            this.setState({ hasMore: false })\n            this.getLeaderboard()\n        }\n    }\n\n    /**\n     * \n     * @description method to refresh page contest when user pull down to refresh screen\n     */\n    handleRefresh = () => {\n        if (!this.state.isLoaderShow) {\n            this.setState({ hasMore: false, pageNo: 1, isRefresh: true }, () => {\n                this.hideFieldV();\n                this.getLeaderboard();\n                this.getUserRank()\n            })\n        }\n    }\n\n    getUserRank() {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"contest_id\": this.state.contestId,\n        }\n        let IsNetworkFantasy = this.props && this.props.location && this.props.location.state && this.props.location.state.contestItem && this.props.location.state.contestItem.is_network_contest == 1\n        if(IsNetworkFantasy){\n            getOwnLeaderboardNF(param).then((responseJson) => {\n                if (responseJson && responseJson.response_code == NC.successCode) {\n                    this.setState({ userRankList: responseJson.data });\n                }\n            })\n        }\n        else{\n            getOwnLeaderboard(param).then((responseJson) => {\n                if (responseJson && responseJson.response_code == NC.successCode) {\n                    this.setState({ userRankList: responseJson.data });\n                }\n            })\n        }\n    }\n\n    getLeaderboard() {\n        let param = {\n            \"sports_id\": AppSelectedSport,\n            \"contest_id\": this.state.contestId,\n            \"page_size\": this.state.page_size,\n            \"page_no\": this.state.pageNo\n        }\n        this.setState({ isLoaderShow: true })\n        let IsNetworkFantasy = this.props && this.props.location && this.props.location.state && this.props.location.state.contestItem && this.props.location.state.contestItem.is_network_contest == 1;\n        if(IsNetworkFantasy){\n            getContestLeaderboardNF(param).then((responseJson) => {\n                this.setState({ isLoaderShow: false })\n                setTimeout(() => {\n                    this.setState({\n                        isRefresh: false\n                    })\n                }, 2000);\n                if (responseJson && responseJson.response_code == NC.successCode) {\n                    this.setState({\n                        leaderboardList: this.state.pageNo == 1 ? responseJson.data : [...this.state.leaderboardList, ...responseJson.data],\n                        hasMore: responseJson.data.length === this.state.page_size,\n                        pageNo: this.state.pageNo + 1\n                    });\n                }\n            })\n        }\n        else{\n            getContestLeaderboard(param).then((responseJson) => {\n                this.setState({ isLoaderShow: false })\n                setTimeout(() => {\n                    this.setState({\n                        isRefresh: false\n                    })\n                }, 2000);\n                if (responseJson && responseJson.response_code == NC.successCode) {\n                    this.setState({\n                        leaderboardList: this.state.pageNo == 1 ? responseJson.data : [...this.state.leaderboardList, ...responseJson.data],\n                        hasMore: responseJson.data.length === this.state.page_size,\n                        pageNo: this.state.pageNo + 1\n                    });\n                }\n            })\n        }\n    }\n\n    onDownloadClick() {\n        if (!this.state.isLoaderShow) {\n            var param = {\n                \"sports_id\": AppSelectedSport,\n                \"contest_id\": this.state.contestId,\n            }\n            this.setState({ isLoaderShow: true })\n            if(this.state.contestItem && this.state.contestItem.is_network_contest != 1){\n                downloadContestTeam(param).then((responseJson) => {\n                    this.setState({ isLoaderShow: false })\n                    if (responseJson.response_code == NC.successCode) {\n                        if (responseJson.data.uploaded && responseJson.data.file) {\n                            this.downloadFile(responseJson.data.file);\n                            this.setState({ mfileURL: responseJson.data.file })\n                        }\n                    }\n                })\n            }\n            else{\n                downloadContestTeamNF(param).then((responseJson) => {\n                    this.setState({ isLoaderShow: false })\n                    if (responseJson.response_code == NC.successCode) {\n                        if (responseJson.data.uploaded && responseJson.data.file) {\n                            this.downloadFile(responseJson.data.file);\n                            this.setState({ mfileURL: responseJson.data.file })\n                        }\n                    }\n                })\n            }\n        }\n\n    }\n\n    downloadFile(fileURL) {\n        var filename = fileURL.substring(fileURL.lastIndexOf('/') + 1);\n        if (!window.ActiveXObject) {\n\n            if (navigator.userAgent.toLowerCase().match(/(ipad|iphone|safari)/) && navigator.userAgent.search(\"Chrome\") < 0) {\n                var save = document.createElement('a');\n                save.href = fileURL;\n                save.target = '_blank';\n                save.download = filename;\n                document.location = save.href;\n            }\n            else if (navigator.userAgent.toLowerCase().match(/(android)/)) {\n                if (window.ReactNativeWebView) {\n                    let data = {\n                        action: 'download',\n                        targetFunc: 'download',\n                        type: 'team',\n                        url: fileURL\n                    }\n                    this.sendMessageToApp(data);\n                }\n                else {\n                    let save = document.createElement('a');\n                    save.href = fileURL;\n                    save.target = '_blank';\n\n                    save.download = filename;\n                    var evt = new MouseEvent('click', {\n                        'view': window,\n                        'bubbles': true,\n                        'cancelable': false\n                    });\n                    save.dispatchEvent(evt);\n                    (window.URL || window.webkitURL).revokeObjectURL(save.href);\n                }\n            }\n            else {\n                var popup_window = window.open(fileURL, \"_blank\");\n                try {\n                    popup_window.focus();\n                } catch (e) {\n                    this.setState({ downloadFail: true })\n                }\n\n\n            }\n        }\n        // for IE < 11\n        else if (!!window.ActiveXObject && document.execCommand) {\n            var _window = window.open(fileURL, '_blank');\n            _window.document.close();\n            _window.document.execCommand('SaveAs', true, filename)\n            _window.close();\n        }\n\n    }\n\n    sendMessageToApp(action) {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(JSON.stringify(action));\n        }\n    }\n\n    /**\n     * @description This function is used to open player lineup page with formatted URL data\n     * @param teamItem Team item\n     * @see FieldView\n    */\n    openLineup = (teamItem) => {\n        this.setState({\n            SelectedLineup: teamItem.lineup_master_contest_id,\n            UserName: teamItem.user_name || ''\n        }, () => {\n            this.getLineupScoreData(teamItem)\n        })\n    }\n\n    getLineupScoreData = (teamItem) => {\n\n        let lineupData = this.state.AllLineUPData && this.state.AllLineUPData[this.state.SelectedLineup] ? this.state.AllLineUPData[this.state.SelectedLineup] : ''\n        if (lineupData) {\n            this.showFieldV()\n        } else {\n            let param = {\n                'lineup_master_contest_id': teamItem.lineup_master_contest_id,\n                \"sports_id\": AppSelectedSport,\n            }\n            let IsNetworkFantasy = this.props && this.props.location && this.props.location.state && this.props.location.state.contestItem && this.props.location.state.contestItem.is_network_contest == 1;\n            if(IsNetworkFantasy){\n                getLineupWithScoreNF(param).then((responseJson) => {\n                    if (responseJson.response_code == WSC.successCode) {\n    \n                        let lData = this.state.AllLineUPData;\n                        lData[teamItem.lineup_master_contest_id] = responseJson.data;\n                        this.setState({\n                            AllLineUPData: lData\n                        }, () => {\n                            this.showFieldV()\n                        })\n                    }\n                })\n            }\n            else{\n                getLineupWithScore(param).then((responseJson) => {\n                    if (responseJson.response_code == WSC.successCode) {\n    \n                        let lData = this.state.AllLineUPData;\n                        lData[teamItem.lineup_master_contest_id] = responseJson.data;\n                        this.setState({\n                            AllLineUPData: lData\n                        }, () => {\n                            this.showFieldV()\n                        })\n                    }\n                })                \n            }\n        }\n    }\n\n    showFieldV = () => {\n        this.setState({\n            showFieldV: true\n        });\n    }\n    hideFieldV = () => {\n        this.setState({\n            showFieldV: false,\n            SelectedLineup: ''\n        });\n    }\n\n    copyToClipboard = (textToCopy) => {\n        var textField = document.createElement('textarea')\n        textField.innerText = textToCopy\n        document.body.appendChild(textField)\n        textField.select()\n        document.execCommand('copy')\n        textField.remove()\n        notify.show(AppLabels.URL_COPIED_TO_CLIPBOARD, \"success\", 5000);\n        setTimeout(() => {\n            this.setState({ downloadFail: false })\n        }, 1000 * 30);\n    }\n\n    TeamComparison=(e,youTeam,otherTeam)=>{\n        console.log('userRankList',this.state.userRankList);\n        let UT = youTeam != '' ? youTeam : this.state.youData;\n        let OT = otherTeam != '' ? otherTeam : this.state.oppData;\n        console.log('youTeam',youTeam);\n        console.log('otherTeam',otherTeam);\n        e.stopPropagation();    \n        this.setState({\n            youData: UT,\n            oppData: OT\n        },()=>{\n            if(UT.user_name == OT.user_name){\n                Utilities.showToast('You cant compare your teams', 2500);\n                this.setState({\n                    youData: '',\n                    oppData: ''\n                })\n            }\n            else if(this.state.youData && this.state.oppData){\n                this.props.history.push({ \n                    pathname: \"/team-comparison\", \n                    state: {oppData:OT,status: this.state.status,youData: UT,userRankList: this.state.userRankList}\n                });\n            }\n        })\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            fixture: false,\n            status: this.state.status,\n            hideShadow: true,\n            leaderboard: true,\n        }\n        let lineupData = this.state.AllLineUPData && this.state.AllLineUPData[this.state.SelectedLineup] ? this.state.AllLineUPData[this.state.SelectedLineup] : ''\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.leaderboard.title}</title>\n                            <meta name=\"description\" content={MetaData.leaderboard.description} />\n                            <meta name=\"keywords\" content={MetaData.leaderboard.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader\n                            ref={(ref) => this.headerRef = ref}\n                            HeaderOption={HeaderOption}\n                            {...this.props} />\n                        <Row>\n                            <Col sm={12}>\n\n                                <div className=\"leaderboard-wrapper\">\n                                    {\n                                        (this.state.userRankList.length == 0 && this.state.leaderboardList.length == 0 && this.state.isLoaderShow) ?\n                                            this.state.ShimmerList.map((item, index) => {\n                                                return (\n                                                    <Shimmer key={index} />\n                                                )\n                                            })\n                                            :\n                                            (this.state.userRankList.length == 0 && this.state.leaderboardList.length == 0 && !this.state.isLoaderShow) ?\n                                                <NoDataView\n                                                    BG_IMAGE={Images.no_data_bg_image}\n                                                    CENTER_IMAGE={Images.teams_ic}\n                                                    MESSAGE_1={AppLabels.NO_DATA_AVAILABLE}\n                                                    MESSAGE_2={''}\n                                                    BUTTON_TEXT={AppLabels.GO_TO_MY_CONTEST}\n                                                    onClick={this.goBack.bind(this)}\n                                                />\n                                                :\n\n\n                                                <div>\n                                                    {this.state.rootItem.scoring_alert && this.state.rootItem.scoring_alert != '0' &&\n                                                        <Alert variant=\"warning\" className=\"alert-warning msg-alert-container border-radius-0\">\n                                                            <div className=\"msg-alert-wrapper\">\n                                                                <span className=\"\"><i className=\"icon-megaphone\"></i></span>\n                                                                <span>{AppLabels.CUSTOM_SCORING_MSG}</span>\n                                                            </div>\n                                                        </Alert>\n                                                    }\n                                                    <div className=\"leaderboard-header\">\n                                                        {\n                                                            this.state.userRankList.length > 0 &&\n                                                            <Fragment>\n                                                                <div className={\"leaderboard-header \" + (this.state.isExpanded ? \"collpased-header-list-show\" : \"collpased-header-list-hide\")} style={this.state.isExpanded ? { height: this.state.userRankList.length > 2 ? 118 : 92, overflow: 'auto' } : { height: 60 }}>\n                                                                    <div>\n                                                                        {\n                                                                            this.state.userRankList.length > 0 &&\n                                                                            _Map(this.state.userRankList, (userRank, idx) => {\n                                                                                return (<MyLeaderboardItem key={idx} contestItem={this.state.contestItem} isExpanded={this.state.isExpandedWithDelay} SelectedLineup={this.state.SelectedLineup} userRank={userRank} index={idx} \n                                                                                    openLineup={this.openLineup} \n                                                                                    // TeamComparison={this.TeamComparison} \n                                                                                />);\n                                                                            })\n                                                                        }\n                                                                    </div>\n                                                                </div>\n                                                                {\n                                                                    this.state.userRankList.length > 1 && <div className={\"header-arrow-container\" + (this.state.isExpanded ? ' expand' : '')}>\n                                                                        <div className=\"header-arrow-top\" />\n\n\n                                                                        <div className=\"header-arrow\">\n                                                                            <div id=\"pentagon\" onClick={() => {\n                                                                                this.setState({ isExpanded: !this.state.isExpanded })\n                                                                                setTimeout(() => {\n                                                                                    this.setState({ isExpandedWithDelay: this.state.isExpanded })\n                                                                                }, 0);\n                                                                            }}>\n                                                                                <i className={\"icon-\" + (this.state.isExpanded ? \"arrow-up\" : \"arrow-down\")} />\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                }\n                                                                <div className={\"spacing-wrapper\" + (this.state.userRankList.length > 1 ? ' grey-clr' : ' ')}></div>\n                                                            </Fragment>\n                                                        }\n                                                        <ListHeader context={this} />\n                                                    </div>\n                                                    <div className={'p-height' + (this.state.isExpanded ? ' expand' : '') + (this.state.userRankList.length > 1 ? '' : ' no-arrow')} id='scrollableTarget'>\n                                                        <InfiniteScroll\n                                                            dataLength={this.state.leaderboardList.length}\n                                                            next={() => this.onLoadMore()}\n                                                            hasMore={!this.state.isLoaderShow && this.state.hasMore}\n                                                            scrollableTarget={'scrollableTarget'}\n                                                            loader={\n                                                                this.state.isLoadMoreLoaderShow &&\n                                                                <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                                                            }>\n                                                            <div className=\"leaderboard-listing\">\n\n                                                                {_Map(this.state.leaderboardList, (item, idx) => {\n\n                                                                    return (\n                                                                        <div key={item.lineup_master_contest_id} \n                                                                            // onClick={(e)=>this.TeamComparison(e,'',item)} \n                                                                            onClick={() => this.openLineup(item, true)} \n                                                                            className={\"ranking-list pointer-cursor \" + (this.state.SelectedLineup == item.lineup_master_contest_id ? ' sel-active' : '')}>\n                                                                            <div className=\"display-table-cell text-center\">\n                                                                                <div className=\"rank\">{item.game_rank}</div>\n                                                                                <div className=\"rank-heading\">{AppLabels.RANK}</div>\n                                                                            </div>\n                                                                            <div className=\"display-table-cell pl-1\">\n\n                                                                                <div className=\"user-name-container\">\n                                                                                    <div className=\"user-name\">{item.user_name}</div>\n                                                                                    <div className=\"user-team-name\">\n                                                                                        {\n\n                                                                                            <span className=\"won-amount\">\n                                                                                                {\n                                                                                                    item.prize_data && item.prize_data.length > 0 ?\n\n                                                                                                        _Map(item.prize_data, (prizeItem, idx) => {\n\n                                                                                                            return (\n\n                                                                                                                (prizeItem.prize_type == 0) ?\n                                                                                                                    <span className=\"contest-prizes\"   >\n                                                                                                                        {<i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>}\n                                                                                                                        {item.prize_data.length === idx + 1 ? Number(parseFloat(prizeItem.amount || 0).toFixed(2)) : Number(parseFloat(prizeItem.amount || 0).toFixed(2)) + \"/\"}\n                                                                                                                    </span>\n                                                                                                                    :\n                                                                                                                    (prizeItem.prize_type == 1) ?\n                                                                                                                        <span className=\"contest-prizes\">\n\n                                                                                                                            {<span style={{ display: 'inlineBlock' }}>{Utilities.getMasterData().currency_code}</span>}\n                                                                                                                            {item.prize_data.length === idx + 1 ? Number(parseFloat(prizeItem.amount || 0).toFixed(2)) : Number(parseFloat(prizeItem.amount || 0).toFixed(2)) + \"/\"}\n                                                                                                                        </span>\n                                                                                                                        :\n                                                                                                                        (prizeItem.prize_type == 2) ?\n                                                                                                                         <span className=\"contest-prizes\">\n                                                                                                                                {<span style={{ display: 'inlineBlock' }}>\n                                                                                                                                <img style={{ marginBottom: '2px' }} src={Images.IC_COIN} width=\"12px\" height=\"12px\" />\n                                                                                                                                    {item.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}</span>}\n\n                                                                                                                            </span>\n                                                                                                                            :\n                                                                                                                            (prizeItem.prize_type == 3) ?\n                                                                                                                                <span className=\"contest-prizes\" >\n                                                                                                                                    {<span style={{ display: 'inlineBlock' }}>{item.prize_data.length === idx + 1 ? prizeItem.name : prizeItem.name + \"/\"}</span>}\n\n                                                                                                                                </span> : ''\n\n\n\n                                                                                                            )\n\n\n                                                                                                        })\n                                                                                                        :\n                                                                                                        item.won_prize != \"\" &&\n                                                                                                        <span className=\"won-amount\">\n                                                                                                            {this.state.contestItem.prize_type == 1 &&\n                                                                                                                <React.Fragment>\n                                                                                                                    {Utilities.getMasterData().currency_code}\n                                                                                                                    {Number(parseFloat(item.won_prize || 0).toFixed(2))}\n                                                                                                                    <span className=\"won\"> {AppLabels.WON} - </span>\n                                                                                                                </React.Fragment>\n                                                                                                            }\n                                                                                                            {this.state.contestItem.prize_type == 0 &&\n                                                                                                                <React.Fragment>\n                                                                                                                    <i className=\"icon-bonus\"></i>\n                                                                                                                    {Number(parseFloat(item.won_prize || 0).toFixed(2))}\n                                                                                                                    <span className=\"won\">{AppLabels.WON} - </span>\n                                                                                                                </React.Fragment>\n                                                                                                            }\n\n                                                                                                        </span>}\n\n                                                                                            </span>\n                                                                                        }\n                                                                                        {item.prize_data && item.prize_data.length > 0 ? <React.Fragment>\n\n                                                                                            <span style={{ color: '#5DBE7D' }} className=\"won\"> {AppLabels.WON} -  </span>{item.team_name}\n                                                                                        </React.Fragment> : \" \" + item.team_name\n                                                                                        }\n                                                                                    </div>\n                                                                                </div>\n\n                                                                                {/* <a href onClick={(e)=>this.TeamComparison(e,'',item)}>Comparison</a> */}\n                                                                            </div>\n                                                                            <div className=\"display-table-cell\">\n                                                                                <div className=\"points\">{item.total_score}</div>\n                                                                            </div>\n                                                                        </div>\n                                                                    )\n                                                                })}\n\n                                                            </div>\n\n                                                        </InfiniteScroll>\n                                                    </div>\n\n\n                                                </div>\n                                    }\n                                    {\n                                        <div className={\"refresh-list\" + (this.state.isRefresh ? ' rotate' : '')} onClick={this.handleRefresh}>\n                                            <i className=\"icon-return\" />\n                                        </div>\n                                    }\n                                </div>\n                            </Col>\n                        </Row>\n\n                        {\n                            (this.state.userRankList.length > 0 || this.state.leaderboardList.length > 0) &&\n                            <div className=\"bottom-download-container\">\n\n                                <div onClick={() => this.onDownloadClick()} >\n                                    <i className=\"icon-download-circle\" />\n                                    <span className=\"download-text text-uppercase\"> {AppLabels.DOWNLOAD_ALL_TEAMS}</span>\n                                </div>\n                                {this.state.mfileURL != '' && this.state.downloadFail &&\n                                    <div onClick={() => this.copyToClipboard(this.state.mfileURL)} >\n                                        <span className=\"download-text text-uppercase\" style={{ fontSize: 10 }}>{AppLabels.IN_CASE_AUTO_DOWNLOAD_NOT_START}</span>\n                                    </div>\n                                }\n\n                            </div>\n                        }\n                        {\n                            this.state.SelectedLineup && <FieldView\n                                SelectedLineup={lineupData ? lineupData.lineup : ''}\n                                MasterData={lineupData || ''}\n                                isFrom={'rank-view'}\n                                team_name={lineupData ? (lineupData.team_info.team_name || '') : ''}\n                                showFieldV={this.state.showFieldV}\n                                userName={this.state.UserName}\n                                hideFieldV={this.hideFieldV.bind(this)}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Profile/VerifyAccount.jsx",["4207","4208","4209","4210","4211","4212","4213","4214","4215","4216","4217","4218","4219","4220","4221","4222"],"import React from 'react';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport MetaData from \"../../helper/MetaData\";\nimport { VerifyBlock } from \"../CustomComponent\";\nimport CustomHeader from '../../components/CustomHeader';\nimport {\n    EditMobileModal,\n    EditEmailModal,\n    EmailVerificationModal,\n    DeleteConfirmationModal\n} from \"../../Modals\";\nimport { _Map, Utilities } from '../../Utilities/Utilities';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { getReferralMasterData } from \"../../WSHelper/WSCallings\";\nimport WSManager from '../../WSHelper/WSManager';\nimport { isBankDeleted } from '../../helper/Constants';\n\nexport default class VerifyAccount extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showEmailVerification: false,\n            showDeleteConfirmation: false,\n            showEditMobileModal: false,\n            showEditEmailModal: false,\n            verifySteps: [],\n            isAccountVerified: false\n        }\n    }\n\n\n    componentWillMount() {\n        if (!this.props.location.state) {\n            this.props.history.replace({ pathname: '/my-profile' });\n        } else {\n            const { email_verified, phone_verfied, pan_verified, is_bank_verified } = this.props.location.state;\n            let data = {\n                email_verified: email_verified,\n                phone_verfied: phone_verfied,\n                pan_verified: pan_verified,\n                is_bank_verified: isBankDeleted ? '0' : is_bank_verified,\n            }\n            this.setState({ isAccountVerified: this.isAccountVerified(data) })\n        }\n    }\n\n\n    getAmountFromType(data, type) {\n        for (let i = 0; i < data.length; i++) {\n            if (type == data[i].affiliate_type) {\n                return data[i].user_bonus;\n            }\n        }\n    }\n\n    isAccountVerified = (data) => {\n        return (data.pan_verified == \"1\" && data.is_bank_verified == \"1\" && data.email_verified == \"1\" && data.phone_verfied == \"1\") ? true : false\n    }\n\n    initVerificationSteps(affilatedData) {\n        const { email_verified, phone_verfied, pan_verified, is_bank_verified } = this.props.location.state;\n        let mVerificationSteps = [];\n        if (Utilities.getMasterData().login_flow == 0) {\n            mVerificationSteps.push(\n                {\n                    'label': AppLabels.MOBILE,\n                    'value': '+' + WSManager.getProfile().phone_code + ' ' + WSManager.getProfile().phone_no,\n                    'status': 1,\n                    'get_bonus': '',\n                    'action': '',\n                    'blockAction': '',\n                    'labelLg': ''\n                })\n            mVerificationSteps.push(\n                {\n                    'label': AppLabels.EMAIL,\n                    'status': email_verified,\n                    'value': WSManager.getProfile().email,\n                    'get_bonus': email_verified == 1 ? '' : (WSManager.getProfile().with_referral != 1 ? this.getAmountFromType(affilatedData, 7) : this.getAmountFromType(affilatedData, 13)),\n                    'action': () => this.EditEmailModalShow(),\n                    'blockAction': '',\n                    'labelLg': ''\n                })\n        }\n        else {\n            mVerificationSteps.push(\n                {\n                    'label': AppLabels.EMAIL,\n                    'status': 1,\n                    'value': WSManager.getProfile().email,\n                    'get_bonus': '',\n                    'action': '',\n                    'blockAction': '',\n                    'labelLg': ''\n                })\n            mVerificationSteps.push(\n                {\n                    'label': AppLabels.MOBILE,\n                    'status': phone_verfied,\n                    'value': '+' + WSManager.getProfile().phone_code + ' ' + WSManager.getProfile().phone_no ? WSManager.getProfile().phone_no : '-',\n                    'get_bonus': phone_verfied == 1 ? '' : (WSManager.getProfile().with_referral != 1 ? this.getAmountFromType(affilatedData, 8) : this.getAmountFromType(affilatedData, 4)),\n                    'action': () => this.EditMobileModalShow(),\n                    'blockAction': '',\n                    'labelLg': ''\n                })\n        }\n        if (Utilities.getMasterData().allow_pan_flow == 1) {\n            mVerificationSteps.push(\n                {\n                    'label': '',\n                    'status': pan_verified,\n                    'value': WSManager.getProfile().pan_no,\n                    'image': WSManager.getProfile().pan_image,\n                    'get_bonus': (pan_verified == 1) ? '' : (WSManager.getProfile().with_referral != 1 ? this.getAmountFromType(affilatedData, 9) : this.getAmountFromType(affilatedData, 5)),\n                    'action': () => this.GoToPanVerification(),\n                    'blockAction': () => this.GoToPanVerification(),\n                    'labelLg': AppLabels.replace_PANTOID(AppLabels.PANCARD)\n                })\n        }\n        if (Utilities.getMasterData().allow_bank_flow == 1) {\n            mVerificationSteps.push(\n                {\n                    'label': '',\n                    'status': isBankDeleted ? '0' : is_bank_verified,\n                    'value': WSManager.getProfile().user_bank_detail ? WSManager.getProfile().user_bank_detail.bank_name + ' ' + WSManager.getProfile().user_bank_detail.ac_number : '',\n                    'image': WSManager.getProfile().user_bank_detail ? WSManager.getProfile().user_bank_detail.bank_document : '',\n                    'get_bonus': (is_bank_verified == 1 && !isBankDeleted) ? '' : (WSManager.getProfile().with_referral != 1 ? this.getAmountFromType(affilatedData, 16) : this.getAmountFromType(affilatedData, 17)),\n                    'action': () => this.GoToBankVerification(),\n                    'blockAction': () => this.GoToBankVerification(),\n                    'labelLg': AppLabels.BANK_DETAILS\n                })\n        }\n        this.setState({ verifySteps: mVerificationSteps })\n    }\n\n    /**\n     * @description method to display email verification modal\n     */\n    EmailVerificationModalShow = () => {\n        this.setState({\n            showEmailVerification: true,\n        });\n    }\n    /**\n     * @description method to hide email verification modal\n     */\n    EmailVerificationHide = () => {\n        this.setState({\n            showEmailVerification: false,\n        });\n    }\n\n    /**\n     * @description method to display Delete Confirmation modal\n     */\n    DeleteConfirmationShow = () => {\n        this.setState({\n            showDeleteConfirmation: true,\n        });\n    }\n    /**\n     * @description method to hide Delete Confirmation modal\n     */\n    DeleteConfirmationHide = () => {\n        this.setState({\n            showDeleteConfirmation: false,\n        });\n    }\n    /**\n     * @description method to display mobile no edit modal\n     */\n    EditMobileModalShow = () => {\n        this.setState({\n            showEditMobileModal: true,\n        });\n    }\n    /**\n     * @description method to hide mobile no edit modal\n     */\n    EditMobileModalHide = () => {\n        this.setState({\n            showEditMobileModal: false,\n        });\n        this.props.history.goBack()\n    }\n\n    /**\n     * @description method to display email edit modal\n     */\n    EditEmailModalShow = () => {\n        this.setState({\n            showEditEmailModal: true,\n        });\n    }\n    /**\n     * @description method to hide email edit modal\n     */\n    EditEmailModalHide = () => {\n        this.setState({\n            showEditEmailModal: false,\n        });\n        this.initVerificationSteps(this.state.affilatedData)\n\n    }\n    /**\n     * @description method to go on pan verification screen\n     */\n    GoToPanVerification = () => {\n        this.props.history.push({ pathname: '/pan-verification' })\n    }\n    /**\n     * @description method to go on bank verification screen\n     */\n    GoToBankVerification = () => {\n        this.props.history.push({ pathname: '/bank-verification' })\n    }\n\n    componentDidMount() {\n        if (!this.props.location.state) {\n            this.props.history.replace({ pathname: '/my-profile' });\n        }\n        else {\n            this.getAffilatedData()\n        }\n    }\n\n    getAffilatedData() {\n        this.setState({ isLoading: true });\n        let param = {}\n        getReferralMasterData(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson !== null && responseJson !== '' && responseJson.response_code === WSC.successCode) {\n                this.setState({ affilatedData: responseJson.data })\n                this.initVerificationSteps(responseJson.data)\n            }\n        })\n    }\n\n    render() {\n        const {\n            showEmailVerification,\n            showDeleteConfirmation,\n            showEditMobileModal,\n            showEditEmailModal,\n            verifySteps,\n            isAccountVerified\n        } = this.state\n\n        const HeaderOption = {\n            back: true,\n            notification: false,\n            fromProfile: true,\n            hideShadow: true\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container transparent-header web-container-fixed verify-account pb-0\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.mywallet.title}</title>\n                            <meta name=\"description\" content={MetaData.mywallet.description} />\n                            <meta name=\"keywords\" content={MetaData.mywallet.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className=\"custom-page-header\">\n                            <h1>{isAccountVerified ? AppLabels.YOUR_ACCOUNT_IS_VERIFIED : AppLabels.VERIFY_YOUR_ACCOUNT}</h1>\n                            <p>{isAccountVerified ? AppLabels.YOUR_ACCOUNT_IS_VERIFIED1 : AppLabels.VERIFY_YOUR_ACCOUNT_TO_ACTIVATE_WITHDRAW_MONEY_SERVICE}</p>\n                        </div>\n                        <div className=\"verify-account-body\">\n                            {\n                                _Map(verifySteps, (item, index) => {\n                                    return (\n                                        <VerifyBlock\n                                            key={item + index}\n                                            item={item}\n                                            openModalFor={item.action}\n                                        />\n                                    )\n                                })\n\n                            }\n                        </div>\n                        {showEmailVerification &&\n                            <EmailVerificationModal IsEmailVerificationShow={showEmailVerification} IsEmailVerificationHide={this.EmailVerificationHide} />\n                        }\n                        {showDeleteConfirmation &&\n                            <DeleteConfirmationModal IsDeleteConfirmationShow={showDeleteConfirmation} IsDeleteConfirmationHide={this.DeleteConfirmationHide} />\n                        }\n                        {\n                            showEditMobileModal &&\n                            <EditMobileModal\n                                IsEditMobileShow={showEditMobileModal}\n                                IsEditMobileHide={this.EditMobileModalHide}\n                                onHide={() => this.setState({\n                                    showEditMobileModal: false,\n                                })}\n                            />\n                        }\n                        {\n                            showEditEmailModal &&\n                            <EditEmailModal\n                                {...this.props}\n                                IsEditEmailShow={showEditEmailModal}\n                                IsEditEmailHide={this.EditEmailModalHide}\n                                email={WSManager.getProfile().email}\n                                isVerifyMode={true}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/Finance/BuyCoins.jsx",["4223","4224","4225","4226","4227","4228","4229","4230","4231","4232","4233","4234","4235","4236","4237"],"import React from 'react';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { getUserBalance, getCoinPackageList, callBuyCoins, joinContest } from '../../WSHelper/WSCallings';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport CustomHeader from '../../components/CustomHeader';\nimport BuyConfirmModal from \"./BuyConfirmModal\";\nimport Thankyou from '../../Modals/Thankyou';\nimport { SELECTED_GAMET } from \"../../helper/Constants\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nvar globalThis = null;\n\n\nexport default class BuyCoins extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            showCheckbox: false,\n            masterData: '',\n            profileDetail: WSManager.getProfile(),\n            userBalance: this.props.location.state && this.props.location.state.userBalance ? (parseFloat(this.props.location.state.userBalance.winning_amount) + parseFloat(this.props.location.state.userBalance.real_amount)) : '0',\n            showConfirmM: false,\n            amt: 0,\n            packageId: '',\n            packageList: [],\n            pageNo: 1,\n            page_size: 20,\n            isLoaderShow: false,\n            hasMore: true,\n        };\n    }\n\n    componentDidMount() {\n        globalThis = this;\n        this.callUserBalanceApi()\n        this.callCoinPckgLis()\n    }\n\n    componentWillMount() {\n    }\n\n    goBack = (e) => {\n        this.props.history.goBack();\n    }\n\n    goToAddFunds(amt) {\n        if (this.props.location.state.isFrom && this.props.location.state.isFrom == 'contestList') {\n            let ID = this.state.packageId;\n            WSManager.setContestFromAddCoinAndJoin(ID)\n            WSManager.setPaymentCalledFrom(\"ContestJoinBuyCoins\")\n            this.props.history.push({ pathname: '/add-funds', state: { amountToAdd: amt, fromBuyCoin: true } })\n        }\n        else {\n            let ID = this.state.packageId;\n            WSManager.setContestFromAddCoinAndJoin(ID)\n            WSManager.setPaymentCalledFrom(\"BuyCoins\")\n            this.props.history.push({ pathname: '/add-funds', state: { amountToAdd: amt, fromBuyCoin: true } })\n        }\n\n    }\n\n    submitAction = (amt) => {\n        let Bal = parseFloat(this.state.amt);\n        let TBal = parseFloat(this.state.userBalance);\n        let Id = this.state.packageId;\n        if (TBal >= Bal) {\n            this.callBuyCoinsApi(Id)\n        }\n        else {\n            this.goToAddFunds(Bal)\n        }\n    }\n\n    callUserBalanceApi() {\n        getUserBalance().then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    userBalance: (parseFloat(responseJson.data.user_balance.real_amount) + parseFloat(responseJson.data.user_balance.winning_amount)),\n                })\n                WSManager.setBalance(responseJson.data.user_balance);\n            }\n        })\n    }\n\n    callCoinPckgLis() {\n        let param = {\n            \"page_no\": this.state.pageNo,\n            \"page_size\": this.state.page_size\n        }\n        getCoinPackageList(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                let data = responseJson.data;\n                this.setState({\n                    //    packageList: data,\n\n\n                    packageList: this.state.pageNo == 1 ? data : [...this.state.packageList, ...data],\n                    hasMore: responseJson.data.length === this.state.page_size,\n                    pageNo: this.state.pageNo + 1\n                })\n            }\n        })\n    }\n\n    callBuyCoinsApi(id) {\n        let param = {\n            \"package_id\": id\n        }\n        callBuyCoins(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.hideConfirmBuyCoin()\n                if (this.props.location.state.isFrom && (this.props.location.state.isFrom == 'contestList' || this.props.location.state.isFrom == 'SelectCaptainList' || this.props.location.state.isFrom == 'mycontest')) {\n                    this.CallJoinGameApi(this.props.location.contestDataForFunds)\n                }\n                else {\n                    this.goBack()\n                }\n\n            }\n            else {\n                Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n            }\n        })\n    }\n\n\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        let param = {\n            \"contest_id\": dataFromConfirmPopUp.FixturedContestItem.contest_id,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.lineup_master_id ? dataFromConfirmPopUp.selectedTeam.lineup_master_id : dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        this.setState({ isLoaderShow: true })\n        joinContest(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                setTimeout(() => {\n                    WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestjoin');\n                    WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'contestjoindaily');\n                    this.ThankYouModalShow()\n                }, 300);\n                WSManager.setFromConfirmPopupAddFunds(false);\n                WSManager.clearLineup();\n            } else {\n                var errorMsg = responseJson.message != '' ? responseJson.message : responseJson.global_error\n\n                if (errorMsg == '') {\n                    for (var key in responseJson.error) {\n                        errorMsg = responseJson.error[key];\n                    }\n                }\n                if (responseJson.response_code == WSC.sessionExpireCode) {\n                    this.logout();\n                }\n                Utilities.showToast(errorMsg, 3000);\n                this.goBack()\n            }\n        })\n    }\n\n\n    showConfirmBuyCoin = (amt, pckgId) => {\n        this.setState({\n            showConfirmM: true,\n            amt: amt,\n            packageId: pckgId\n        })\n    }\n\n    hideConfirmBuyCoin = () => {\n        this.setState({\n            showConfirmM: false\n        })\n    }\n\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n    goToLobby = () => {\n        let contestData = WSManager.getContestFromAddFundsAndJoin()\n        let calledFrom = WSManager.getPaymentCalledFrom();\n\n        setTimeout(() => {\n            if (calledFrom == 'mycontest') {\n                this.props.history.push({ pathname: '/' });\n            } else {\n                this.gotoContestListingClass(contestData.FixturedContestItem, contestData.lobbyDataItem)\n            }\n        }, 500);\n    }\n\n    gotoContestListingClass(data, lobbyItem) {\n        let dateformaturl = Utilities.getUtcToLocal(data.season_scheduled_date);\n        dateformaturl = new Date(dateformaturl);\n\n        let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n        let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n\n        let home = data.home || lobbyItem.home;\n        let away = data.away || lobbyItem.away;\n\n        dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n        let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + data.collection_master_id + '/' + home + \"-vs-\" + away + \"-\" + dateformaturl + \"?sgmty=\" + btoa(SELECTED_GAMET)\n        this.setState({ LobyyData: data });\n        this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: lobbyItem, isFromPM: true } })\n    }\n\n    seeMyContest = () => {\n        this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n    }\n    onLoadMore() {\n        if (!this.state.isLoaderShow && this.state.hasMore) {\n            this.setState({ hasMore: false })\n            this.callCoinPckgLis()\n        }\n    }\n\n\n    render() {\n        const HeaderOption = {\n            back: true\n        }\n\n        const { userBalance, showConfirmM, amt, packageList, showThankYouModal } = this.state;\n        return (\n            <div className=\"web-container buy-coins-wrap esport-wrap\">\n                <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                <div className=\"buy-coin-header\">\n                    <div className=\"buy-sec\">\n                        {AppLabels.BUY_COINS}\n                        <span className=\"userbal\">{Utilities.getMasterData().currency_code} {userBalance}</span>\n                    </div>\n                    <div className=\"ava-sec\">\n                        {AppLabels.AVAIL_BAL}\n                    </div>\n                    <div className=\"ava-sec\">\n                        ({AppLabels.DEPOSIT} + {AppLabels.WINNINGS})\n                    </div>\n                </div>\n                <InfiniteScroll\n                    dataLength={this.state.packageList.length}\n                    next={() => this.onLoadMore()}\n                    hasMore={!this.state.isLoaderShow && this.state.hasMore}\n                    scrollableTarget={'scrollableTarget'}\n                    loader={\n                        this.state.isLoadMoreLoaderShow &&\n                        <h4 className='table-loader'>{AppLabels.LOADING_MSG}</h4>\n                    }>\n                    <div className=\"coins-opt-sec\">\n                        {\n                            packageList && packageList.length > 0 && _Map(packageList, (item, idx) => {\n                                return (\n                                    <div className=\"coins-card\">\n                                        <img src={Images.COINIMG} alt=\"\" />\n                                        <div className=\"coin-cnt\">{item.coins}</div>\n                                        <div className=\"text-center\">\n                                            <a href className=\"btn btn-rounded\" onClick={() => this.showConfirmBuyCoin(item.amount, item.coin_package_id)}>{Utilities.getMasterData().currency_code} {Utilities.kFormatter(item.amount)}</a>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n\n                </InfiniteScroll>\n                <div className=\"btm-bxt\">\n                    {AppLabels.AMOUNT_DEDUCTION_MSG}\n                </div>\n                {\n                    showConfirmM &&\n                    <BuyConfirmModal hide={this.hideConfirmBuyCoin} show={showConfirmM} submitAction={this.submitAction} amt={amt} userBalance={userBalance} />\n                }\n                {showThankYouModal &&\n                    <Thankyou ThankyouModalShow={this.ThankYouModalShow} ThankYouModalHide={this.ThankYouModalHide} goToLobbyClickEvent={this.goToLobby} seeMyContestEvent={this.seeMyContest} />\n                }\n\n            </div>\n\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Finance/PaymentMethod.jsx",["4238","4239","4240","4241","4242","4243","4244","4245","4246","4247","4248","4249","4250","4251","4252","4253","4254","4255","4256","4257","4258","4259","4260","4261","4262","4263","4264","4265","4266","4267","4268","4269","4270","4271","4272","4273","4274","4275","4276","4277","4278","4279","4280","4281","4282","4283","4284","4285","4286","4287","4288","4289","4290","4291","4292","4293","4294","4295","4296","4297","4298","4299","4300","4301","4302","4303","4304","4305","4306","4307","4308","4309","4310","4311","4312","4313","4314","4315","4316","4317","4318","4319","4320","4321","4322","4323","4324","4325","4326","4327","4328","4329","4330","4331","4332","4333","4334","4335","4336","4337","4338","4339","4340","4341","4342","4343","4344","4345","4346","4347","4348","4349","4350"],"import React from 'react';\nimport { Row, Col, FormGroup,Button } from 'react-bootstrap';\nimport Select from 'react-select';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport CustomHeader from '../../components/CustomHeader';\nimport { inputStyleLeft, selectStyle } from '../../helper/input-style';\nimport FloatingLabel from 'floating-label-react';\nimport DatePicker from 'react-date-picker';\nimport MetaData from \"../../helper/MetaData\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport Images from '../../components/images';\nimport { Utilities } from '../../Utilities/Utilities';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { AppSelectedSport, SELECTED_GAMET, GameType,PAYMENT_TYPE } from \"../../helper/Constants\";\nimport { depositPaytmFund, depositPayUmoneyFund, depositGocashFund, joinContest, depositIPAYFund, depositPayPalFund, depositPayStackFund, depositRazorPayFund,joinContestWithMultiTeam,callBuyCoins,getCashFreeGatewayList,joinContestNetworkfantasy  } from '../../WSHelper/WSCallings';\nimport ReactHtmlParser from 'react-html-parser';\nimport WSManager from '../../WSHelper/WSManager';\nimport { createBrowserHistory } from 'history';\nimport Thankyou from '../../Modals/Thankyou';\nimport EditStateAndCityModal from '../../Modals/EditStateAndCityModal';\nimport CustomLoader from '../../helper/CustomLoader';\nimport ls from 'local-storage';\n\nconst queryString = require('query-string');\n\nconst today = Utilities.getMasterData().allow_age_limit == 0 ? new Date() : Utilities.get18YearOldDate();\nvar hostName = window.location.host;\nvar fUrl = window.location.protocol + '//' + hostName + \"/payment-method?status=failure\"\nvar sUrl = window.location.protocol + '//' + hostName + \"/payment-method?status=success\"\nvar pUrl = window.location.protocol + '//' + hostName + \"/payment-method?status=pending\"\nconst history = createBrowserHistory();\nconst location = history.location;\nconst parsed = queryString.parse(location.search);\nvar globalThis = null;\n\nexport default class PaymentMethod extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            amount: this.props.location.state ? this.props.location.state.amount : '',\n            selectedDeal: this.props.location.state ? this.props.location.state.selectedDeal : \"\",\n            PageContent: '',\n            showThankYouModal: false,\n            isLoading: false,\n            mPromoCode: this.props.location.state ? this.props.location.state.promoCode : '',\n            showStateTagModal: false,\n            walletList: [],\n            netBankingList: [],\n            upiList: [{\n                \"payment_option\": \"upi\",\n                \"upiMode\": \"gpay\"\n            },\n            {\n                \"payment_option\": \"upi\",\n                \"upiMode\": \"qrcode\"\n\n            }],\n            paymentTypeSelected: '',\n            checkIfCashfreeExist:false,\n            selectedWallet: '',\n            walletDropDownList: [],\n            selectedWalletOption: '',\n\n            selectedNetBanking: '',\n            netBankingDropDownList: [],\n            selectedNBoption: '',\n\n            selectedUPI: '',\n            upiDropDownList: [],\n            selectedUPIoption: '',\n\n            cardNumber: '',\n            nameOnCard: '',\n            expiryDate: '',\n            cvvNumber: ''\n\n\n\n\n        }\n    }\n\n    componentWillMount() {\n        globalThis = this;\n        this.checkTransactionFlow()\n\n    }\n\n    checkTransactionFlow = () => {\n           let tempIsAddFundsClicked = WSManager.getFromFundsOnly();\n            let contestData = WSManager.getContestFromAddFundsAndJoin()\n            let FromConfirmPopupAddFunds = WSManager.getFromConfirmPopupAddFunds();\n            let calledFrom = WSManager.getPaymentCalledFrom();\n            let contestCoinData = WSManager.getContestFromAddCoinAndJoin();\n            setTimeout(() => {\n                if (tempIsAddFundsClicked != 'true' && (!this.props.location.state || !this.props.location.state.amount)) {\n                    window.location.assign('/my-wallet')\n                }\n                else {\n                    if (tempIsAddFundsClicked == 'true') {\n                        if (parsed.status == \"success\") {\n                            Utilities.showToast(AppLabels.Your_payment_successful, 1500);\n                        } else if (parsed.status == \"failure\") {\n                            Utilities.showToast(AppLabels.Your_payment_failed, 1500);\n                        } else if (parsed.status == \"pending\") {\n                            Utilities.showToast(AppLabels.Your_payment_pending, 1500);\n                        }\n                        WSManager.setFromFundsOnly(false);\n                        this.callOnlyAfterTransactions(contestData, FromConfirmPopupAddFunds, calledFrom, contestCoinData)\n                    }\n                }\n            }, 500);\n         }\n\n    callBuyCoinsApi(contestData, id) {\n        let param = {\n            \"package_id\": id\n        }\n        callBuyCoins(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                Utilities.showToast('You have successfully Buy Coins', 2000);\n            }\n            else {\n                Utilities.showToast(responseJson.global_error != \"\" ? responseJson.global_error : responseJson.message, 2000);\n            }\n            if (contestData != '') {\n                this.CallJoinGameApi(contestData)\n            }\n            else {\n                let mHist = parseInt(ls.get('back_history') || 0);\n                let newHistory = this.props.history.length;\n                let updatedHistory = (newHistory - mHist) + 3;\n                this.props.history.go(-updatedHistory)\n            }\n        })\n    }\n\n    goToBuyCoinsScreen() {\n        let mHist = parseInt(ls.get('back_history') || 0);\n        let newHistory = this.props.history.length;\n        let updatedHistory = (newHistory - mHist) + 2;\n        this.props.history.go(-updatedHistory)\n    }\n\n\n    componentDidMount = () => {\n        this.handelNativePayu()\n        this.checkIfCashfreeExist()\n        if (process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && (!WSManager.getProfile().master_state_id || !WSManager.getProfile().city)) {\n            this.setState({\n                showStateTagModal: true\n            })\n        }\n    }\n    handelNativePayu() {\n        window.addEventListener('message', (e) => {\n            if (e.data.action == 'payu' && e.data.type == 'Success') {\n                parsed['status'] = 'success'\n                this.checkTransactionFlow()\n            }\n            else if (e.data.action == 'payu' && e.data.type == 'Failed') {\n                parsed['status'] = 'failure'\n                if (parsed.status == \"failure\") {\n                    Utilities.showToast(AppLabels.Your_payment_failed, 1500);\n                }\n                // this.checkTransactionFlow()\n            }\n\n        });\n    }\n\n    onPaymentMethodSelect(method, type) {\n        this.setState({ paymentTypeSelected: '' })\n        switch (method) {\n            case 'payumoney':\n                this.PayumoneyDeposit();\n                break;\n            case 'paytm':\n                this.PayTmDeposit();\n                break;\n            case 'gocash':\n                this.GoCashDeposit();\n                break;\n            case 'ipay':\n                this.iPayDeposit();\n                break;\n            case 'paypal':\n                this.PayPalDeposit();\n                break;\n            case 'paystack':\n                this.PayStackDeposit();\n                break;\n            case 'razorpay':\n                this.RazorPayDeposit();\n                break;\n            case 'cashfree':\n                break;\n            default:\n                this.PayumoneyDeposit();\n                break;\n        }\n        WSManager.setFromFundsOnly(true);\n        WSManager.setIsFromPayment(true);\n\n    }\n    handelPaymentType = (type) => {\n        this.setState({ paymentTypeSelected: type })\n\n        if (type == PAYMENT_TYPE.WALLET) {\n            this.setState({ selectedNetBanking: '', selectedNBoption: '', selectedUPIoption: '', selectedUPI: '', cardNumber: '', nameOnCard: '', expiryDate: '', cvvNumber: '' })\n        }\n        else if (type == PAYMENT_TYPE.NET_BANKING) {\n            this.setState({ selectedWallet: '', selectedWalletOption: '', selectedUPIoption: '', selectedUPI: '', cardNumber: '', nameOnCard: '', expiryDate: '', cvvNumber: '' })\n\n        }\n        else if (type == PAYMENT_TYPE.UPI) {\n            this.setState({ selectedWallet: '', selectedWalletOption: '', selectedNetBanking: '', selectedNBoption: '', cardNumber: '', nameOnCard: '', expiryDate: '', cvvNumber: '' })\n\n        }\n        else if (type == PAYMENT_TYPE.CREDIT_DEBIT_CARD) {\n            this.setState({ selectedWallet: '', selectedWalletOption: '', selectedNetBanking: '', selectedNBoption: '', selectedUPIoption: '', selectedUPI: '' })\n\n        }\n\n    }\n\n    onMethodSelected(method) {\n        if (method == 'cashfree') {\n            return true;\n        }\n        else {\n            return false;\n        }\n\n    }\n\n    PayTmDeposit = () => {\n        let param = {\n            \"amount\": this.state.amount,\n            \"furl\": fUrl,\n            \"surl\": sUrl,\n            \"promo_code\": this.state.mPromoCode,\n            \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n        }\n        this.setState({ isLoading: true })\n        ls.set('back_history', this.props.history.length)\n        depositPaytmFund(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    PageContent: responseJson.data\n                })\n                var paytmForm = document.forms.paytmForm;\n                paytmForm.submit();\n            }\n            setTimeout(() => {\n                this.setState({ isLoading: false })\n            }, 500);\n        })\n    }\n\n    PayStackDeposit = () => {\n        let param = {\n            \"amount\": this.state.amount,\n            \"furl\": fUrl,\n            \"surl\": sUrl,\n            \"promo_code\": this.state.mPromoCode,\n            \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n        }\n        this.setState({ isLoading: true })\n        ls.set('back_history', this.props.history.length)\n        depositPayStackFund(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    PageContent: responseJson.data\n                })\n                var paystackForm = document.forms.paystackform;\n                paystackForm.submit();\n            }\n            this.setState({ posting: false, isLoading: false })\n        })\n    }\n\n    PayPalDeposit = () => {\n        let param = {\n            \"amount\": this.state.amount,\n            \"furl\": fUrl,\n            \"surl\": sUrl,\n            \"promo_code\": this.state.mPromoCode,\n            \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n        }\n        this.setState({ isLoading: true })\n        ls.set('back_history', this.props.history.length)\n        depositPayPalFund(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                window.location.href = responseJson.data.payment_link;\n            }\n            setTimeout(() => {\n                this.setState({ isLoading: false })\n            }, 500);\n        })\n    }\n\n\n    iPayDeposit = () => {\n        let param = {\n            \"amount\": this.state.amount,\n            \"furl\": fUrl,\n            \"surl\": sUrl,\n            \"promo_code\": this.state.mPromoCode,\n            \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n        }\n        this.setState({ isLoading: true })\n        ls.set('back_history', this.props.history.length)\n        depositIPAYFund(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    PageContent: responseJson.data\n                })\n                var ipayform = document.forms.ipayform;\n                ipayform.submit();\n            }\n            setTimeout(() => {\n                this.setState({ isLoading: false })\n            }, 500);\n        })\n    }\n\n    GoCashDeposit = (type) => {\n        WSManager.setFromFundsOnly(true);\n        WSManager.setIsFromPayment(true);\n        let param;\n        if (type == PAYMENT_TYPE.UPI) {\n            if (this.state.selectedUPI != '') {\n                param = {\n                    \"amount\": this.state.amount,\n                    \"furl\": fUrl,\n                    \"surl\": sUrl,\n                    \"paymentOption\": PAYMENT_TYPE.UPI,\n                    \"upiMode\": this.state.selectedUPI.upiMode,\n                    \"promo_code\": this.state.mPromoCode,\n                    \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n                }\n            }\n\n            else {\n                Utilities.showToast(\"Please select at least one paymenet option\", 1500);\n                return;\n            }\n\n        }\n        else if (type == PAYMENT_TYPE.CREDIT_DEBIT_CARD) {\n            if (this.state.cardNumber == '') {\n                Utilities.showToast(\"Please add card number\", 1500);\n                return;\n            }\n            else if (this.state.nameOnCard == '') {\n                Utilities.showToast(\"Please add card holder name\", 1500);\n                return;\n            }\n            else if (this.state.expiryDate == '') {\n                Utilities.showToast(\"Please add card expiry date\", 1500);\n                return;\n            }\n            else if (this.state.cvvNumber == '') {\n                Utilities.showToast(\"Please add card cvv number\", 1500);\n                return;\n            }\n            else {\n                param = {\n                    \"amount\": this.state.amount,\n                    \"furl\": fUrl,\n                    \"surl\": sUrl,\n                    \"paymentOption\": 'card',\n                    \"card_number\": this.state.cardNumber,\n                    \"card_holder\": this.state.nameOnCard,\n                    \"card_expiry\": this.state.expiryDate,\n                    \"card_cvv\": this.state.cvvNumber,\n                    \"promo_code\": this.state.mPromoCode,\n                    \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n                }\n            }\n        }\n        else {\n            if (this.state.selectedWallet != '' || this.state.selectedNetBanking != '') {\n                param = {\n                    \"amount\": this.state.amount,\n                    \"furl\": fUrl,\n                    \"surl\": sUrl,\n                    \"paymentOption\": type == PAYMENT_TYPE.WALLET ? type : type == PAYMENT_TYPE.NET_BANKING ? 'nb' : '',\n                    \"paymentCode\": type == PAYMENT_TYPE.WALLET ? this.state.selectedWallet.payment_code : type == PAYMENT_TYPE.NET_BANKING ? this.state.selectedNetBanking.payment_code : '',\n                    \"promo_code\": this.state.mPromoCode,\n                    \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n                }\n            }\n            else {\n                Utilities.showToast(\"Please select at least one paymenet option\", 1500);\n                return;\n            }\n\n        }\n        this.setState({ isLoading: true })\n        ls.set('back_history', this.props.history.length)\n        depositGocashFund(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    PageContent: responseJson.data\n                })\n                var gocash = document.forms.gocashform;\n                gocash.submit();\n                // if (window.ReactNativeWebView) {\n                //     let data = {\n                //         action: 'cashfree',\n                //         targetFunc: 'cashfree',\n                //         type: 'link',\n                //         url: responseJson.data.payment_link\n                //     }\n                //     window.ReactNativeWebView.postMessage(JSON.stringify(data));\n                // }\n                // else {\n                //     window.location.href = responseJson.data.payment_link;\n\n                // }\n            }\n            setTimeout(() => {\n                this.setState({ isLoading: false })\n            }, 500);\n        })\n    }\n\n\n    cardValidation =()=> {\n        if(this.state.cardNumber != '' &&  this.state.nameOnCard != '' && this.state.expiryDate !='' && this.state.cvvNumber != ''){\n            return true;\n        }\n        else{\n            return false;\n\n        }\n    }\n\n    PayumoneyDeposit = () => {\n        let param = {\n            \"amount\": this.state.amount,\n            \"furl\": fUrl,\n            \"surl\": sUrl,\n            \"purl\": pUrl,\n            \"promo_code\": this.state.mPromoCode,\n            \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\",\n            \"is_mobile\": window.ReactNativeWebView ? '1' : '0'\n\n        }\n        this.setState({ isLoading: true })\n        ls.set('back_history', this.props.history.length)\n        depositPayUmoneyFund(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                if (window.ReactNativeWebView) {\n                    let payuData = {\n                        action: 'payu',\n                        targetFunc: 'payu',\n                        data: responseJson.data,\n                    }\n                    window.ReactNativeWebView.postMessage(JSON.stringify(payuData));\n                }\n                else {\n                    this.setState({\n                        PageContent: responseJson.data\n                    })\n                    var payuForm = document.forms.payuForm;\n                    payuForm.submit();\n                }\n\n            }\n            setTimeout(() => {\n                this.setState({ isLoading: false })\n            }, 500);\n        })\n    }\n\n    RazorPayDeposit = () => {\n        const script = document.createElement(\"script\");\n        script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n        script.async = true;\n        document.body.appendChild(script);\n\n        let param = {\n            \"amount\": this.state.amount,\n            \"furl\": fUrl,\n            \"surl\": sUrl,\n            \"purl\": pUrl,\n            \"promo_code\": this.state.mPromoCode,\n            \"deal_id\": this.state.selectedDeal ? this.state.selectedDeal.deal_id : \"\"\n        }\n        this.setState({ isLoading: true })\n        ls.set('back_history', this.props.history.length)\n        depositRazorPayFund(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                var pg_data = responseJson.data;\n                var options = {\n                    \"key\": pg_data.key,\n                    \"amount\": pg_data.amount,\n                    \"name\": pg_data.site_name,\n                    \"description\": pg_data.amount,\n                    \"image\": pg_data.image,\n                    \"order_id\": pg_data.order_id,\n                    \"shopping_order_id\": pg_data.merchant_order_id,\n                    \"callback_url\": pg_data.action,\n                    \"redirect\": true,\n                    \"handler\": function (response) {\n                        console.log(response);\n                    },\n                    \"prefill\": {\n                        \"name\": pg_data.prefill.name,\n                        \"email\": pg_data.prefill.email,\n                        \"contact\": pg_data.prefill.contact\n                    },\n                    \"theme\": {\n                        \"color\": \"#15b8f3\" // screen color\n                    }\n                };\n                //console.log(\"xxxxxxxxx\",options);\n                var propay = new window.Razorpay(options);\n                propay.open();\n            }\n            setTimeout(() => {\n                this.setState({ isLoading: false })\n            }, 500);\n        })\n    }\n\n    callOnlyAfterTransactions(contestData, FromConfirmPopupAddFunds, calledFrom, contestCoinData) {\n\n        setTimeout(() => {\n\n            if (parsed.status == \"success\") {\n\n                if (FromConfirmPopupAddFunds == 'true') {\n                    if (calledFrom == \"SelectCaptainList\" || calledFrom == \"ContestListing\" || calledFrom == \"mycontest\") {\n                        if (SELECTED_GAMET == GameType.Tournament) {\n                            this.gotoContestListingClass(contestData.FixturedContestItem, contestData.lobbyDataItem)\n                        }\n                        else {\n                            this.CallJoinGameApi(contestData)\n                        }\n                    }\n                    else if (calledFrom == \"ContestJoinBuyCoins\") {\n                        this.callBuyCoinsApi(contestData, contestCoinData)\n                    }\n                    else {\n                        this.gotoContestListingClass(contestData.FixturedContestItem, contestData.lobbyDataItem)\n                    }\n                }\n                else if (calledFrom == 'BuyCoins') {\n                    this.goToBuyCoinsScreen(contestData)\n                }\n                else {\n                    let mHist = parseInt(ls.get('back_history') || 0);\n                    let newHistory = this.props.history.length;\n                    let updatedHistory = (newHistory - mHist) + 2;\n                    this.props.history.go(-updatedHistory)\n                }\n\n            }\n            else if (parsed.status == \"failure\" || parsed.status == \"pending\") {\n                if (FromConfirmPopupAddFunds == 'true') {\n                    if (calledFrom == \"SelectCaptainList\") {\n                        if (SELECTED_GAMET == GameType.Tournament) {\n                            this.gotoContestListingClass(contestData.FixturedContestItem, contestData.lobbyDataItem)\n                        }\n                        else {\n                            WSManager.setFromConfirmPopupAddFunds(false)\n                            this.props.history.replace({ pathname: '/' })\n                        }\n                    } else if (calledFrom == \"mycontest\") {\n                        this.seeMyContest()\n                    } else {\n\n                        this.gotoContestListingClass(contestData.FixturedContestItem, contestData.lobbyDataItem)\n                    }\n\n                } else {\n                    let mHist = parseInt(ls.get('back_history') || 0);\n                    let newHistory = this.props.history.length;\n                    let updatedHistory = (newHistory - mHist) + 2;\n                    this.props.history.go(-updatedHistory)\n                }\n            }\n        }, 1000)\n    }\n\n    CallJoinGameApi(dataFromConfirmPopUp) {\n        let param = {\n            \"contest_id\": dataFromConfirmPopUp.FixturedContestItem.contest_id,\n            \"lineup_master_id\": dataFromConfirmPopUp.selectedTeam.lineup_master_id ? dataFromConfirmPopUp.selectedTeam.lineup_master_id : dataFromConfirmPopUp.selectedTeam.value.lineup_master_id,\n            \"promo_code\": dataFromConfirmPopUp.promoCode,\n        }\n        this.setState({ isLoaderShow: true })\n        let IsNetworkContest = dataFromConfirmPopUp.FixturedContestItem.is_network_contest && dataFromConfirmPopUp.FixturedContestItem.is_network_contest == 1 ;\n        if(IsNetworkContest){\n            joinContestNetworkfantasy(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    setTimeout(() => {\n                        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestjoin');\n                        WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'contestjoindaily');\n                        this.ThankYouModalShow()\n                    }, 300);\n\n                    WSManager.setFromConfirmPopupAddFunds(false);\n                    WSManager.clearLineup();\n\n                }\n                else {\n                    var errorMsg = responseJson.message != '' ? responseJson.message : responseJson.global_error\n\n                    if (errorMsg == '') {\n                        for (var key in responseJson.error) {\n                            errorMsg = responseJson.error[key];\n                        }\n                    }\n                    else{\n                        var errorMsg = responseJson.message != '' ? responseJson.message : responseJson.global_error\n    \n                        if (errorMsg == '') {\n                            for (var key in responseJson.error) {\n                                errorMsg = responseJson.error[key];\n                            }\n                        }\n                        if (responseJson.response_code == WSC.sessionExpireCode) {\n                            this.logout();\n                        }\n                        Utilities.showToast(errorMsg, 3000);\n                        setTimeout(() => {\n                            let mHist = parseInt(ls.get('back_history') || 0);\n                            let newHistory = this.props.history.length;\n                            let updatedHistory = (newHistory - mHist) + 2;\n                            this.props.history.go(-updatedHistory)\n                        }, 500);\n                    }\n                       \n                }\n            })   \n        }\n        else{\n            joinContest(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    setTimeout(() => {\n                        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestjoin');\n                        WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'contestjoindaily');\n                        this.ThankYouModalShow()\n                    }, 300);\n    \n                    WSManager.setFromConfirmPopupAddFunds(false);\n                    WSManager.clearLineup();\n                } else {\n                    if (window.ReactNativeWebView && parsed.status == \"success\") {\n                        setTimeout(() => {\n                            WSManager.googleTrack(WSC.GA_PROFILE_ID, 'contestjoin');\n                            WSManager.googleTrackDaily(WSC.GA_PROFILE_ID, 'contestjoindaily');\n                            this.ThankYouModalShow()\n                        }, 300);\n        \n                        WSManager.setFromConfirmPopupAddFunds(false);\n                        WSManager.clearLineup();\n    \n                    }\n                    else{\n                        var errorMsg = responseJson.message != '' ? responseJson.message : responseJson.global_error\n    \n                        if (errorMsg == '') {\n                            for (var key in responseJson.error) {\n                                errorMsg = responseJson.error[key];\n                            }\n                        }\n                        if (responseJson.response_code == WSC.sessionExpireCode) {\n                            this.logout();\n                        }\n                        Utilities.showToast(errorMsg, 3000);\n                        setTimeout(() => {\n                            let mHist = parseInt(ls.get('back_history') || 0);\n                            let newHistory = this.props.history.length;\n                            let updatedHistory = (newHistory - mHist) + 2;\n                            this.props.history.go(-updatedHistory)\n                        }, 500);\n                    }\n                       \n                }\n            })\n        }\n        \n    }\n\n    gotoContestListingClass(data, lobbyItem) {\n        if (SELECTED_GAMET == GameType.Tournament) {\n            setTimeout(() => {\n                let mHist = parseInt(ls.get('back_history') || 0);\n                let newHistory = this.props.history.length;\n                let updatedHistory = (newHistory - mHist) + 2;\n                this.props.history.go(-updatedHistory)\n            }, 500);\n        }\n        else {\n            let dateformaturl = Utilities.getUtcToLocal(data.season_scheduled_date);\n            dateformaturl = new Date(dateformaturl);\n\n            let dateformaturlDate = (\"0\" + dateformaturl.getDate()).slice(-2)\n            let dateformaturlMonth = (\"0\" + (dateformaturl.getMonth() + 1)).slice(-2)\n\n            let home = data.home || lobbyItem.home;\n            let away = data.away || lobbyItem.away;\n\n            dateformaturl = dateformaturlDate + '-' + dateformaturlMonth + '-' + dateformaturl.getFullYear();\n            let contestListingPath = Utilities.getSelectedSportsForUrl().toLowerCase() + '/contest-listing/' + data.collection_master_id + '/' + home + \"-vs-\" + away + \"-\" + dateformaturl + \"?sgmty=\" + btoa(SELECTED_GAMET)\n            this.setState({ LobyyData: data });\n            this.props.history.push({ pathname: contestListingPath.toLowerCase(), state: { FixturedContest: this.state.FixtureData, LobyyData: lobbyItem, isFromPM: true } })\n        }\n    }\n\n    ThankYouModalShow = (data) => {\n        this.setState({\n            showThankYouModal: true,\n        });\n    }\n\n    ThankYouModalHide = () => {\n        this.setState({\n            showThankYouModal: false,\n        });\n    }\n\n\n    goToLobby = () => {\n        let contestData = WSManager.getContestFromAddFundsAndJoin()\n        let calledFrom = WSManager.getPaymentCalledFrom();\n\n        setTimeout(() => {\n            if (calledFrom == 'mycontest') {\n                this.props.history.push({ pathname: '/' });\n            } else {\n                this.gotoContestListingClass(contestData.FixturedContestItem, contestData.lobbyDataItem)\n            }\n        }, 500);\n    }\n\n    seeMyContest = () => {\n        this.props.history.push({ pathname: '/my-contests', state: { from: 'SelectCaptain' } });\n    }\n\n    hideStateTagModal = () => {\n        this.setState({\n            showStateTagModal: false,\n        });\n    }\n    checkIfCashfreeExist = () => {\n        var obj = Utilities.getMasterData().payment_methods;\n        if (Object.values(obj).indexOf('cashfree') > -1) {\n            this.setState({checkIfCashfreeExist:true})\n            this.getCashfreeDetails();\n        }\n    }\n\n    getCashfreeDetails() {\n        let param = {}\n        this.setState({ isLoaderShow: true })\n        getCashFreeGatewayList(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    walletList: responseJson.data.wallet_list,\n                    netBankingList: responseJson.data.bank_list\n                })\n                const wallet_list = [];\n                const nb_list = [];\n                const upi_list = [];\n\n\n                responseJson.data.wallet_list && responseJson.data.wallet_list.map((data, key) => {\n                    wallet_list.push({ value: data.payment_code, label: data.payment_option, type_code: data.type_code })\n                    return '';\n                })\n                responseJson.data.bank_list && responseJson.data.bank_list.map((data, key) => {\n                    nb_list.push({ value: data.payment_code, label: data.payment_option, type_code: data.type_code })\n                    return '';\n                })\n                this.state.upiList && this.state.upiList.map((data, key) => {\n                    upi_list.push({ value: data.upiMode, label: data.upiMode })\n                    return '';\n                })\n                this.setState({\n                    walletDropDownList: wallet_list,\n                    netBankingDropDownList: nb_list,\n                    upiDropDownList: upi_list\n                })\n            } else {\n                var errorMsg = responseJson.message != '' ? responseJson.message : responseJson.global_error\n\n                if (errorMsg == '') {\n                    for (var key in responseJson.error) {\n                        errorMsg = responseJson.error[key];\n                    }\n                }\n                if (responseJson.response_code == WSC.sessionExpireCode) {\n                    this.logout();\n                }\n                Utilities.showToast(errorMsg, 3000);\n\n            }\n        })\n    }\n    chashfreeBanking = (item, e, type) => {\n        e.stopPropagation()\n        if (type == PAYMENT_TYPE.WALLET) {\n            this.setState({ selectedWallet: item, selectedWalletOption: '' })\n        }\n        else if (type == PAYMENT_TYPE.NET_BANKING) {\n            this.setState({ selectedNetBanking: item, selectedNBoption: '' })\n\n        }\n        this.handelPaymentType(type)\n    }\n    handleWalletChange = (selectedOption) => {\n        this.setState({ selectedWalletOption: selectedOption }, () => {\n            let selectWalletData = {}\n            this.state.walletList && this.state.walletList.map((item, index) => {\n                if (selectedOption.value == item.payment_code) {\n                    selectWalletData = item;\n                }\n            })\n            this.setState({ selectedWallet: selectWalletData })\n        });\n        this.handelPaymentType(PAYMENT_TYPE.WALLET)\n\n    }\n    handleNetBankingChange = (selectedOption) => {\n        this.setState({ selectedNBoption: selectedOption }, () => {\n            let selectNbData = {}\n            this.state.netBankingList && this.state.netBankingList.map((item, index) => {\n                if (selectedOption.value == item.payment_code) {\n                    selectNbData = item;\n                }\n            })\n            this.setState({ selectedNetBanking: selectNbData })\n        });\n        this.handelPaymentType(PAYMENT_TYPE.NET_BANKING)\n\n    }\n    handleUpiChange = (selectedOption) => {\n        this.setState({ selectedUPIoption: selectedOption }, () => {\n            let selectUPIData = {}\n            this.state.upiList && this.state.upiList.map((item, index) => {\n                if (selectedOption.value == item.upiMode) {\n                    selectUPIData = item;\n                }\n            })\n            this.setState({ selectedUPI: selectUPIData })\n        });\n        this.handelPaymentType(PAYMENT_TYPE.UPI)\n    }\n\n    handleChangeCardNumber = (e) => {\n        this.setState({ cardNumber: e.target.value })\n\n    }\n    handleChangeName = (e) => {\n        this.setState({ nameOnCard: e.target.value })\n    }\n    handleChangeExpiryDate = (e) => {\n        this.setState({ expiryDate: e.target.value })\n    }\n    handleChangeCvv = (e) => {\n        this.setState({ cvvNumber: e.target.value })\n    }\n\n    renderWalletView = () => {\n        return (\n            <div>\n                <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.wallet, PAYMENT_TYPE.WALLET)} className=\"item-view\">\n                    <div className={\"btn-expand-action\"}>\n                        {/* <div className={\"view-items\"+ (this.state.paymentTypeSelected == PAYMENT_TYPE.WALLET ? ' active-border' : ' ')}>\n                            <i className={\"icon-plus\" + (this.state.paymentTypeSelected == PAYMENT_TYPE.WALLET ? ' active' : ' not-active')}></i>\n                        </div> */}\n                        <div className={\"title-payment\" + (this.state.selectedWallet ? ' selected': '')  }>{AppLabels.PAYTM_WALLET}</div>\n\n                    </div>\n                    {/* <img src={Images.GROUP_WALLET} alt=\"\" /> */}\n\n                </div>\n                {\n                    (this.state.walletList && this.state.walletList.length > 0) &&\n                    <div style={{ marginTop: 15 }}>\n                     <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-evenly'}}>\n \n                        {\n                            this.state.walletList.slice(0, 3).map((item, index) => {\n                                return (\n\n                                    <div onClick={(e) =>\n                                        this.chashfreeBanking(item, e, PAYMENT_TYPE.WALLET)\n                                    }\n                                        className={\"wallet-box\" + (this.state.selectedWallet.payment_code == item.payment_code ? ' selected' : '')}>\n                                        {/* <div className=\"title-wallet\">{item.payment_option}</div> */}\n                                        {\n                                            item.payment_code == \"4007\" ?\n                                                <img src={Images.PAYTM_IMG} alt=\"\" />\n                                                : item.payment_code == \"4008\" ?\n                                                    <img style={{width:65,marginTop:5}} src={Images.AMAZON_PAY} alt=\"\" />\n                                                    : item.payment_code == \"4009\" ?\n                                                        <img src={Images.PHONE_PAY} alt=\"\" />\n                                                        : ''\n\n\n                                        }\n                                    </div>\n                                )\n                            })\n                        }\n                     </div>\n\n                        <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                            <Row style={{ marginTop: 20 }}>\n                                <Col style={{ zIndex: 100 }} xs={12}>\n                                    <FormGroup className=\"input-label-center zIndex1000 input-transparent\"\n                                        controlId=\"formBasicText\">\n                                        <Select\n                                            className='select-field-transparent'\n                                            classNamePrefix='select'\n                                            id=\"select-country\"\n                                            arrowRenderer={this.arrowRenderer}\n                                            onChange={this.handleWalletChange}\n                                            options={this.state.walletDropDownList}\n                                            value={this.state.selectedWalletOption}\n                                            placeholder={'Select Other Wallet'}\n\n                                            theme={(theme) => ({\n                                                ...theme,\n                                                borderRadius: 0,\n                                                colors: {\n                                                    ...theme.colors,\n                                                    primary: '#013D79',\n                                                },\n                                            })}\n                                        >\n                                        </Select>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                        {/* <div onClick={() => this.GoCashDeposit(PAYMENT_TYPE.WALLET)} className={\"paynow-btn\" +(this.state.selectedWallet != '' ? ' active-pay-now': ' disable-pay-now' )  }>\n                            <div className=\"title-pay-now\">{\"PAY NOW!\"}</div>\n                        </div> */}\n\n                    </div>\n\n\n                }\n\n            </div>\n        )\n    }\n\n    renderNBView = () => {\n        return (\n            <div>\n                <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.net_banking, PAYMENT_TYPE.NET_BANKING)} className=\"item-view\">\n                    <div className={\"btn-expand-action\"}>\n                    {/* <div className={\"view-items\"+ (this.state.paymentTypeSelected == PAYMENT_TYPE.NET_BANKING ? ' active-border' : ' ')}>\n                            <i className={\"icon-plus\" + (this.state.paymentTypeSelected == PAYMENT_TYPE.NET_BANKING ? ' active' : ' not-active')}></i>\n                        </div> */}\n                        <div className={\"title-payment\" + (this.state.selectedNetBanking ? ' selected': '')  }>{AppLabels.NET_BANKING}</div>\n\n                    </div>\n                    {/* <img src={Images.NET_BANKING} alt=\"\" /> */}\n\n                </div>\n                {\n                    (this.state.netBankingList && this.state.netBankingList.length > 0) &&\n                    <div style={{ marginTop: 15 }}>\n                        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginLeft: 5 }}>\n                            {\n                                this.state.netBankingList.slice(0, 5).map((item, index) => {\n                                    return (\n                                        <div className=\"nb-view\">\n                                            <div onClick={(e) =>\n                                                this.chashfreeBanking(item, e, PAYMENT_TYPE.NET_BANKING)\n                                            }\n                                                className={\"net-banking\" + (this.state.selectedNetBanking.payment_code == item.payment_code ? ' selected' : '')}>\n                                                {\n                                                    item.payment_code == \"3003\" ?\n                                                        <img className=\"bank-logo\" src={Images.AXIS} alt=\"\" />\n                                                        : item.payment_code == \"3032\" ?\n                                                            <img className=\"bank-logo\" src={Images.KOTAK} alt=\"\" />\n                                                            : item.payment_code == \"3021\" ?\n                                                                <img className=\"bank-logo\" src={Images.HDFC} alt=\"\" />\n                                                                : item.payment_code == \"3044\" ?\n                                                                    <img className=\"bank-logo\" src={Images.SBI} alt=\"\" />\n                                                                    : item.payment_code == \"3022\" ?\n                                                                        <img className=\"bank-logo\" src={Images.ICIC} alt=\"\" /> : ''\n\n\n                                                }\n                                            </div>\n                                            {\n                                                <div className=\"title-nb\">\n                                                    {item.payment_code == \"3003\" ? \"AXIS\" : item.payment_code == \"3032\" ? \"KOTAK\" : item.payment_code == \"3021\" ? \"HDFC\" : item.payment_code == \"3044\" ? \"SBI\" : item.payment_code == \"3022\" ? \"ICICI\" : item.payment_option}\n\n                                                </div>\n\n                                            }\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                        <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                            <Row style={{ marginTop: 20 }}>\n                                <Col style={{ zIndex: 0 }} xs={12}>\n                                    <FormGroup className=\"input-label-center zIndex1000 input-transparent\"\n                                        controlId=\"formBasicText\">\n                                        <Select\n                                            className='select-field-transparent'\n                                            classNamePrefix='select'\n                                            id=\"select-country\"\n                                            arrowRenderer={this.arrowRenderer}\n                                            onChange={this.handleNetBankingChange}\n                                            options={this.state.netBankingDropDownList}\n                                            value={this.state.selectedNBoption}\n                                            placeholder={'Select From Other Bank'}\n\n                                            theme={(theme) => ({\n                                                ...theme,\n                                                borderRadius: 0,\n                                                colors: {\n                                                    ...theme.colors,\n                                                    primary: '#013D79',\n                                                },\n                                            })}\n                                        >\n                                        </Select>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                        {/* <div onClick={() => this.GoCashDeposit(PAYMENT_TYPE.NET_BANKING)} className={\"paynow-btn\" +(this.state.selectedNetBanking != '' ? ' active-pay-now': ' disable-pay-now' )  }>\n                            <div className=\"title-pay-now\">{\"PAY NOW!\"}</div>\n\n                        </div> */}\n\n                    </div>\n\n\n                }\n\n            </div>\n        )\n    }\n\n    renderCreditView = () => {\n        return (\n            <div>\n                <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.credit_debit_card, PAYMENT_TYPE.CREDIT_DEBIT_CARD)} className=\"item-view\">\n                    <div className={\"btn-expand-action\"}>\n                    <div className={\"view-items\"+ (this.state.paymentTypeSelected == PAYMENT_TYPE.CREDIT_DEBIT_CARD ? ' active-border' : ' ')}>\n                            <i className={\"icon-plus\" + (this.state.paymentTypeSelected == PAYMENT_TYPE.CREDIT_DEBIT_CARD ? ' active' : ' not-active')}></i>\n                        </div>\n                        <div className=\"title-payment\">{AppLabels.CREDIT_DEBIT_CARD}</div>\n\n                    </div>\n                    <img src={Images.CREDIT_IMG} alt=\"\" />\n\n                </div>\n\n                {\n                    this.state.paymentTypeSelected == PAYMENT_TYPE.CREDIT_DEBIT_CARD &&\n                    <div style={{ marginTop: 20 }} >\n\n                        <Row>\n                            <Col xs={12} className=\"input-label-spacing\">\n                                <FormGroup\n                                    className=\"input-label-center input-transparent\"\n                                    controlId=\"formBasicText\"\n                                >\n                                    <FloatingLabel\n                                        autoComplete='off'\n                                        styles={inputStyleLeft}\n                                        id='cardNumber'\n                                        name='cardNumber'\n                                        value={this.state.cardNumber}\n                                        placeholder='Card Number'\n                                        type='number'\n                                        maxLength={16}\n                                        onChange={this.handleChangeCardNumber}\n\n                                    // onChange={this.onProfileDataChanged}\n                                    // disabled={userProfile.is_profile_complete == 1 ? true : false}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col xs={12} className=\"input-label-spacing\">\n                                <FormGroup\n                                    className=\"input-label-center input-transparent\"\n                                    controlId=\"formBasicText\"\n                                >\n                                    <FloatingLabel\n                                        autoComplete='off'\n                                        styles={inputStyleLeft}\n                                        id='nameOnCard'\n                                        name='nameOnCard'\n                                        value={this.state.nameOnCard}\n                                        placeholder='Name on Card'\n                                        type='text'\n                                        onChange={this.handleChangeName}\n                                        \n\n                                    // onChange={this.onProfileDataChanged}\n                                    // disabled={userProfile.is_profile_complete == 1 ? true : false}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <label className=\"label-expiry-date\">{\"Expiry Date\"}</label>\n\n                        <Row>\n                            <Col xs={6}>\n                                <FormGroup style={{marginRight:5}}\n                                    className=\"input-label-center input-transparent\"\n                                    controlId=\"formBasicText\">\n\n                                    <FloatingLabel\n                                        autoComplete='off'\n                                        styles={inputStyleLeft}\n                                        id='expiryDate'\n                                        name='expiryDate'\n                                        value={this.state.expiryDate}\n                                        placeholder='MM / YYYY'\n                                        type='number'\n                                        maxLength={4}\n                                        onChange={this.handleChangeExpiryDate}\n\n                                    // onChange={this.onProfileDataChanged}\n                                    // disabled={userProfile.is_profile_complete == 1 ? true : false}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col xs={6}>\n                                <FormGroup style={{marginLeft:5}}\n                                    className=\"input-label-center input-transparent\"\n                                    controlId=\"formBasicText\"\n                                >\n                                      <FloatingLabel\n                                        autoComplete='off'\n                                        maxLength={3}\n                                        styles={inputStyleLeft}\n                                        id='cvvNumber'\n                                        name='cvvNumber'\n                                        value={this.state.cvvNumber}\n                                        placeholder='CVV'\n                                        type='number'\n                                        onChange={this.handleChangeCvv}\n                                        \n\n                                    // onChange={this.onProfileDataChanged}\n                                    // disabled={userProfile.is_profile_complete == 1 ? true : false}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        {/* <div onClick={() => this.GoCashDeposit(PAYMENT_TYPE.CREDIT_DEBIT_CARD)} className={\"paynow-btn\" +(this.cardValidation() ? ' active-pay-now': ' disable-pay-now' )  }>\n                            <div className=\"title-pay-now\">{\"PAY NOW!\"}</div>\n\n                        </div> */}\n                    </div>\n\n                }\n\n            </div>\n        )\n    }\n\n    renderUpiMode = () => {\n        return (\n            <div>\n                <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.upi, PAYMENT_TYPE.UPI)} className=\"item-view\">\n                    <div className={\"btn-expand-action\"}>\n                    {/* <div className={\"view-items\"+ (this.state.paymentTypeSelected == PAYMENT_TYPE.UPI ? ' active-border' : ' ')}>\n                            <i className={\"icon-plus\" + (this.state.paymentTypeSelected == PAYMENT_TYPE.UPI ? ' active' : ' not-active')}></i>\n                        </div> */}\n                        <div className={\"title-payment\" + (this.state.selectedUPI ? ' selected': '')  }>{AppLabels.UPI}</div>\n\n                    </div>\n                    {/* <img src={Images.UPI} alt=\"\" /> */}\n\n                </div>\n\n                {\n                    \n                    <div>\n                        <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                            <Row style={{ marginTop: 20 }}>\n                                <Col style={{ zIndex: 99 }} xs={12}>\n                                    <FormGroup className=\"input-label-center zIndex1000 input-transparent\"\n                                        controlId=\"formBasicText\">\n                                        <Select\n                                            className='select-field-transparent'\n                                            classNamePrefix='select'\n                                            id=\"select-country\"\n                                            arrowRenderer={this.arrowRenderer}\n                                            onChange={this.handleUpiChange}\n                                            options={this.state.upiDropDownList}\n                                            value={this.state.selectedUPIoption}\n                                            placeholder={'Select Upi'}\n\n                                            theme={(theme) => ({\n                                                ...theme,\n                                                borderRadius: 0,\n                                                colors: {\n                                                    ...theme.colors,\n                                                    primary: '#013D79',\n                                                },\n                                            })}\n                                        >\n                                        </Select>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                        {/* <div onClick={() => this.GoCashDeposit(PAYMENT_TYPE.UPI)} className={\"paynow-btn\" +(this.state.selectedUPI != '' ? ' active-pay-now': ' disable-pay-now' )  }>\n                            <div className=\"title-pay-now\">{\"PAY NOW!\"}</div>\n\n                        </div> */}\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            title: AppLabels.SELECT_PAYMENT_METHOD,\n            hideShadow: true\n        }\n        const { amount, PageContent, showThankYouModal, showStateTagModal } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed trans-web-container\">\n                        <div className='hide'>{ReactHtmlParser(PageContent)}</div>\n                        {\n                            this.state.isLoading && <CustomLoader />\n                        }\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.transactions.title}</title>\n                            <meta name=\"description\" content={MetaData.transactions.description} />\n                            <meta name=\"keywords\" content={MetaData.transactions.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <Row>\n                            <Col sm={12}>\n                                <div className=\"payable-amt\">\n                                    {AppLabels.TO_PAY} \n                                    <div>\n                                     <i className=\"font-style-normal\">{Utilities.getMasterData().currency_code}</i>\n                                     <span>{amount}</span>\n                                    </div>\n                                    \n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col sm={12}>\n                                <div className={\"payment-section-wrap\"} >\n                                    {Utilities.getMasterData().payment_methods.credit_debit_card &&\n                                        <div\n                                            className={\"payment-selection\" + (this.onMethodSelected(Utilities.getMasterData().payment_methods.credit_debit_card) ? (' cashfree-view-wallet' + (this.state.paymentTypeSelected == PAYMENT_TYPE.CREDIT_DEBIT_CARD ? ' height-expand' : '')) : '')}>\n\n                                            {\n                                                this.onMethodSelected(Utilities.getMasterData().payment_methods.credit_debit_card)\n                                                    ?\n                                                    this.renderCreditView()\n\n                                                    :\n                                                    <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.credit_debit_card, PAYMENT_TYPE.CREDIT_DEBIT_CARD)} >\n                                                        {AppLabels.CREDIT_DEBIT_CARD}\n                                                        <img src={Images.CREDIT_IMG} alt=\"\" />\n                                                    </div>\n\n                                            }\n                                        </div>\n                                    }\n                                    {Utilities.getMasterData().payment_methods.wallet &&\n                                        <div\n                                            className={\"payment-selection\"+ (this.state.selectedWallet != '' ? ' payment-selection-border' :'') + (this.onMethodSelected(Utilities.getMasterData().payment_methods.wallet) ? ' cashfree-view-wallet height-expand'   : '')}>\n                                            {\n                                                this.onMethodSelected(Utilities.getMasterData().payment_methods.wallet)\n                                                    ?\n                                                    this.renderWalletView()\n                                                    :\n                                                    <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.wallet, PAYMENT_TYPE.WALLET)} >\n                                                        {AppLabels.PAYTM_WALLET}\n                                                        <img src={Images.PAYTM_IMG} alt=\"\" />\n                                                    </div>\n\n                                            }\n\n                                        </div>\n                                    }\n                                    {Utilities.getMasterData().payment_methods.upi &&\n                                        <div className={\"payment-selection\" + (this.state.selectedUPI != '' ? ' payment-selection-border' :'') + (this.onMethodSelected(Utilities.getMasterData().payment_methods.upi) ? ' cashfree-view-wallet height-expand'  : '')}>\n                                            {\n                                                this.onMethodSelected(Utilities.getMasterData().payment_methods.upi)\n                                                    ?\n                                                    this.renderUpiMode()\n                                                    :\n                                                    <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.upi, PAYMENT_TYPE.UPI)} >\n                                                        {AppLabels.UPI}\n                                                        <img src={Images.UPI} alt=\"\" />\n                                                    </div>\n\n                                            }\n\n                                        </div>\n                                    }\n\n                                    {Utilities.getMasterData().payment_methods.net_banking &&\n                                        // <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.net_banking, PAYMENT_TYPE.NET_BANKING)} className=\"payment-selection\">\n                                        //     {AppLabels.NET_BANKING}\n                                        // </div>\n                                        <div\n                                            className={\"payment-selection\" +(this.state.selectedNetBanking != '' ? ' payment-selection-border' :'') + (this.onMethodSelected(Utilities.getMasterData().payment_methods.net_banking) ? ' cashfree-view-wallet height-expand' : '')}>\n                                            {\n                                                this.onMethodSelected(Utilities.getMasterData().payment_methods.net_banking)\n                                                    ?\n                                                    this.renderNBView()\n                                                    :\n                                                    <div onClick={() => this.onPaymentMethodSelect(Utilities.getMasterData().payment_methods.net_banking, PAYMENT_TYPE.NET_BANKING)} >\n                                                        {AppLabels.NET_BANKING}\n                                                    </div>\n\n                                            }\n\n                                        </div>\n                                    }\n\n                                </div>\n                            </Col>\n                        </Row>\n                        {showThankYouModal &&\n                            <Thankyou ThankyouModalShow={this.ThankYouModalShow} ThankYouModalHide={this.ThankYouModalHide} goToLobbyClickEvent={this.goToLobby} seeMyContestEvent={this.seeMyContest} />\n                        }\n                        {\n                            showStateTagModal &&\n                            <EditStateAndCityModal\n                                {...this.props}\n                                mShow={showStateTagModal}\n                                mHide={this.hideStateTagModal}\n                            />\n                        }\n\n                       \n                        {\n                             this.state.checkIfCashfreeExist &&\n                            <Button disabled={!this.state.paymentTypeSelected} onClick={() => this.GoCashDeposit(this.state.paymentTypeSelected)} className=\"btn-block btn-primary bottom\">{\"PAY NOW!\"}</Button>\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/Finance/Withdraw.jsx",["4351","4352","4353","4354","4355","4356","4357"],"import React from 'react';\nimport { FormGroup, ControlLabel, FormControl } from 'react-bootstrap';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport { withdrawAmount } from \"../../WSHelper/WSCallings\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport CustomHeader from '../../components/CustomHeader';\nimport { Utilities } from '../../Utilities/Utilities';\nimport ls from 'local-storage';\nimport { MomentDateComponent } from '../CustomComponent';\nimport EditStateAndCityModal from '../../Modals/EditStateAndCityModal';\n\n\nexport default class Withdraw extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mAmount: '',\n            mAmountError: '',\n            mAmountValid: '',\n            winningAmt: ls.get('userBalance'),\n            profileDetail: WSManager.getProfile(),\n            minWithdrawAmount: Utilities.getMasterData() ? parseFloat(Utilities.getMasterData().min_withdrawal_amount || 0) : '',\n            maxWithdrawAmount: Utilities.getMasterData() ? parseFloat(Utilities.getMasterData().max_withdrawal_amount || 0) : '',\n            withdrawPendingData: '',\n            allow_withdraw: '',\n            showStateTagModal: false,\n            isLoading:false\n        }\n\n    }\n\n    componentWillMount() {\n        if (!this.props.location.state || !this.props.location.state.isFromWallet) {\n            this.props.history.replace({ pathname: '/my-wallet' });\n        } else {\n            this.setState({ withdrawPendingData: this.props.location.state.withdrawStatus, allow_withdraw: this.props.location.state.allow_withdraw })\n        }\n    }\n\n    componentDidMount = () => {\n        if(process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && (!WSManager.getProfile().master_state_id || !WSManager.getProfile().city)){\n            this.setState({\n                showStateTagModal: true\n            })\n        }\n    }\n\n    onAmountChange = (e) => {\n        this.setState({ mAmount: e.target.value })\n        this.validateField(e.target.id, e.target.value)\n    }\n\n    validateField = (fieldName, value) => {\n        let { minWithdrawAmount, winningAmt, maxWithdrawAmount } = this.state;\n        let winAmount = parseFloat(winningAmt.winning_amount || 0)\n        var mAmountValid = value >= minWithdrawAmount && value <= winAmount;\n        if (maxWithdrawAmount > 0) {\n            mAmountValid = mAmountValid && value <= maxWithdrawAmount\n        }\n        let mAmountError = mAmountValid ? '' : ' ' + AppLabels.is_invalid;\n\n        this.setState({\n            mAmountError: mAmountError,\n            mAmountValid: mAmountValid,\n        }, this.validateForm(false));\n    }\n\n    validateForm = (submit) => {\n\n        const { mAmountValid } = this.state;\n\n        this.setState({\n            formValid: mAmountValid\n        }, () => {\n            if (submit) {\n                this.callWithrawBalanceApi();\n            }\n        });\n    }\n\n    validateOnSubmit = () => {\n\n        let { mAmount, minWithdrawAmount, winningAmt, maxWithdrawAmount } = this.state;\n        if (mAmount == '' || mAmount == 0) {\n            Utilities.showToast(AppLabels.PLEASE_ENTER_AMOUNT, 2000);\n        } else {\n            let winAmount = parseFloat(winningAmt.winning_amount || 0)\n            var mAmountValid = mAmount >= minWithdrawAmount && mAmount <= winAmount;\n            if (maxWithdrawAmount > 0) {\n                mAmountValid = mAmountValid && mAmount <= maxWithdrawAmount\n            }\n            let mAmountError = mAmountValid ? '' : ' ' + AppLabels.is_invalid;\n            if(winAmount == 0 || winAmount < mAmount){\n                Utilities.showToast(AppLabels.SUFFICIENT_WINNING, 3000);\n            }else if (mAmount !== '' && !mAmountValid) {\n                let msg = AppLabels.MIN_WITHDRAW_LIMIT + this.state.minWithdrawAmount + (this.state.maxWithdrawAmount ? (AppLabels.MAX_WITHDRAW_LIMIT + Utilities.getMasterData().currency_code + this.state.maxWithdrawAmount) : \"\")\n                Utilities.showToast(msg, 3000);\n            }\n\n            this.setState({\n                mAmountError: mAmountError,\n                mAmountValid: mAmountValid,\n            }, this.validateForm(mAmountValid));\n        }\n    }\n\n    errorClass(error) {\n        if (error) {\n            return (error.length == 0 ? '' : 'has-error');\n        }\n    }\n\n    callWithrawBalanceApi() {\n        this.setState({\n            isLoading: true\n        })\n        let param = {\n            \"amount\": this.state.mAmount,\n        }\n\n        withdrawAmount(param).then((responseJson) => {\n            setTimeout(() => {\n                this.setState({\n                    isLoading: false\n                })\n            }, 50);\n            if (responseJson.response_code == WSC.successCode) {\n                Utilities.showToast(responseJson.message, 3000);\n                this.props.history.replace({ pathname: '/my-wallet' })\n            }\n        })\n    }\n\n    hideStateTagModal = () => {\n        this.setState({\n            showStateTagModal: false,\n        });\n    }\n\n    render() {\n        const {\n            profileDetail, winningAmt, withdrawPendingData, allow_withdraw, showStateTagModal, isLoading\n        } = this.state;\n\n        const HeaderOption = {\n            back: true,\n            notification: false,\n            title: AppLabels.WITHDRAW,\n            fromAddFund: true,\n            hideShadow: true\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed withdraw-page-wapper white-bg\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.addfunds.title}</title>\n                            <meta name=\"description\" content={MetaData.addfunds.description} />\n                            <meta name=\"keywords\" content={MetaData.addfunds.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className={\"withdraw-header header-with-circle\" + (allow_withdraw !== 0 ? '': ' pending-section')}>\n                            {allow_withdraw !== 0 ?\n                                <React.Fragment>\n                                    <div className=\"total-winning-section\">\n                                        <div className=\"display-table-cell winning-text-section\">\n                                            <i className=\"icon-badge\"></i>\n                                            <h2>{AppLabels.TOTAL_WINNINGS}</h2>\n                                            <p>{AppLabels.YOU_CAN_WITHDRAW_ONLY_FROM_WINNING}</p>\n                                        </div>\n                                        <div className=\"display-table-cell winning-amount text-right\">\n                                            {Utilities.getMasterData().currency_code} {winningAmt.winning_amount}\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                                :\n                                <React.Fragment>\n                                    <div className=\"total-winning-section pending-section\">\n                                        <div className=\"display-table-cell winning-text-section pl-0\">\n                                            <h2 className=\"text-capitalize\">{AppLabels.PENDING_AMOUNT}</h2>\n                                            <p><MomentDateComponent data={{ date: withdrawPendingData.date_added, format: \"MMM DD - hh:mm a \" }} /></p>\n                                        </div>\n                                        <div className=\"display-table-cell winning-amount text-right\">\n                                            {Utilities.getMasterData().currency_code} {withdrawPendingData.winning_amount}\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            }\n                            {allow_withdraw !== 0 ?\n                                <div>\n                                    <FormGroup\n                                        // controlId=\"formBasicText\"\n                                        className={'input-label-center input-transparent font-14 ' + (`${this.errorClass(this.state.mAmountError)}`)}\n                                    >\n                                        <ControlLabel>{AppLabels.ADD_AMOUNT}</ControlLabel>\n                                        <FormControl\n                                            id='amount'\n                                            name='amount'\n                                            placeholder={AppLabels.AMOUNT}\n                                            type='number'\n                                            onChange={this.onAmountChange}\n                                        />\n                                    </FormGroup>\n                                </div>\n                                :\n                                <div className=\"withdrawal-status\">\n                                    {AppLabels.YOUR_WITHDRAWAL_REQUEST_IS_PENDING}\n                                </div>\n                            }\n                        </div>\n                        <div className=\"withdraw-body\">\n                            {allow_withdraw !== 0 &&\n                                <div className=\"min-withdraw-text\">{AppLabels.MIN_WITHDRAW_LIMIT}{this.state.minWithdrawAmount}{this.state.maxWithdrawAmount ?  (AppLabels.MAX_WITHDRAW_LIMIT + Utilities.getMasterData().currency_code + this.state.maxWithdrawAmount) : \"\"}</div>\n                            }\n                            <div className=\"withdraw-acc-detail\">\n                                <div className=\"heading\">{AppLabels.YOUR_WITHDRAWAL_AMOUNT_WILL_BE_CREDITED_TO_THIS_ACCOUNT}</div>\n                                <div className=\"detail-for\">{AppLabels.FULL_NAME_AS_BANK}</div>\n                                <div className=\"detail-value\">{profileDetail.user_bank_detail.first_name + ' ' + profileDetail.user_bank_detail.last_name} </div>\n                                <div className=\"detail-for\">{AppLabels.BANK_NAME}</div>\n                                <div className=\"detail-value\">{profileDetail.user_bank_detail.bank_name}</div>\n                                <div className=\"detail-for\">{AppLabels.ACCOUNT_NUMBER}</div>\n                                <div className=\"detail-value\">{profileDetail.user_bank_detail.ac_number}</div>\n                                {\n                                    Utilities.getMasterData().int_version != 1 && <>\n                                        <div className=\"detail-for\">{AppLabels.IFSC_CODE}</div>\n                                        <div className=\"detail-value\">{profileDetail.user_bank_detail.ifsc_code}</div>\n                                    </>\n                                }\n                            </div>\n                            {allow_withdraw !== 0 ?\n                                <div className=\"text-center\">\n                                    <a href className={\"button button-primary-rounded button-block\" + (isLoading ? ' disabled' : '')} onClick={() => this.validateOnSubmit()}>{AppLabels.WITHDRAW}</a>\n                                </div>\n                                :\n                                <div className=\"text-center withdraw-help-text\">{AppLabels.RAISE_ANOTHER_WITHDRAWAL_REQUEST}</div>\n                            }\n                        </div>\n                        {\n                            showStateTagModal &&\n                            <EditStateAndCityModal\n                                {...this.props}\n                                mShow={showStateTagModal}\n                                mHide={this.hideStateTagModal}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/StaticPages/Footer.jsx",[],"/var/www/html/framework/frontend/src/Component/StaticPages/HowItWorks.jsx",[],"/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/PickMobileNo.jsx",["4358","4359","4360","4361"],"import React from 'react';\nimport { Row, Col, FormGroup } from 'react-bootstrap';\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport Validation from '../../../helper/Validation';\nimport PhoneInput, { isValidPhoneNumber } from 'react-phone-number-input'\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport { userLogin, updateSignupData } from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport CustomHeader from '../../../components/CustomHeader';\nimport { DEFAULT_COUNTRY_CODE, DEFAULT_COUNTRY } from '../../../helper/Constants';\nimport { ReCaptcha } from 'react-recaptcha-v3'\n\nexport default class PickMobileNo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            phone: '',\n            code: DEFAULT_COUNTRY_CODE,\n            formValid: false,\n            posting: false,\n            captchaToken: '',\n\n        };\n    }\n\n\n    onCaptchaChange = (value) => {\n        this.setState({\n            captchaToken: value\n        })\n    }\n\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n    validateForm() {\n        this.setState({ formValid: Validation.validate('phone', this.state.phone) == 'success' });\n    }\n    refreshPage() {\n        window.location.reload();\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.posting) {\n            this.setState({ posting: true });\n            let phone_code_str = \"+\" + this.state.code;\n            let phone_no_str = this.state.phone;\n            let phone_no = phone_no_str.replace(phone_code_str, \"\");\n            let param = {\n                \"step\": 'mobile',\n                \"phone_no\": phone_no,\n                \"phone_code\": this.state.code,\n                \"device_type\": WSC.deviceType,\n                \"device_id\": WSC.deviceID,\n            }\n            if (process.env.REACT_APP_CAPTCHA_ENABLE == 1) {\n                param['token'] = this.state.captchaToken;\n            }\n            const { nextStep } = this.props.location.state.nextStepData;\n\n            if (nextStep && nextStep === 'phone') {\n                userLogin(param).then((responseJson) => {\n                    this.setState({ posting: false });\n                    if (responseJson.response_code === WSC.successCode) {\n                        this.gotoDetails(responseJson.data);\n                    }\n                })\n            } else {\n                updateSignupData(param).then((responseJson) => {\n                    this.setState({ posting: false });\n                    if (responseJson.response_code === WSC.successCode) {\n                        this.gotoDetails(responseJson.data);\n                    }\n                })\n            }\n        }\n    }\n\n    gotoDetails = (data) => {\n\n\n        if (this.props.location.state.nextStepData.data && this.props.location.state.nextStepData.data.next_step == 'phone') {\n            let nextStepData = { data: data, facebook_data: this.props.location.state.nextStepData.facebook_data, google_data: this.props.location.state.nextStepData.google_data };\n            this.props.history.push({ pathname: '/verify', state: { nextStepData: nextStepData } })\n        }\n        else {\n            WSManager.setToken(WSManager.getTempToken('id_temp_token'));\n            if (this.props.location.state.nextStepData.FixturedContest) {\n                let nextStepData = { FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath };\n                this.props.history.replace({ pathname: this.props.location.state.nextStepData.lineupPath, state: { nextStepData: nextStepData } })\n            }\n            else {\n                this.props.history.replace('/lobby')\n            }\n        }\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            filter: false,\n            title: \"\",//AppLabels.ENTER_MOBILE,\n            hideShadow: true,\n            isOnb: true,\n        }\n\n        const {\n            phone\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n\n                    <div className=\"web-container bg-white\">\n                        {\n                            process.env.REACT_APP_CAPTCHA_ENABLE == 1 && !this.state.posting && <ReCaptcha\n                                sitekey={process.env.REACT_APP_CAPTCHA_SITEKEY}\n                                verifyCallback={this.onCaptchaChange}\n                            />\n                        }\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <form onSubmit={this.onSubmit} className=\"onboarding-inner-pages inner-top-spacing onboarding-relative\" id='pickMobileNoForm'>\n                            {/* {!(this.props.location.state.nextStepData.data && this.props.location.state.nextStepData.data.next_step == 'phone') &&\n                                <a href className=\"skip-step\" onClick={() => this.gotoDetails()}>{AppLabels.SKIP_STEP}</a>\n                            } */}\n                            <div className=\"verification-block\">\n                                <Row>\n                                    <Col>\n                                        <div className=\"onboarding-page-heading-lg\">\n                                            {AppLabels.YOUR_MOBILE_NUMBER}\n                                        </div>\n                                        <div className=\"onboarding-page-desc\">\n                                            {AppLabels.YOUR_MOBILE_NUMBER_TEXT}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"vertical-center-section\">\n                                    <Col xs={12} className=\"vertical-center-element\">\n                                        <FormGroup className=\"m-b-15\">\n                                            <PhoneInput\n                                                autoComplete='off'\n                                                country={(DEFAULT_COUNTRY || 'in').toUpperCase()}\n                                                displayInitialValueAsLocalNumber\n                                                className=\"custm-phone\"\n                                                placeholder=\"Enter phone number\"\n                                                value={phone}\n                                                onChange={phone => this.setState({ phone })}\n                                                error={phone ? (isValidPhoneNumber(phone) ? undefined : 'Invalid phone number') : 'Phone number required'}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n\n                                <Col xs={12}>\n                                    <button className=\"submit-otp\" disabled={!(phone && isValidPhoneNumber(phone))} type='submit'><i className=\"icon-next-btn\"></i></button>\n                                </Col>\n\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/ReferralCode.jsx",["4362","4363","4364","4365","4366","4367","4368","4369","4370","4371","4372","4373","4374","4375"],"import React from 'react';\nimport { Row, Col, FormGroup } from 'react-bootstrap';\nimport Validation from '../../../helper/Validation';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport { updateSignupData, getReferralData } from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyle } from '../../../helper/input-style';\nimport { _isUndefined, _isNull, Utilities } from '../../../Utilities/Utilities';\nimport Images from '../../../components/images';\nimport { BonusCaseModal } from \"../../../Modals\";\n\nvar referralCode = \"\";\nexport default class ReferralCode extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            referral: '',\n            stepName: 'referral',\n            userName: '',\n            email: '',\n            formValid: false,\n            posting: false,\n            referalData: '',\n            showError: false,\n            errorMsg: '',\n            isShowPopup: false,\n        };\n    }\n    componentDidMount() {\n        this.getSignupReferralData()\n    }\n\n    /**\n      * @description Lifecycle method used for initialization,\n      *  get data from locale storage and history\n     */\n    componentWillMount() {\n        referralCode = WSManager.getReferralCode();\n        this.getRefferalCodeofRefferedUser()\n        if (!_isNull(referralCode) && !_isUndefined(referralCode) && referralCode != \"undefined\") {\n            this.setState({ referral: referralCode })\n        } else {\n            this.setState({ referral: \"\" })\n        }\n    }\n\n    /** \n      * @description Auto fill referral code and disable input when user comes by referral link\n      * */\n    getRefferalCodeofRefferedUser() {\n        if (referralCode != null && referralCode != \"\" && !_isUndefined(referralCode)) {\n            this.setState({\n                referral: referralCode,\n                formValid: true\n            })\n        }\n    }\n\n    /**\n     * @description check validation of user entered referral code with local regex\n     * @param type referral for this screen\n     * @param value user entered value\n    */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n    /**\n     * @description handle referral code change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value, showError: false }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: Validation.validate('referral', this.state.referral) == 'success' });\n    }\n\n    /**\n     * @description if user enters referral code then submit using below method,\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ posting: true });\n        let param = {\n            \"step\": this.state.stepName,\n            \"referral_code\": this.state.referral,\n            \"user_name\": this.state.userName,\n            \"email\": this.state.email\n        }\n        updateSignupData(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    showError: false, posting: false\n                })\n                this.showBonusPopUp(1);\n                WSManager.setReferralCode(\"\");\n            } else {\n                WSManager.setReferralCode(\"\");\n                this.setState({ posting: false, showError: true, errorMsg: responseJson.global_error });\n            }\n        })\n    }\n\n    checkFromSocialLogin() {\n        if (this.props.location.state.nextStepData.facebook_data && this.props.location.state.nextStepData.facebook_data.email && this.props.location.state.nextStepData.facebook_data.email != '') {\n            this.updateUserEmail(this.props.location.state.nextStepData.facebook_data.email, this.props.location.state.nextStepData.facebook_data.name)\n        }\n        else if (this.props.location.state.nextStepData.google_data && this.props.location.state.nextStepData.google_data.profileObj.email && this.props.location.state.nextStepData.google_data.profileObj.email != '') {\n            this.updateUserEmail(this.props.location.state.nextStepData.google_data.profileObj.email, this.props.location.state.nextStepData.google_data.profileObj.name)\n        }\n        else {\n            this.SkipStep();\n        }\n    }\n\n    SkipStep = (params) => {\n        if (Utilities.getMasterData().login_flow === '1') {\n            let nextStepData = { data: this.props.location.state.nextStepData.data, FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath, facebook_data: this.props.location.state.nextStepData.facebook_data, google_data: this.props.location.state.nextStepData.google_data,joinContest:this.props.location.state.nextStepData.joinContest };\n            this.props.history.push({ pathname: \"/pick-username\", state: { nextStepData: nextStepData } })\n        }\n        else {\n            let nextStepData = { FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath, facebook_data: this.props.location.state.nextStepData.facebook_data, google_data: this.props.location.state.nextStepData.google_data };\n            this.props.history.push({ pathname: \"/email\", state: { nextStepData: nextStepData } })\n        }\n\n\n    }\n\n    updateUserEmail = (email, name) => {\n        this.setState({ posting: true });\n        let param = {\n            \"step\": 'email',\n            \"referral_code\": this.state.referral,\n            \"user_name\": this.state.name,\n            \"first_name\": name,\n            \"email\": email\n        }\n        updateSignupData(param).then((responseJson) => {\n            if (responseJson.response_code === WSC.successCode) {\n                let nextStepData = { data: this.props.location.state.nextStepData.data, FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath, facebook_data: this.props.location.state.nextStepData.facebook_data, google_data: this.props.location.state.nextStepData.google_data };\n                this.props.history.push({ pathname: \"/pick-username\", state: { nextStepData: nextStepData } })\n            }\n            this.setState({ posting: false });\n        })\n    }\n\n    /**\n    * @description This function get referal banifit data\n    */\n    getSignupReferralData() {\n        this.setState({ posting: true });\n        getReferralData().then((responseJson) => {\n            this.setState({ posting: false });\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.setState({\n                    referalData: responseJson.data.referral_data || \"\",\n                    withoutReferalData: responseJson.data.without_referral_data || \"\"\n                }, () => {\n                }\n                )\n            }\n        })\n        Utilities.setDefaultSport();\n    }\n\n    /**\n     * @description Render UI component\n    */\n    renderRflBns = (referalData, referral, showError) => {\n        var isCoinAllowed = Utilities.getMasterData().allow_coin == \"1\";\n        var coinsAmt = parseInt(referalData.coins || '0');\n        var realAmt = parseInt(referalData.real_amount || '0');\n        var bonusAmt = parseInt(referalData.bonus_amount || '0');\n        var isRFLBA = (coinsAmt > 0 || realAmt > 0 || bonusAmt > 0)\n        return (\n            <Row className=\"vertical-center-section\">\n                <Col xs={12} className={\"vertical-center-element\" + (showError ? ' show-error-msg' : '')}>\n\n                    {\n                        isRFLBA && <div className=\"referral-banner\">\n                            <h2>\n                                {AppLabels.GET}\n                                {\n                                    isCoinAllowed && (coinsAmt > bonusAmt) && (coinsAmt > realAmt)\n                                        ?\n                                        <React.Fragment>\n                                            <span className=\"text-primary coin-img\">\n                                                <img src={Images.IC_COIN} alt=\"\" />\n                                                {coinsAmt}\n                                            </span>\n                                            {AppLabels.COINS}\n                                        </React.Fragment>\n                                        :\n                                        (bonusAmt && (bonusAmt > realAmt) ?\n                                            <React.Fragment>\n                                                <span className=\"text-primary\">\n                                                    <i className=\"icon-bonus icon-top-shift-sm\"></i>\n                                                    {bonusAmt}\n                                                </span>\n                                                {AppLabels.BONUS_CASH}\n                                            </React.Fragment>\n                                            :\n                                            <React.Fragment>\n                                                <span className=\"text-primary\">\n                                                    <span>{Utilities.getMasterData().currency_code}</span>\n                                                    {realAmt}\n                                                </span>\n                                                {AppLabels.REAL_CASH}\n                                            </React.Fragment>\n                                        )\n                                }\n                            </h2>\n                            <div>{AppLabels.ON_ENTERING_YOUR_FRIENDS_REFERRAL_CODE} </div>\n                        </div>\n                    }\n\n                    <FormGroup\n                        className='input-label-center'\n                        controlId=\"formBasicText\"\n                        validationState={this.getValidationState('referral', referral)}>\n                        <FloatingLabel\n                            autoComplete='off'\n                            styles={inputStyle}\n                            id='referral'\n                            name='referral'\n                            placeholder={AppLabels.ENTER_REFERRAL_CODE}\n                            type='text'\n                            value={!_isUndefined(referral) ? referral : \"\"}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n                    {showError &&\n                        <div className=\"error-text\">{this.state.errorMsg}</div>\n                    }\n                </Col>\n            </Row>\n\n        )\n    }\n\n    renderWRflBns = (withoutReferalData) => {\n        var isCoinAllowed = Utilities.getMasterData().allow_coin == \"1\";\n        var coinsAmt = parseInt(withoutReferalData.coins || '0');\n        var realAmt = parseInt(withoutReferalData.real_amount || '0');\n        var bonusAmt = parseInt(withoutReferalData.bonus_amount || '0');\n        var isRFLBA = (coinsAmt > 0 || realAmt > 0 || bonusAmt > 0)\n        return (\n            <Row className=\"signup-info\">\n                {\n                    isRFLBA && <Col xs={12}>\n                        {AppLabels.SIGNUP_INFO}\n                        {\n                            isCoinAllowed && (coinsAmt > bonusAmt) && (coinsAmt > realAmt)\n                                ?\n                                <React.Fragment>\n                                    <img src={Images.IC_COIN} alt=\"\" />\n                                    {coinsAmt}\n                                    <span> {AppLabels.COINS}</span>\n                                </React.Fragment>\n                                :\n                                (bonusAmt && (bonusAmt > realAmt) ?\n                                    <React.Fragment>\n                                        <i className=\"icon-bonus icon-top-shift-sm\"></i>\n                                        {bonusAmt}\n                                        <span> {AppLabels.BONUS_CASH}</span>\n                                    </React.Fragment>\n                                    :\n                                    <React.Fragment>\n                                        <span>{Utilities.getMasterData().currency_code}</span>\n                                        {realAmt}\n                                        <span> {AppLabels.REAL_CASH}</span>\n                                    </React.Fragment>\n                                )\n                        }\n                        {AppLabels.SIGNUP_INFO1}\n                    </Col>\n                }\n            </Row>\n        )\n    }\n\n    showBonusPopUp = (e) => {\n        if(!this.state.referalData){\n            this.SkipStep()\n        }else{\n        \n        if (e == 0 && this.state.withoutReferalData == undefined || this.state.withoutReferalData == '') { \n            return;\n        }\n        let passingData = {\n            refData: this.state.referalData,\n            withoutRefData: this.state.withoutReferalData,\n            isSkip: e,\n        };\n        this.setState({\n            isShowPopup: true,\n            passingData: passingData,\n\n        })\n    }\n    }\n\n    render() {\n        const {\n            referral,\n            formValid,\n            posting,\n            referalData,\n            withoutReferalData\n        } = this.state;\n        return (\n\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white pb-0\">\n\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.referral.title}</title>\n                            <meta name=\"description\" content={MetaData.referral.description} />\n                            <meta name=\"keywords\" content={MetaData.referral.keywords}></meta>\n                        </Helmet>\n                        <div className=\"registration-header header-wrap\">\n                            <Row>\n                                <Col xs={12} className=\"text-right\">\n                                    <span className=\"header-action skip-step\" onClick={() => this.showBonusPopUp(0)}>\n                                        {AppLabels.SKIP_STEP}\n                                    </span>\n                                </Col>\n                            </Row>\n                        </div>\n                        <form onSubmit={this.onSubmit} className=\"onboarding-inner-pages referral-page\" id='referralCodeForm'>\n                            <div className=\"verification-block\">\n                                <Row>\n                                    <Col>\n                                        <div className=\"onboarding-page-heading-lg m-t-10\">\n                                            {AppLabels.HAVE_A_REFERRAL_CODE}\n                                        </div>\n                                        <div className=\"onboarding-page-desc\">\n                                            {AppLabels.REFERRAL_CODE_TEXT}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                {\n                                    this.renderRflBns(referalData, referral, this.state.showError)\n                                }\n                                <Row className=\"btm-fixed-submit\">\n                                    <Col xs={12} className=\"text-center\">\n                                        <button className=\"submit-otp\" disabled={!formValid || posting} type='submit'><i className=\"icon-next-btn\"></i></button>\n                                    </Col>\n                                </Row>\n                                {\n                                    withoutReferalData &&\n                                    this.renderWRflBns(withoutReferalData)\n                                }\n                            </div>\n\n                        </form>\n                        {\n                            \n                            this.state.isShowPopup ? <BonusCaseModal SkipStep={this.SkipStep} data={this.state.passingData} /> : ''\n                        }\n\n                    </div>\n\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/VerifyMobile.jsx",[],"/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/PickUsername.jsx",["4376","4377","4378"],"import React from 'react';\nimport { Row, Col, FormGroup } from 'react-bootstrap';\nimport Validation from '../../../helper/Validation';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport {updateSignupData} from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyle } from '../../../helper/input-style';\nimport CustomHeader from '../../../components/CustomHeader';\nimport { SignupTmpData } from '../../../helper/Constants';\n\nexport default class PickUsername extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            referral: '',\n            stepName: 'username',\n            userName: '',\n            email: '',\n            formValid: false,\n            posting: false,\n            isUserName: true,\n            showError: false,\n            errorMsg: ''\n        };\n    }\n\n\n    /**\n     * @description check validation of username with local regex\n     * @param type email for this screen\n     * @param value user entered value\n    */\n    componentDidMount() {\n\n        if (this.props.location.state.nextStepData.data.user_profile && this.props.location.state.nextStepData.data.user_profile.user_name) {\n            this.setState({\n                userName: this.props.location.state.nextStepData.data.user_profile.user_name, formValid: true, isUserName: false\n            }, () => this.setState({ isUserName: true }))\n        }\n        else if (this.props.location.state.nextStepData.data.user_name) {\n            this.setState({\n                userName: this.props.location.state.nextStepData.data.user_name, formValid: true, isUserName: false\n            }, () => this.setState({ isUserName: true }))\n        }\n    }\n\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n     * @description handle username change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value,showError: false }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: Validation.validate('userName', this.state.userName) == 'success' });\n    }\n\n    /**\n     * @description  this method update username to server\n     * @param e- click event\n     * after success navigate lobby or lineup(in case user clicks join contest as a guest user) \n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ posting: true });\n        let param = {\n            \"step\": this.state.stepName,\n            \"referral_code\": this.state.referral,\n            \"user_name\": this.state.userName,\n            \"email\": this.state.email\n        }\n        if(WSManager.getAffiliatCode()){\n            param['affcd'] = WSManager.getAffiliatCode();\n        }\n        updateSignupData(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({showError: false, posting: false})\n                WSManager.setToken(WSManager.getTempToken('id_temp_token'));\n                this.gotoDetails(responseJson.data)\n            } else {\n                this.setState({ posting: false,showError: true,errorMsg: responseJson.error.user_name});\n            }\n        })\n    }\n\n    /**\n      * @description This function responsible for Navigate to next step after update username\n    */\n   gotoDetails = (data) => {\n    SignupTmpData['email'] = ''\n    if (data.next_step && data.next_step == \"mobile\") {\n        let nextStepData = { FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath,joinContest:this.props.location.state.nextStepData.joinContest };\n        this.props.history.push({ pathname: '/pick-mobile', state: {nextStepData:nextStepData} })\n    }\n    else {\n        WSManager.setToken(WSManager.getTempToken('id_temp_token'));\n        if (this.props.location.state.nextStepData.FixturedContest) {\n            let nextStepData = { FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath,resetIndex: 2};\n            this.props.history.push({ pathname: this.props.location.state.nextStepData.lineupPath, state: {nextStepData:nextStepData} })\n\n        }\n        else {\n            this.props.history.push('/lobby')\n        }\n    }\n}\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n        const {\n            formValid,\n            posting,\n            userName,\n        } = this.state;\n        const HeaderOption = {\n            back: true,\n            filter: false,\n            \n            hideShadow: true,\n            isOnb: true,\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container bg-white\">\n                        {this.state.posting && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.pickusername.title}</title>\n                            <meta name=\"description\" content={MetaData.pickusername.description} />\n                            <meta name=\"keywords\" content={MetaData.pickusername.keywords}></meta>\n                        </Helmet>\n                        \n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                      \n                        <form onSubmit={this.onSubmit} className=\"onboarding-inner-pages inner-top-spacing\" id='pickUsernameForm'>\n                            <div className=\"verification-block\">\n                                <Row>\n                                    <Col>\n                                        <div className=\"onboarding-page-heading-lg\">\n                                            {AppLabels.PICK_USER_NAME}\n                                        </div>\n                                        <div className=\"onboarding-page-desc\">\n                                            {AppLabels.USERNAME_UNIQUE}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"vertical-center-section\">\n                                    <Col xs={12} className={\"vertical-center-element\" + (this.state.showError ? ' show-error-msg' : '')}>\n                                        <FormGroup\n                                            className='input-label-center'\n                                            controlId=\"formBasicText\"\n                                            validationState={this.getValidationState('userName', userName)}>\n                                            {this.state.isUserName &&\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyle}\n                                                    id='userName'\n                                                    name='userName'\n                                                    maxLength={25}\n                                                    placeholder={AppLabels.USER_NAME}\n                                                    type='text'\n                                                    value={userName}\n                                                    onChange={this.handleChange}\n                                                />\n                                            }\n                                        </FormGroup>\n                                        {this.state.showError &&\n                                            <div className=\"error-text\">{this.state.errorMsg}</div>\n                                        }\n                                    </Col>\n                                </Row>\n                                <Row className=\"btm-fixed-submit\">\n                                    <Col xs={12} className=\"text-center\">\n                                        <button className=\"submit-otp\" disabled={!formValid || posting} type='submit'><i className=\"icon-next-btn\"></i></button>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/MobileLogin.jsx",["4379","4380","4381","4382","4383","4384","4385","4386","4387","4388"],"import React from 'react';\nimport { Row, Col, Button, FormGroup } from 'react-bootstrap';\nimport { Helmet } from \"react-helmet\";\nimport { connect } from 'react-redux';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport { socialLogin } from \"../../../WSHelper/WSCallings\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Utilities, _isUndefined, checkFlow, sendMessageToApp } from '../../../Utilities/Utilities';\nimport { userLogin } from '../../../WSHelper/WSCallings';\nimport { WebviewConsole, WebviewBridgeInit } from '../../../redux/actions/place';\nimport { CustomPhoneInput, SelectLanguage } from '../../CustomComponent';\nimport { createBrowserHistory } from 'history';\nimport { ReCaptcha } from 'react-recaptcha-v3';\nimport Validation from '../../../helper/Validation';\nimport FacebookLogin from 'react-facebook-login';\nimport GoogleLogin from 'react-google-login';\nimport TagManager from 'react-gtm-module';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport Images from '../../../components/images';\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as Constants from \"../../../helper/Constants\";\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\n/**\n  * @description This function is for Google Tag manager\n  * @GA_PROFILE_ID - unique identifier defined in constant \n  */\nconst tagManagerArgs = {\n    gtmId: WSC.GA_PROFILE_ID,\n    events: {\n        submit: { 'event_category': 'form', 'event_label': 'sign up' }\n    }\n}\n\nclass MobileLogin extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            phone: '',\n            code: Constants.DEFAULT_COUNTRY_CODE,\n            posting: false,\n            allowLanguage: Constants.ALLOW_LANG,\n            captchaToken: ''\n        };\n    }\n\n    componentWillMount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: true,\n        }\n        sendMessageToApp(data)\n        setTimeout(() => {\n            let token_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'deviceid',\n            }\n            sendMessageToApp(token_data)\n        }, 300);\n        if (!_isUndefined(parsed) && parsed.referral !== \"\" && parsed.referral !== null && !_isUndefined(parsed.referral)) {\n            WSManager.setReferralCode(parsed.referral)\n        }\n        if (!_isUndefined(parsed) && parsed.affcd) {\n            WSManager.setAffiliatCode(parsed.affcd)\n        }\n    }\n\n    componentDidMount() {\n        if (WSManager.getIsIOSApp()) {\n            let def_lang = WSManager.getAppLang()\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale: def_lang,\n                    targetFunc: 'handleLogoutReceived'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n        }\n        if (window.ReactNativeWebView) {\n            this.handelNativeData()\n        }\n    }\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            type: false,\n        }\n        sendMessageToApp(data)\n    }\n\n    handelNativeData() {\n        window.addEventListener('message', (e) => {\n            if (e.data.action === 'login' && e.data.type === 'google') {\n                let profileObj = {\n                    email: e.data.response.user && e.data.response.user.email ? e.data.response.user.email : e.data.response.email\n                };\n                let googleUser = {\n                    'tokenId': e.data.response.auth ? e.data.response.auth.idToken : e.data.response.idToken,\n                    'googleId': e.data.response.user ? e.data.response.user.uid : e.data.response.uid,\n                    'profileObj': profileObj\n                };\n                this.responseGoogle(googleUser, true)\n            }\n            else if (e.data.action === 'login' && e.data.type === 'facebook') {\n                let fbUser = JSON.parse(e.data.response._bodyText);\n\n                let user = {\n                    'email': fbUser.email ? fbUser.email : '',\n                    'accessToken': e.data.response.token,\n                    'id': fbUser.id\n                };\n                this.onFacebookSuccess(user)\n            }\n            else if (e.data.action === 'push' && e.data.type === 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n            }\n\n        });\n    }\n\n    /**\n     * @description check validation of user entered email with local regex\n     * @param type email for this screen\n     * @param value user entered value\n     */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n    * @description This function send OTP to users mobile number\n    * @param e- click event\n    */\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ posting: true });\n        let phone_code_str = \"+\" + this.state.code;\n        let phone_no_str = this.state.phone;\n        let phone_no = phone_no_str.replace(phone_code_str, \"\");\n        let device_type = window.ReactNativeWebView ? WSC.deviceTypeAndroid : WSC.deviceType\n        let device_id = window.ReactNativeWebView ? WSC.DeviceToken.getDeviceId() : WSC.deviceID\n\n        let param = {\n            \"phone_no\": phone_no,\n            \"phone_code\": this.state.code,\n            \"device_type\": device_type,\n            \"device_id\": device_id,\n            // \"is_systemuser\": 1\n        }\n        if (process.env.REACT_APP_CAPTCHA_ENABLE == 1) {\n            param['token'] = this.state.captchaToken;\n        }\n        userLogin(param).then((responseJson) => {\n            this.setState({ posting: false });\n            if (responseJson && responseJson.response_code === WSC.successCode) {\n                if (responseJson.data && responseJson.data.is_user_exist == 0) {\n                    TagManager.initialize(tagManagerArgs)\n                }\n                this.gotoDetails(responseJson.data, this.state.code);\n            }\n        })\n        Utilities.setDefaultSport();\n    }\n\n    /**\n     * @description After User enter mobile navigate to OTP screen\n     * @param data data received from login api response\n     */\n    gotoDetails = (data) => {\n        data['next_step'] = 'verify';\n        let nextStepData = { data: data || '' }\n        if (this.props.location.state) {\n            let { lineupPath, FixturedContest, LobyyData, joinContest, sportsId } = this.props.location.state;\n            nextStepData = { data: data || '', facebook_data: null, google_data: null, joinContest: joinContest || '', lineupPath: lineupPath || '', FixturedContest: FixturedContest || '', LobyyData: LobyyData || '', sportsId: sportsId };\n        }\n        this.props.history.push(checkFlow(nextStepData))\n    }\n\n    /**\n     * @description Used for FB success callback\n     * @param user data received from FB api response\n    */\n    onFacebookSuccess = (user) => {\n        if (user) {\n            this.setState({ posting: true });\n            let param = {\n                \"email\": user.email,\n                \"facebook_id\": user.id,\n                \"facebook_access_token\": user.accessToken,\n                \"password\": '',\n                \"device_type\": WSC.deviceType,\n                \"device_id\": WSC.DeviceToken.getDeviceId(),\n            }\n            socialLogin(param).then((responseJson) => {\n                if (responseJson && responseJson.response_code === WSC.successCode) {\n                    WSManager.setTempToken(responseJson.data.Sessionkey);\n                    let nextStepData = { data: responseJson.data, facebook_data: user, google_data: null, nextStep: responseJson.data.next_step };\n                    this.props.history.push(checkFlow(nextStepData))\n                }\n                this.setState({ posting: false });\n            })\n        }\n    }\n\n    /**\n     * @description FB failure callback\n     * @param err error received from FB api\n    */\n    onLoginFailure(err) {\n        console.error('FB onLoginFailure' + err)\n    }\n\n    /**\n    * @description Used for Google success/failure callback\n    * @param googleUser data received from Google api\n    * @param isSuccess flag will true in case user data received else it will be false\n   */\n    responseGoogle = (googleUser, isSuccess) => {\n        if (googleUser && isSuccess) {\n            this.setState({ posting: true });\n            var id_token = googleUser.tokenId;\n            var googleId = googleUser.googleId;\n            let param = {\n                \"email\": googleUser.profileObj.email ? googleUser.profileObj.email : '',\n                \"google_id\": googleId,\n                \"google_access_token\": id_token,\n                \"password\": '',\n                \"device_type\": window.ReactNativeWebView ? WSC.deviceTypeAndroid : WSC.deviceType,\n                \"device_id\": window.ReactNativeWebView ? WSC.DeviceToken.getDeviceId() : WSC.deviceID,\n            }\n\n            socialLogin(param).then((responseJson) => {\n                WSManager.setTempToken(responseJson.data.Sessionkey);\n                if (responseJson.response_code === WSC.successCode) {\n                    let nextStepData = { data: responseJson.data, facebook_data: null, google_data: googleUser, nextStep: responseJson.data.next_step };\n                    this.props.history.push(checkFlow(nextStepData))\n                }\n                this.setState({ posting: false });\n            })\n        }\n    }\n\n    handleOnChange = (value, data) => {\n        this.setState({ code: data.dialCode, phone: value })\n    }\n\n    isAndroidApp() {\n        if (navigator.userAgent.toLowerCase().match(/(android-app)/)) {\n            return true;\n        }\n        return false;\n    }\n\n    appNativeLogin(type) {\n        let data = {\n            action: 'login',\n            type: type,\n        }\n        sendMessageToApp(data)\n    }\n\n    onCaptchaChange = (value) => {\n        this.setState({\n            captchaToken: value\n        })\n    }\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n        const {\n            posting,\n            phone\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container bg-white\">\n                        {\n                            process.env.REACT_APP_CAPTCHA_ENABLE == 1 && !this.state.posting && <ReCaptcha\n                                sitekey={process.env.REACT_APP_CAPTCHA_SITEKEY}\n                                verifyCallback={this.onCaptchaChange}\n                            />\n                        }\n                        {this.state.posting && <CustomLoader />}\n\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.signup.title}</title>\n                            <meta name=\"description\" content={MetaData.signup.description} />\n                            <meta name=\"keywords\" content={MetaData.signup.keywords}></meta>\n                        </Helmet>\n                        <form onSubmit={this.onSubmit} className=\"signup-form\" id='mobileLoginForm'>\n                            <div className=\"verification-block\">\n                                <div className=\"media-checks\">\n                                    <div className=\"socail-region\">\n                                        <img alt=\"\" src={Images.BRAND_LOGO_FULL} className=\"logo-lg\" />\n\n                                        <Row>\n                                            <Col xs={12} className='phone-number-style'>\n                                                <FormGroup>\n                                                    <CustomPhoneInput {...this.props} phone={phone} handleOnChange={this.handleOnChange} />\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                        {Utilities.getMasterData().allow_fb == 1 || Utilities.getMasterData().allow_google == 1 && <div className=\"title\">{AppLabels.CONNECT_INSTANTLY_WITH}</div>}\n                                        <div className=\"content\">\n                                            {\n                                                Utilities.getMasterData().allow_fb == 1 && <React.Fragment>\n                                                    {\n                                                        this.isAndroidApp() ?\n                                                            <div onClick={() => this.appNativeLogin('facebook')} className=\"social-item facebook\">\n                                                                <i className=\"icon-facebook facebook\"></i>\n                                                            </div>\n                                                            :\n                                                            <div className=\"social-item facebook cursor-pointer\">\n                                                                <FacebookLogin\n                                                                    appId={WSC.FB_APP_ID}\n                                                                    autoLoad={false}\n                                                                    cookie={false}\n                                                                    callback={this.onFacebookSuccess}\n                                                                    onFailure={this.onLoginFailure}\n                                                                    cssClass=\"bg mR-20\"\n                                                                    redirectUri={WSC.baseURL + '/signup'}\n                                                                    fields=\"name,email,picture\"\n                                                                    scope={['email']}\n                                                                    className=\"cursor-pointer\"\n                                                                    icon={<i className=\"icon-facebook facebook\"></i>}\n                                                                    textButton={<div className=\"label facebook\"></div>}\n                                                                />\n                                                            </div>\n                                                    }\n                                                </React.Fragment>\n                                            }\n                                            {\n                                                Utilities.getMasterData().allow_google == 1 && <React.Fragment>\n                                                    {\n                                                        this.isAndroidApp() ?\n                                                            <div onClick={() => this.appNativeLogin('google')} className=\"social-item gplus\">\n                                                                <img src={Images.GPLUS_LOGO} alt=\"\" width=\"30px\" />\n                                                            </div>\n                                                            :\n                                                            <div className=\"social-item gplus\">\n                                                                <GoogleLogin\n                                                                    clientId={WSC.GPLUS_ID}\n                                                                    buttonText={AppLabels.GOOGLE}\n                                                                    scope=\"profile email\"\n                                                                    autoLoad={false}\n                                                                    icon={false}\n                                                                    fetchBasicProfile={false}\n                                                                    redirectUri={WSC.baseURL + '/signup'}\n                                                                    className=\"google-login-btn\"\n                                                                    onSuccess={(user) => this.responseGoogle(user, true)}\n                                                                    onFailure={(user) => this.responseGoogle(user, false)}\n                                                                >\n                                                                    <img src={Images.GPLUS_LOGO} alt=\"\" width=\"30px\" />\n                                                                </GoogleLogin>\n                                                            </div>\n                                                    }\n                                                </React.Fragment>\n                                            }\n                                        </div>\n                                        <Button className=\"btn-block btm-action-btn \" disabled={!(phone && isValidPhoneNumber(phone)) || posting} bsStyle=\"primary\" type='submit'>{AppLabels.SIGN_UP_OR_LOGIN}</Button>\n\n                                        <Row>\n                                            <Col xs={12}>\n                                                <p className=\"auth-txt\">\n                                                    {AppLabels.I_hereby_confirm}\n                                                    <a className='primary' target='_blank' href=\"/terms-condition\"> {AppLabels.TERMS_CONDITION} </a>\n                                                    {Utilities.getMasterData().int_version != 1 ? AppLabels.and_I_am_not_a : ''}\n                                                </p>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                        {this.state.allowLanguage && this.state.allowLanguage.length > 1 &&\n                            <SelectLanguage isBottomFixed={true} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        ...state\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        WebviewConsole: (data) => dispatch(WebviewConsole(data)),\n        WebviewBridgeInit: (data, type) => dispatch(WebviewBridgeInit(data, type))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileLogin)","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/UpdateMobileNo.jsx",["4389","4390","4391"],"import React from 'react';\nimport { Row, Col, FormGroup } from 'react-bootstrap';\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport Validation from '../../../helper/Validation';\nimport PhoneInput, { isValidPhoneNumber } from 'react-phone-number-input';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport { updateSignupData } from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport CustomHeader from '../../../components/CustomHeader';\nimport { DEFAULT_COUNTRY_CODE, DEFAULT_COUNTRY } from '../../../helper/Constants';\n\nexport default class UpdateMobileNo extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            phone: '',\n            code: DEFAULT_COUNTRY_CODE,\n            formValid: false,\n            posting: false,\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n    validateForm() {\n        this.setState({ formValid: Validation.validate('phone', this.state.phone) == 'success' });\n    }\n    refreshPage() {\n        window.location.reload();\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.posting) {\n            this.setState({ posting: true });\n            let phone_code_str = \"+\" + this.state.code;\n            let phone_no_str = this.state.phone;\n            let phone_no = phone_no_str.replace(phone_code_str, \"\");\n            let param = {\n                \"step\": 'mobile',\n                \"phone_no\": phone_no,\n                \"phone_code\": this.state.code,\n                \"device_type\": WSC.deviceType,\n                \"device_id\": WSC.deviceID,\n            }\n            updateSignupData(param).then((responseJson) => {\n                this.setState({ posting: false });\n                if (responseJson.response_code === WSC.successCode) {\n                    this.gotoDetails(responseJson.data);\n                }\n            })\n        }\n    }\n\n    gotoDetails = (data) => {\n\n\n        if (this.props.location.state.data && this.props.location.state.data.next_step == 'phone') {\n            this.props.history.push({ pathname: '/verify', state: { data: data, facebook_data: this.props.location.state.facebook_data, google_data: this.props.location.state.google_data } })\n        }\n        else {\n            WSManager.setToken(WSManager.getTempToken('id_temp_token'));\n            if (this.props.location.state.nextStepData && this.props.location.state.nextStepData.FixturedContest) {\n                this.props.history.replace({ pathname: this.props.location.state.nextStepData.lineupPath, state: { FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath } })\n            }\n            else {\n                this.props.history.replace('/lobby')\n            }\n        }\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    }\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            filter: false,\n            \n            hideShadow: true,\n            isOnb: true,\n        }\n\n        const {\n            phone\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n\n                    <div className=\"web-container bg-white\">\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n\n                        <form onSubmit={this.onSubmit} className=\"onboarding-inner-pages inner-top-spacing onboarding-relative\" id='updateMobileNoForm'>\n\n                            {!(this.props.location.state.nextStepData.data && this.props.location.state.nextStepData.data.next_step == 'phone') &&\n                                <a href className=\"skip-step mobile-skip\" onClick={() => this.gotoDetails()}>{AppLabels.SKIP_STEP}</a>\n                            }\n                            <div className=\"verification-block\">\n                                <Row>\n                                    <Col>\n                                        <div className=\"onboarding-page-heading-lg\">\n                                            {AppLabels.YOUR_MOBILE_NUMBER}\n                                        </div>\n                                        <div className=\"onboarding-page-desc\">\n                                            {AppLabels.YOUR_MOBILE_NUMBER_TEXT}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                {/* NATIVE FORM */}\n                                <Row className=\"vertical-center-section\">\n                                    <Col xs={12} className=\"vertical-center-element\">\n                                        <FormGroup className=\"m-b-15\">\n                                            <PhoneInput\n                                                autoComplete='off'\n                                                country={(DEFAULT_COUNTRY || 'in').toUpperCase()}\n                                                displayInitialValueAsLocalNumber\n                                                className=\"custm-phone\"\n                                                placeholder=\"Enter phone number\"\n                                                value={phone}\n                                                onChange={phone => this.setState({ phone })}\n                                                error={phone ? (isValidPhoneNumber(phone) ? undefined : 'Invalid phone number') : 'Phone number required'}\n                                            />\n                                        </FormGroup>\n                                        <div className=\"optional-text\">\n                                            {AppLabels.OPTIONAL}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"text-center btm-fixed-submit\">\n                                    <Col xs={12}>\n                                        <button className=\"submit-otp\" disabled={!(phone && isValidPhoneNumber(phone))} type='submit'><i className=\"icon-next-btn\"></i></button>\n                                    </Col>\n                                </Row>\n\n\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/OnBoarding/MobileFlow/PickEmail.jsx",["4392","4393"],"import React from 'react';\nimport { Row, Col, FormGroup } from 'react-bootstrap';\nimport Validation from '../../../helper/Validation';\nimport {updateSignupData} from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyle } from '../../../helper/input-style';\nimport CustomHeader from '../../../components/CustomHeader';\nimport { SignupTmpData } from '../../../helper/Constants';\n\nexport default class PickEmail extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            referral: '',\n            stepName: 'email',\n            userName: '',\n            email: SignupTmpData.email || '',\n            formValid: SignupTmpData.email ? true: false,\n            posting: false,\n            setEmail:true\n        };\n    }\n\n    componentDidMount(){\n        if(this.props.location.state.nextStepData.facebook_data && this.props.location.state.nextStepData.facebook_data.email){\n            this.setState({setEmail:false,email:this.props.location.state.nextStepData.facebook_data.email},()=>{\n                this.setState({setEmail:true},()=>this.validateForm())\n            })\n        }\n        else if(this.props.location.state.nextStepData.google_data && this.props.location.state.nextStepData.google_data.profileObj.email){\n            let userEmail = this.props.location.state.nextStepData.google_data.profileObj.email;\n            \n            this.setState({setEmail:false,email:userEmail},()=>{\n                this.setState({setEmail:true},()=>this.validateForm())\n            })\n        }\n    }\n  \n    \n/**\n     * @description check validation of user entered email with local regex\n     * @param type email for this screen\n     * @param value user entered value\n    */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n     * @description handle email change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: Validation.validate('email', this.state.email) == 'success' });\n    }\n\n    /**\n     * @description  this method update user email to server\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ posting: true });\n        let param = {\n            \"step\": this.state.stepName,\n            \"referral_code\": this.state.referral,\n            \"user_name\": this.state.userName,\n            \"email\": this.state.email\n        }\n        updateSignupData(param).then((responseJson) => {\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                this.gotoDetails(responseJson.data)\n            }\n            this.setState({ posting: false });\n        })\n    }\n\n    /**\n       * @description This function responsible for Navigate to next step after update email\n     */\n    gotoDetails = (data) => {\n        SignupTmpData['email'] = this.state.email;\n        let nextStepData = { data: data, FixturedContest: this.props.location.state.nextStepData.FixturedContest, LobyyData: this.props.location.state.nextStepData.LobyyData, lineupPath: this.props.location.state.nextStepData.lineupPath, facebook_data: this.props.location.state.nextStepData.facebook_data, google_data: this.props.location.state.nextStepData.google_data }\n        this.props.history.push({ pathname: '/pick-username', state: {nextStepData:nextStepData} })\n    }\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n        const {\n            formValid,\n            posting,\n            email\n        } = this.state;\n        const HeaderOption = {\n            back: true,\n            hideShadow: true,\n            isOnb: true\n        }\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white\">\n                        {this.state.posting && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.pickemail.title}</title>\n                            <meta name=\"description\" content={MetaData.pickemail.description} />\n                            <meta name=\"keywords\" content={MetaData.pickemail.keywords}></meta>\n                        </Helmet>\n\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        \n                        <form onSubmit={this.onSubmit} className=\"onboarding-inner-pages inner-top-spacing\" id='pickEmailForm'> \n                            <div className=\"verification-block\">\n                                <Row>\n                                    <Col>\n                                        <div className=\"onboarding-page-heading-lg\">\n                                            {AppLabels.EMAIL_ADDRESS}\n                                        </div>\n                                        <div className=\"onboarding-page-desc\">\n                                            {AppLabels.EMAIL_USE}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row className=\"vertical-center-section\">\n                                    <Col xs={12} className=\"vertical-center-element\">\n                                        <FormGroup\n                                            className='input-label-center'\n                                            controlId=\"formBasicText\"\n                                            validationState={this.getValidationState('email', email)}>\n                                            {this.state.setEmail&&\n                                            <FloatingLabel\n                                            autoComplete='off'\n                                                styles={inputStyle}\n                                                id='email'\n                                                name='email'\n                                                placeholder={AppLabels.ENTER_YOUR_EMAIL}\n                                                type='email'\n                                                value={email}\n                                                onChange={this.handleChange}\n                                            />\n                                            }\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row className=\"btm-fixed-submit\">                                               \n                                    <Col xs={12} className=\"text-center\">\n                                        <button className=\"submit-otp\" disabled={!formValid || posting} type='submit'><i className=\"icon-next-btn\"></i></button>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/EnterPassword.jsx",["4394","4395","4396","4397"],"import React from 'react';\nimport { Row, Col, Button, FormGroup } from 'react-bootstrap';\nimport Validation from '../../../helper/Validation';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport { updateSignupData, validateLogin } from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyle } from '../../../helper/input-style';\nimport CustomHeader from '../../../components/CustomHeader';\nimport { _isUndefined } from '../../../Utilities/Utilities';\n\nvar md5 = require('md5');\n\nexport default class EnterPassword extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            password: '',\n            formValid: false,\n            posting: false,\n            email: this.props.location.state && !_isUndefined(this.props.location.state.nextStepData) && !_isUndefined(this.props.location.state.nextStepData.email) ? this.props.location.state.nextStepData.email : '',\n            showPassword: false\n        };\n    }\n\n    /**\n     * @description check validation of user entered email with local regex\n     * @param type password for this screen\n     * @param value user entered value\n    */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n     * @description handle password change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value.trim();\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: Validation.validate('password', this.state.password) == 'success' });\n    }\n\n    /**\n     * @description  this method update user password to server\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ posting: true });\n        const { data,next_step } = this.props.location.state.nextStepData;\n        let device_type = window.ReactNativeWebView ? WSC.deviceTypeAndroid : WSC.deviceType\n        let device_id = window.ReactNativeWebView ? WSC.DeviceToken.getDeviceId() : WSC.deviceID\n\n        let param = {\n            \"step\": \"password\",\n            \"password\": md5(this.state.password),\n            \"email\": data.email,\n            \"device_type\":device_type,\n            \"device_id\": device_id,\n\n        }\n\n        if (next_step === '/set-password') {\n            updateSignupData(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.parseSubmitResponse(responseJson.data);\n                }\n                this.setState({ posting: false });\n            })\n        } else {\n            validateLogin(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.parseSubmitResponse(responseJson.data);\n                }\n                this.setState({ posting: false });\n            })\n        }\n    }\n    /**\n           * @description This function responsible for parsing api response after submit call\n         */\n    parseSubmitResponse(apiData) {\n        const { joinContest, lineupPath, FixturedContest, LobyyData } = this.props.location.state.nextStepData;\n        if (apiData.Sessionkey) {\n            WSManager.setTempToken(apiData.Sessionkey);\n        }\n        if (apiData.is_profile_complete == 1) {\n            WSManager.setProfile(apiData.user_profile);\n            WSManager.setToken(apiData.Sessionkey);\n            if (joinContest) {\n                let nextStepData = { FixturedContest: FixturedContest, LobyyData: LobyyData };\n                this.props.history.push({ pathname: lineupPath, state:{nextStepData:nextStepData}  })\n            } else {\n                this.gotoDetails(\"/\", apiData);\n            }\n        } else {\n            this.gotoDetails(\"/\" + apiData.next_step, apiData);\n        }\n    }\n\n    /**\n       * @description This function responsible for Navigate to next step after mobile verification\n     */\n    gotoDetails = (path, data) => {\n        let { lineupPath, FixturedContest, LobyyData,facebook_data,google_data } = this.props.location.state.nextStepData;\n        let mData = { data, facebook_data: facebook_data, google_data: google_data, FixturedContest: FixturedContest, LobyyData: LobyyData, lineupPath: lineupPath };\n        this.props.history.push({ pathname: path, state: {nextStepData:mData} })\n    }\n\n    goToForgotPassword = () => {\n        this.props.history.push({ pathname: '/enter-email', state: { email: this.state.email } })\n    }\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            \n            hideShadow: true,\n            isOnb: true,\n        }\n\n        const {\n            formValid,\n            posting,\n            password,\n            showPassword\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white\">\n                        {this.state.posting && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.passwordlogin.title}</title>\n                            <meta name=\"description\" content={MetaData.passwordlogin.description} />\n                            <meta name=\"keywords\" content={MetaData.passwordlogin.keywords}></meta>\n                        </Helmet>\n\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n\n                        <form onSubmit={this.onSubmit} className='onboarding-inner-pages' id='enterPaswordForm'>\n                            <div className='view-center-align'>\n                                <div className=\"verification-block \">\n                                    <Row>\n                                        <Col>\n                                            <div className=\"onboarding-page-heading\">\n                                                {AppLabels.YOUR_PASSWORD}\n                                            </div>\n                                            <div className=\"onboarding-page-desc\">\n                                                {AppLabels.YOUR_PASSWORD_TEXT}\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"vertical-center-section-lg\">\n                                        <Col xs={12} className=\"vertical-center-element\">\n                                            <FormGroup\n                                                className='input-label-center'\n                                                controlId=\"formBasicText\"\n                                                validationState={this.getValidationState('password', password)}>\n\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyle}\n                                                    id='password'\n                                                    name='password'\n                                                    value={password}\n                                                    placeholder={AppLabels.ENTER_PASSWORD}\n                                                    type={showPassword? 'password' : 'text'}\n                                                    onChange={this.handleChange}\n                                                />\n                                            </FormGroup>\n                                            <a \n                                                href \n                                                onClick={\n                                                    ()=>this.setState({\n                                                        showPassword: !showPassword\n                                                    })\n                                                } \n                                                className=\"pwd-show-hide\"\n                                            >\n                                                <i className={showPassword ? \"icon-eye\" : \"icon-eye-cancel\"}></i>\n                                            </a>\n                                            <div onClick={this.goToForgotPassword} className='forgot-password-text-container text-center m-t-20'>\n                                                <span className='forgot-password-text'>\n                                                    {AppLabels.FORGOT_PASSWORD_TEXT}\n                                                </span>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"text-center btm-fixed-submit\">\n                                        <Col xs={12}>\n                                            <Button className=\"btn-block btm-action-btn mt30\" disabled={!formValid || posting} bsStyle=\"primary\" type='submit'>{AppLabels.SUBMIT}</Button>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/VerifyEmail.jsx",[],"/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/SetPassword.jsx",["4398","4399","4400","4401"],"import React from 'react';\nimport { Row, Col, FormGroup } from 'react-bootstrap';\nimport Validation from '../../../helper/Validation';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport { updateSignupData, validateLogin } from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport FloatingLabel from 'floating-label-react';\nimport { inputStyle } from '../../../helper/input-style';\nimport CustomHeader from '../../../components/CustomHeader';\nimport { _isUndefined } from '../../../Utilities/Utilities';\n\nvar md5 = require('md5');\n\nexport default class SetPassword extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            password: '',\n            formValid: false,\n            posting: false,\n            email: this.props.location.state && !_isUndefined(this.props.location.state.nextStepData) && !_isUndefined(this.props.location.state.nextStepData.email) ? this.props.location.state.nextStepData.email : '',\n            showPassword: false\n        };\n    }\n\n    /**\n     * @description check validation of user entered email with local regex\n     * @param type password for this screen\n     * @param value user entered value\n    */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n     * @description handle password change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value.trim();\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: Validation.validate('password', this.state.password) == 'success' });\n    }\n\n    /**\n     * @description  this method update user password to server\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ posting: true });\n        const { data,next_step } = this.props.location.state.nextStepData;\n        let device_type = window.ReactNativeWebView ? WSC.deviceTypeAndroid : WSC.deviceType\n        let device_id = window.ReactNativeWebView ? WSC.DeviceToken.getDeviceId() : WSC.deviceID\n\n        let param = {\n            \"step\": \"password\",\n            \"password\": md5(this.state.password),\n            \"email\": data.user_profile.email,\n            \"device_type\":device_type,\n            \"device_id\": device_id,\n\n        }\n        if (next_step === '/set-password' || next_step === 'set-password') {\n            updateSignupData(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.parseSubmitResponse(responseJson.data);\n                }\n                this.setState({ posting: false });\n            })\n        } else {\n            validateLogin(param).then((responseJson) => {\n                if (responseJson.response_code == WSC.successCode) {\n                    this.parseSubmitResponse(responseJson.data);\n                }\n                this.setState({ posting: false });\n            })\n        }\n    }\n    /**\n           * @description This function responsible for parsing api response after submit call\n         */\n    parseSubmitResponse(apiData) {\n        const { joinContest, lineupPath, FixturedContest, LobyyData } = this.props.location.state.nextStepData;\n        if (apiData.Sessionkey) {\n            WSManager.setTempToken(apiData.Sessionkey);\n        }\n        if (apiData.is_profile_complete == 1) {\n            WSManager.setProfile(apiData.user_profile);\n            WSManager.setToken(apiData.Sessionkey);\n            if (joinContest) {\n                let nextStepData = { FixturedContest: FixturedContest, LobyyData: LobyyData };\n                this.props.history.push({ pathname: lineupPath, state:{nextStepData:nextStepData}  })\n            } else {\n                this.gotoDetails(\"/\", apiData);\n            }\n        } else {\n            this.gotoDetails(\"/\" + apiData.next_step, apiData);\n        }\n    }\n\n    /**\n       * @description This function responsible for Navigate to next step after mobile verification\n     */\n    gotoDetails = (path, data) => {\n        let { lineupPath, FixturedContest, LobyyData,facebook_data,google_data, joinContest } = this.props.location.state.nextStepData;\n        let mData = { data, facebook_data: facebook_data, google_data: google_data, FixturedContest: FixturedContest, LobyyData: LobyyData, lineupPath: lineupPath, joinContest:joinContest };\n        this.props.history.push({ pathname: path, state: {nextStepData:mData} })\n    }\n\n    goToForgotPassword = () => {\n        this.props.history.push({ pathname: '/enter-email', state: { email: this.state.email } })\n    }\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            hideShadow: true,\n            isOnb: true,\n        }\n\n        const {\n            formValid,\n            posting,\n            password,\n            showPassword\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white\">\n                        {this.state.posting && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.passwordlogin.title}</title>\n                            <meta name=\"description\" content={MetaData.passwordlogin.description} />\n                            <meta name=\"keywords\" content={MetaData.passwordlogin.keywords}></meta>\n                        </Helmet>\n\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        \n                        <form onSubmit={this.onSubmit} className='onboarding-inner-pages' id='setPwdForm'>\n                            <div className='view-center-align'>\n                                <div className=\"verification-block \">\n                                    <Row>\n                                        <Col>\n                                            <div className=\"onboarding-page-heading-lg\">\n                                                {AppLabels.CREATE_YOUR_PASSWORD}\n                                            </div>\n                                            <div className=\"onboarding-page-desc\">\n                                                {AppLabels.CREATE_YOUR_PASSWORD_TEXT}\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"vertical-center-section-lg\">\n                                        <Col xs={12}  className=\"vertical-center-element\">\n                                            <FormGroup\n                                                className='input-label-center'\n                                                controlId=\"formBasicText\"\n                                                validationState={this.getValidationState('password', password)}>\n\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyle}\n                                                    id='password'\n                                                    name='password'\n                                                    value={password}\n                                                    placeholder={AppLabels.PASSWORD}\n                                                    type={showPassword? 'text' : 'password'}\n                                                    onChange={this.handleChange}\n                                                />\n                                            </FormGroup>\n                                            <a \n                                                href \n                                                onClick={\n                                                    ()=>this.setState({showPassword: !showPassword})\n                                                } \n                                                className=\"pwd-show-hide\"\n                                            >\n                                                <i className={showPassword ? \"icon-eye\" : \"icon-eye-cancel\"}></i>\n                                            </a>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"btm-fixed-submit\">                                               \n                                        <Col xs={12} className=\"text-center\">\n                                            <button className=\"submit-otp\" disabled={!formValid || posting} type='submit'><i className=\"icon-next-btn\"></i></button>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Pickem/NewPickemShareModal.jsx",["4402","4403"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { FacebookShareButton, WhatsappShareButton, EmailShareButton } from 'react-share';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities } from '../../Utilities/Utilities';\nimport WSManager from '../../WSHelper/WSManager';\nimport * as AL from \"../../helper/AppLabels\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\n\nclass NewPickemShareModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            spData: this.props.preData.spData,\n            shareURL: '',\n            shareText: AL.Your_Friend + ' ' + WSManager.getProfile().user_name + ' ' + AL.has_referred_you_on + ' ' + WSC.AppName + \", \" + AL.please_join_and_earn_prizes_text + \" : \\n\\n\"\n        };\n    }\n\n    componentDidMount() {\n        this.createAndSetUrls();\n    }\n\n    createAndSetUrls() {\n        let Data = this.state.spData ? this.state.spData : this.props.preData.spData;\n        let league_id = Data.league_id;\n        let pickem_id = Data.pickem_id;\n        let refCode = WSManager.getUserReferralCode();\n        let mURL = WSC.baseURL + Utilities.getSelectedSportsForUrl().toLowerCase() + \"/pickem-detail/\" + league_id + '/' + btoa(pickem_id);\n        let shareURL = mURL + (refCode ? (\"?referral=\" + refCode) : '');\n        this.setState({ shareURL: shareURL });\n    }\n\n    onCopyLink = () => {\n        this.showCopyToast(AL.Link_has_been_copied);\n    }\n\n    showCopyToast = (message) => {\n        Utilities.showToast(message, 2000)\n    }\n\n\n    callNativeShare(type, url, detail) {\n        let data = {\n            action: 'social_sharing',\n            targetFunc: 'social_sharing',\n            type: type,\n            url: url,\n            detail: detail\n        }\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    getEmailShareContent() {\n        if (window.ReactNativeWebView) {\n            if (this.state.shareURL != '') {\n                let shareLink = WSManager.getIsIOSApp() ? this.state.shareURL : encodeURIComponent(this.state.shareURL);\n                let shareText = this.state.shareText + shareLink + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                return shareText\n            }\n            return ''\n        }\n        else {\n            let shareText = this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n            return shareText\n        }\n    }\n\n    render() {\n        const { mShow, mHide } = this.props.preData;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={mShow}\n                        onHide={mHide}\n                        dialogClassName=\"custom-modal thank-you-modal\"\n                        className=\"center-modal\"\n                    >\n\n                        <div className=\"social-linking\">\n                            <div className=\"link-heading\">{AL.INVITE_YOUR_FRIENDS_VIA}</div>\n                            {\n                            WSManager.getIsMobileApp()\n                                     ?\n                                    <ul className=\"social-icons\">\n                                        <li>\n                                            <CopyToClipboard onCopy={() => this.callNativeShare('facebook', this.state.shareURL, this.state.shareText + this.state.shareURL + + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)} text={this.state.shareURL} className=\"social-circle icon-share\">\n                                                <i className=\"icon-share\"></i>\n                                            </CopyToClipboard>\n                                            <label>{AL.SHARE}</label>\n                                        </li>\n                                    </ul>\n                            :\n                            <ul className=\"social-icons\">\n                                <li>\n                                    <CopyToClipboard onCopy={this.onCopyLink} text={this.state.shareURL} className=\"social-circle icon-link\">\n                                        <i className=\"icon-link\"></i>\n                                    </CopyToClipboard>\n                                    <label>{AL.INVITE_LINK}</label>\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-facebook\" onClick={() => this.callNativeShare('facebook', this.state.shareURL, this.state.shareText + this.state.shareURL + + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_FB}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <FacebookShareButton className=\"social-circle icon-facebook\" url={this.state.shareURL} quote={this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName}\n                                            />\n                                            <label>{AL.INVITE_FB}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                                <li>\n                                    {window.ReactNativeWebView ?\n                                        <span className=\"social-circle icon-whatsapp\" onClick={() => this.callNativeShare('whatsapp', this.state.shareURL, this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName)}>\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </span>\n                                        :\n                                        <React.Fragment>\n                                            <WhatsappShareButton className=\"social-circle icon-whatsapp\"\n                                                url={\n                                                    this.state.shareText + this.state.shareURL + '\\n\\n' + AL.Cheers + \",\\n\" + AL.Team + \" \" + WSC.AppName\n                                                } />\n                                            <label>{AL.INVITE_WHATSAPP}</label>\n                                        </React.Fragment>\n                                    }\n                                </li>\n                            </ul>\n                }\n                        </div>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default NewPickemShareModal;","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/EmailLogin.jsx",["4404","4405","4406","4407","4408","4409","4410","4411","4412","4413","4414","4415"],"import React from 'react';\nimport { Row, Col, Button, FormGroup } from 'react-bootstrap';\nimport { Helmet } from \"react-helmet\";\nimport { userLogin, socialLogin } from \"../../../WSHelper/WSCallings\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Utilities, checkFlow, _isUndefined, sendMessageToApp } from '../../../Utilities/Utilities';\nimport { inputStyle } from '../../../helper/input-style';\nimport { SelectLanguage } from '../../CustomComponent';\nimport { createBrowserHistory } from 'history';\nimport { ReCaptcha } from 'react-recaptcha-v3'\nimport FloatingLabel from 'floating-label-react';\nimport FacebookLogin from 'react-facebook-login';\nimport GoogleLogin from 'react-google-login';\nimport TagManager from 'react-gtm-module';\nimport Validation from '../../../helper/Validation';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport Images from '../../../components/images';\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as Constants from \"../../../helper/Constants\";\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\n/**\n  * @description This function is for Google Tag manager\n  * @GA_PROFILE_ID - unique identifier defined in constant \n  */\nconst tagManagerArgs = {\n    gtmId: WSC.GA_PROFILE_ID,\n    events: {\n        submit: { 'event_category': 'form', 'event_label': 'sign up' }\n    }\n}\n\nexport default class EmailLogin extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            email: '',\n            formValid: false,\n            posting: false,\n            allowLanguage: Constants.ALLOW_LANG,\n            captchaToken: ''\n\n        };\n    }\n\n    componentWillMount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: true,\n        }\n        sendMessageToApp(data)\n        setTimeout(() => {\n            let token_data = {\n                action: 'push',\n                targetFunc: 'push',\n                type: 'deviceid',\n            }\n            sendMessageToApp(token_data)\n        }, 300);\n        if (!_isUndefined(parsed) && parsed.referral !== \"\" && parsed.referral !== null && !_isUndefined(parsed.referral)) {\n            WSManager.setReferralCode(parsed.referral)\n        }\n        if (!_isUndefined(parsed) && parsed.affcd) {\n            WSManager.setAffiliatCode(parsed.affcd)\n        }\n    }\n\n    componentDidMount() {\n        if (WSManager.getIsIOSApp()) {\n            let def_lang = WSManager.getAppLang()\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale: def_lang,\n                    targetFunc: 'handleLogoutReceived'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n        }\n        if (window.ReactNativeWebView) {\n            this.handelNativeGoogleLogin()\n        }\n    }\n\n    componentWillUnmount() {\n        let data = {\n            action: 'back',\n            targetFunc: 'back',\n            type: false,\n        }\n        sendMessageToApp(data)\n    }\n\n    handelNativeGoogleLogin() {\n        window.addEventListener('message', (e) => {\n            if (e.data.action === 'login' && e.data.type === 'google') {\n                let profileObj = {\n                    email: e.data.response.user && e.data.response.user.email ? e.data.response.user.email : e.data.response.email\n                };\n                let googleUser = {\n                    'tokenId': e.data.response.auth ? e.data.response.auth.idToken : e.data.response.idToken,\n                    'googleId': e.data.response.user ? e.data.response.user.uid : e.data.response.uid,\n                    'profileObj': profileObj\n                };\n                this.responseGoogle(googleUser, true)\n            }\n            else if (e.data.action === 'login' && e.data.type === 'facebook') {\n                let fbUser = JSON.parse(e.data.response._bodyText);\n\n                let user = {\n                    'email': fbUser.email ? fbUser.email : '',\n                    'accessToken': e.data.response.token,\n                    'id': fbUser.id\n                };\n                this.onFacebookSuccess(user)\n            }\n            else if (e.data.action === 'push' && e.data.type === 'deviceid') {\n                WSC.DeviceToken.setDeviceId(e.data.token);\n            }\n        });\n    }\n\n    /**\n     * @description check validation of user entered email with local regex\n     * @param type email for this screen\n     * @param value user entered value\n     */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n     * @description handle email change and update state variable\n     * @param e click event\n     */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n     */\n    validateForm() {\n        this.setState({ formValid: Validation.validate('email', this.state.email) == 'success' });\n    }\n\n    /**\n     * @description this method update user email to server\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ posting: true });\n        let device_type = window.ReactNativeWebView ? WSC.deviceTypeAndroid : WSC.deviceType\n        let device_id = window.ReactNativeWebView ? WSC.DeviceToken.getDeviceId() : WSC.deviceID\n\n        let param = {\n            \"email\": this.state.email,\n            \"device_type\": device_type,\n            \"device_id\": device_id,\n            \n        }\n        if (process.env.REACT_APP_CAPTCHA_ENABLE == 1) {\n            param['token'] = this.state.captchaToken;\n        }\n        userLogin(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({ posting: false });\n                if (responseJson.data && responseJson.data.Sessionkey) {\n                    WSManager.setTempToken(responseJson.data.Sessionkey);\n                }\n                if (responseJson.data && responseJson.data.is_user_exist == 0) {\n                    TagManager.initialize(tagManagerArgs)\n                }\n                this.gotoDetails(responseJson.data)\n            }\n        })\n        Utilities.setDefaultSport();\n    }\n    /**\n     * @description This function responsible for Navigate to terms-condition\n     */\n    goToTermsNCondition = (data) => {\n        this.props.history.push({ pathname: '/terms-condition' })\n    }\n\n    /**\n     * @description This function responsible for Navigate to next step after update email\n     */\n    gotoDetails = (data) => {\n        let nextStepData = { data: data || '' }\n        if (this.props.location.state && this.props.location.state.joinContest) {\n            let { facebook_data, google_data, lineupPath, FixturedContest, LobyyData } = this.props.location.state;\n            let { email } = this.state;\n            nextStepData = { joinContest: this.props.location.state.joinContest || '', data: data, FixturedContest: FixturedContest, LobyyData: LobyyData, lineupPath: lineupPath, facebook_data: facebook_data, google_data: google_data, email: email };\n            if (data.next_step === 'otp') {\n                data['next_step'] = 'verify';\n            }\n            else {\n                data['next_step'] = 'password';\n            }\n        }\n        else {\n            let { email } = this.state;\n            if (data.next_step === 'otp') {\n                data['next_step'] = 'verify';\n            }\n            else {\n                data['next_step'] = 'password';\n            }\n            nextStepData = { data: data, email: email };\n        }\n        this.props.history.push(checkFlow(nextStepData))\n    }\n\n    onFacebookSuccess = (user) => {\n        if (user) {\n            this.setState({ posting: true });\n            let param = {\n                \"email\": user.email,\n                \"facebook_id\": user.id,\n                \"facebook_access_token\": user.accessToken,\n                \"password\": '',\n                \"device_type\": WSC.deviceType,\n                \"device_id\": WSC.DeviceToken.getDeviceId(),\n            }\n            socialLogin(param).then((responseJson) => {\n                if (responseJson && responseJson.response_code === WSC.successCode) {\n                    WSManager.setTempToken(responseJson.data.Sessionkey);\n                    if (responseJson.data.next_step === 'set_password') {\n                        responseJson.data.next_step = 'set-password'\n                    }\n                    let nextStepData = { data: responseJson.data, facebook_data: user, google_data: null, next_step: responseJson.data.next_step };\n                    this.props.history.push(checkFlow(nextStepData))\n                }\n                this.setState({ posting: false });\n            })\n        }\n    }\n\n    /**\n     * @description FB failure callback\n     * @param err error received from FB api\n    */\n    onLoginFailure(err) {\n        console.error('FB onLoginFailure' + err)\n    }\n\n    responseGoogle = (googleUser, isSuccess) => {\n        if (googleUser && isSuccess) {\n            this.setState({ posting: true });\n            var id_token = googleUser.tokenId;\n            var googleId = googleUser.googleId;\n            let param = {\n                \"email\": googleUser.profileObj.email ? googleUser.profileObj.email : '',\n                \"google_id\": googleId,\n                \"google_access_token\": id_token,\n                \"password\": '',\n                \"device_type\": window.ReactNativeWebView ? WSC.deviceTypeAndroid : WSC.deviceType,\n                \"device_id\": window.ReactNativeWebView ? WSC.DeviceToken.getDeviceId() : WSC.deviceID,\n            }\n\n            socialLogin(param).then((responseJson) => {\n                if (responseJson.response_code === WSC.successCode) {\n                    WSManager.setTempToken(responseJson.data.Sessionkey);\n                    if (responseJson.data.next_step === 'set_password') {\n                        responseJson.data.next_step = 'set-password'\n                    }\n                    let nextStepData = { data: responseJson.data, facebook_data: null, google_data: googleUser, next_step: responseJson.data.next_step };\n                    this.props.history.push(checkFlow(nextStepData))\n                }\n                this.setState({ posting: false });\n            })\n        }\n    }\n\n    isAndroidApp() {\n        if (navigator.userAgent.toLowerCase().match(/(android-app)/)) {\n            return true;\n        }\n        return false;\n    }\n\n    appNativeLogin(type) {\n        let data = {\n            action: 'login',\n            type: type,\n        }\n        sendMessageToApp(data)\n    }\n\n    onCaptchaChange = (value) => {\n        this.setState({\n            captchaToken: value\n        })\n    }\n\n    /**\n     * @description Render UI component\n     */\n    render() {\n        const {\n            posting,\n            email\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white p-0\">\n                        {\n                            process.env.REACT_APP_CAPTCHA_ENABLE == 1 && <ReCaptcha\n                                sitekey={process.env.REACT_APP_CAPTCHA_SITEKEY}\n                                verifyCallback={this.onCaptchaChange}\n                            />\n                        }\n                        {this.state.posting && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.emaillogin.title}</title>\n                            <meta name=\"description\" content={MetaData.emaillogin.description} />\n                            <meta name=\"keywords\" content={MetaData.emaillogin.keywords}></meta>\n                        </Helmet>\n                        <form onSubmit={this.onSubmit} className=\"signup-form\" id='emailLoginForm'>\n\n                            <div className=\"verification-block\">\n                                <div className=\"media-checks\">\n                                    <div className=\"socail-region\">\n                                        <img alt=\"\" src={Images.BRAND_LOGO_FULL} className=\"logo-lg\" />\n                                        <Row>\n                                            <Col xs={12} className='phone-number-style'>\n                                                <FormGroup\n                                                    className='input-label-center'\n                                                    controlId=\"formBasicText\"\n                                                    validationState={this.getValidationState('email', email)}>\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyle}\n                                                        id='email'\n                                                        name='email'\n                                                        value={email}\n                                                        placeholder={AppLabels.ENTER_YOUR_EMAIL}\n                                                        type='email'\n                                                        onChange={this.handleChange}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                        {Utilities.getMasterData().allow_fb == 1 || Utilities.getMasterData().allow_google == 1 && <div className=\"title\">{AppLabels.CONNECT_INSTANTLY_WITH}</div>}\n                                        <div className=\"content\">\n                                            {\n                                                Utilities.getMasterData().allow_fb == 1 && <React.Fragment>\n                                                    {this.isAndroidApp() ?\n                                                        <div onClick={() => this.appNativeLogin('facebook')} className=\"social-item facebook\">\n                                                            <i className=\"icon-facebook facebook\"></i>\n                                                        </div>\n                                                        :\n                                                        <div className=\"social-item facebook cursor-pointer\">\n                                                            <FacebookLogin\n                                                                appId={WSC.FB_APP_ID}\n                                                                autoLoad={false}\n                                                                cookie={false}\n                                                                callback={this.onFacebookSuccess}\n                                                                onFailure={this.onLoginFailure}\n                                                                cssClass=\"bg mR-20\"\n                                                                redirectUri={WSC.baseURL + '/signup'}\n                                                                fields=\"name,email,picture\"\n                                                                scope={['email']}\n                                                                className=\"cursor-pointer\"\n                                                                icon={<i className=\"icon-facebook facebook\"></i>}\n                                                                textButton={<div className=\"label facebook\"></div>}\n                                                            />\n                                                        </div>\n                                                    }\n                                                </React.Fragment>\n                                            }\n                                            {\n                                                Utilities.getMasterData().allow_google == 1 && <React.Fragment>\n                                                    {\n                                                        this.isAndroidApp() ?\n                                                            <div onClick={() => this.appNativeLogin('google')} className=\"social-item gplus\">\n                                                                <img src={Images.GPLUS_LOGO} alt=\"\" width=\"30px\" />\n                                                            </div>\n                                                            :\n                                                            <div className=\"social-item gplus\">\n                                                                <GoogleLogin\n                                                                    clientId={WSC.GPLUS_ID}\n                                                                    buttonText={AppLabels.GOOGLE}\n                                                                    scope=\"profile email\"\n                                                                    autoLoad={false}\n                                                                    icon={false}\n                                                                    fetchBasicProfile={false}\n                                                                    redirectUri={WSC.baseURL + '/signup'}\n                                                                    className=\"google-login-btn\"\n                                                                    onSuccess={(user) => this.responseGoogle(user, true)}\n                                                                    onFailure={(user) => this.responseGoogle(user, false)}\n                                                                >\n                                                                    <img src={Images.GPLUS_LOGO} alt=\"\" width=\"30px\" />\n                                                                </GoogleLogin>\n                                                            </div>\n                                                    }\n                                                </React.Fragment>\n                                            }\n\n                                        </div>\n                                        <Button className=\"btn-block btm-action-btn\" disabled={!(email && Validation.validate('email', this.state.email)) || posting} bsStyle=\"primary\" type='submit'>{AppLabels.SIGN_UP_OR_LOGIN}</Button>\n\n                                        <Row>\n                                            <Col xs={12}>\n                                                <p className=\"auth-txt sm\">\n                                                    {AppLabels.I_hereby_confirm}\n                                                    <a className='primary' target='_blank' href=\"/terms-condition\"> {AppLabels.TERMS_CONDITION} </a>\n                                                    {Utilities.getMasterData().int_version != 1 ? AppLabels.and_I_am_not_a : ''}\n                                                </p>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </form>\n                        {this.state.allowLanguage && this.state.allowLanguage.length > 1 &&\n                            <SelectLanguage isBottomFixed={true} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/ChangePassword.jsx",["4416","4417","4418","4419"],"import React from 'react';\nimport { Row, Col, FormGroup, Button } from 'react-bootstrap';\nimport {changePassword} from \"../../../WSHelper/WSCallings\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport md5 from 'md5';\nimport { inputStyleLeft } from '../../../helper/input-style';\nimport FloatingLabel from 'floating-label-react';\nimport CustomHeader from '../../../components/CustomHeader';\nimport {Utilities} from '../../../Utilities/Utilities';\n\n\n\nlet error = undefined;\nexport default class ChangePassword extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            formValid: false,\n            error: AppLabels.PLEASE_ENTER_NEW_PASSWORD,\n            isLoading: false\n        };\n    }\n\n\n    /**\n     * @description handle email change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: this.isValid(false), error: error });\n    }\n\n\n    /**\n     * @description This function will check all fields are valid or not\n     * @returns Boolean: either valid or not \n    */\n    isValid = (notifyAllowed) => {\n\n        if (this.state.currentPassword == '') {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.PLEASE_ENTER_CURRENT_PASSWORD, 3000);\n            error = AppLabels.PLEASE_ENTER_CURRENT_PASSWORD;\n            return false;\n        }\n        if (this.state.newPassword == '') {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.PLEASE_ENTER_NEW_PASSWORD, 3000);\n            error = AppLabels.PLEASE_ENTER_NEW_PASSWORD;\n            return false;\n        }\n        if (this.state.newPassword.length < 8) {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.NEW_PASSWORD_MIN_LENGTH, 3000);\n            error = AppLabels.NEW_PASSWORD_MIN_LENGTH;\n            return false;\n        }\n        if (this.state.newPassword.length > 36) {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.NEW_PASSWORD_MAX_LENGTH, 3000);\n            error = AppLabels.NEW_PASSWORD_MAX_LENGTH;\n            return false;\n        }\n        if (this.state.newPassword != this.state.confirmPassword) {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.PASSWORD_NOT_MATCHED, 3000);\n            error = AppLabels.PASSWORD_NOT_MATCHED;\n            return false;\n        }\n\n        error = '';\n        return true;\n    }\n\n    /**\n     * @description  this method update user email to server\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ isLoading: true });\n        let param = {\n            \"old_password\": md5(this.state.currentPassword),\n            \"password\": md5(this.state.newPassword),\n        }\n\n        changePassword(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n\n            if (responseJson.response_code == WSC.successCode) {\n                Utilities.showToast(responseJson.message, 3000);\n                this.props.history.goBack();\n            }\n        })\n    }\n\n    /**\n       * @description This function responsible for Navigate to next step after update email\n     */\n    gotoDetails = (data) => {\n\n    }\n\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            filter: false,\n            title: AppLabels.RESET_PASSWORD,\n            hideShadow: true,\n            isOnb: true,\n        }\n\n        const {\n            newPassword,\n            confirmPassword,\n            currentPassword,\n            formValid,\n            isLoading\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white change-password-container\">\n                        {isLoading && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.changepassword.title}</title>\n                            <meta name=\"description\" content={MetaData.changepassword.description} />\n                            <meta name=\"keywords\" content={MetaData.changepassword.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <form onSubmit={this.onSubmit} className=\"mt-20per\" id='changePwdForm'>\n                            <div className=\"verification-block\">\n                                <Row>\n                                    <Col xs={12}>\n                                        <FormGroup\n                                            className='input-label-center-align'\n                                            controlId=\"formBasicText\"\n                                        >\n                                            <FloatingLabel\n                                                autoComplete='off'\n                                                styles={inputStyleLeft}\n                                                id='currentPassword'\n                                                name='currentPassword'\n                                                value={currentPassword}\n                                                placeholder={AppLabels.CURRENT_PASSWORD}\n                                                type='password'\n                                                onChange={this.handleChange}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col xs={12}>\n                                        <FormGroup\n                                            className='input-label-center-align'\n                                            controlId=\"formBasicText\"\n                                        >\n                                            <FloatingLabel\n                                                autoComplete='off'\n                                                styles={inputStyleLeft}\n                                                id='newPassword'\n                                                name='newPassword'\n                                                value={newPassword}\n                                                placeholder={AppLabels.NEW_PASSWORD}\n                                                type='password'\n                                                onChange={this.handleChange}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col xs={12}>\n                                        <FormGroup\n                                            className='input-label-center-align'\n                                            controlId=\"formBasicText\"\n                                        >\n                                            <FloatingLabel\n                                                autoComplete='off'\n                                                styles={inputStyleLeft}\n                                                id='confirmPassword'\n                                                name='confirmPassword'\n                                                value={confirmPassword}\n                                                placeholder={AppLabels.CONFIRM_PASSWORD}\n                                                type='password'\n                                                onChange={this.handleChange}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col xs={12}>\n                                        <Button className=\"btn-block btm-action-btn\" disabled={!formValid || isLoading} bsStyle=\"primary\" type='submit'>{AppLabels.SUBMIT}\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Pickem/PickemLeaderboardItem.jsx",[],"/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/ForgotEmailPassword.jsx",["4420","4421","4422","4423","4424","4425","4426","4427","4428"],"import React from 'react';\nimport { Row, Col, Button, FormGroup } from 'react-bootstrap';\nimport Validation from '../../../helper/Validation';\nimport WSManager from \"../../../WSHelper/WSManager\";\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport { inputStyle } from '../../../helper/input-style';\nimport FloatingLabel from 'floating-label-react';\nimport CustomHeader from '../../../components/CustomHeader';\nimport {Utilities, _isUndefined} from '../../../Utilities/Utilities';\nimport SuccessModal from \"../../../Modals/SuccessModal\";\nimport { forgotPassword } from '../../../WSHelper/WSCallings';\n\nlet error = '';\nexport default class ForgotEmailPassword extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            email: !_isUndefined(this.props.location.state) && !_isUndefined(this.props.location.state.email) ? this.props.location.state.email : '',\n            formValid: false,\n            isLoading: false,\n            error: AppLabels.ENTER_YOUR_REGISTERED_EMAIL,\n            showSuccessModal: false\n        };\n    }\n\n    ShowSuccessModal=()=>{\n        this.setState({\n            showSuccessModal: true\n        })\n    }\n    HideSuccessModal=()=>{\n        this.setState({\n            showSuccessModal: false\n        },()=>{\n            this.props.history.goBack()\n        })\n    }\n\n    /**\n     * @description check validation of user entered email with local regex\n     * @param type email for this screen\n     * @param value user entered value\n    */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n     * @description handle email change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: this.isValid(false), error: error });\n\n    }\n\n    /**\n     * @description This function will check all fields are valid or not\n     * @returns Boolean: either valid or not \n    */\n    isValid(notifyAllowed) {\n\n        if (this.state.email == '') {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.ENTER_YOUR_REGISTERED_EMAIL, 3000);\n            error = AppLabels.ENTER_YOUR_REGISTERED_EMAIL;\n            return false;\n        }\n        if (Validation.validate('email', this.state.email) != 'success') {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.INVALID_EMAIL_ID, 3000);\n            error = AppLabels.INVALID_EMAIL_ID;\n            return false;\n        }\n\n        error = '';\n        return true;\n    }\n\n    /**\n     * @description  this method update user email to server\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ isLoading: true });\n        let param = {\n            \"email\": this.state.email\n        }\n\n        forgotPassword(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({showSuccessModal: true})\n                \n            }\n        })\n    }\n\n    /**\n       * @description This function responsible for Navigate to next step after update email\n     */\n    gotoDetails = (data) => {\n        if (this.props.location.state && this.props.location.state.joinContest) {\n            let { joinContest, lineupPath, FixturedContest, LobyyData } = this.props.location.state;\n            this.props.history.push({ pathname: '/set-password', state: { data: data, FixturedContest: this.props.location.state.FixturedContest, LobyyData: this.props.location.state.LobyyData, lineupPath: this.props.location.state.lineupPath, facebook_data: this.props.location.state.facebook_data, google_data: this.props.location.state.google_data } })\n        }\n        else {\n            this.props.history.push({ pathname: '/set-password', state: { data: data } })\n        }\n    }\n\n    componentDidMount() {\n        this.validateForm()\n    }\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            filter: false,\n            \n            hideShadow: true,\n            isOnb: true,\n        }\n\n        const {\n            formValid,\n            isLoading,\n            email,\n            showSuccessModal\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white enter-email-forgot-password-container\">\n                        {isLoading && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.forgotpassword.title}</title>\n                            <meta name=\"description\" content={MetaData.forgotpassword.description} />\n                            <meta name=\"keywords\" content={MetaData.forgotpassword.keywords}></meta>\n                        </Helmet>\n                        \n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n\n                        <form onSubmit={this.onSubmit} className=\"onboarding-inner-pages\" id='forgotEmailPwdForm'>\n                            <div className='view-center-align'>\n                                <div className=\"verification-block \">\n                                    <Row>\n                                        <Col>\n                                            <div className=\"onboarding-page-heading-lg\">\n                                                {AppLabels.FORGOT_YOUR_PASSWORD}\n                                            </div>\n                                            <div className=\"onboarding-page-desc\">\n                                                {AppLabels.FORGOT_YOUR_PASSWORD_TEXT}\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"vertically-center-section\">\n                                        <Col xs={12}>\n                                            <FormGroup\n                                                className='input-label-center'\n                                                controlId=\"formBasicText\">\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyle}\n                                                    id='email'\n                                                    name='email'\n                                                    value={this.state.email}\n                                                    placeholder={AppLabels.EMAIL}\n                                                    type='email'\n                                                    onChange={this.handleChange}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"text-center btm-fixed-submit\">\n                                        <Col xs={12}>\n                                            <Button className=\"btn-block btm-action-btn mt30\" disabled={!formValid || isLoading} bsStyle=\"primary\" type='submit'>{AppLabels.SUBMIT}</Button>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        </form>\n\n                        {showSuccessModal &&\n                            <SuccessModal IsSuccessModalShow={showSuccessModal} HideSuccessModal={this.HideSuccessModal} />    \n                        }\n\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/OnBoarding/EmailFlow/ResetPassword.jsx",["4429","4430","4431"],"import React from 'react';\nimport { Row, Col, FormGroup, Button } from 'react-bootstrap';\nimport Validation from '../../../helper/Validation';\nimport * as WSC from \"../../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../../helper/AppLabels\";\nimport { MyContext } from '../../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../../helper/MetaData\";\nimport CustomLoader from '../../../helper/CustomLoader';\nimport queryString from 'query-string';\nimport { notify } from 'react-notify-toast';\nimport md5 from 'md5';\nimport { inputStyleLeft } from '../../../helper/input-style';\nimport FloatingLabel from 'floating-label-react';\nimport CustomHeader from '../../../components/CustomHeader';\nimport {Utilities} from '../../../Utilities/Utilities';\nimport { validateForgotPassword, resetForgotPassword } from '../../../WSHelper/WSCallings';\n\n\nlet error = undefined;\nlet urlParams = undefined;\nexport default class ResetPassword extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            newPassword: '',\n            confirmPassword: '',\n            formValid: false,\n            error: AppLabels.PLEASE_ENTER_NEW_PASSWORD,\n            key:'',\n            isLoading: false\n        };\n    }\n\n    componentDidMount() {\n       let url = this.props.location.search;\n        urlParams = queryString.parse(url);\n       this.validateToken(urlParams.key);\n   \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n\n      \n    }\n\n    /**\n     * @description this function is used to check url token is valid or not. It is checked from server\n     * @param key this comes in Url param\n    */\n    validateToken(key) {\n        this.setState({ isLoading: true });\n        let param = {\n            \"key\": key,\n        }\n\n        validateForgotPassword(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson.response_code !== WSC.successCode) {\n                this.validationFailled(responseJson.data)\n            }\n        })\n    }\n\n    /**\n     * @description this function is responsible to manage flow after validating token.\n     * @param response Json Response of token validation API.\n    */\n    validationFailled(response) {\n        \n    }\n\n    /**\n     * @description check validation of user entered email with local regex\n     * @param type email for this screen\n     * @param value user entered value\n    */\n    getValidationState(type, value) {\n        return Validation.validate(type, value)\n    }\n\n    /**\n     * @description handle email change and update state variable\n     * @param e click event\n    */\n    handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({ [name]: value }, this.validateForm);\n    }\n\n    /**\n     * @description manage form validations\n    */\n    validateForm() {\n        this.setState({ formValid: this.isValid(false), error: error });\n    }\n\n\n    /**\n     * @description This function will check all fields are valid or not\n     * @returns Boolean: either valid or not \n    */\n    isValid = (notifyAllowed) => {\n\n        if (this.state.newPassword == '') {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.PLEASE_ENTER_NEW_PASSWORD, 3000);\n            error = AppLabels.PLEASE_ENTER_NEW_PASSWORD;\n            return false;\n        }\n        if (this.state.newPassword.length < 8) {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.NEW_PASSWORD_MIN_LENGTH, 3000);\n            error = AppLabels.NEW_PASSWORD_MIN_LENGTH;\n            return false;\n        }\n        if (this.state.newPassword.length > 36) {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.NEW_PASSWORD_MAX_LENGTH, 3000);\n            error = AppLabels.NEW_PASSWORD_MAX_LENGTH;\n            return false;\n        }\n        if (this.state.newPassword != this.state.confirmPassword) {\n            if (notifyAllowed)\n                Utilities.showToast(AppLabels.PASSWORD_NOT_MATCHED, 3000);\n            error = AppLabels.PASSWORD_NOT_MATCHED;\n            return false;\n        }\n        error = '';\n        return true;\n    }\n\n    /**\n     * @description  this method update user email to server\n     * @param e- click event\n     * after success navigate to next step\n     * **/\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ isLoading: true });\n        let param = {\n            \"key\": urlParams.key,\n            \"password\": md5(this.state.newPassword),\n        }\n\n        resetForgotPassword(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson.response_code == WSC.successCode) {\n                notify.show(responseJson.message, \"success\", 3000);\n                setTimeout(() => {\n                    this.props.history.replace('/signup')\n                }, 3000);\n            }\n            else{\n                if(responseJson.message){\n                     notify.show(responseJson.message, \"error\", 3000);\n                }\n                else{\n                    notify.show(\"Token is expired or Invalid Token\", \"error\", 3000);\n                }\n            }\n        })\n    }\n\n    /**\n       * @description This function responsible for Navigate to next step after update email\n     */\n    gotoDetails = (data) => {\n\n    }\n\n\n    /**\n     * @description Render UI component\n    */\n    render() {\n        const HeaderOption = {\n            back: true,\n            filter: false,\n            \n            hideShadow: true,\n            isOnb: true,\n        }\n\n        const {\n            newPassword,\n            confirmPassword,\n            formValid,\n            isLoading\n\n        } = this.state;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <div className=\"web-container bg-white forgot-password-container\">\n                        {isLoading && <CustomLoader />}\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.resetpassword.title}</title>\n                            <meta name=\"description\" content={MetaData.resetpassword.description} />\n                            <meta name=\"keywords\" content={MetaData.resetpassword.keywords}></meta>\n                        </Helmet>\n\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <form onSubmit={this.onSubmit} className=\"onboarding-inner-pages inner-top-spacing\" id='resetPawdForm'>\n                            <div className=\"verification-block\">\n                                <Row>\n                                    <Col>\n                                        <div className=\"onboarding-page-heading\">\n                                            {AppLabels.RESET_PASSWORD}\n                                        </div>\n                                        <div className=\"onboarding-page-desc\">\n                                            {AppLabels.RESET_PASSWORD_TEXT}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <div className=\"vertical-center-section-xlg\">\n                                    <Row className=\"vertical-center-element \">\n                                            <Col xs={12}>\n                                                <FormGroup\n                                                    className='input-label-center-align'\n                                                    controlId=\"formBasicText\"\n                                                >\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='newPassword'\n                                                        name='newPassword'\n                                                        value={newPassword}\n                                                        placeholder={AppLabels.NEW_PASSWORD}\n                                                        type='password'\n                                                        onChange={this.handleChange}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                            <Col xs={12}>\n                                                <FormGroup\n                                                    className='input-label-center-align'\n                                                    controlId=\"formBasicText\"\n                                                >\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='confirmPassword'\n                                                        name='confirmPassword'\n                                                        value={confirmPassword}\n                                                        placeholder={AppLabels.CONFIRM_PASSWORD}\n                                                        type='password'\n                                                        onChange={this.handleChange}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                    </Row>\n                                </div>\n                                <Row className=\"text-center btm-fixed-submit\">\n                                    <Col xs={12}>\n                                        <Button className=\"btn-block btm-action-btn\" disabled={!formValid || isLoading} bsStyle=\"primary\" type='submit'>{AppLabels.SUBMIT}\n                                            </Button>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </form>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Component/StaticPages/Offers.jsx",[],"/var/www/html/framework/frontend/src/Component/StaticPages/Legality.jsx",[],"/var/www/html/framework/frontend/src/Component/StaticPages/TermsCondition.jsx",["4432","4433"],"import React from 'react';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport CustomHeader from '../../components/CustomHeader';\nimport { getStaticPageData } from '../../WSHelper/WSCallings';\n\nexport default class TermsCondition extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pageData: {\"page_title\":AppLabels.TERMS_CONDITION,\"page_content\":\"\"}\n        }\n    }\n    componentDidMount() {\n        this.getPageContentData();        \n    }\n\n    getPageContentData=async()=> {\n        var page_alias = \"terms_of_use\";\n        let param = {\n            \"page_alias\": page_alias\n        }\n        \n        var api_response_data = await getStaticPageData(param);\n        if(api_response_data){\n            this.setState({\n                pageData: api_response_data\n            })\n        }\n    }\n    render() {\n        const HeaderOption = {\n            back: this.props.history.length > 1,\n            filter: false,\n            title: this.state.pageData.page_title,\n            hideShadow: true,\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container static-page transparent-header web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.termsconditions.title}</title>\n                            <meta name=\"description\" content={MetaData.termsconditions.description} />\n                            <meta name=\"keywords\" content={MetaData.termsconditions.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        \n                        <div className=\"webcontainer-inner\">   \n                            <div className=\"page-body\">                            \n                                <div dangerouslySetInnerHTML={{__html: this.state.pageData.page_content}}></div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/StaticPages/RulesScoring.jsx",["4434","4435","4436","4437"],"import React from 'react';\nimport {  Tabs, Tab } from 'react-bootstrap';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport {_Map} from \"../../Utilities/Utilities\";\nimport CustomHeader from '../../components/CustomHeader';\nimport {SportsIDs} from \"../../JsonFiles\";\nimport { AppSelectedSport } from '../../helper/Constants';\nimport { getRulePageData } from '../../WSHelper/WSCallings';\nimport { AdSenseComponent } from '../CustomComponent';\n\nvar mContext = undefined;\nexport default class RulesScoring extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.state = {\n            pageData: { \"page_title\": AppLabels.RULES_SCORING, \"page_content\": \"\" },\n            key: 1,\n            rulesAndScoringArray: '',\n            rulesAndScoringArrayTest: '',\n            rulesAndScoringArrayT20: '',\n            rulesAndScoringArrayT10: '',\n            rulesAndScoringArrayODI: ''\n        }\n    }\n    \n    componentDidMount() {\n        mContext = this;\n        this.callGET_SCORING_MASTER_DATA()\n    }\n    callGET_SCORING_MASTER_DATA=async()=> {\n        let param = {\n            \"sports_id\": AppSelectedSport\n        }\n\n        var api_response_data = await getRulePageData(param);\n        if(api_response_data){\n            if (AppSelectedSport == SportsIDs.cricket) {\n                this.setState({\n                    rulesAndScoringArray: api_response_data,\n                    rulesAndScoringArrayTest: api_response_data.test,\n                    rulesAndScoringArrayT20: api_response_data.tt,\n                    rulesAndScoringArrayT10: api_response_data.t10,\n                    rulesAndScoringArrayODI: api_response_data.one_day\n                })\n            }\n            else {\n                this.setState({\n                    rulesAndScoringArray: api_response_data\n                })\n            }\n        }\n    }\n\n    static reload() {\n        if(mContext && window.location.pathname.startsWith(\"/rules-and-scoring\")){\n            mContext.setState({ rulesAndScoringArray: [], rulesAndScoringArrayTest:[], rulesAndScoringArrayT20:[], rulesAndScoringArrayT10:[], rulesAndScoringArrayODI:[] }, ()=>{\n                mContext.callGET_SCORING_MASTER_DATA()\n            })\n        }\n    }\n\n    handleSelect(key) {\n        this.setState({ key });\n    }\n\n\n    render() {\n        const HeaderOption = {\n            back: this.props.history.length > 1,\n            filter: false,\n            title: this.state.pageData.page_title\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container static-page transparent-header web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.rulesscoring.title}</title>\n                            <meta name=\"description\" content={MetaData.rulesscoring.description} />\n                            <meta name=\"keywords\" content={MetaData.rulesscoring.keywords}></meta>\n                        </Helmet>\n\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        \n                        <div className=\"webcontainer-inner\">  \n                            <div className=\"page-body rules-scoring-body\">\n\n\n                                {AppSelectedSport == SportsIDs.cricket &&\n\n\n                                    <Tabs\n                                        activeKey={this.state.key}\n                                        onSelect={this.handleSelect}\n                                        id=\"controlled-tab-example\" className=\"custom-nav-tabs\"\n                                    >\n                                        <Tab eventKey={1} title={AppLabels.TEST}>\n                                        {\n                                            this.state.rulesAndScoringArrayTest && \n                                            _Map(this.state.rulesAndScoringArrayTest, (item, idx) => {\n                                                return (\n                                                    <React.Fragment>\n                                                        <div className=\"type-heading\">{item.name}</div>\n                                                        <ul className=\"scoring-chart\">\n                                                            {\n                                                                item.rules && \n                                                                    _Map(item.rules, (scoring, idx) => {\n                                                                        return (\n                                                                            <li>\n                                                                                <div className=\"display-table\">\n                                                                                    <div className=\"text-block\">{scoring.score_position}</div>\n                                                                                    <div className=\"value-block\">{scoring.score_points}</div>\n                                                                                </div>\n                                                                            </li>\n                                                                        );\n                                                                    })\n                                                            }\n                                                        </ul>\n                                                    </React.Fragment>\n                                        \n                                                );\n                                            })\n                                        }                                        \n                                        </Tab>\n                                        <Tab eventKey={2} title={AppLabels.ODI} >\n                                        {\n                                            this.state.rulesAndScoringArrayODI && \n                                            _Map(this.state.rulesAndScoringArrayODI, (item, idx) => {\n                                                return (\n                                                    <React.Fragment>\n                                                        <div className=\"type-heading\">{item.name}</div>\n                                                        <ul className=\"scoring-chart\">\n                                                            {\n                                                                item.rules && \n                                                                    _Map(item.rules, (scoring, idx) => {\n                                                                        return (\n                                                                            <li>\n                                                                                <div className=\"display-table\">\n                                                                                    <div className=\"text-block\">{scoring.score_position}</div>\n                                                                                    <div className=\"value-block\">{scoring.score_points}</div>\n                                                                                </div>\n                                                                            </li>\n                                                                        );\n                                                                    })\n                                                            }\n                                                        </ul>\n                                                    </React.Fragment>\n                                        \n                                                );\n                                            })\n                                        }\n                                        </Tab>\n                                        <Tab eventKey={3} title={AppLabels.T20}>\n                                        {\n                                            this.state.rulesAndScoringArrayT20 && \n                                            _Map(this.state.rulesAndScoringArrayT20, (item, idx) => {\n                                                return (\n                                                    <React.Fragment>\n                                                        <div className=\"type-heading\">{item.name}</div>\n                                                        <ul className=\"scoring-chart\">\n                                                            {\n                                                                item.rules && \n                                                                    _Map(item.rules, (scoring, idx) => {\n                                                                        return (\n                                                                            <li>\n                                                                                <div className=\"display-table\">\n                                                                                    <div className=\"text-block\">{scoring.score_position}</div>\n                                                                                    <div className=\"value-block\">{scoring.score_points}</div>\n                                                                                </div>\n                                                                            </li>\n                                                                        );\n                                                                    })\n                                                            }\n                                                        </ul>\n                                                    </React.Fragment>\n                                        \n                                                );\n                                            })\n                                        }\n                                        </Tab>\n                                        <Tab eventKey={4} title={'T10'}>\n                                        {\n                                            this.state.rulesAndScoringArrayT10 && \n                                            _Map(this.state.rulesAndScoringArrayT10, (item, idx) => {\n                                                return (\n                                                    <React.Fragment>\n                                                        <div className=\"type-heading\">{item.name}</div>\n                                                        <ul className=\"scoring-chart\">\n                                                            {\n                                                                item.rules && \n                                                                    _Map(item.rules, (scoring, idx) => {\n                                                                        return (\n                                                                            <li>\n                                                                                <div className=\"display-table\">\n                                                                                    <div className=\"text-block\">{scoring.score_position}</div>\n                                                                                    <div className=\"value-block\">{scoring.score_points}</div>\n                                                                                </div>\n                                                                            </li>\n                                                                        );\n                                                                    })\n                                                            }\n                                                        </ul>\n                                                    </React.Fragment>\n                                        \n                                                );\n                                            })\n                                        }\n                                        </Tab>\n                                    </Tabs>\n                                }\n                                {AppSelectedSport != SportsIDs.cricket &&\n\n                                    <React.Fragment>\n                                        { !this.state.rulesAndScoringArray.rules  &&\n                                            <div className=\"text-center\">{AppLabels.NO_SCORING_RULES}</div>\n                                        }\n                                        {\n                                            this.state.rulesAndScoringArray.rules && \n                                                <div className=\"type-heading\">{AppLabels.NORMAL}</div>\n                                        }\n                                        <ul className=\"scoring-chart\">\n                                            {\n                                            this.state.rulesAndScoringArray.rules && \n                                            _Map(this.state.rulesAndScoringArray.rules , (item, idx) => {\n                                                return (\n                                                        <li>\n                                                            <div className=\"display-table\">\n                                                                <div className=\"text-block\">{item.score_position}</div>\n                                                                <div className=\"value-block\">{item.score_points}</div>\n                                                            </div>\n                                                        </li>\n                                                    );\n                                                })\n\n                                            }\n                                        </ul>\n                                    </React.Fragment>\n                                }\n\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/StaticPages/LandingScreen.jsx",["4438","4439","4440","4441","4442","4443","4444","4445"],"import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { NavLink } from \"react-router-dom\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { createBrowserHistory } from 'history';\nimport { Utilities, _isUndefined } from '../../Utilities/Utilities';\nimport { changeLanguageString } from \"../../helper/AppLabels\";\nimport { withTranslation } from \"react-i18next\";\nimport Select from 'react-select';\nimport Images from '../../components/images';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport DownloadAppModal from '../../Modals/DownloadAppModal';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\n\nconst history = createBrowserHistory();\nconst location = history.location;\nconst queryString = require('query-string');\nconst parsed = queryString.parse(location.search);\n\nclass LandingScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDownloadM: false,\n            allowLanguage: Constants.ALLOW_LANG,\n        }\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleClose() {\n        this.setState({ showDownloadM: false });\n    }\n\n    handleShow() {\n        this.setState({ showDownloadM: true });\n    }\n\n    componentWillMount() {\n            this.checkForUserRefferal()\n    }\n\n    componentDidMount() {\n        if (WSManager.getAppLang() == null) {\n            WSManager.setAppLang('en');\n        }\n        changeLanguageString();\n        WSManager.googleTrack(WSC.GA_PROFILE_ID, 'visitors');\n    }\n\n    checkForUserRefferal() {\n        if (!_isUndefined(parsed) && parsed.referral !== \"\" && parsed.referral !== null && !_isUndefined(parsed.referral)) {\n            WSManager.setReferralCode(parsed.referral)\n            this.moveToSignUp();\n        } else {\n            WSManager.setReferralCode(\"\")\n            this.props.history.replace(\"/lobby#\" + Utilities.getSelectedSportsForUrl());\n        }\n    }\n\n    moveToSignUp() {\n        this.props.history.push({\n            pathname: '/signup'\n        })\n    }\n\n    handleChange = (selectedLang) => {\n        if (this.props.i18n.language != selectedLang.value) {\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale:selectedLang.value,\n                    targetFunc:'handleLanguageChange'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n            this.props.i18n.changeLanguage(selectedLang.value);\n            WSManager.setAppLang(selectedLang.value);\n            changeLanguageString();\n            window.location.reload();\n        }\n    };\n\n    getLanguageFromCode(code) {\n        let allLang = this.state.allowLanguage;\n        for (let i = 0; i < allLang.length; i++) {\n            if (code == allLang[i].value) {\n                return allLang[i].label;\n            }\n        }\n    }\n\n    renderLink(item) {\n        return (\n            <NavLink exact to={item.to} target='_blank'>\n                {item.title}\n            </NavLink>\n        )\n    }\n\n    render() {\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"registration-wrap\">\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\nexport default withTranslation()(LandingScreen)","/var/www/html/framework/frontend/src/Component/StaticPages/HowToPlay.jsx",[],"/var/www/html/framework/frontend/src/Component/StaticPages/ContactUs.jsx",[],"/var/www/html/framework/frontend/src/Component/StaticPages/FAQ.jsx",[],"/var/www/html/framework/frontend/src/Component/StaticPages/PrivacyPolicy.jsx",[],"/var/www/html/framework/frontend/src/Component/Finance/Transaction.jsx",["4446","4447","4448","4449","4450","4451","4452","4453","4454","4455"],"import React from 'react';\nimport { Tab, Row, Col, Nav, NavItem } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Utilities, _Map, _debounce, _filter } from '../../Utilities/Utilities';\nimport { Helmet } from \"react-helmet\";\nimport { getTranscationHistory } from '../../WSHelper/WSCallings';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport Images from '../../components/images';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport CustomHeader from '../../components/CustomHeader';\nimport MetaData from \"../../helper/MetaData\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport {TransactionList, NoDataView} from \"../CustomComponent\";\nimport { OnlyCoinsFlow } from '../../helper/Constants';\n\nvar hasMore = false;\nvar transactionData = {};\nexport default class Transaction extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            transactionHistoryList: [],\n            isLoaderShow: false,\n            offset: 1,\n            pageSize: 20,\n            ShimmerList: [1, 2, 3, 4, 5],\n            activeTab: '',\n            isFromNotification: (this.props.location && this.props.location.state) ? (this.props.location.state.from == 'notification' ? true : false) : false,\n             navList: [\n                {\n                    'lb': AppLabels.ALL,\n                    'src': '',\n                    'bns': '',\n                    'coin': ''\n                },\n                {\n                    'lb': AppLabels.WINNINGS,\n                    'src': '3',\n                    'bns': '',\n                    'coin': ''\n                },\n                {\n                    'lb': AppLabels.DEPOSIT,\n                    'src': '7',\n                    'bns': '',\n                    'coin': ''\n                },\n                {\n                    'lb': AppLabels.WITHDRAW,\n                    'src': '8',\n                    'bns': '',\n                    'coin': ''\n                },\n                {\n                    'lb': AppLabels.BONUS,\n                    'src': '',\n                    'bns': '1',\n                    'coin': ''\n                }\n            ]\n        }\n    }\n\n    componentWillMount() {\n        var tmpArray = this.state.navList;\n        if (Utilities.getMasterData().allow_coin == \"1\") {\n            tmpArray = [\n                ...tmpArray, ...[{\n                    'lb': AppLabels.COINS,\n                    'src': '',\n                    'bns': '',\n                    'coin': '1'\n                }]\n            ]\n        }\n        if (OnlyCoinsFlow == 1 || OnlyCoinsFlow == 2) {\n            tmpArray = _filter(tmpArray, (obj) => {\n                return obj.lb != AppLabels.WITHDRAW && obj.lb != AppLabels.DEPOSIT\n            });\n        }\n        if (OnlyCoinsFlow == 1) {\n            tmpArray = _filter(tmpArray, (obj) => {\n                return obj.lb != AppLabels.BONUS\n            });\n        }\n        this.setState({\n            navList: tmpArray\n        })\n\n        Utilities.scrollToTop()\n        this.setLocationStateData()\n    }\n\n    componentWillUnmount() {\n        transactionData = {}\n        if(this.state.isFromNotification){\n            this.callTransactionHistoryApi('', '', '')\n\n        }\n    }\n\n    scrollToBottom = () => {\n        let elm = document.getElementsByClassName(\"active\");\n        if (elm.length > 0 && elm[0].localName === \"li\") {\n            elm[0].scrollIntoView();\n        }\n    }\n\n    setLocationStateData = () => {\n        if (this.props.location && this.props.location.state) {\n            this.setState({ activeTab: this.props.location.state.tab || AppLabels.ALL }, () => {\n                if (this.state.activeTab === AppLabels.COINS) {\n                    this.callTransactionHistoryApi('', '', 1);\n                    this.scrollToBottom();\n                } else {\n                    this.callTransactionHistoryApi('', '', '')\n                }\n            });\n        }\n    }\n\n    onTabChange = _debounce((item) => {\n        this.setState({ offset: 1, activeTab: item.lb }, () => {\n            this.callTransactionHistoryApi(item.src, item.bns, item.coin)\n        })\n    }, 300)\n\n\n    callTransactionHistoryApi(source, onlyBonus, onlyCoins) {\n        let dataKey = source + onlyBonus + onlyCoins + this.state.offset + this.state.activeTab;\n        if (transactionData[dataKey]) {\n            this.parseResponseData(transactionData[dataKey]);\n        }\n        else {\n            let param = {\n                \"page_no\": this.state.offset,\n                \"page_size\": this.state.pageSize,\n                \"only_bonus\": onlyBonus, \n                \"only_coins\": onlyCoins, \n                \"source\": source \n            }\n\n            this.setState({ isLoaderShow: true })\n            getTranscationHistory(param).then((responseJson) => {\n                this.setState({\n                    isLoaderShow: false\n                })\n                if (responseJson.response_code == WSC.successCode) {\n                    transactionData[dataKey] = responseJson.data;\n                    this.parseResponseData(responseJson.data);\n                }\n            })\n        }\n    }\n\n    parseResponseData(data) {\n        hasMore = data.length === this.state.pageSize;\n        if (this.state.offset === 1) {\n            this.setState({\n                offset: this.state.offset + 1,\n                transactionHistoryList: data\n            })\n        }\n        else {\n            this.setState({\n                offset: this.state.offset + 1,\n                transactionHistoryList: [...this.state.transactionHistoryList, ...data]\n            });\n        }\n    }\n\n    fetchMoreData = (item) => {\n        if (this.state.activeTab === item.lb) {\n            this.callTransactionHistoryApi(item.src, item.bns, item.coin)\n        }\n    }\n    render() {\n\n        const HeaderOption = {\n            back: true,\n            title: AppLabels.TRANSACTIONS,\n            hideShadow: true,\n        }\n\n        const { transactionHistoryList } = this.state;\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed trans-web-container\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.transactions.title}</title>\n                            <meta name=\"description\" content={MetaData.transactions.description} />\n                            <meta name=\"keywords\" content={MetaData.transactions.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <Tab.Container id=\"tabs-with-dropdown\" defaultActiveKey={this.state.activeTab} className=\"default-tab\">\n                            <Row className=\"clearfix\">\n                                <Col sm={12}>\n                                    <Nav bsStyle=\"tabs\">\n                                        {\n                                            _Map(this.state.navList, (item, key) => {\n                                                return <NavItem eventKey={item.lb} onClick={() => this.onTabChange(item)} key={key} id={item.lb}>{item.lb}</NavItem>\n\n                                            })\n                                        }\n                                    </Nav>\n                                </Col>\n                                <Col sm={12}>\n                                    <Tab.Content animation>\n                                        {\n                                            _Map(this.state.navList, (item, key) => {\n                                                return (\n                                                    <Tab.Pane eventKey={item.lb} key={key + item.lb}>\n                                                            <InfiniteScroll\n                                                                dataLength={transactionHistoryList.length}\n                                                                next={()=>this.fetchMoreData(item)}\n                                                                hasMore={hasMore}\n                                                                scrollableTarget='trans-list'\n                                                            >\n                                                                {transactionHistoryList != '' ? \n                                                                    <TransactionList transactionHistoryList={transactionHistoryList} selectedTAB={this.state.activeTab} id=\"trans-list\"/>\n                                                                    :\n                                                                    <NoDataView \n                                                                        BG_IMAGE={Images.no_data_bg_image}\n                                                                        CENTER_IMAGE={Images.BRAND_LOGO_FULL}\n                                                                        MESSAGE_1={'No Transactions availbale'}\n                                                                        MESSAGE_2={''}\n                                                                    />\n                                                                }\n                                                            </InfiniteScroll>\n                                                        </Tab.Pane>\n                                                    )\n                                                })\n\n                                        }\n                                    </Tab.Content>\n                                </Col>\n                            </Row>\n                        </Tab.Container>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/Finance/AddFunds.jsx",["4456","4457","4458","4459","4460","4461","4462","4463","4464","4465","4466","4467","4468","4469","4470","4471","4472","4473","4474","4475"],"import React from 'react';\nimport { FormGroup, FormControl, ControlLabel } from 'react-bootstrap';\nimport Images from '../../components/images';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport MetaData from \"../../helper/MetaData\";\nimport { ApplyPromoCode } from \"../../Modals\";\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport CustomHeader from '../../components/CustomHeader';\nimport { getDealsAPI } from '../../WSHelper/WSCallings';\n\nexport default class AddFunds extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            otherDeals: [],\n            allDeals: [],\n            bestDeal: '',\n            selectedDeal: '',\n            amount: '',\n            isBeastDealSelected: false,\n            showPromoCode: false,\n            mPromoCodeObj: '',\n            fromConfimPopUpFunds: this.props.location.fromConfirmPopupAddFunds,\n            contestDataForFunds: this.props.location.contestDataForFunds,\n            fromBuyCoin: this.props.location.state && this.props.location.state.fromBuyCoin ? this.props.location.state.fromBuyCoin : '',\n            AddAmt: this.props.location.state && this.props.location.state.amountToAdd ? this.props.location.state.amountToAdd : this.props.location.contestDataForFunds ? this.props.location.contestDataForFunds.AmountToAdd :''\n        }\n    }\n\n    componentDidMount() {\n        if (Utilities.getMasterData().allow_deal == 1) {\n            this.getDeals()\n        }\n        else{\n            this.setState({\n                amount: this.state.AddAmt || ''\n            })\n        }\n    }\n\n    getDeals() {\n        let param = {}\n        this.setState({ isLoaderShow: true })\n        getDealsAPI(param).then((responseJson) => {\n            if (responseJson.response_code == WSC.successCode) {\n                this.setState({ allDeals: responseJson.data })\n                this.getBestDeal(responseJson.data)\n            }\n        })\n    }\n\n    getBestDeal(deals) {\n        let bestDealIndex = 0;\n        let bestDeal = deals[bestDealIndex];\n        if(bestDeal){\n            let bestDealAdditionalAmt = (parseFloat(bestDeal.bonus) + parseFloat(bestDeal.cash)) / parseFloat(bestDeal.amount);\n            for (let i = 0; i < deals.length; i++) {\n                let tempAdditionalAmt = (parseFloat(deals[i].bonus) + parseFloat(deals[i].cash)) / parseFloat(deals[i].amount);\n                if (tempAdditionalAmt >= bestDealAdditionalAmt) {\n                    bestDealAdditionalAmt = tempAdditionalAmt;\n                    bestDealIndex = i;\n                    bestDeal = deals[bestDealIndex];\n                }\n            }\n            let otherDeals = deals.filter(item => item != bestDeal);\n            this.setState({ \n                bestDeal: bestDeal, \n                otherDeals: otherDeals, \n                selectedDeal: '',\n                // amount: this.state.fromConfimPopUpFunds ? this.state.contestDataForFunds.AmountToAdd : '', \n                amount: this.state.fromConfimPopUpFunds ? this.state.contestDataForFunds.AmountToAdd : (this.state.fromBuyCoin ? this.state.AddAmt : ''), \n                isBeastDealSelected: false \n            })\n        }\n    }\n\n    handleChange = (e) => {\n        let amt = e.target.value;\n        let mAllDeals = this.state.allDeals;\n        let isExist = mAllDeals.filter(item => item.amount == amt)\n        \n        if (isExist.length > 0) {\n            this.setState({ amount: amt, selectedDeal: isExist[0], isBeastDealSelected: true, mPromoCodeObj: '' })\n        }\n        else {\n            this.setState({ amount: amt, selectedDeal: '', isBeastDealSelected: false, mPromoCodeObj: '' })\n        }\n        if(amt == ''){\n            this.setState({\n                amount: '',\n                selectedDeal: ''\n            })\n        }\n    }\n\n    goToPaymentOptions() {\n        let inputAmt = this.state.amount != '' ? this.state.amount : this.state.selectedDeal.amount;\n        if (parseFloat(inputAmt || 0) >= 5) {\n            this.props.history.push({\n                pathname: '/payment-method', state: {\n                    amount: this.state.amount != '' ? this.state.amount : this.state.selectedDeal.amount,\n                    selectedDeal: this.state.selectedDeal,\n                    fromConfimPopUpFunds: this.state.fromConfimPopUpFunds,\n                    promoCode:this.state.mPromoCodeObj?this.state.mPromoCodeObj.promo_code:''\n                }\n            })\n        }\n        else {\n            Utilities.showToast(AppLabels.ENTERED_AMOUNT_MUST_BE_5, 2500);\n        }\n    }\n\n    /**\n   * @description method to display promo modal\n   */\n    PromoCodeShow = () => {\n        let inputAmt = this.state.amount != '' ? this.state.amount : this.state.selectedDeal.amount;\n        if ((inputAmt || '').trim() != '' && parseFloat(inputAmt) >= 5) {\n            this.setState({\n                showPromoCode: true,\n            });\n        }\n        else {\n            Utilities.showToast(AppLabels.ENTERED_AMOUNT_MUST_BE_5, 2500);\n        }\n    }\n    /**\n     * @description method to hide promo modal\n     */\n    PromoCodeHide = () => {\n        this.setState({\n            showPromoCode: false,\n        });\n    }\n    /**\n     * @description method to apply promo \n     */\n    onApplyPromoCode = (obj) => {\n        this.setState({\n            mPromoCodeObj: obj,\n            showPromoCode: false,\n        });        \n    }\n\n\n\n    render() {\n        const HeaderOption = {\n            back: true,\n            notification: false,\n            title: AppLabels.ADD_FUNDS,\n            fromAddFund: false,\n            hideShadow: true,\n            showBal: true\n        }\n        const { selectedDeal, bestDeal, isBeastDealSelected, amount, showPromoCode, mPromoCodeObj } = this.state;\n        console.log('this.state.amount',this.state.amount);\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container web-container-fixed add-funds-wrapper white-bg\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.addfunds.title}</title>\n                            <meta name=\"description\" content={MetaData.addfunds.description} />\n                            <meta name=\"keywords\" content={MetaData.addfunds.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        <div className=\"add-funds-header\">\n                            <div>\n                                <FormGroup\n                                    className={\"position-relative show-currency-icn\" + (this.state.amount == '' ? ' chnage-icon-color' : '')}\n                                    controlId=\"formBasicText\"\n                                >\n                                    <ControlLabel>{AppLabels.ENTER_AMOUNT} ({Utilities.getMasterData().currency_code})</ControlLabel>\n                                    <FormControl\n                                        autoComplete='off'\n                                        value={this.state.amount}\n                                        type={'number'}\n                                        placeholder={'0'}\n                                        onChange={this.handleChange}\n                                    />\n                                        <span className=\"forminput-currency\">\n                                            {Utilities.getMasterData().currency_code}\n                                        </span>\n                                </FormGroup>\n                            </div>\n                        </div>\n                        <div className=\"add-funds-body\">\n                            {Utilities.getMasterData().allow_deal == 1 &&\n                                <React.Fragment>\n                                    <div className=\"amount-section\">\n                                        {_Map(this.state.otherDeals, (item, idx) => {\n                                            return (<a key={idx} onClick={() => this.setState({ selectedDeal: item , amount: item.amount,isBeastDealSelected: true})} className={(item.deal_id == selectedDeal.deal_id ? ' selected' : '')} href id=\"amt-2\">{Utilities.getMasterData().currency_code} {item.amount} {item.deal_id == selectedDeal.deal_id && <i className=\"icon-tick-ic\"></i>}</a>)\n                                        })}\n                                    </div>\n                                    {bestDeal && <div onClick={() => this.setState({ selectedDeal: bestDeal,amount: bestDeal.amount,isBeastDealSelected: true })} className={\"best-deal \" + (bestDeal.deal_id == selectedDeal.deal_id ? ' selected' : '')}>\n                                        <img src={Images.FAVOURITE} alt=\"\" />\n                                        {AppLabels.PICK_BEST_DEAL}\n                                        <span>{Utilities.getMasterData().currency_code} {bestDeal.amount}</span>\n                                        <i className=\"icon-tick-ic\"></i>\n                                    </div>}\n                                    {\n                                      isBeastDealSelected &&  <div className=\"selected-deal-offer\">\n                                        <div className=\"deposite-heading\">{AppLabels.DEPOSIT} <span>{Utilities.getMasterData().currency_code} {this.state.amount != '' ? this.state.amount : this.state.selectedDeal.amount}</span></div>\n                                        <div className=\"additional-benifit-section\">\n                                            <div className=\"heading\">{AppLabels.YOU_WILL_ADDITIONALLY_GET}</div>\n                                            <div className=\"bonus-offer\">\n                                                <div>\n                                                    <div className=\"bonus-amt\"><i className=\"icon-bonus\"></i>{selectedDeal.bonus ? selectedDeal.bonus : 0}</div>\n                                                    <div className=\"bonus-label\">{AppLabels.BONUS_CASH}</div>\n                                                </div>\n                                                <div>\n                                                    <i className=\"icon-plus-ic\"></i>\n                                                </div>\n                                                <div>\n                                                    <div className=\"bonus-amt\">{Utilities.getMasterData().currency_code}{selectedDeal.cash ? selectedDeal.cash : 0}</div>\n                                                    <div className=\"bonus-label\">{AppLabels.REAL_CASH}</div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    }\n                                </React.Fragment>\n                            }\n                            {(!isBeastDealSelected || Utilities.getMasterData().allow_deal == 0) &&\n                                <React.Fragment>\n                                    {mPromoCodeObj == '' ?\n                                        <div onClick={() => this.PromoCodeShow()} className=\"promo-code-section\">{AppLabels.HAVE_A_PROMO_CODE}</div>\n                                        :\n                                        <div className=\"promo-code-section\">\n                                            <span>{AppLabels.PROMO_CODE}{' '}{AppLabels.OF}{' '}</span>\n                                            {mPromoCodeObj.cash_type == '1' ? Utilities.getMasterData().currency_code : <span><i className='icon-bonus' /></span>}\n                                            {mPromoCodeObj.discount}\n                                            {' '}\n                                            <span> {AppLabels.PROMO_TEXT3}\n                                                {'  '}   <a href onClick={() => this.setState({ mPromoCodeObj: \"\" })}><i className='icon-cross-circular' /></a>\n                                            </span>\n                                        </div>\n                                    }\n                                </React.Fragment>\n                            }\n                            <div className=\"text-center btm-fixed-action add-fund\">\n                                <a href onClick={() => (amount != '' || selectedDeal != '') && this.goToPaymentOptions()} className=\"button button-primary-rounded button-block\">{AppLabels.ADD_CASH}</a>\n                                <div className=\"card-img-section\">\n                                <img src={Images.CARD_IMG} alt=\"\"/>\n                            </div>\n                            </div>\n                            {\n                                showPromoCode &&\n                                <ApplyPromoCode\n                                    IsPromoCodeShow={showPromoCode}\n                                    IsPromoCodeHide={this.PromoCodeHide}\n                                    onApplyPromoCode={this.onApplyPromoCode}\n                                    mAmount={amount}\n                                />\n                            }\n                           \n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/Profile/BankVerification.jsx",["4476","4477","4478","4479","4480","4481","4482","4483","4484","4485","4486","4487","4488","4489","4490","4491","4492","4493","4494","4495","4496","4497","4498","4499","4500","4501","4502","4503","4504","4505","4506","4507","4508","4509","4510","4511","4512","4513","4514","4515","4516","4517","4518","4519","4520","4521","4522","4523"],"import React from 'react';\nimport { Row, Col, FormGroup, Image } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport MetaData from \"../../helper/MetaData\";\nimport CustomHeader from '../../components/CustomHeader';\nimport { inputStyleLeft } from '../../helper/input-style';\nimport FloatingLabel from 'floating-label-react';\nimport imageCompression from 'browser-image-compression';\nimport { Utilities, blobToFile } from '../../Utilities/Utilities';\nimport {\n    updateUserBankDetail,\n    deleteUserBankDetail\n} from \"../../WSHelper/WSCallings\";\nimport Validation from \"../../helper/Validation\";\nimport { DeleteConfirmationModal } from \"../../Modals\";\nimport CustomLoader from '../../helper/CustomLoader';\nimport Images from '../../components/images';\nimport { setValue } from '../../helper/Constants';\n\nvar globalThis = null;\nconst options = {\n    maxWidthOrHeight: 900          \n}\nexport default class BankVerification extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            bankFormData: {\n                userFullname: WSManager.getProfile().user_bank_detail.ac_number ? WSManager.getProfile().user_bank_detail.first_name : '',\n                bankName: WSManager.getProfile().user_bank_detail.ac_number ? WSManager.getProfile().user_bank_detail.bank_name : '',\n                accountNumber: WSManager.getProfile().user_bank_detail.ac_number ? WSManager.getProfile().user_bank_detail.ac_number : '',\n                ifscCode: WSManager.getProfile().user_bank_detail.ac_number ? WSManager.getProfile().user_bank_detail.ifsc_code : ''\n            },\n            bankFormErrors: {\n                userFullname: '',\n                bankName: '',\n                accountNumber: '',\n                ifscCode: ''\n            },\n            bankValidation: {\n                userFullnameValid: '',\n                bankNameValid: '',\n                accountNumberValid: '',\n                ifscCodeValid: ''\n            },\n            bankformValid: false,\n            userProfile: WSManager.getProfile(),\n            bankDocFile: '',\n            bankDocImageURL: WSManager.getProfile().user_bank_detail.ac_number ? Utilities.getPanURL(WSManager.getProfile().user_bank_detail.bank_document) : '',\n            isLoading: false,\n            file: '',\n            showDeleteModal: false,\n            refreshPage: true,\n            cameraPermisiionGranted:false\n        }\n    }\n\n    ShowDeletConfirmModal = () => {\n        this.setState({\n            showDeleteModal: true\n        })\n    }\n    HideDeletConfirmModal = () => {\n        this.setState({\n            showDeleteModal: false\n        })\n    }\n\n    deleteBankDetail = () => {\n        deleteUserBankDetail().then((responseJson) => {\n            this.HideDeletConfirmModal();\n            if (responseJson && responseJson.response_code == WSC.successCode) {\n                Utilities.showToast(responseJson.message, 1000, Images.BANK_ICON);\n                let profile = this.state.userProfile;\n                profile.user_bank_detail = [];\n                profile.is_bank_verified = '0'\n                WSManager.setProfile(profile)\n                this.setState({\n                    userProfile: profile,\n                    bankDocImageURL: '',\n                    bankFormData: {\n                        userFullname: '',\n                        bankName: '',\n                        accountNumber: '',\n                        ifscCode: ''\n                    },\n                    refreshPage: false\n                }, () => { this.setState({ refreshPage: true }) })\n                setValue.setBankDeleted(true);\n            }\n        })\n    }\n\n    componentWillMount = () => {\n        globalThis = this;\n        if (WSManager.getProfile().is_bank_verified == '0' && WSManager.getProfile().user_bank_detail.ac_number) {\n            this.props.history.replace({ pathname: '/my-profile' })\n        }\n    };\n    actionPancard = () => {\n        if (window.ReactNativeWebView && !this.state.cameraPermisiionGranted) {\n         let data = {\n             action: 'bankcamera',\n             targetFunc: 'bankcamera',\n         }\n         window.ReactNativeWebView.postMessage(JSON.stringify(data));\n     }\n     else{\n         this.bankDocUpload.click()\n     }\n    \n }\n componentDidMount = () => {\n    this.handelCameraPermission()\n};\n\n handelCameraPermission() {\n    window.addEventListener('message', (e) => {\n\n         if (e.data.action == 'bankcamera' && e.data.type == 'granted') {\n                 this.setState({cameraPermisiionGranted:true},()=>{\n                     if(this.state.cameraPermisiionGranted){\n                         this.bankDocUpload.click()\n\n                     }\n                 })\n         }\n         else if(e.data.action == 'bankcamera' && e.data.type == 'denied'){\n             this.setState({cameraPermisiionGranted:false})\n\n         }\n\n     });\n }\n\n    onFullNameAsPerBankChange = (e) => {\n        let { bankFormData } = this.state;\n        bankFormData.userFullname = e.target.value;\n\n        this.setState({ bankFormData: bankFormData })\n        this.validateField(e.target.name, e.target.value)\n    }\n\n    handleChangeBankName = (e) => {\n        let { bankFormData } = this.state;\n        bankFormData.bankName = e.target.value;\n        this.setState({ bankFormData: bankFormData })\n        this.validateField(e.target.name, e.target.value)\n    }\n\n    handleChangeAccountNo = (e) => {\n        let { bankFormData } = this.state;\n        bankFormData.accountNumber = e.target.value;\n        this.setState({ bankFormData: bankFormData })\n        this.validateField(e.target.name, e.target.value)\n    }\n\n    handleChangeIfscCode = (e) => {\n        let { bankFormData } = this.state;\n        bankFormData.ifscCode = e.target.value;\n        this.setState({ bankFormData: bankFormData })\n        this.validateField(e.target.name, e.target.value)\n    }\n\n    validateField(fieldname, value) {\n        let { bankFormErrors, bankValidation } = this.state;\n\n        switch (fieldname) {\n            case 'fName':\n                bankValidation.userFullnameValid = (Validation.validate(fieldname, value) === 'success');\n                bankFormErrors.userFullname = bankValidation.userFullnameValid ? '' : '' + AppLabels.is_invalid;\n                break;\n            case 'bankName':\n                bankValidation.bankNameValid = (Validation.validate(fieldname, value) === 'success');\n                bankFormErrors.bankName = bankValidation.bankNameValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'accountNo':\n                bankValidation.accountNumberValid = (Validation.validate(fieldname, value) === 'success');\n                bankFormErrors.accountNumber = bankValidation.accountNumberValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'ifscCode':\n                \n                bankValidation.ifscCodeValid = Utilities.getMasterData().int_version != 1 ? (Validation.validate(fieldname, value) === 'success') : true;\n                bankFormErrors.ifscCode = Utilities.getMasterData().int_version != 1 ? (bankValidation.ifscCodeValid ? '' : ' ' + AppLabels.is_invalid) : '';\n                break;\n            default:\n                break;\n        }\n\n        this.setState({\n            bankFormErrors: bankFormErrors,\n            bankValidation: bankValidation\n        }, this.validateForm(false));\n    }\n\n    validateForm = (submit) => {\n        let { bankValidation } = this.state;\n        this.setState({\n            bankformValid: bankValidation.userFullnameValid &&\n                bankValidation.bankNameValid &&\n                bankValidation.accountNumberValid &&\n                (Utilities.getMasterData().int_version != 1 ? bankValidation.ifscCodeValid : true)\n        }, () => {\n            if (submit && this.state.bankformValid) {\n                if (this.state.bankDocFile == '') {\n                    Utilities.showToast(AppLabels.Please_upload_Bank_document, 2000, Images.BANK_ICON)\n                }\n                else {\n                    this.uploadBankDocImage();\n                }\n            }\n        });\n    }\n\n    errorClass(error) {\n        if (error) {\n            return (error.length == 0 ? '' : 'has-error');\n        }\n    }\n\n    validateOnSubmit = () => {\n        if (this.state.userProfile.is_bank_verified == '0') {\n            let { bankFormData, bankFormErrors, bankValidation } = this.state;\n\n            bankValidation.userFullnameValid = (Validation.validate('fName', bankFormData.userFullname) === 'success');\n            bankFormErrors.userFullname = bankValidation.userFullnameValid ? '' : ' ' + AppLabels.is_invalid;\n\n            bankValidation.bankNameValid = (Validation.validate('bankName', bankFormData.bankName) === 'success');\n            bankFormErrors.bankName = bankValidation.bankNameValid ? '' : ' ' + AppLabels.is_invalid;\n\n            bankValidation.accountNumberValid = (Validation.validate('accountNo', bankFormData.accountNumber) === 'success');\n            bankFormErrors.accountNumber = bankValidation.accountNumberValid ? '' : ' ' + AppLabels.is_invalid;\n\n            if(Utilities.getMasterData().int_version != 1){\n                bankValidation.ifscCodeValid = (Validation.validate('ifscCode', bankFormData.ifscCode) === 'success');\n                bankFormErrors.ifscCode = bankValidation.ifscCodeValid ? '' : ' ' + AppLabels.is_invalid;\n            }\n            this.setState({\n                bankFormErrors: bankFormErrors,\n                bankValidation: bankValidation\n            }, this.validateForm(true)\n            );\n            \n        }\n        else {\n            \n            this.ShowDeletConfirmModal();\n        }\n    }\n\n    onBankDocImgDrop(e) {\n        e.preventDefault();\n        let reader = new FileReader();\n        let mfile = e.target.files[0];\n        reader.onloadend = () => {\n            if (mfile.type && (mfile.type == 'image/png' || mfile.type == 'image/jpeg')) {\n                this.setState({ bankDocImageURL: reader.result })\n                \n                this.compressImage(mfile)\n                \n            }\n            else {\n                Utilities.showToast(AppLabels.UPLOAD_FORMATS, 2000, Images.BANK_ICON)\n            }\n        }\n        if (mfile) {\n            reader.readAsDataURL(mfile)\n        }\n    }\n    compressImage = async (mfile) => {\n        imageCompression(mfile, options).then((compressedFile) => {\n            this.setState({ bankDocFile: blobToFile(compressedFile ? compressedFile : mfile, mfile.name) }, () => {\n            })\n        })\n    }\n\n\n    uploadBankDocImage() {\n        globalThis.setState({ isLoading: true });\n        var data = new FormData();\n        data.append(\"bank_document\", this.state.bankDocFile);\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = false;\n        xhr.addEventListener(\"readystatechange\", function () {\n            if (this.readyState == 4) {\n                if(!this.responseText){\n                    Utilities.showToast(AppLabels.SOMETHING_ERROR, 5000,Images.PAN_ICON);\n                    globalThis.setState({ isLoading: false });\n                    return;\n                }\n                var response = JSON.parse(this.responseText);\n                if (response != '' && response.response_code == WSC.successCode) {\n                    globalThis.setState({ bankDocFile: '', bankDocImageURL: response.data.file_name })\n                    globalThis.updateBankAccDetailsApi(response.data.file_name);\n                }\n                else {\n                    globalThis.setState({ isLoading: false });\n                    var keys = Object.keys(response.error);\n                    if (keys.length > 0) {\n                        let errorKey = keys[0];\n                        Utilities.showToast(response.error[errorKey], 5000, Images.BANK_ICON);\n                    }\n                }\n\n            }\n        });\n        xhr.addEventListener(\"load\", function(e) {\n            if(e.currentTarget.status > 400){\n                globalThis.setState({ isLoading: false });\n            }\n        }, false);\n        xhr.open(\"POST\", WSC.userURL + WSC.DO_UPLOAD_BANK_DOCUMENT);\n        xhr.setRequestHeader('Sessionkey', WSManager.getToken())\n        xhr.send(data);\n    }\n\n    updateBankAccDetailsApi(panPath) {\n        this.setState({ isLoading: true });\n        let param = {\n            \"first_name\": this.state.bankFormData.userFullname,\n            \"last_name\": \"\",\n            \"bank_name\": this.state.bankFormData.bankName,\n            \"ac_number\": this.state.bankFormData.accountNumber,\n            \"ifsc_code\": this.state.bankFormData.ifscCode ? this.state.bankFormData.ifscCode.toUpperCase() : this.state.bankFormData.ifscCode,\n            \"bank_document\": panPath\n        }\n        updateUserBankDetail(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson != null && responseJson != '' && responseJson.response_code == WSC.successCode) {\n                setValue.setBankDeleted(false);\n                Utilities.showToast(responseJson.message, 5000, Images.BANK_ICON);\n                setTimeout(() => {\n                    this.props.history.replace({ pathname: '/my-profile' })\n                }, 1000)\n            }\n        })\n    }\n\n    removeBankDocImage() {\n        this.setState({\n            bankDocImageURL: '',\n        })\n    }\n\n    isPDF(url) {\n        let isPDF = url.endsWith('.pdf')\n        return isPDF;\n    }\n\n\n    render() {\n        const {\n            userProfile,\n            bankFormData,\n            bankFormErrors,\n            showDeleteModal,\n            refreshPage\n        } = this.state;\n\n        const HeaderOption = {\n            back: true,\n            notification: false,\n            hideShadow: true,\n            title: AppLabels.BankVerification,\n            fromProfile: true\n        }\n\n        let bankDocDescTxt = AppLabels.UPLOAD_BANK_DOC_DESC || ''\n        let bankDocDesc = Utilities.getMasterData().int_version != 1 ? bankDocDescTxt : bankDocDescTxt.replace((', ' + AppLabels.IFSC_CODE), '')\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container transparent-header web-container-fixed verify-account\">\n                        {this.state.isLoading &&\n                            <CustomLoader />\n                        }\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.mywallet.title}</title>\n                            <meta name=\"description\" content={MetaData.mywallet.description} />\n                            <meta name=\"keywords\" content={MetaData.mywallet.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        {refreshPage &&\n                            <div className=\"verify-wrapper\" >\n                                {\n                                    window.ReactNativeWebView ?\n                                    <div className=\"upload-section cursor-pointer\" onClick={() => userProfile.bank_verified != '1' ? this.actionPancard() : '' } style={{ pointerEvents: (userProfile.is_bank_verified == '2' || userProfile.is_bank_verified == '1') ? 'none' : '' }}>\n                                    <input id=\"myInput\"\n                                        type=\"file\"\n                                        accept=\"image/*\"\n                                        ref={(bankImgRef) => this.bankDocUpload = bankImgRef}\n                                        style={{ display: 'none' }}\n                                        onChange={this.onBankDocImgDrop.bind(this)}\n                                    />\n                                    {(this.isPDF(this.state.bankDocImageURL)) ?\n                                        <span>{'' + this.state.bankDocImageURL}</span>\n                                        :\n                                        <Image className={this.state.bankDocImageURL ? 'upload-img-show' : ''} object-fit='cover'\n                                            src={!this.state.bankDocImageURL ? '' : (this.state.bankDocFile != '' ? this.state.bankDocImageURL : Utilities.getPanURL(this.state.bankDocImageURL))} />\n                                    }\n\n                                    {(userProfile.is_bank_verified != '1' && userProfile.is_bank_verified != '2')\n                                        && (this.state.bankDocImageURL) &&\n                                        <span className=\"delete-selected-img\">\n                                            <i id=\"removeUploadedimg\" onClick={(e) => {e.stopPropagation(); this.removeBankDocImage()}}\n                                                className=\"icon-delete\"></i>\n                                        </span>\n                                    }\n                                    {!this.state.bankDocImageURL &&\n                                        <React.Fragment>\n                                            <div className=\"text-center\">\n                                                <img src={Images.PAN_ICON_PNG} alt=\"\" className=\"pan-img\" />\n                                            </div>\n                                            {userProfile.bank_verified != '1' &&\n                                                <div className=\"upload-text\" id=\"bankDocUpload\" >{AppLabels.UPLOAD_BANK_DOC}</div>\n                                            }\n                                            {userProfile.bank_verified != '1' &&\n                                                <div className=\"upload-description\" id=\"bankDocUpload\" >( {bankDocDesc} )</div>\n                                            }\n                                            <p className=\"upload-details\">{AppLabels.MAX_SIZE_UPLOAD}</p>\n                                            <p className=\"upload-details\">{AppLabels.UPLOAD_FORMATS}</p>\n                                        </React.Fragment>\n                                    }\n                                </div>\n                                :\n                                <div className=\"upload-section cursor-pointer\" onClick={() => userProfile.bank_verified != '1' ? this.bankDocUpload.click() : '' } style={{ pointerEvents: (userProfile.is_bank_verified == '2' || userProfile.is_bank_verified == '1') ? 'none' : '' }}>\n                                    <input id=\"myInput\"\n                                        type=\"file\"\n                                        accept=\"image/*\"\n                                        ref={(bankImgRef) => this.bankDocUpload = bankImgRef}\n                                        style={{ display: 'none' }}\n                                        onChange={this.onBankDocImgDrop.bind(this)}\n                                    />\n                                    {(this.isPDF(this.state.bankDocImageURL)) ?\n                                        <span>{'' + this.state.bankDocImageURL}</span>\n                                        :\n                                        <Image className={this.state.bankDocImageURL ? 'upload-img-show' : ''} object-fit='cover'\n                                            src={!this.state.bankDocImageURL ? '' : (this.state.bankDocFile != '' ? this.state.bankDocImageURL : Utilities.getPanURL(this.state.bankDocImageURL))} />\n                                    }\n\n                                    {(userProfile.is_bank_verified != '1' && userProfile.is_bank_verified != '2')\n                                        && (this.state.bankDocImageURL) &&\n                                        <span className=\"delete-selected-img\">\n                                            <i id=\"removeUploadedimg\" onClick={(e) => {e.stopPropagation(); this.removeBankDocImage()}}\n                                                className=\"icon-delete\"></i>\n                                        </span>\n                                    }\n                                    {!this.state.bankDocImageURL &&\n                                        <React.Fragment>\n                                            <div className=\"text-center\">\n                                                <img src={Images.PAN_ICON_PNG} alt=\"\" className=\"pan-img\" />\n                                            </div>\n                                            {userProfile.bank_verified != '1' &&\n                                                <div className=\"upload-text\" id=\"bankDocUpload\" >{AppLabels.UPLOAD_BANK_DOC}</div>\n                                            }\n                                            {userProfile.bank_verified != '1' &&\n                                                <div className=\"upload-description\" id=\"bankDocUpload\" >( {bankDocDesc} )</div>\n                                            }\n                                            <p className=\"upload-details\">{AppLabels.MAX_SIZE_UPLOAD}</p>\n                                            <p className=\"upload-details\">{AppLabels.UPLOAD_FORMATS}</p>\n                                        </React.Fragment>\n                                    }\n                                </div>\n                                }\n                             \n                                \n                                \n                                <div className={\"uploaded-info-section\" + (userProfile && userProfile.is_bank_verified == '1' ? ' noneditable-section' : '')} style={{ pointerEvents: (userProfile.is_bank_verified == '2' || userProfile.is_bank_verified == '1') ? 'none' : '' }}>\n                                    <Row>\n                                        <Col xs={12} className=\"input-label-spacing\">\n                                            <FormGroup\n                                                className={'input-label-center input-transparent font-14 gray-input-field ' + (`${this.errorClass(bankFormErrors.userFullname)}`)}\n                                                controlId=\"formBasicText\"\n                                            >\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='fName'\n                                                    name='fName'\n                                                    placeholder={AppLabels.FULL_NAME_AS_BANK}\n                                                    type='text'\n                                                    value={bankFormData.userFullname}\n                                                    onChange={this.onFullNameAsPerBankChange}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col xs={12} className=\"input-label-spacing\">\n                                            <FormGroup\n                                                className={'input-label-center input-transparent font-14 gray-input-field ' + (`${this.errorClass(bankFormErrors.bankName)}`)}\n                                                controlId=\"formBasicText\"\n                                            >\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='bankName'\n                                                    name='bankName'\n                                                    placeholder={AppLabels.BANK_NAME}\n                                                    type='text'\n                                                    value={bankFormData.bankName}\n                                                    onChange={this.handleChangeBankName}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col xs={12} className=\"input-label-spacing\">\n                                            <FormGroup\n                                                className={'input-label-center input-transparent font-14 gray-input-field ' + (`${this.errorClass(bankFormErrors.accountNumber)}`)}\n                                                controlId=\"formBasicText\"\n                                            >\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='accountNo'\n                                                    name='accountNo'\n                                                    placeholder={AppLabels.ACCOUNT_NUMBER}\n                                                    type='text'\n                                                    value={bankFormData.accountNumber}\n                                                    onChange={this.handleChangeAccountNo}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                    {\n                                      Utilities.getMasterData().int_version != 1 && <Row>\n                                            <Col xs={12} className=\"input-label-spacing\">\n                                                <FormGroup\n                                                    className={'input-label-center ifsc-inp input-transparent font-14 gray-input-field ' + (`${this.errorClass(bankFormErrors.ifscCode)}`)}\n                                                    controlId=\"formBasicText\"\n                                                >\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='ifscCode'\n                                                        name='ifscCode'\n                                                        placeholder={AppLabels.IFSC_CODE}\n                                                        type='text'\n                                                        value={bankFormData.ifscCode}\n                                                        onChange={this.handleChangeIfscCode}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    }\n                                </div>\n                                <div className=\"text-center m-t-30- btm-fixed-action\">\n\n                                    <a\n                                        href\n                                        className={\"button button-primary-rounded btn-verify\" + (this.state.bankformValid ? '' : userProfile && (userProfile.is_bank_verified == '1' || userProfile.is_bank_verified == '2') ? '' : ' disabled')}\n                                        id=\"bankDocSubmit\"\n                                        onClick={() => this.validateOnSubmit()}\n                                    >\n                                        {userProfile && userProfile.is_bank_verified == '0' ?\n                                            AppLabels.VERIFY_BANK_DETAILS\n                                            :\n                                            AppLabels.DELETE\n                                        }\n                                    </a>\n                                </div>\n                            </div>\n                        }\n                        {showDeleteModal &&\n                            <DeleteConfirmationModal IsShow={showDeleteModal} IsHide={this.HideDeletConfirmModal} onDelete={this.deleteBankDetail} />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/Profile/ProfileEdit.jsx",["4524","4525","4526","4527","4528","4529","4530","4531","4532","4533","4534","4535","4536","4537","4538","4539","4540","4541","4542","4543","4544","4545","4546","4547","4548","4549","4550","4551","4552","4553","4554"],"import React from 'react';\nimport { Row, Col, Button, FormGroup } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport { inputStyleLeft, selectStyle } from '../../helper/input-style';\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport {\n    updateUserProfile,\n    getAllCountries,\n    getAllStates,\n} from \"../../WSHelper/WSCallings\";\nimport FloatingLabel from 'floating-label-react';\nimport Select from 'react-select';\nimport DatePicker from 'react-date-picker';\nimport WSManager from \"../../WSHelper/WSManager\";\nimport MetaData from \"../../helper/MetaData\";\nimport CustomLoader from '../../helper/CustomLoader';\nimport CustomHeader from '../../components/CustomHeader';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport * as Constants from \"../../helper/Constants\";\nimport Validation from '../../helper/Validation';\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport { UpdateConfirmation } from \"../../Modals\";\n\nconst today = Utilities.getMasterData().allow_age_limit == 0 ? new Date() : Utilities.get18YearOldDate();\nlet genderList = [];\nlet mContext = null;\nexport default class ProfileEdit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userProfile: WSManager.getProfile(),\n            displayForm: false,\n            allCountry: [],\n            allState: [],\n            selectedCountry: '',\n            selectedState: '',\n            selectedGender: '',\n            formValid: false,\n            formData: {\n                fName: '',\n                dob: '', address: '', city: '', pincode: '',\n            },\n            formErrors: {\n                fName: '',\n                dob: '', gender: '',\n                address: '', city: '', pincode: '', country: '', state: ''\n            },\n            formValidation: {\n                fNameValid: '',\n                dobValid: '', genderValid: '',\n                addressValid: '', cityValid: '', pincodeValid: '', countryValid: false, stateValid: false\n            },\n            FromWithdraw: this.props.location.state && this.props.location.state.FromWithdraw ? this.props.location.state.FromWithdraw : false,\n            showUpdateConfirm: false,\n            inputGender: '',\n            refreshElement: true\n        }\n        this.handleDOBChange = this.handleDOBChange.bind(this);\n    }\n\n    ShowConfirmation = () => {\n        this.setState({\n            showUpdateConfirm: true\n        })\n    }\n\n    HideConfirmation = () => {\n        this.setState({\n            showUpdateConfirm: false\n        })\n    }\n\n    componentDidMount() {\n        genderList = Constants.getGendersList();\n        this.getMyProfile()\n        this.getAllCountry();\n        setTimeout(() => {\n            const datePickers = document.getElementsByClassName(\"react-date-picker__inputGroup\");\n            if (datePickers && datePickers.length > 0) {\n                _Map(datePickers[0].children, (el) => {\n                    el.setAttribute(\"readOnly\", true);\n                })\n            }\n        }, 300);\n\n    }\n\n    getMyProfile() {\n        let { userProfile, formData, formValidation } = this.state;\n        let userProfileData = userProfile;\n        formData.fName = userProfileData.first_name || '';\n        formData.address = userProfileData.address || '';\n        formData.city = userProfileData.city || '';\n        formData.pincode = userProfileData.zip_code || '';\n        formValidation.countryValid = userProfileData.master_country_id != null;\n        formValidation.stateValid = userProfileData.master_state_id != null;\n\n        let savedGender = '';\n        if (userProfileData.gender == 'male') {\n            savedGender = genderList[0];\n        }\n        else if (userProfileData.gender == 'female') {\n            savedGender = genderList[1];\n        }\n\n        this.setState({\n            selectedCountry: userProfileData.master_country_id || '',\n            selectedState: userProfileData.master_state_id || '',\n            phone_code: userProfileData.phone_code || this.state.phone_code,\n            selectedGender: savedGender\n        })\n\n        var formattedDate = '';\n        if (userProfileData.dob != '' && userProfileData.dob != null) {\n            formattedDate = new Date(userProfileData.dob);\n        }\n\n        if (typeof userProfileData.email_verified != 'undefined') {\n            formData.email_verified = userProfileData.email_verified;\n        }\n        formData.dob = formattedDate;\n        this.setState({ dob: formattedDate })\n        this.setState({\n            userProfile: userProfileData,\n            formData: formData,\n            displayForm: true\n        })\n    }\n\n    updateMyProfile() {\n        mContext.setState({ isLoading: true });\n        const { formData, selectedGender, selectedCountry, selectedState } = mContext.state\n        let mDate = '';\n        if (formData.dob != '') {\n            mDate = Utilities.getFormatedDate({ date: formData.dob, format: 'MMM DD, YYYY' });\n        }\n        let param = {\n            'first_name': formData.fName,\n            'dob': mDate,\n            'gender': selectedGender.value,\n            'address': formData.address,\n            'master_country_id': (selectedCountry == '' || selectedCountry == null) ? '' : selectedCountry.value,\n            'master_state_id': (selectedState == '' || selectedState == null) ? '' : selectedState.value,\n            'city': formData.city,\n            'zip_code': formData.pincode,\n        }\n        updateUserProfile(param).then((responseJson) => {\n            mContext.setState({ isLoading: false });\n            if (responseJson !== null && responseJson !== '' && responseJson.response_code === WSC.successCode) {\n                let lsProfile = WSManager.getProfile();\n                WSManager.setProfile({ ...lsProfile, ...param });\n                Utilities.showToast(responseJson.message, 5000,'icon-user');\n                setTimeout(() => {\n                        mContext.props.history.push({ pathname: '/my-profile' })\n                }, 1000)\n            }\n            else {\n                mContext.setState({ allState: [] })\n            }\n        })\n\n        mContext.HideConfirmation()\n    }\n\n    getAllCountry() {\n        if (Constants.CountryList.length > 0) {\n            this.parseCountryData(Constants.CountryList);\n        } else {\n            let param = {}\n            getAllCountries(param).then((responseJson) => {\n                if (responseJson) {\n                    Constants.setValue.setCountry(responseJson);\n                    this.parseCountryData(responseJson);\n                }\n                else {\n                    if (responseJson && responseJson.error) {\n                        var keys = Object.keys(responseJson.error);\n                        if (keys.length > 0) {\n                            Utilities.showToast(responseJson.error.keys, 5000);\n                        }\n                        this.setState({ allState: [] })\n                    }\n                }\n                this.setState({ displayForm: true })\n            })\n        }\n    }\n\n    parseCountryData(responseJson) {\n        const countries = [];\n        responseJson.map((data, key) => {\n            countries.push({ value: data.master_country_id, label: data.country_name, phonecode: \"+\" + data.phonecode })\n            return '';\n        })\n\n        this.setState({ allState: [], allCountry: countries }, () => {\n            if (this.state.selectedCountry != '') {\n                for (let k = 0; k < this.state.allCountry.length; k++) {\n                    if (this.state.allCountry[k].value == this.state.selectedCountry) {\n                        this.setState({ selectedCountry: this.state.allCountry[k] })\n                        this.getAllState(this.state.allCountry[k].value)\n                        break;\n                    }\n                }\n            }\n        })\n    }\n\n    getAllState(masterCountryId) {\n        let param = {\n            \"master_country_id\": masterCountryId\n        }\n        getAllStates(param).then((responseJson) => {\n            if (responseJson) {\n                const states = [];\n                responseJson.map((data, key) => {\n                    states.push({ value: data.master_state_id, label: data.state_name })\n                    return '';\n                })\n                this.setState({ allState: [] })\n                this.setState({ allState: states })\n\n                if (this.state.selectedState != '') {\n                    for (let k = 0; k < this.state.allState.length; k++) {\n                        if (this.state.allState[k].value == this.state.selectedState) {\n                            this.setState({ selectedState: this.state.allState[k] })\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                if (responseJson && responseJson.error) {\n                    var keys = Object.keys(responseJson.error);\n                    if (keys.length > 0) {\n                        Utilities.showToast(responseJson.error.keys, 5000);\n                    }\n                    this.setState({ allState: [] })\n                }\n            }\n        })\n    }\n\n    handleGenderChange = (selectedOption) => {\n        this.setState({\n            selectedGender: selectedOption,\n            inputGender: selectedOption.label,\n            refreshElement: false\n        }, () => {\n            this.setState({ refreshElement: true })\n            this.validateField('gender', selectedOption.value)\n        })\n    }\n\n    handleDOBChange(date) {\n        let { formData } = this.state;\n        formData.dob = date;\n        this.setState({\n            formData: formData,\n            showDatePicker: false,\n            refreshElement: false\n        }, () => {\n            this.setState({ refreshElement: true })\n            this.validateField('dob', formData.dob)\n        });\n    }\n\n    handleCountryChange = (selectedOption) => {\n        this.setState({ selectedCountry: selectedOption, selectedState: '' });\n        if (selectedOption) {\n            this.getAllState(selectedOption.value)\n            this.validateField('country', selectedOption);\n        }\n        else {\n            this.setState({ allState: [] })\n            this.validateField('country', '')\n        }\n    }\n\n    handleStateChange = (selectedOption) => {\n        if (selectedOption) {\n            this.setState({ selectedState: selectedOption });\n            this.validateField('state', selectedOption);\n        }\n        else {\n            this.setState({ selectedState: '' });\n            this.validateField('state', '');\n        }\n    }\n\n    onProfileDataChanged = (e) => {\n        let { formData } = this.state;\n        const name = e.target.id;\n        const value = e.target.value;\n        formData[name] = value;\n        this.setState({ formData: formData },\n            () => {\n                this.validateField(name, value)\n            });\n    }\n\n    validateField(fieldName, value) {\n        let { formErrors, formValidation } = this.state;\n\n        switch (fieldName) {\n            case 'fName':\n                formValidation.fNameValid = (Validation.validate('fName', value.trim()) == 'success');\n                formErrors.fName = formValidation.fNameValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'address':\n                formValidation.addressValid = value != '';\n                formErrors.address = formValidation.addressValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'country':\n                formValidation.countryValid = value != '';\n                formErrors.country = formValidation.countryValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'state':\n                formValidation.stateValid = value != '';\n                formErrors.state = formValidation.stateValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'city':\n                formValidation.cityValid = value != '';\n                formErrors.city = formValidation.cityValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'pincode':\n                formValidation.pincodeValid = value != '';\n                formErrors.pincode = formValidation.pincodeValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'gender':\n                formValidation.genderValid = this.state.selectedGender.value != 'select';\n                formErrors.gender = formValidation.genderValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'dob':\n                formValidation.dobValid = value != '';\n                formErrors.dob = formValidation.dobValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n\n            default:\n                break;\n        }\n        this.setState({\n            formErrors: formErrors,\n            formValidation: formValidation,\n        }, this.validateForm(false));\n    }\n\n    validateForm = (submit) => {\n        const { formValidation } = this.state;\n        this.setState({\n            formValid: formValidation.fNameValid\n                && formValidation.addressValid\n                && formValidation.countryValid\n                && formValidation.stateValid\n                && formValidation.cityValid\n                && formValidation.pincodeValid\n                && formValidation.genderValid\n                && formValidation.dobValid\n        }, () => {\n            if (submit && this.state.formValid) {\n                this.ShowConfirmation()\n            }\n        });\n    }\n\n    validateOnSubmit = () => {\n        let { formData, formErrors, formValidation } = this.state;\n\n        formValidation.fNameValid = (Validation.validate('fName', formData.fName) === 'success')\n        formErrors.fName = formValidation.fNameValid ? '' : ' ' + AppLabels.is_invalid;\n\n        formValidation.dobValid = formData.dob != '';\n        formErrors.dob = formValidation.dobValid ? '' : ' ' + AppLabels.is_invalid;\n\n        formValidation.addressValid = formData.address != '';\n        formErrors.address = formValidation.addressValid ? '' : ' ' + AppLabels.is_invalid;\n\n        formValidation.cityValid = formData.city != '';\n        formErrors.city = formValidation.cityValid ? '' : ' ' + AppLabels.is_invalid;\n\n        formValidation.pincodeValid = formData.pincode != '' && formData.pincode.match(/^[0-9]{3,8}$/);\n        formErrors.pincode = formValidation.pincodeValid ? '' : ' ' + AppLabels.is_invalid;\n\n        formValidation.countryValid = this.state.selectedCountry != '';\n        formErrors.country = formValidation.countryValid ? '' : ' ' + AppLabels.is_invalid;\n\n        formValidation.stateValid = this.state.selectedState != '';\n        formErrors.state = formValidation.stateValid ? '' : ' ' + AppLabels.is_invalid;\n\n        formValidation.genderValid = this.state.selectedGender.value != 'select';\n        formErrors.gender = formValidation.genderValid ? '' : ' ' + AppLabels.is_invalid;\n\n        this.setState({\n            formErrors: formErrors,\n            formValidation: formValidation,\n        }, this.validateForm(true));\n    }\n\n    errorClass(error) {\n        if (error) {\n            return (error.length == 0 ? '' : 'has-error');\n        }\n    }\n\n    render() {\n        mContext = this;\n        const {\n            userProfile,\n            isLoading,\n        } = this.state;\n\n        const HeaderOption = {\n            back: true,\n            title: AppLabels.EDIT_BASIC_INFO,\n            hideShadow: false,\n            fromProfile: true\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container profile-section web-container-fixed\">\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.editprofile.title}</title>\n                            <meta name=\"description\" content={MetaData.editprofile.description} />\n                            <meta name=\"keywords\" content={MetaData.editprofile.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        {isLoading && <CustomLoader />}\n                        <div className=\"webcontainer-inner\">\n                            {(this.state.displayForm) ?\n                                <div className='verification-block-container'>\n                                    {userProfile.pan_verified == 1 &&\n                                        <React.Fragment>\n                                            <div className=\"non-editable-text\">\n                                                {AppLabels.replace_PANTOID(AppLabels.CANT_EDIT_AFTER_PAN_APPROVAL)}\n                                            </div>\n                                            <div className=\"overlay-on-input\"></div>\n                                        </React.Fragment>\n                                    }\n                                    <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                                        <Row>\n                                            <Col xs={12} className=\"input-label-spacing\">\n                                                <FormGroup\n                                                    className={`input-label-center input-transparent ${this.errorClass(this.state.formErrors.fName)}`}\n                                                    controlId=\"formBasicText\"\n                                                >\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='fName'\n                                                        name='fName'\n                                                        value={this.state.formData.fName}\n                                                        placeholder={AppLabels.YOUR_FULL_NAME}\n                                                        type='text'\n                                                        onChange={this.onProfileDataChanged}\n                                                        disabled={userProfile.is_profile_complete == 1 ? true : false}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                                        <Row>\n                                            <Col sm={12} className=\" m-t-10\">\n                                                <FormGroup className={`input-label-center input-transparent dob-date-picker m-b-0 ${this.errorClass(this.state.formErrors.dob)}`}\n                                                >\n                                                    <div className='datepicker_display float-label'>\n                                                        <div className=\"dobField\" >\n                                                            <label onClick={() => this.setState({ showDatePicker: !this.state.showDatePicker })} className=\"dob-text m-0\">\n                                                                {this.state.refreshElement &&\n                                                                    <FloatingLabel\n                                                                        readOnly\n                                                                        autoComplete='off'\n                                                                        styles={inputStyleLeft}\n                                                                        id='dob'\n                                                                        name='dob'\n                                                                        placeholder={AppLabels.DOB}\n                                                                        type='text'\n                                                                        value={this.state.formData.dob ? Utilities.getFormatedDate({ date: this.state.formData.dob, format: \"MMM DD, YYYY\" }) : ''}\n                                                                    />\n                                                                }\n                                                            </label>\n                                                            <DatePicker\n                                                                id='dob'\n                                                                className='date-picker-custom'\n                                                                required={true}\n                                                                activeStartDate={today}\n                                                                minDetail='decade'\n                                                                locale='en-IN'\n                                                                onChange={this.handleDOBChange}\n                                                                maxDate={today}\n                                                                value={this.state.formData.dob}\n                                                                disabled={userProfile.is_profile_complete == 1 ? true : false}\n                                                                isOpen={this.state.showDatePicker}\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r gender-block\">\n                                        <Row>\n                                            <Col xs={12}>\n                                                <FormGroup className={`input-label-center input-transparent ${this.errorClass(this.state.formErrors.gender)}`}>\n                                                    <div className=\"select-gender\">\n                                                        <div className={\"genderStyle float-label\"}>\n                                                            {this.state.refreshElement && <FloatingLabel\n                                                                autoComplete='off'\n                                                                styles={inputStyleLeft}\n                                                                id='gender'\n                                                                name='gender'\n                                                                placeholder={AppLabels.SELECT_GENDER}\n                                                                type='text'\n                                                                value={this.state.selectedGender ? this.state.selectedGender.label : ''}\n                                                            />}\n                                                            <Select\n                                                                onChange={this.handleGenderChange}\n                                                                options={genderList}\n                                                                classNamePrefix=\"secondary\"\n                                                                className=\"select-secondary minusML10\"\n                                                                arrowRenderer={this.arrowRenderer}\n                                                                value={this.state.selectedGender}\n                                                                placeholder={''}\n                                                                isSearchable={false}\n                                                                isClearable={false}\n                                                                theme={(theme) => ({\n                                                                    ...theme,\n                                                                    borderRadius: 0,\n                                                                    colors: {\n                                                                        ...theme.colors,\n                                                                        primary: process.env.REACT_APP_PRIMARY_COLOR,\n                                                                    },\n                                                                })}\n                                                            />\n                                                        </div>                                                    </div>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    </div>\n\n                                    <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                                        <Row>\n                                            <Col xs={12} className=\"input-label-spacing\">\n                                                <FormGroup\n                                                    className={`input-label-center input-transparent ${this.errorClass(this.state.formErrors.address)}`}\n                                                    controlId=\"formBasicText\"\n                                                >\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='address'\n                                                        name='address'\n                                                        placeholder={AppLabels.SETREET_ADDRESS}\n                                                        type='text'\n                                                        maxLength={200}\n                                                        onChange={this.onProfileDataChanged}\n                                                        value={this.state.formData.address}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                                        <Row>\n                                            <Col xs={12}>\n                                                <FormGroup\n                                                    className={`input-label-center zIndex1000 input-transparent select-country-field label-btm-margin ${this.errorClass(this.state.formErrors.country)}` + ((process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && WSManager.getProfile().master_country_id) ? ' disabled' : '')}\n                                                    controlId=\"formBasicText\">\n                                                    <label style={selectStyle.label}>{AppLabels.COUNTRY}</label>\n                                                    <Select\n                                                        className='select-field-transparent'\n                                                        classNamePrefix='select'\n                                                        id=\"select-country\"\n                                                        onChange={this.handleCountryChange}\n                                                        options={this.state.allCountry}\n                                                        arrowRenderer={this.arrowRenderer}\n                                                        value={this.state.selectedCountry}\n                                                        isDisabled={(process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && WSManager.getProfile().master_country_id)}\n                                                        placeholder={'-'}\n                                                        isSearchable={true}\n                                                        isClearable={false}\n                                                        theme={(theme) => ({\n                                                            ...theme,\n                                                            borderRadius: 0,\n                                                            colors: {\n                                                                ...theme.colors,\n                                                                primary: '#013D79',\n                                                            },\n                                                        })}\n                                                    >\n                                                    </Select>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                                        <Row>\n                                            <Col xs={12}>\n                                                <FormGroup className={`input-label-center input-transparent label-btm-margin select-state-field ${this.errorClass(this.state.formErrors.state)}` + ((process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && WSManager.getProfile().master_state_id) ? ' disabled' : '')}\n                                                    controlId=\"formBasicText\">\n                                                    <label style={selectStyle.label}>{AppLabels.STATE}</label>\n                                                    <Select\n                                                        className='select-field-transparent css-1hwfws3-padding'\n                                                        classNamePrefix='select'\n                                                        id=\"select-state\"\n                                                        onChange={this.handleStateChange}\n                                                        options={this.state.allState}\n                                                        arrowRenderer={this.arrowRenderer}\n                                                        value={this.state.selectedState}\n                                                        isDisabled={(process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && WSManager.getProfile().master_state_id)}\n                                                        placeholder={'-'}\n                                                        isSearchable={true}\n                                                        isClearable={false}\n                                                        theme={(theme) => ({\n                                                            ...theme,\n                                                            borderRadius: 0,\n                                                            colors: {\n                                                                ...theme.colors,\n                                                                primary: '#013D79',\n                                                            },\n                                                        })}\n                                                    >\n                                                    </Select>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className=\"verification-block mt-0 p-0 left-align no-margin-l no-margin-r\">\n                                        <Row>\n                                            <Col xs={12} className=\"input-label-spacing\">\n                                                <FormGroup\n                                                    className={`input-label-center input-transparent ${this.errorClass(this.state.formErrors.city)}` + ((process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && WSManager.getProfile().city) ? ' disabled' : '')}\n                                                    controlId=\"formBasicText\">\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='city'\n                                                        name='city'\n                                                        placeholder={AppLabels.CITY}\n                                                        type='text'\n                                                        maxLength={25}\n                                                        onChange={this.onProfileDataChanged}\n                                                        value={this.state.formData.city}\n                                                        disabled={(process.env.REACT_APP_STATE_TAGGING_ENABLE > 0 && WSManager.getProfile().city)}\n                                                    />\n                                                </FormGroup>\n                                                <span className=\"bordered-span\"></span>\n                                            </Col>\n                                            <Col xs={12} className=\"input-label-spacing\">\n                                                <FormGroup\n                                                    className={`input-label-center input-transparent ${this.errorClass(this.state.formErrors.pincode)}`}\n                                                    controlId=\"formBasicText\"\n                                                >\n                                                    <FloatingLabel\n                                                        autoComplete='off'\n                                                        styles={inputStyleLeft}\n                                                        id='pincode'\n                                                        name='pincode'\n                                                        maxLength={9}\n                                                        placeholder={Utilities.getMasterData().int_version != 1 ? AppLabels.PIN_CODE : AppLabels.POSTAL_CODE}\n                                                        type='text'\n                                                        onChange={this.onProfileDataChanged}\n                                                        value={this.state.formData.pincode}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                </div>\n                                :\n                                <div></div>\n                            }\n                        </div>\n                        <div className=\"page-footer zIndex9999\">\n                            <Button\n                                onClick={() => this.validateOnSubmit()}\n                                bsStyle=\"primary\" className=\"btn btn-block\">{AppLabels.UPDATE}</Button>\n                        </div>\n                        {this.state.showUpdateConfirm &&\n                            <UpdateConfirmation {...this.props} IsShow={this.state.showUpdateConfirm} IsHide={this.HideConfirmation}\n                                Update={this.updateMyProfile}\n                            />\n                        }\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}","/var/www/html/framework/frontend/src/Component/Profile/PanCardVerification.jsx",["4555","4556","4557","4558","4559","4560","4561","4562","4563","4564","4565","4566","4567","4568","4569","4570","4571","4572","4573","4574","4575","4576","4577","4578","4579","4580","4581","4582","4583","4584","4585","4586","4587","4588","4589","4590","4591","4592","4593","4594","4595","4596","4597","4598","4599"],"import React from 'react';\nimport { Row, Col, FormGroup, Image } from 'react-bootstrap';\nimport { MyContext } from '../../InitialSetup/MyProvider';\nimport { Helmet } from \"react-helmet\";\nimport * as WSC from \"../../WSHelper/WSConstants\";\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport MetaData from \"../../helper/MetaData\";\nimport CustomHeader from '../../components/CustomHeader';\nimport { inputStyleLeft } from '../../helper/input-style';\nimport FloatingLabel from 'floating-label-react';\nimport imageCompression from 'browser-image-compression';\nimport { Utilities, blobToFile, _Map } from '../../Utilities/Utilities';\nimport { updatePANCardDetail } from \"../../WSHelper/WSCallings\";\nimport DatePicker from 'react-date-picker';\nimport Validation from \"../../helper/Validation\";\nimport CustomLoader from '../../helper/CustomLoader';\nimport Images from '../../components/images';\n\nvar globalThis = null;\nconst today = Utilities.get18YearOldDate();\nconst options = {\n    maxWidthOrHeight: 900       \n}\nexport default class PanVerification extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            panCardData: {\n                userName: (WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2') ? WSManager.getProfile().first_name : '',\n                panNo: (WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2') ? WSManager.getProfile().pan_no : \"\",\n                dob: (WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2') ? new Date(WSManager.getProfile().dob) : \"\"\n            },\n            panCardError: {\n                userName: '',\n                panNo: '',\n                dob: ''\n            },\n            panCardValidations: {\n                userNameVaid: '',\n                panNoValid: '',\n                dobValid: ''\n            },\n            panCardvalid: false,\n            userProfile: WSManager.getProfile(),\n            panDocFile: '',\n            panDocImageURL: (WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2') ? Utilities.getPanURL(WSManager.getProfile().pan_image) : '',\n            isLoading: false,\n            file: '',\n            refreshElement: true,\n            cameraPermisiionGranted: false,\n\n        }\n        this.handleDOBChange = this.handleDOBChange.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.handelCameraPermission()\n        setTimeout(() => {\n            const datePickers = document.getElementsByClassName(\"react-date-picker__inputGroup\");\n            if (datePickers && datePickers.length > 0) {\n                _Map(datePickers[0].children, (el) => {\n                    el.setAttribute(\"readOnly\", true);\n                })\n            }\n        }, 300);\n    };\n    actionPancard = () => {\n        if (window.ReactNativeWebView && !this.state.cameraPermisiionGranted) {\n         let data = {\n             action: 'pancamera',\n             targetFunc: 'pancamera',\n         }\n         window.ReactNativeWebView.postMessage(JSON.stringify(data));\n     }\n     else{\n         this.bankDocUpload.click()\n     }\n    \n }\n\n handelCameraPermission() {\n    window.addEventListener('message', (e) => {\n\n         if (e.data.action == 'pancamera' && e.data.type == 'granted') {\n                 this.setState({cameraPermisiionGranted:true},()=>{\n                     if(this.state.cameraPermisiionGranted){\n                         this.bankDocUpload.click()\n\n                     }\n                 })\n         }\n         else if(e.data.action == 'pancamera' && e.data.type == 'denied'){\n             this.setState({cameraPermisiionGranted:false})\n\n         }\n\n     });\n }\n\n    onUsernameChange = (e) => {\n        let { panCardData } = this.state;\n        panCardData.userName = e.target.value;\n        this.setState({ panCardData: panCardData });\n        this.validateField(e.target.name, e.target.value);\n    }\n\n    onPanNoChange = (e) => {\n        let { panCardData } = this.state;\n        panCardData.panNo = e.target.value;\n        this.setState({ panCardData: panCardData });\n        this.validateField(e.target.name, e.target.value);\n    }\n\n    onDobChange = (e) => {\n        let { panCardData } = this.state;\n        panCardData.dob = e.target.value;\n        this.setState({ panCardData: panCardData });\n        this.validateField(e.target.name, e.target.value);\n    }\n\n    handleDOBChange(date) {\n        let { panCardData } = this.state;\n        panCardData.dob = date;\n        this.setState({\n            panCardData: panCardData,\n            showDatePicker: false,\n            refreshElement: false\n        }, () => {\n            this.setState({ refreshElement: true })\n            this.validateField('dob', panCardData.dob)\n        });\n    }\n\n    validateField(fieldName, value) {\n        let { panCardError, panCardValidations } = this.state;\n\n        switch (fieldName) {\n            case 'userName':\n                panCardValidations.userNameVaid = (Validation.validate('pan_userName', value) === 'success');\n                panCardError.userName = panCardValidations.userNameVaid ? '' : AppLabels.is_invalid;\n                break;\n\n            case 'pan_card':\n                panCardValidations.panNoValid = Utilities.getMasterData().int_version != 1 ? (Validation.validate(fieldName, value) === 'success') : (value != '');\n                panCardError.panNo = panCardValidations.panNoValid ? '' : AppLabels.is_invalid;\n                break;\n\n            case 'dob':\n                panCardValidations.dobValid = value != '';\n                panCardError.dob = panCardValidations.dobValid ? '' : AppLabels.is_invalid;\n                break;\n\n            default:\n                break;\n        }\n        this.setState({\n            panCardError: panCardError,\n            panCardValidations: panCardValidations\n        }, () => {\n            this.validateForm(false)\n        })\n    }\n\n    validateOnSubmit = () => {\n        let { panCardError, panCardValidations, panCardData } = this.state;\n\n        panCardValidations.userNameVaid = (Validation.validate('pan_userName', panCardData.userName) === 'success')\n        panCardError.userName = panCardValidations.userNameVaid ? '' : AppLabels.is_invalid;\n\n        panCardValidations.panNoValid = Utilities.getMasterData().int_version != 1 ? (panCardData.panNo != '' && (Validation.validate('pan_card', panCardData.panNo) === 'success')) : (panCardData.panNo != '');\n        panCardError.panNo = panCardValidations.panNoValid ? '' : AppLabels.is_invalid;\n\n        panCardValidations.dobValid = panCardData.dob != '';\n        panCardError.dob = panCardValidations.dobValid ? '' : AppLabels.is_invalid;\n\n        this.setState({\n            panCardError: panCardError,\n            panCardValidations: panCardValidations\n        }, () => {\n            this.validateForm(true)\n        })\n    }\n\n    validateForm(submit) {\n        let { panCardValidations } = this.state;\n        this.setState({\n            panCardvalid: panCardValidations.userNameVaid &&\n                panCardValidations.panNoValid &&\n                panCardValidations.dobValid\n        }, () => {\n            if (this.state.panCardvalid && submit) {\n                if (this.state.panDocFile == '') {\n                    let msg = AppLabels.replace_PANTOID(AppLabels.Please_upload_ID_card);\n                    Utilities.showToast(msg,2000,Images.PAN_ICON)\n                }\n                else {\n                    this.uploadPanDocImage()\n                }\n            }\n        })\n    }\n\n    errorClass(error) {\n        if (error) {\n            return (error.length == 0 ? '' : 'has-error')\n        }\n    }\n\n    onPanDocImgDrop(e) {\n        e.preventDefault();\n        let reader = new FileReader();\n        let mfile = e.target.files[0];\n        reader.onloadend = () => {\n            if (mfile.type && (mfile.type == 'image/png' || mfile.type == 'image/jpeg')) {\n                this.setState({ panDocImageURL: reader.result })\n                \n                this.compressImage(mfile)\n                \n            }\n            else {\n                Utilities.showToast(AppLabels.UPLOAD_FORMATS,2000,Images.PAN_ICON)\n            }\n        }\n        if (mfile) {\n            reader.readAsDataURL(mfile)\n        }\n    }\n    compressImage = async (mfile) => {\n        imageCompression(mfile, options).then((compressedFile) => {\n            this.setState({ panDocFile: blobToFile(compressedFile ? compressedFile : mfile, mfile.name) }, () => {\n            })\n        })\n    }\n\n\n    uploadPanDocImage() {\n        globalThis.setState({ isLoading: true });\n        var data = new FormData();\n        data.append(\"panfile\", this.state.panDocFile);\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = false;\n        xhr.addEventListener(\"readystatechange\", function () {\n            if (this.readyState == 4) {\n                if(!this.responseText){\n                    Utilities.showToast(AppLabels.SOMETHING_ERROR, 5000,Images.PAN_ICON);\n                    globalThis.setState({ isLoading: false });\n                    return;\n                }\n                var response = JSON.parse(this.responseText);\n                if (response != '' && response.response_code == WSC.successCode) {\n                    globalThis.updatePanCardDetail(response.data.file_name);\n                }\n                else {\n                    globalThis.setState({ isLoading: false });\n                    var keys = Object.keys(response.error);\n                    if (keys.length > 0) {\n                        let errorKey = keys[0];\n                        Utilities.showToast(response.error[errorKey], 5000,Images.PAN_ICON);\n                    }\n                }\n            }\n        });\n        xhr.addEventListener(\"load\", function(e) {\n            if(e.currentTarget.status > 400){\n                globalThis.setState({ isLoading: false });\n            }\n        }, false);\n        xhr.open(\"POST\", WSC.userURL + WSC.DO_UPLOAD_PAN);\n        xhr.setRequestHeader('Sessionkey', WSManager.getToken())\n        xhr.send(data);\n    }\n\n    updatePanCardDetail(panPath) {\n        this.setState({ isLoading: true });\n        let param = {\n            \"first_name\": this.state.panCardData.userName,\n            \"last_name\": \"\",\n            \"dob\": Utilities.getFormatedDate({ date: this.state.panCardData.dob, format: 'MMM DD, YYYY' }),\n            \"pan_no\": this.state.panCardData.panNo,\n            \"pan_image\": panPath\n        }\n        updatePANCardDetail(param).then((responseJson) => {\n            \n            if (responseJson != null && responseJson != '' && responseJson.response_code == WSC.successCode) {\n                Utilities.showToast(responseJson.message, 5000,Images.PAN_ICON);\n                setTimeout(() => {\n                    this.props.history.replace({ pathname: '/my-profile' })\n                }, 1000)\n            }\n            else {\n                Utilities.showToast(responseJson.error, 5000,Images.PAN_ICON);\n            }\n            this.setState({ isLoading: false });\n\n        })\n    }\n\n    removePanDocImage() {\n        this.setState({\n            panDocImageURL: '',\n            panDocFile: ''\n        })\n    }\n\n    render() {\n        globalThis = this;\n        const {\n            panCardData,\n            panCardError,\n            userProfile,\n            showDatePicker\n        } = this.state\n\n        const HeaderOption = {\n            back: true,\n            notification: false,\n            hideShadow: true,\n            title: (userProfile && userProfile.pan_verified == '1') ? AppLabels.replace_PANTOID(AppLabels.PANCARD) : AppLabels.replace_PANTOID(AppLabels.PANCARD_VERIFICATION),\n            fromProfile: true\n        }\n\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div className=\"web-container transparent-header web-container-fixed verify-account\">\n                        {this.state.isLoading &&\n                            <CustomLoader />\n                        }\n                        <Helmet titleTemplate={`${MetaData.template} | %s`}>\n                            <title>{MetaData.mywallet.title}</title>\n                            <meta name=\"description\" content={MetaData.mywallet.description} />\n                            <meta name=\"keywords\" content={MetaData.mywallet.keywords}></meta>\n                        </Helmet>\n                        <CustomHeader {...this.props} HeaderOption={HeaderOption} />\n                        \n                        <div className=\"verify-wrapper\">\n                            {\n                                window.ReactNativeWebView ? \n                                <div className=\"upload-section cursor-pointer\" onClick={() => userProfile.pan_verified != 1 ? this.actionPancard() : '' } >\n                                <input id=\"myInput\"\n                                    type=\"file\"\n                                    accept=\"image/*\"\n                                    ref={(bankImgRef) => this.bankDocUpload = bankImgRef}\n                                    style={{ display: 'none' }}\n                                    onChange={this.onPanDocImgDrop.bind(this)}\n                                />\n                                <Image className={this.state.panDocImageURL ? 'upload-img-show' : ''} object-fit='cover'\n                                    src={!this.state.panDocImageURL ? '' : (this.state.panDocFile != '' ? this.state.panDocImageURL : Utilities.getPanURL(this.state.panDocImageURL))} />\n                                {(this.state.panDocFile != '' && !this.state.isLoading) &&\n                                    <span className=\"delete-selected-img\">\n                                        <i id=\"removeUploadedimg\" onClick={(e) => {e.stopPropagation(); this.removePanDocImage()}}\n                                            className=\"icon-delete\"></i>\n                                    </span>\n                                }\n                                {!this.state.panDocImageURL &&\n                                    <React.Fragment>\n                                        <div className=\"text-center\">\n                                            {/* <i className=\"icon-pancard\"></i> */}\n                                            <img src={Images.PAN_ICON_PNG} alt=\"\" className=\"pan-img\" />\n                                        </div>\n                                        {userProfile.pan_verified != 1 &&\n                                            <div className=\"upload-text\" id=\"bankDocUpload\" >{AppLabels.replace_PANTOID(AppLabels.UPLOAD_PAN_CARD)}</div>\n                                        }\n                                        <p className=\"upload-details\">{AppLabels.MAX_SIZE_UPLOAD}</p>\n                                        <p className=\"upload-details\">{AppLabels.UPLOAD_FORMATS}</p>\n                                    </React.Fragment>\n                                }\n                            </div>\n                            :\n                            <div className=\"upload-section cursor-pointer\" onClick={() => userProfile.pan_verified != 1 ? this.bankDocUpload.click() : '' } >\n                                <input id=\"myInput\"\n                                    type=\"file\"\n                                    accept=\"image/*\"\n                                    ref={(bankImgRef) => this.bankDocUpload = bankImgRef}\n                                    style={{ display: 'none' }}\n                                    onChange={this.onPanDocImgDrop.bind(this)}\n                                />\n                                <Image className={this.state.panDocImageURL ? 'upload-img-show' : ''} object-fit='cover'\n                                    src={!this.state.panDocImageURL ? '' : (this.state.panDocFile != '' ? this.state.panDocImageURL : Utilities.getPanURL(this.state.panDocImageURL))} />\n                                {(this.state.panDocFile != '' && !this.state.isLoading) &&\n                                    <span className=\"delete-selected-img\">\n                                        <i id=\"removeUploadedimg\" onClick={(e) => {e.stopPropagation(); this.removePanDocImage()}}\n                                            className=\"icon-delete\"></i>\n                                    </span>\n                                }\n                                {!this.state.panDocImageURL &&\n                                    <React.Fragment>\n                                        <div className=\"text-center\">\n                                            {/* <i className=\"icon-pancard\"></i> */}\n                                            <img src={Images.PAN_ICON_PNG} alt=\"\" className=\"pan-img\" />\n                                        </div>\n                                        {userProfile.pan_verified != 1 &&\n                                            <div className=\"upload-text\" id=\"bankDocUpload\" >{AppLabels.replace_PANTOID(AppLabels.UPLOAD_PAN_CARD)}</div>\n                                        }\n                                        <p className=\"upload-details\">{AppLabels.MAX_SIZE_UPLOAD}</p>\n                                        <p className=\"upload-details\">{AppLabels.UPLOAD_FORMATS}</p>\n                                    </React.Fragment>\n                                }\n                            </div>\n\n                            }\n                            \n                            <div className={\"uploaded-info-section\" + (userProfile && userProfile.pan_verified == '1' ? ' noneditable-section' : '')}>\n                                <Row>\n                                    <Col xs={12} className=\"input-label-spacing\">\n                                        <FormGroup\n                                            className={'input-label-center input-transparent gray-input-field ' + (`${this.errorClass(panCardError.userName)}`)}\n                                            controlId=\"formBasicText\"\n                                        >\n                                            <FloatingLabel\n                                                autoComplete='off'\n                                                styles={inputStyleLeft}\n                                                id='userName'\n                                                name='userName'\n                                                disabled={(WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2')}\n                                                placeholder={AppLabels.replace_PANTOID(AppLabels.NAME_ON_PANCARD)}\n                                                value={panCardData.userName}\n                                                type='text'\n                                                onChange={this.onUsernameChange}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col xs={12} className=\"input-label-spacing\">\n                                        <FormGroup\n                                            className={'input-label-center input-transparent gray-input-field ' + (`${this.errorClass(panCardError.panNo)}`)}\n                                            controlId=\"formBasicText\"\n                                        >\n                                            <FloatingLabel\n                                                autoComplete='off'\n                                                styles={inputStyleLeft}\n                                                id='pan_card'\n                                                name='pan_card'\n                                                disabled={(WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2')}\n                                                placeholder={AppLabels.replace_PANTOID(AppLabels.PANCARD_NUMBER)}\n                                                type='text'\n                                                value={panCardData.panNo ? panCardData.panNo : ''}\n                                                onChange={this.onPanNoChange}\n                                            />\n                                            <div className=\"error-msg pan-error-msg\">\n                                                {AppLabels.replace_PANTOID(AppLabels.PLEASE_ENTER_VALID_PAN_CARD_NUMBER)}\n                                            </div>\n                                        </FormGroup>\n                                        <div className={\"pan-help-text\" + (this.errorClass(panCardError.panNo) === 'has-error' ? ' mb20' : '')}>\n                                            {userProfile && (userProfile.pan_verified == '0' || userProfile.pan_verified == '2') &&\n                                                AppLabels.replace_PANTOID(AppLabels.PANCARD_HELP_TEXT)\n                                            }\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12} className=\"\">\n                                        <FormGroup className={'input-label-center input-transparent dob-date-picker ' + (`${this.errorClass(panCardError.dob)}`)}\n                                        >\n                                            <div className='datepicker_display float-label'>\n                                                <div className=\"dobField\" >\n                                                    <label onClick={() => !(WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2') && this.setState({ showDatePicker: !showDatePicker })} className=\"dob-text\">\n                                                        {this.state.refreshElement &&\n                                                            <FormGroup className='input-label-center input-transparent '>\n                                                                <FloatingLabel\n                                                                    readOnly\n                                                                    autoComplete='off'\n                                                                    styles={inputStyleLeft}\n                                                                    id='dob'\n                                                                    name='dob'\n                                                                    placeholder={AppLabels.DOB}\n                                                                    type='text'\n                                                                    value={panCardData.dob ? Utilities.getFormatedDate({ date: panCardData.dob, format: \"MMM DD, YYYY\" }) : ''}\n                                                                />\n                                                            </FormGroup>\n                                                        }\n                                                    </label>\n                                                    <DatePicker\n                                                        id='dob'\n                                                        className='date-picker-custom'\n                                                        required={true}\n                                                        disabled={(WSManager.getProfile().pan_no && WSManager.getProfile().pan_verified != '2')}\n                                                        activeStartDate={today}\n                                                        minDetail='decade'\n                                                        locale='en-IN'\n                                                        onChange={this.handleDOBChange}\n                                                        maxDate={today}\n                                                        value={panCardData.dob}\n                                                        isOpen={showDatePicker}\n                                                    />\n                                                </div>\n                                            </div>\n                                            {/* <div className='dob-border col-sm-12' /> */}\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                            </div>\n                            {(WSManager.getProfile().pan_no == '' || WSManager.getProfile().pan_no == null || WSManager.getProfile().pan_verified == 2) &&\n                                <div className=\"text-center m-t-30- btm-fixed-action\">\n                                    <a\n                                        href\n                                        id=\"verifyPanCard\"\n                                        className={\"button button-primary-rounded btn-verify\" + (this.state.panCardvalid && !this.state.isLoading ? '' : ' disabled')}\n                                        onClick={() => this.validateOnSubmit()}\n                                    >\n                                        {AppLabels.replace_PANTOID(AppLabels.VERIFY_PANCARD)}\n                                    </a>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        )\n    }\n}\n","/var/www/html/framework/frontend/src/Component/StaticPages/AboutUs.jsx",[],"/var/www/html/framework/frontend/src/views/Leaderboard/MyLeaderboardItem.jsx",["4600","4601","4602","4603","4604","4605","4606","4607","4608","4609","4610"],"import React from 'react';\n\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { Utilities, _Map } from '../../Utilities/Utilities';\nimport Images from '../../components/images';\n\nexport default class MyLeaderboardItem extends React.Component {\n\n    render() {\n        let { userRank, index, openLineup, isExpanded, contestItem, SelectedLineup, TeamComparison } = this.props;\n\n        return (\n            <div key={index} \n                // onClick={(e) => TeamComparison(e,userRank,'')} \n                onClick={() => openLineup(userRank)} \n                className={\"ranking-list pointer-cursor my-ranking-list\" + (SelectedLineup == userRank.lineup_master_contest_id ? ' sel-active' : '')}>\n                <div className=\"display-table-cell text-center\">\n                    <div className=\"rank\">{userRank.game_rank}</div>\n                </div>\n                <div className={\"display-table-cell pl-1 pt3 pb3\" + (isExpanded ? \" \" : '')}>\n                    <div className=\"user-name-container mt6\">\n                        {\n                            // !isExpanded &&\n                            index == 0 &&\n                            <div className=\"user-name\">{AppLabels.You}</div>\n                        }\n                        <div className={\"user-team-name\" + (!isExpanded ? ' ' : '')}>\n                            {\n\n                                <span className=\"won-amount\">\n                                    {\n                                        userRank.prize_data && userRank.prize_data.length > 0 ?\n\n                                            _Map(userRank.prize_data, (prizeItem, idx) => {\n\n                                                return (\n\n                                                    (prizeItem.prize_type == 0) ?\n                                                        <span className=\"contest-prizes\" >\n                                                            {<i style={{ display: 'inlineBlock' }} className=\"icon-bonus\"></i>}\n                                                            {userRank.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}\n                                                        </span>\n                                                        :\n                                                        (prizeItem.prize_type == 1) ?\n                                                            <span className=\"contest-prizes\" >\n\n                                                                {<span style={{ display: 'inlineBlock' }}>{Utilities.getMasterData().currency_code}</span>}\n                                                                {userRank.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}\n                                                            </span>\n                                                            :\n                                                            (prizeItem.prize_type == 2) ?\n                                                                <span className=\"contest-prizes\" >\n                                                                    {<span style={{ display: 'inlineBlock' }}>\n                                                                        <img style={{ marginBottom: '2px' }} src={Images.IC_COIN} width=\"12px\" height=\"12px\" />\n                                                                        {userRank.prize_data.length === idx + 1 ? prizeItem.amount : prizeItem.amount + \"/\"}</span>}\n\n                                                                </span>\n                                                                :\n                                                                (prizeItem.prize_type == 3) ?\n                                                                    <span className=\"contest-prizes\" >\n                                                                        {<span style={{ display: 'inlineBlock' }}>{userRank.prize_data.length === idx + 1 ? prizeItem.name : prizeItem.name + \"/\"}</span>}\n\n                                                                    </span> : ''\n\n\n\n                                                )\n\n\n                                            })\n                                            :\n                                            userRank.won_prize != \"\" &&\n                                            <span className=\"won-amount\">\n                                                {contestItem.prize_type == 1 &&\n                                                    <React.Fragment>\n                                                        {Utilities.getMasterData().currency_code}\n                                                    </React.Fragment>\n                                                }\n                                                {contestItem.prize_type == 0 &&\n                                                    <i className=\"icon-bonus\"></i>\n                                                }\n                                                {userRank.won_prize} <span className=\"won\">{AppLabels.WON.toLowerCase()} - </span>\n                                            </span>\n\n\n                                    }\n                                </span>\n                            }\n\n                            {userRank.prize_data && userRank.prize_data.length > 0 ?\n                                <React.Fragment>\n\n                                    <span style={{color:'#5DBE7D'}} className=\"won\"> {AppLabels.WON} -  </span>{userRank.team_name}\n                                </React.Fragment> : \" \" + userRank.team_name\n                            }\n                            {/* <a href onClick={(e)=>this.props.TeamComparison(e,userRank,'')}>Comparison</a> */}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"display-table-cell\">\n                    <div className=\"points\">{userRank.total_score}</div>\n                </div>\n                <div className='space' />\n                {/* </div> */}\n\n            </div>\n        )\n    }\n\n}","/var/www/html/framework/frontend/src/Component/Finance/BuyConfirmModal.jsx",["4611","4612"],"import React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport * as AppLabels from \"../../helper/AppLabels\";\nimport { MyContext } from '../../InitialSetup/MyProvider';\n\nexport default class BuyConfirmModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n        };\n\n    }\n\n    componentDidMount() {\n    }\n\n\n    render() {\n\n        const { show, hide, userBalance,amt } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <Modal\n                        show={show}\n                        dialogClassName=\"custom-modal thank-you-modal confirmation-modal confirmation-modal-contestlist esport-alert\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Header >\n                            <div className='Confirm-header'> {AppLabels.CONFIRMATION} </div>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <React.Fragment>\n                                {/* <div className='devider-line'></div> */}\n                                <div className=\"my-alert-message-text\">\n                                    <span>\n                                        {AppLabels.BUY_CONFIRMATION} \n                                    </span>\n                                </div>\n                            </React.Fragment>\n                        </Modal.Body>\n                        <Modal.Footer className=\"custom-modal-footer dual-btn-footer\">\n                            <a className='my-alert-button-text' onClick={() => hide()}>{AppLabels.CANCEL}</a>\n                            <a className='my-alert-button-text' onClick={() => this.props.submitAction()}>\n                                {\n                                    (parseFloat(userBalance) >= parseFloat(amt)) ?\n                                    AppLabels.SUBMIT :\n                                    AppLabels.ADD_FUNDS\n                                }\n                            </a>\n                        </Modal.Footer>\n\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n","/var/www/html/framework/frontend/src/Modals/EditStateAndCityModal.jsx",["4613","4614","4615","4616","4617","4618","4619","4620"],"import React from 'react';\nimport { Modal, FormGroup, Row, Col } from 'react-bootstrap';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport FloatingLabel from 'floating-label-react';\nimport { selectStyle, inputStyleLeft } from '../helper/input-style';\nimport { getAllStates, updateStateDetail } from '../WSHelper/WSCallings';\nimport * as WSC from \"../WSHelper/WSConstants\";\nimport Images from '../components/images';\nimport Select from 'react-select';\nimport WSManager from '../WSHelper/WSManager';\n\n\nclass EditStateAndCityModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isLoading: false,\n            enableButton: true,\n            allState: [],\n            selectedState: '',\n            formValid: false,\n            city: '',\n            formErrors: {\n                city: '', state: ''\n            },\n            formValidation: {\n                cityValid: '', stateValid: false\n            },\n        };\n    }\n    componentDidMount() {\n        this.getAllStateData()\n    }\n\n    getAllStateData() {\n        let param = {\n            \"master_country_id\": process.env.REACT_APP_STATE_TAGGING_ENABLE\n        }\n        getAllStates(param).then((responseJson) => {\n            if (responseJson) {\n                const states = [];\n                responseJson.map((data) => {\n                    let obj = { value: data.master_state_id, label: data.state_name }\n                    states.push(obj)\n                })\n                this.setState({ allState: states })\n            }\n        })\n    }\n\n    updateDetail() {\n        this.setState({ isLoading: true });\n        var { selectedState, city } = this.state;\n\n        let param = {\n            'master_country_id': process.env.REACT_APP_STATE_TAGGING_ENABLE,\n            'master_state_id': selectedState ? selectedState.value : '',\n            'city': city\n        }\n        updateStateDetail(param).then((responseJson) => {\n            this.setState({ isLoading: false });\n            if (responseJson.response_code === WSC.successCode) {\n                let lsProfile = WSManager.getProfile();\n                WSManager.setProfile({ ...lsProfile, ...param });\n                this.props.mHide();\n            }\n        })\n\n    }\n\n    onInputChanged = (e) => {\n        const name = e.target.id;\n        const value = e.target.value;\n        this.setState({ city: value }, () => {\n            this.validateField(name, value)\n        });\n    }\n\n    validateOnSubmit = () => {\n        let { city, formErrors, formValidation } = this.state;\n        formValidation.cityValid = city != '' && city.length > 2;\n        formErrors.city = formValidation.cityValid ? '' : ' ' + AppLabels.is_invalid;\n        formValidation.stateValid = this.state.selectedState != '';\n        formErrors.state = formValidation.stateValid ? '' : ' ' + AppLabels.is_invalid;\n        this.setState({\n            formErrors: formErrors,\n            formValidation: formValidation,\n        }, this.validateForm(true));\n    }\n\n    validateField(fieldName, value) {\n        let { formErrors, formValidation } = this.state;\n        switch (fieldName) {\n            case 'state':\n                formValidation.stateValid = value != '';\n                formErrors.state = formValidation.stateValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            case 'city':\n                formValidation.cityValid = value != ''  && value.length > 2;\n                formErrors.city = formValidation.cityValid ? '' : ' ' + AppLabels.is_invalid;\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            formErrors: formErrors,\n            formValidation: formValidation,\n        }, this.validateForm(false));\n    }\n\n    validateForm = (submit) => {\n        const { formValidation } = this.state;\n        this.setState({\n            formValid: formValidation.stateValid\n                && formValidation.cityValid\n        }, () => {\n            if (submit && this.state.formValid) {\n                this.updateDetail()\n            }\n        });\n    }\n\n    errorClass(error) {\n        if (error) {\n            return (error.length == 0 ? '' : 'has-error');\n        }\n    }\n\n    handleStateChange = (selectedOption) => {\n        if (selectedOption) {\n            this.setState({ selectedState: selectedOption });\n            this.validateField('state', selectedOption);\n        }\n        else {\n            this.setState({ selectedState: '' });\n            this.validateField('state', '');\n        }\n    }\n\n    hideModal = () => {\n        this.props.mHide();\n        setTimeout(() => {\n            this.props.history.goBack();\n        }, 50);\n    }\n\n    render() {\n        const { mShow } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={mShow}\n                        onHide={this.hideModal}\n                        dialogClassName=\"edit-input-modal edit-mobile-no-modal m-state-tagging\"\n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"icon-section\">\n                                <i className=\"icon-admin\"></i>\n                            </div>\n                            <h2>{AppLabels.EDIT_BASIC_INFO}</h2>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <div className=\"edit-input-form edit-Mobile-form\">\n                                <div className=\"verification-block state-b p-0 left-align no-margin-l no-margin-r\">\n                                    <Row>\n                                        <Col xs={12}>\n                                            <FormGroup className={`input-label-center input-transparent label-btm-margin select-state-field ${this.errorClass(this.state.formErrors.state)}`}\n                                                controlId=\"formBasicText\">\n                                                <label style={selectStyle.label}>{AppLabels.STATE}</label>\n                                                <Select\n                                                    className='select-field-transparent css-1hwfws3-padding'\n                                                    classNamePrefix='select'\n                                                    id=\"select-state\"\n                                                    onChange={this.handleStateChange}\n                                                    options={this.state.allState}\n                                                    value={this.state.selectedState}\n                                                    placeholder={'-'}\n                                                    isSearchable={true}\n                                                    isClearable={false}\n                                                    theme={(theme) => ({\n                                                        ...theme,\n                                                        borderRadius: 0,\n                                                        colors: {\n                                                            ...theme.colors,\n                                                            primary: '#013D79',\n                                                        },\n                                                    })}\n                                                >\n                                                </Select>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"verification-block p-0 left-align no-margin-l no-margin-r\">\n                                    <Row>\n                                        <Col xs={12} className=\"input-label-spacing\">\n                                            <FormGroup\n                                                className={'input-label-center input-transparent ' + (`${this.errorClass(this.state.formErrors.city)}`)}\n                                                controlId=\"formBasicText\">\n                                                <FloatingLabel\n                                                    autoComplete='off'\n                                                    styles={inputStyleLeft}\n                                                    id='city'\n                                                    name='city'\n                                                    placeholder={AppLabels.CITY}\n                                                    type='text'\n                                                    maxLength={25}\n                                                    onChange={this.onInputChanged}\n                                                    value={this.state.city}\n                                                />\n                                            </FormGroup>\n                                            <span className=\"bordered-span\"></span>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                            <div onClick={() => this.validateOnSubmit()} className={\"button button-primary button-block btm-fixed\"}>{AppLabels.UPDATE}</div>\n                        </Modal.Body>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}\n\nexport default EditStateAndCityModal;","/var/www/html/framework/frontend/src/Modals/SuccessModal.jsx",["4621"],"import React from 'react';\nimport {  Modal } from 'react-bootstrap';\nimport Images from '../components/images';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\n\nexport default class SuccessModal extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            \n        };\n    }\n\n    handleClick=()=>{\n        this.props.HideSuccessModal();\n    }\n\n    render() {\n\n        const { IsSuccessModalShow} = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n\n                    <Modal\n                        show={IsSuccessModalShow}\n                        dialogClassName=\"custom-modal thank-you-modal link-send-success-modal\" \n                        className=\"center-modal\"\n                    >\n                        <Modal.Header>\n                            <div className=\"header-modalbg\">\n                                <i className=\"icon-tick-circular primary-icon\"></i>\n                            </div>\n                        </Modal.Header>\n                        <div>\n                            <Modal.Body>\n                                <div className=\"thank-you-body\">\n                                    <h4 className=\"text-uppercase text-bold\">{AppLabels.SUCCESS}</h4>\n                                    <p>{AppLabels.EMAIL_SEND_SUCCESS_MESSAGE}</p>\n                                    {/* <p>Please check your email to reset password.</p> */}\n                                </div>\n                            </Modal.Body>\n                            <Modal.Footer className='custom-modal-footer overflow'>\n                                    <a \n                                        href\n                                        onClick={()=>this.handleClick()}\n                                        className=\"btn-single\"\n                                        // onClick={() => this.props.history.push('/password')}\n                                    >\n                                        <span>{AppLabels.OK}</span>\n                                    </a>\n                            </Modal.Footer>\n                        </div>\n                    </Modal>\n\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","/var/www/html/framework/frontend/src/redux/actions/types.js",[],{"ruleId":"4622","replacedBy":"4623"},{"ruleId":"4624","replacedBy":"4625"},{"ruleId":"4626","severity":1,"message":"4627","line":25,"column":64,"nodeType":"4628","messageId":"4629","endLine":25,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":28,"column":64,"nodeType":"4628","messageId":"4629","endLine":28,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":31,"column":64,"nodeType":"4628","messageId":"4629","endLine":31,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":34,"column":64,"nodeType":"4628","messageId":"4629","endLine":34,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":37,"column":64,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":40,"column":64,"nodeType":"4628","messageId":"4629","endLine":40,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":43,"column":64,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":8,"column":65,"nodeType":"4628","messageId":"4629","endLine":8,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":40,"column":67,"nodeType":"4628","messageId":"4629","endLine":40,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":15,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":15,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":15,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":174,"column":15,"nodeType":"4628","messageId":"4629","endLine":174,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":177,"column":15,"nodeType":"4628","messageId":"4629","endLine":177,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":15,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":15,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":188,"column":14,"nodeType":"4628","messageId":"4629","endLine":188,"endColumn":16},{"ruleId":"4626","severity":1,"message":"4627","line":188,"column":47,"nodeType":"4628","messageId":"4629","endLine":188,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":188,"column":78,"nodeType":"4628","messageId":"4629","endLine":188,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":43,"column":28,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4630","line":163,"column":61,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":190,"column":47,"nodeType":"4628","messageId":"4629","endLine":190,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":306,"column":72,"nodeType":"4628","messageId":"4629","endLine":306,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":308,"column":130,"nodeType":"4628","messageId":"4629","endLine":308,"endColumn":132},{"ruleId":"4626","severity":1,"message":"4627","line":9,"column":47,"nodeType":"4628","messageId":"4629","endLine":9,"endColumn":49},{"ruleId":"4631","severity":1,"message":"4632","line":131,"column":15,"nodeType":"4633","messageId":"4634","endLine":131,"endColumn":23},{"ruleId":"4631","severity":1,"message":"4635","line":132,"column":15,"nodeType":"4633","messageId":"4634","endLine":132,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4630","line":134,"column":84,"nodeType":"4628","messageId":"4629","endLine":134,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4630","line":280,"column":21,"nodeType":"4628","messageId":"4629","endLine":280,"endColumn":23},{"ruleId":"4626","severity":1,"message":"4627","line":299,"column":27,"nodeType":"4628","messageId":"4629","endLine":299,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":302,"column":27,"nodeType":"4628","messageId":"4629","endLine":302,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":305,"column":27,"nodeType":"4628","messageId":"4629","endLine":305,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":308,"column":27,"nodeType":"4628","messageId":"4629","endLine":308,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":311,"column":27,"nodeType":"4628","messageId":"4629","endLine":311,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":314,"column":27,"nodeType":"4628","messageId":"4629","endLine":314,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":27,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":29},{"ruleId":"4636","severity":1,"message":"4637","line":384,"column":35,"nodeType":"4638","messageId":"4639","endLine":384,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":405,"column":31,"nodeType":"4628","messageId":"4629","endLine":405,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":36,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":413,"column":36,"nodeType":"4628","messageId":"4629","endLine":413,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":416,"column":36,"nodeType":"4628","messageId":"4629","endLine":416,"endColumn":38},{"ruleId":"4631","severity":1,"message":"4640","line":6,"column":5,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":15},{"ruleId":"4626","severity":1,"message":"4627","line":83,"column":27,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":5,"column":72,"nodeType":"4628","messageId":"4629","endLine":5,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":256,"column":93,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":44,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":312,"column":50,"nodeType":"4628","messageId":"4629","endLine":312,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4630","line":351,"column":128,"nodeType":"4628","messageId":"4629","endLine":351,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4630","line":355,"column":138,"nodeType":"4628","messageId":"4629","endLine":355,"endColumn":140},{"ruleId":"4626","severity":1,"message":"4630","line":53,"column":48,"nodeType":"4628","messageId":"4629","endLine":53,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":54,"column":57,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":56,"column":34,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":70,"column":51,"nodeType":"4628","messageId":"4629","endLine":70,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":74,"column":58,"nodeType":"4628","messageId":"4629","endLine":74,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":78,"column":38,"nodeType":"4628","messageId":"4629","endLine":78,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":136,"column":29,"nodeType":"4628","messageId":"4629","endLine":136,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4630","line":158,"column":37,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":159,"column":53,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":34,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":166,"column":40,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":47,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4630","line":175,"column":38,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":51,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":86,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":119,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":151,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":153},{"ruleId":"4641","severity":1,"message":"4642","line":427,"column":17,"nodeType":"4633","messageId":"4643","endLine":427,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4630","line":460,"column":27,"nodeType":"4628","messageId":"4629","endLine":460,"endColumn":29},{"ruleId":"4631","severity":1,"message":"4644","line":3,"column":10,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":13},{"ruleId":"4645","severity":1,"message":"4646","line":160,"column":5,"nodeType":"4647","messageId":"4629","endLine":160,"endColumn":15},{"ruleId":"4648","severity":1,"message":"4649","line":39,"column":1,"nodeType":"4650","endLine":41,"endColumn":3},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":32,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":160,"column":46,"nodeType":"4628","messageId":"4629","endLine":160,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":219,"column":66,"nodeType":"4628","messageId":"4629","endLine":219,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":251,"column":63,"nodeType":"4628","messageId":"4629","endLine":251,"endColumn":65},{"ruleId":"4631","severity":1,"message":"4651","line":16,"column":10,"nodeType":"4633","messageId":"4634","endLine":16,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4652","line":16,"column":28,"nodeType":"4633","messageId":"4634","endLine":16,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":79,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":150,"column":39,"nodeType":"4628","messageId":"4629","endLine":150,"endColumn":41},{"ruleId":"4653","severity":1,"message":"4654","line":212,"column":57,"nodeType":"4655","endLine":215,"endColumn":87},{"ruleId":"4631","severity":1,"message":"4656","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":13},{"ruleId":"4631","severity":1,"message":"4657","line":2,"column":15,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":18},{"ruleId":"4626","severity":1,"message":"4630","line":24,"column":34,"nodeType":"4628","messageId":"4629","endLine":24,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":42,"column":36,"nodeType":"4628","messageId":"4629","endLine":42,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":53,"column":36,"nodeType":"4628","messageId":"4629","endLine":53,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":56,"column":36,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":65,"column":25,"nodeType":"4628","messageId":"4629","endLine":65,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4627","line":68,"column":30,"nodeType":"4628","messageId":"4629","endLine":68,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":30,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":52,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":82,"column":35,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":84,"column":34,"nodeType":"4628","messageId":"4629","endLine":84,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":39,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":91,"column":38,"nodeType":"4628","messageId":"4629","endLine":91,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":96,"column":43,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":98,"column":42,"nodeType":"4628","messageId":"4629","endLine":98,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":103,"column":47,"nodeType":"4628","messageId":"4629","endLine":103,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":153,"column":56,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":155,"column":113,"nodeType":"4628","messageId":"4629","endLine":155,"endColumn":115},{"ruleId":"4626","severity":1,"message":"4627","line":197,"column":56,"nodeType":"4628","messageId":"4629","endLine":197,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":199,"column":113,"nodeType":"4628","messageId":"4629","endLine":199,"endColumn":115},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":81,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":101,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":123,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":125},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":145,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":167,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":169},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":189,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":191},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":211,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":213},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":233,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":235},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":255,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":257},{"ruleId":"4626","severity":1,"message":"4627","line":206,"column":90,"nodeType":"4628","messageId":"4629","endLine":206,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":223,"column":98,"nodeType":"4628","messageId":"4629","endLine":223,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":230,"column":98,"nodeType":"4628","messageId":"4629","endLine":230,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":236,"column":98,"nodeType":"4628","messageId":"4629","endLine":236,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":243,"column":98,"nodeType":"4628","messageId":"4629","endLine":243,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":77,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":97,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":119,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":141,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":143},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":163,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":165},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":185,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":187},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":207,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":209},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":229,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":231},{"ruleId":"4626","severity":1,"message":"4630","line":255,"column":251,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":253},{"ruleId":"4626","severity":1,"message":"4627","line":261,"column":94,"nodeType":"4628","messageId":"4629","endLine":261,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":268,"column":94,"nodeType":"4628","messageId":"4629","endLine":268,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":274,"column":94,"nodeType":"4628","messageId":"4629","endLine":274,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":281,"column":94,"nodeType":"4628","messageId":"4629","endLine":281,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":297,"column":94,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":304,"column":94,"nodeType":"4628","messageId":"4629","endLine":304,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":310,"column":94,"nodeType":"4628","messageId":"4629","endLine":310,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":94,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":339,"column":62,"nodeType":"4628","messageId":"4629","endLine":339,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":341,"column":65,"nodeType":"4628","messageId":"4629","endLine":341,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":341,"column":87,"nodeType":"4628","messageId":"4629","endLine":341,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":343,"column":69,"nodeType":"4628","messageId":"4629","endLine":343,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":46,"column":37,"nodeType":"4628","messageId":"4629","endLine":46,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":46,"column":69,"nodeType":"4628","messageId":"4629","endLine":46,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":50,"column":43,"nodeType":"4628","messageId":"4629","endLine":50,"endColumn":45},{"ruleId":"4658","severity":1,"message":"4659","line":74,"column":110,"nodeType":"4628","messageId":"4660","endLine":74,"endColumn":111},{"ruleId":"4658","severity":1,"message":"4659","line":84,"column":118,"nodeType":"4628","messageId":"4660","endLine":84,"endColumn":119},{"ruleId":"4658","severity":1,"message":"4659","line":105,"column":114,"nodeType":"4628","messageId":"4660","endLine":105,"endColumn":115},{"ruleId":"4658","severity":1,"message":"4659","line":117,"column":118,"nodeType":"4628","messageId":"4660","endLine":117,"endColumn":119},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":89,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":91},{"ruleId":"4661","severity":1,"message":"4662","line":137,"column":41,"nodeType":"4655","endLine":137,"endColumn":166},{"ruleId":"4626","severity":1,"message":"4627","line":141,"column":82,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":85,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4630","line":149,"column":119,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4627","line":150,"column":109,"nodeType":"4628","messageId":"4629","endLine":150,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":151,"column":71,"nodeType":"4628","messageId":"4629","endLine":151,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":151,"column":103,"nodeType":"4628","messageId":"4629","endLine":151,"endColumn":105},{"ruleId":"4626","severity":1,"message":"4627","line":153,"column":90,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":153,"column":145,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":156,"column":129,"nodeType":"4628","messageId":"4629","endLine":156,"endColumn":131},{"ruleId":"4626","severity":1,"message":"4627","line":156,"column":187,"nodeType":"4628","messageId":"4629","endLine":156,"endColumn":189},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":57,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":35,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":67,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":97,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":126,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":56,"column":30,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":56,"column":61,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":91,"column":33,"nodeType":"4628","messageId":"4629","endLine":91,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":97,"column":63,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4630","line":101,"column":72,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":47,"column":86,"nodeType":"4628","messageId":"4629","endLine":47,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":51,"column":65,"nodeType":"4628","messageId":"4629","endLine":51,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":54,"column":70,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":57,"column":75,"nodeType":"4628","messageId":"4629","endLine":57,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":88,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4630","line":66,"column":64,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":40,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":62,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":55,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4630","line":149,"column":110,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":176,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":178},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":300,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":302},{"ruleId":"4626","severity":1,"message":"4627","line":152,"column":31,"nodeType":"4628","messageId":"4629","endLine":152,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":155,"column":73,"nodeType":"4628","messageId":"4629","endLine":155,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":160,"column":33,"nodeType":"4628","messageId":"4629","endLine":160,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":166,"column":88,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":29,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":175,"column":36,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":175,"column":56,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":57,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":185,"column":49,"nodeType":"4628","messageId":"4629","endLine":185,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":185,"column":73,"nodeType":"4628","messageId":"4629","endLine":185,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":244,"column":39,"nodeType":"4628","messageId":"4629","endLine":244,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":43,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":275,"column":49,"nodeType":"4628","messageId":"4629","endLine":275,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":275,"column":70,"nodeType":"4628","messageId":"4629","endLine":275,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":275,"column":91,"nodeType":"4628","messageId":"4629","endLine":275,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":283,"column":60,"nodeType":"4628","messageId":"4629","endLine":283,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":60,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":65,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":107,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":101,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":169,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":171},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":234,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":236},{"ruleId":"4626","severity":1,"message":"4627","line":294,"column":65,"nodeType":"4628","messageId":"4629","endLine":294,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":294,"column":126,"nodeType":"4628","messageId":"4629","endLine":294,"endColumn":128},{"ruleId":"4631","severity":1,"message":"4663","line":6,"column":8,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":17},{"ruleId":"4664","severity":1,"message":"4665","line":11,"column":5,"nodeType":"4666","messageId":"4667","endLine":13,"endColumn":6},{"ruleId":"4626","severity":1,"message":"4627","line":25,"column":56,"nodeType":"4628","messageId":"4629","endLine":25,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":25,"column":152,"nodeType":"4628","messageId":"4629","endLine":25,"endColumn":154},{"ruleId":"4626","severity":1,"message":"4627","line":32,"column":60,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4630","line":32,"column":116,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":118},{"ruleId":"4626","severity":1,"message":"4627","line":60,"column":56,"nodeType":"4628","messageId":"4629","endLine":60,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":60,"column":152,"nodeType":"4628","messageId":"4629","endLine":60,"endColumn":154},{"ruleId":"4626","severity":1,"message":"4630","line":21,"column":22,"nodeType":"4628","messageId":"4629","endLine":21,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4630","line":40,"column":53,"nodeType":"4628","messageId":"4629","endLine":40,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":55,"column":126,"nodeType":"4628","messageId":"4629","endLine":55,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":65,"column":76,"nodeType":"4628","messageId":"4629","endLine":65,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":67,"column":50,"nodeType":"4628","messageId":"4629","endLine":67,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":75,"column":139,"nodeType":"4628","messageId":"4629","endLine":75,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":84,"column":139,"nodeType":"4628","messageId":"4629","endLine":84,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":97,"column":44,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":26,"column":38,"nodeType":"4628","messageId":"4629","endLine":26,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":68,"column":166,"nodeType":"4628","messageId":"4629","endLine":68,"endColumn":168},{"ruleId":"4626","severity":1,"message":"4627","line":75,"column":75,"nodeType":"4628","messageId":"4629","endLine":75,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":78,"column":84,"nodeType":"4628","messageId":"4629","endLine":78,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":50,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4630","line":112,"column":79,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":53,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":125,"column":97,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":48,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":158,"column":60,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":170,"column":64,"nodeType":"4628","messageId":"4629","endLine":170,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":187,"column":44,"nodeType":"4628","messageId":"4629","endLine":187,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":197,"column":44,"nodeType":"4628","messageId":"4629","endLine":197,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":199,"column":96,"nodeType":"4628","messageId":"4629","endLine":199,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":211,"column":66,"nodeType":"4628","messageId":"4629","endLine":211,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":214,"column":57,"nodeType":"4628","messageId":"4629","endLine":214,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":255,"column":103,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":105},{"ruleId":"4626","severity":1,"message":"4627","line":357,"column":88,"nodeType":"4628","messageId":"4629","endLine":357,"endColumn":90},{"ruleId":"4658","severity":1,"message":"4659","line":358,"column":49,"nodeType":"4628","messageId":"4660","endLine":358,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":360,"column":46,"nodeType":"4628","messageId":"4629","endLine":360,"endColumn":48},{"ruleId":"4658","severity":1,"message":"4659","line":362,"column":49,"nodeType":"4628","messageId":"4660","endLine":362,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":414,"column":95,"nodeType":"4628","messageId":"4629","endLine":414,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4630","line":416,"column":40,"nodeType":"4628","messageId":"4629","endLine":416,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":425,"column":77,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4630","line":428,"column":41,"nodeType":"4628","messageId":"4629","endLine":428,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":576,"column":57,"nodeType":"4628","messageId":"4629","endLine":576,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":587,"column":46,"nodeType":"4628","messageId":"4629","endLine":587,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4630","line":708,"column":145,"nodeType":"4628","messageId":"4629","endLine":708,"endColumn":147},{"ruleId":"4631","severity":1,"message":"4668","line":3,"column":17,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4669","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4670","line":6,"column":10,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":29},{"ruleId":"4631","severity":1,"message":"4671","line":8,"column":8,"nodeType":"4633","messageId":"4634","endLine":8,"endColumn":21},{"ruleId":"4631","severity":1,"message":"4672","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4673","line":10,"column":8,"nodeType":"4633","messageId":"4634","endLine":10,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4627","line":55,"column":43,"nodeType":"4628","messageId":"4629","endLine":55,"endColumn":45},{"ruleId":"4631","severity":1,"message":"4674","line":97,"column":37,"nodeType":"4633","messageId":"4634","endLine":97,"endColumn":46},{"ruleId":"4631","severity":1,"message":"4675","line":99,"column":13,"nodeType":"4633","messageId":"4634","endLine":99,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4676","line":101,"column":13,"nodeType":"4633","messageId":"4634","endLine":101,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":43,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":126,"column":103,"nodeType":"4628","messageId":"4629","endLine":126,"endColumn":105},{"ruleId":"4648","severity":1,"message":"4649","line":264,"column":1,"nodeType":"4650","endLine":267,"endColumn":4},{"ruleId":"4631","severity":1,"message":"4677","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":21},{"ruleId":"4631","severity":1,"message":"4678","line":2,"column":23,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":38},{"ruleId":"4631","severity":1,"message":"4679","line":58,"column":7,"nodeType":"4633","messageId":"4634","endLine":58,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":155,"column":54,"nodeType":"4628","messageId":"4629","endLine":155,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":54,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":170,"column":42,"nodeType":"4628","messageId":"4629","endLine":170,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":179,"column":42,"nodeType":"4628","messageId":"4629","endLine":179,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":196,"column":34,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":200,"column":26,"nodeType":"4628","messageId":"4629","endLine":200,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":269,"column":59,"nodeType":"4628","messageId":"4629","endLine":269,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":269,"column":118,"nodeType":"4628","messageId":"4629","endLine":269,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":269,"column":181,"nodeType":"4628","messageId":"4629","endLine":269,"endColumn":183},{"ruleId":"4626","severity":1,"message":"4627","line":273,"column":60,"nodeType":"4628","messageId":"4629","endLine":273,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":273,"column":118,"nodeType":"4628","messageId":"4629","endLine":273,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":285,"column":61,"nodeType":"4628","messageId":"4629","endLine":285,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":285,"column":116,"nodeType":"4628","messageId":"4629","endLine":285,"endColumn":118},{"ruleId":"4626","severity":1,"message":"4627","line":285,"column":175,"nodeType":"4628","messageId":"4629","endLine":285,"endColumn":177},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":64,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":119,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":154,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":156},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":213,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":268,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":270},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":325,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":327},{"ruleId":"4626","severity":1,"message":"4627","line":316,"column":59,"nodeType":"4628","messageId":"4629","endLine":316,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":316,"column":143,"nodeType":"4628","messageId":"4629","endLine":316,"endColumn":145},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":59,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":320,"column":63,"nodeType":"4628","messageId":"4629","endLine":320,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":320,"column":132,"nodeType":"4628","messageId":"4629","endLine":320,"endColumn":134},{"ruleId":"4626","severity":1,"message":"4627","line":321,"column":68,"nodeType":"4628","messageId":"4629","endLine":321,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":321,"column":131,"nodeType":"4628","messageId":"4629","endLine":321,"endColumn":133},{"ruleId":"4626","severity":1,"message":"4627","line":322,"column":62,"nodeType":"4628","messageId":"4629","endLine":322,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":322,"column":131,"nodeType":"4628","messageId":"4629","endLine":322,"endColumn":133},{"ruleId":"4626","severity":1,"message":"4630","line":331,"column":76,"nodeType":"4628","messageId":"4629","endLine":331,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":349,"column":37,"nodeType":"4628","messageId":"4629","endLine":349,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":352,"column":37,"nodeType":"4628","messageId":"4629","endLine":352,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":355,"column":37,"nodeType":"4628","messageId":"4629","endLine":355,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":358,"column":37,"nodeType":"4628","messageId":"4629","endLine":358,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":361,"column":37,"nodeType":"4628","messageId":"4629","endLine":361,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":364,"column":37,"nodeType":"4628","messageId":"4629","endLine":364,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":372,"column":37,"nodeType":"4628","messageId":"4629","endLine":372,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":375,"column":37,"nodeType":"4628","messageId":"4629","endLine":375,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":378,"column":37,"nodeType":"4628","messageId":"4629","endLine":378,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":381,"column":37,"nodeType":"4628","messageId":"4629","endLine":381,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":390,"column":37,"nodeType":"4628","messageId":"4629","endLine":390,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":393,"column":37,"nodeType":"4628","messageId":"4629","endLine":393,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":517,"column":213,"nodeType":"4628","messageId":"4629","endLine":517,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":563,"column":76,"nodeType":"4628","messageId":"4629","endLine":563,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":580,"column":74,"nodeType":"4628","messageId":"4629","endLine":580,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":580,"column":109,"nodeType":"4628","messageId":"4629","endLine":580,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":582,"column":92,"nodeType":"4628","messageId":"4629","endLine":582,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":138,"column":44,"nodeType":"4628","messageId":"4629","endLine":138,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":150,"column":63,"nodeType":"4628","messageId":"4629","endLine":150,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4630","line":27,"column":38,"nodeType":"4628","messageId":"4629","endLine":27,"endColumn":40},{"ruleId":"4631","severity":1,"message":"4680","line":48,"column":73,"nodeType":"4633","messageId":"4634","endLine":48,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":72,"column":109,"nodeType":"4628","messageId":"4629","endLine":72,"endColumn":111},{"ruleId":"4631","severity":1,"message":"4651","line":16,"column":10,"nodeType":"4633","messageId":"4634","endLine":16,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4652","line":16,"column":28,"nodeType":"4633","messageId":"4634","endLine":16,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":79,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":150,"column":39,"nodeType":"4628","messageId":"4629","endLine":150,"endColumn":41},{"ruleId":"4653","severity":1,"message":"4654","line":213,"column":57,"nodeType":"4655","endLine":216,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":249,"column":63,"nodeType":"4628","messageId":"4629","endLine":249,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":253,"column":63,"nodeType":"4628","messageId":"4629","endLine":253,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":253,"column":89,"nodeType":"4628","messageId":"4629","endLine":253,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":257,"column":63,"nodeType":"4628","messageId":"4629","endLine":257,"endColumn":65},{"ruleId":"4631","severity":1,"message":"4681","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4682","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":16},{"ruleId":"4626","severity":1,"message":"4627","line":121,"column":65,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4630","line":136,"column":46,"nodeType":"4628","messageId":"4629","endLine":136,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":29,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4630","line":256,"column":52,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":280,"column":54,"nodeType":"4628","messageId":"4629","endLine":280,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":61,"column":29,"nodeType":"4628","messageId":"4629","endLine":61,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":81,"column":48,"nodeType":"4628","messageId":"4629","endLine":81,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":126,"column":28,"nodeType":"4628","messageId":"4629","endLine":126,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":74,"column":60,"nodeType":"4628","messageId":"4629","endLine":74,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":45,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":83,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":125,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":57,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":93,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":131,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":133},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":187,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":189},{"ruleId":"4626","severity":1,"message":"4627","line":137,"column":52,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":213,"column":47,"nodeType":"4628","messageId":"4629","endLine":213,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4630","line":221,"column":46,"nodeType":"4628","messageId":"4629","endLine":221,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4630","line":90,"column":39,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4630","line":38,"column":92,"nodeType":"4628","messageId":"4629","endLine":38,"endColumn":94},{"ruleId":"4631","severity":1,"message":"4656","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":13},{"ruleId":"4631","severity":1,"message":"4657","line":2,"column":15,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4683","line":2,"column":20,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":28},{"ruleId":"4631","severity":1,"message":"4668","line":2,"column":30,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":39},{"ruleId":"4631","severity":1,"message":"4684","line":3,"column":10,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4685","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4686","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4687","line":11,"column":13,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4688","line":12,"column":10,"nodeType":"4633","messageId":"4634","endLine":12,"endColumn":19},{"ruleId":"4626","severity":1,"message":"4630","line":98,"column":109,"nodeType":"4628","messageId":"4629","endLine":98,"endColumn":111},{"ruleId":"4631","severity":1,"message":"4689","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":16},{"ruleId":"4626","severity":1,"message":"4630","line":28,"column":54,"nodeType":"4628","messageId":"4629","endLine":28,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":28,"column":90,"nodeType":"4628","messageId":"4629","endLine":28,"endColumn":92},{"ruleId":"4631","severity":1,"message":"4663","line":3,"column":8,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4687","line":4,"column":13,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":16},{"ruleId":"4626","severity":1,"message":"4627","line":26,"column":43,"nodeType":"4628","messageId":"4629","endLine":26,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":38,"column":43,"nodeType":"4628","messageId":"4629","endLine":38,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":41,"column":43,"nodeType":"4628","messageId":"4629","endLine":41,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":133,"column":54,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":90,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":92},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":9,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":15},{"ruleId":"4691","severity":1,"message":"4692","line":44,"column":29,"nodeType":"4655","endLine":44,"endColumn":97},{"ruleId":"4691","severity":1,"message":"4692","line":45,"column":29,"nodeType":"4655","endLine":45,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4630","line":83,"column":30,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":87,"column":36,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":90,"column":40,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":90,"column":72,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":93,"column":36,"nodeType":"4628","messageId":"4629","endLine":93,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":93,"column":64,"nodeType":"4628","messageId":"4629","endLine":93,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":96,"column":31,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":96,"column":56,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":100,"column":31,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":100,"column":56,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":101,"column":97,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4630","line":106,"column":55,"nodeType":"4628","messageId":"4629","endLine":106,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":52,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":57,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":118,"column":57,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":121,"column":57,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":122,"column":52,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":52,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":52,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":130,"column":57,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":63,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":134,"column":68,"nodeType":"4628","messageId":"4629","endLine":134,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":137,"column":68,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":140,"column":68,"nodeType":"4628","messageId":"4629","endLine":140,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":68,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":146,"column":68,"nodeType":"4628","messageId":"4629","endLine":146,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":153,"column":49,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":157,"column":36,"nodeType":"4628","messageId":"4629","endLine":157,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":157,"column":72,"nodeType":"4628","messageId":"4629","endLine":157,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":162,"column":34,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":36,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":72,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":182,"column":44,"nodeType":"4628","messageId":"4629","endLine":182,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":203,"column":40,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":206,"column":40,"nodeType":"4628","messageId":"4629","endLine":206,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":250,"column":27,"nodeType":"4628","messageId":"4629","endLine":250,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4630","line":299,"column":26,"nodeType":"4628","messageId":"4629","endLine":299,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":351,"column":50,"nodeType":"4628","messageId":"4629","endLine":351,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":353,"column":95,"nodeType":"4628","messageId":"4629","endLine":353,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4630","line":371,"column":58,"nodeType":"4628","messageId":"4629","endLine":371,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":378,"column":56,"nodeType":"4628","messageId":"4629","endLine":378,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":397,"column":19,"nodeType":"4628","messageId":"4629","endLine":397,"endColumn":21},{"ruleId":"4626","severity":1,"message":"4627","line":418,"column":66,"nodeType":"4628","messageId":"4629","endLine":418,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":433,"column":56,"nodeType":"4628","messageId":"4629","endLine":433,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":463,"column":50,"nodeType":"4628","messageId":"4629","endLine":463,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4630","line":484,"column":50,"nodeType":"4628","messageId":"4629","endLine":484,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":560,"column":69,"nodeType":"4628","messageId":"4629","endLine":560,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":568,"column":49,"nodeType":"4628","messageId":"4629","endLine":568,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":53,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":80,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":581,"column":62,"nodeType":"4628","messageId":"4629","endLine":581,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":96,"column":37,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":143,"column":30,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":32},{"ruleId":"4631","severity":1,"message":"4693","line":252,"column":16,"nodeType":"4633","messageId":"4634","endLine":252,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4630","line":348,"column":36,"nodeType":"4628","messageId":"4629","endLine":348,"endColumn":38},{"ruleId":"4631","severity":1,"message":"4694","line":375,"column":13,"nodeType":"4633","messageId":"4634","endLine":375,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4627","line":408,"column":69,"nodeType":"4628","messageId":"4629","endLine":408,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":409,"column":76,"nodeType":"4628","messageId":"4629","endLine":409,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":409,"column":95,"nodeType":"4628","messageId":"4629","endLine":409,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4627","line":415,"column":76,"nodeType":"4628","messageId":"4629","endLine":415,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":415,"column":95,"nodeType":"4628","messageId":"4629","endLine":415,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4627","line":451,"column":48,"nodeType":"4628","messageId":"4629","endLine":451,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":457,"column":48,"nodeType":"4628","messageId":"4629","endLine":457,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":512,"column":94,"nodeType":"4628","messageId":"4629","endLine":512,"endColumn":96},{"ruleId":"4631","severity":1,"message":"4688","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4695","line":17,"column":8,"nodeType":"4633","messageId":"4634","endLine":17,"endColumn":31},{"ruleId":"4631","severity":1,"message":"4696","line":18,"column":8,"nodeType":"4633","messageId":"4634","endLine":18,"endColumn":14},{"ruleId":"4626","severity":1,"message":"4627","line":31,"column":111,"nodeType":"4628","messageId":"4629","endLine":31,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4630","line":66,"column":37,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":74,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":71,"column":38,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4630","line":76,"column":43,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":83,"column":63,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":60,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":48,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":136,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":138},{"ruleId":"4626","severity":1,"message":"4627","line":218,"column":48,"nodeType":"4628","messageId":"4629","endLine":218,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":218,"column":136,"nodeType":"4628","messageId":"4629","endLine":218,"endColumn":138},{"ruleId":"4626","severity":1,"message":"4627","line":228,"column":49,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":228,"column":124,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":126},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":78,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":303,"column":78,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":316,"column":78,"nodeType":"4628","messageId":"4629","endLine":316,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":328,"column":78,"nodeType":"4628","messageId":"4629","endLine":328,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":342,"column":78,"nodeType":"4628","messageId":"4629","endLine":342,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":354,"column":78,"nodeType":"4628","messageId":"4629","endLine":354,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4630","line":96,"column":37,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":228,"column":67,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":232,"column":83,"nodeType":"4628","messageId":"4629","endLine":232,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":236,"column":87,"nodeType":"4628","messageId":"4629","endLine":236,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":247,"column":64,"nodeType":"4628","messageId":"4629","endLine":247,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":264,"column":51,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":264,"column":82,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":264,"column":114,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":116},{"ruleId":"4626","severity":1,"message":"4627","line":281,"column":40,"nodeType":"4628","messageId":"4629","endLine":281,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":297,"column":64,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":297,"column":81,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":307,"column":25,"nodeType":"4628","messageId":"4629","endLine":307,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4627","line":308,"column":62,"nodeType":"4628","messageId":"4629","endLine":308,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":310,"column":45,"nodeType":"4628","messageId":"4629","endLine":310,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":313,"column":53,"nodeType":"4628","messageId":"4629","endLine":313,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":319,"column":57,"nodeType":"4628","messageId":"4629","endLine":319,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":331,"column":42,"nodeType":"4628","messageId":"4629","endLine":331,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":373,"column":41,"nodeType":"4628","messageId":"4629","endLine":373,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":374,"column":84,"nodeType":"4628","messageId":"4629","endLine":374,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4630","line":376,"column":81,"nodeType":"4628","messageId":"4629","endLine":376,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":379,"column":89,"nodeType":"4628","messageId":"4629","endLine":379,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":385,"column":93,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":397,"column":79,"nodeType":"4628","messageId":"4629","endLine":397,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":414,"column":59,"nodeType":"4628","messageId":"4629","endLine":414,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":414,"column":90,"nodeType":"4628","messageId":"4629","endLine":414,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":414,"column":122,"nodeType":"4628","messageId":"4629","endLine":414,"endColumn":124},{"ruleId":"4626","severity":1,"message":"4627","line":434,"column":41,"nodeType":"4628","messageId":"4629","endLine":434,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":435,"column":83,"nodeType":"4628","messageId":"4629","endLine":435,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4630","line":437,"column":80,"nodeType":"4628","messageId":"4629","endLine":437,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":440,"column":92,"nodeType":"4628","messageId":"4629","endLine":440,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":446,"column":96,"nodeType":"4628","messageId":"4629","endLine":446,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":459,"column":80,"nodeType":"4628","messageId":"4629","endLine":459,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":476,"column":59,"nodeType":"4628","messageId":"4629","endLine":476,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":476,"column":90,"nodeType":"4628","messageId":"4629","endLine":476,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":476,"column":122,"nodeType":"4628","messageId":"4629","endLine":476,"endColumn":124},{"ruleId":"4626","severity":1,"message":"4627","line":496,"column":41,"nodeType":"4628","messageId":"4629","endLine":496,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":497,"column":83,"nodeType":"4628","messageId":"4629","endLine":497,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4630","line":499,"column":80,"nodeType":"4628","messageId":"4629","endLine":499,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":502,"column":92,"nodeType":"4628","messageId":"4629","endLine":502,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":508,"column":96,"nodeType":"4628","messageId":"4629","endLine":508,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":521,"column":80,"nodeType":"4628","messageId":"4629","endLine":521,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":538,"column":59,"nodeType":"4628","messageId":"4629","endLine":538,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":538,"column":90,"nodeType":"4628","messageId":"4629","endLine":538,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":538,"column":122,"nodeType":"4628","messageId":"4629","endLine":538,"endColumn":124},{"ruleId":"4626","severity":1,"message":"4627","line":557,"column":31,"nodeType":"4628","messageId":"4629","endLine":557,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":561,"column":26,"nodeType":"4628","messageId":"4629","endLine":561,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":643,"column":69,"nodeType":"4628","messageId":"4629","endLine":643,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":644,"column":76,"nodeType":"4628","messageId":"4629","endLine":644,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":644,"column":95,"nodeType":"4628","messageId":"4629","endLine":644,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4627","line":650,"column":76,"nodeType":"4628","messageId":"4629","endLine":650,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":650,"column":95,"nodeType":"4628","messageId":"4629","endLine":650,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4627","line":686,"column":48,"nodeType":"4628","messageId":"4629","endLine":686,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":692,"column":48,"nodeType":"4628","messageId":"4629","endLine":692,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":751,"column":94,"nodeType":"4628","messageId":"4629","endLine":751,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4630","line":87,"column":34,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":116,"column":31,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":119,"column":36,"nodeType":"4628","messageId":"4629","endLine":119,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":122,"column":40,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":122,"column":72,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":125,"column":36,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":125,"column":64,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":31,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":56,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":36,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":61,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":52,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":138,"column":57,"nodeType":"4628","messageId":"4629","endLine":138,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":141,"column":57,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":57,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":145,"column":52,"nodeType":"4628","messageId":"4629","endLine":145,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":146,"column":52,"nodeType":"4628","messageId":"4629","endLine":146,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":52,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":153,"column":57,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":154,"column":63,"nodeType":"4628","messageId":"4629","endLine":154,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":157,"column":68,"nodeType":"4628","messageId":"4629","endLine":157,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":160,"column":68,"nodeType":"4628","messageId":"4629","endLine":160,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":68,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":166,"column":68,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":169,"column":68,"nodeType":"4628","messageId":"4629","endLine":169,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":176,"column":30,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":36,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":72,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":185,"column":34,"nodeType":"4628","messageId":"4629","endLine":185,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":190,"column":36,"nodeType":"4628","messageId":"4629","endLine":190,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":190,"column":72,"nodeType":"4628","messageId":"4629","endLine":190,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":290,"column":46,"nodeType":"4628","messageId":"4629","endLine":290,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":294,"column":142,"nodeType":"4628","messageId":"4629","endLine":294,"endColumn":144},{"ruleId":"4626","severity":1,"message":"4627","line":301,"column":58,"nodeType":"4628","messageId":"4629","endLine":301,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":302,"column":213,"nodeType":"4628","messageId":"4629","endLine":302,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":309,"column":58,"nodeType":"4628","messageId":"4629","endLine":309,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":310,"column":213,"nodeType":"4628","messageId":"4629","endLine":310,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":58,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":318,"column":213,"nodeType":"4628","messageId":"4629","endLine":318,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":334,"column":152,"nodeType":"4628","messageId":"4629","endLine":334,"endColumn":154},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4688","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4697","line":4,"column":21,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4698","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4651","line":5,"column":20,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":36},{"ruleId":"4631","severity":1,"message":"4681","line":6,"column":8,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4682","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4699","line":8,"column":8,"nodeType":"4633","messageId":"4634","endLine":8,"endColumn":20},{"ruleId":"4631","severity":1,"message":"4663","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4700","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":10},{"ruleId":"4631","severity":1,"message":"4701","line":17,"column":8,"nodeType":"4633","messageId":"4634","endLine":17,"endColumn":21},{"ruleId":"4631","severity":1,"message":"4702","line":141,"column":15,"nodeType":"4633","messageId":"4634","endLine":141,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4703","line":147,"column":44,"nodeType":"4633","messageId":"4634","endLine":147,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":83,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":85},{"ruleId":"4631","severity":1,"message":"4704","line":5,"column":18,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4696","line":6,"column":8,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4705","line":13,"column":8,"nodeType":"4633","messageId":"4634","endLine":13,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4630","line":66,"column":37,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":233,"column":96,"nodeType":"4628","messageId":"4629","endLine":233,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4630","line":87,"column":34,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":116,"column":31,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":119,"column":36,"nodeType":"4628","messageId":"4629","endLine":119,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":122,"column":40,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":122,"column":72,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":125,"column":36,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":125,"column":64,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":31,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":56,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":36,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":61,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":52,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":138,"column":57,"nodeType":"4628","messageId":"4629","endLine":138,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":141,"column":57,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":57,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":145,"column":52,"nodeType":"4628","messageId":"4629","endLine":145,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":146,"column":52,"nodeType":"4628","messageId":"4629","endLine":146,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":52,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":153,"column":57,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":154,"column":63,"nodeType":"4628","messageId":"4629","endLine":154,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":157,"column":68,"nodeType":"4628","messageId":"4629","endLine":157,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":160,"column":68,"nodeType":"4628","messageId":"4629","endLine":160,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":68,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":166,"column":68,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":169,"column":68,"nodeType":"4628","messageId":"4629","endLine":169,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":176,"column":30,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":36,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":72,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":185,"column":34,"nodeType":"4628","messageId":"4629","endLine":185,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":190,"column":36,"nodeType":"4628","messageId":"4629","endLine":190,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":190,"column":72,"nodeType":"4628","messageId":"4629","endLine":190,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":290,"column":46,"nodeType":"4628","messageId":"4629","endLine":290,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":294,"column":198,"nodeType":"4628","messageId":"4629","endLine":294,"endColumn":200},{"ruleId":"4626","severity":1,"message":"4627","line":301,"column":58,"nodeType":"4628","messageId":"4629","endLine":301,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":302,"column":213,"nodeType":"4628","messageId":"4629","endLine":302,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":309,"column":58,"nodeType":"4628","messageId":"4629","endLine":309,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":310,"column":213,"nodeType":"4628","messageId":"4629","endLine":310,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":58,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":318,"column":213,"nodeType":"4628","messageId":"4629","endLine":318,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":334,"column":149,"nodeType":"4628","messageId":"4629","endLine":334,"endColumn":151},{"ruleId":"4631","severity":1,"message":"4688","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":19},{"ruleId":"4626","severity":1,"message":"4627","line":28,"column":111,"nodeType":"4628","messageId":"4629","endLine":28,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":60,"column":74,"nodeType":"4628","messageId":"4629","endLine":60,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":62,"column":38,"nodeType":"4628","messageId":"4629","endLine":62,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":125,"column":60,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":48,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":69,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":175,"column":48,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":176,"column":69,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":209,"column":78,"nodeType":"4628","messageId":"4629","endLine":209,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":221,"column":78,"nodeType":"4628","messageId":"4629","endLine":221,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":234,"column":78,"nodeType":"4628","messageId":"4629","endLine":234,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":246,"column":78,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":259,"column":78,"nodeType":"4628","messageId":"4629","endLine":259,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":271,"column":78,"nodeType":"4628","messageId":"4629","endLine":271,"endColumn":80},{"ruleId":"4631","severity":1,"message":"4688","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4705","line":17,"column":8,"nodeType":"4633","messageId":"4634","endLine":17,"endColumn":28},{"ruleId":"4631","severity":1,"message":"4696","line":18,"column":8,"nodeType":"4633","messageId":"4634","endLine":18,"endColumn":14},{"ruleId":"4626","severity":1,"message":"4627","line":31,"column":111,"nodeType":"4628","messageId":"4629","endLine":31,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4630","line":66,"column":37,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":74,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":71,"column":38,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4630","line":76,"column":43,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":83,"column":63,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":60,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":48,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":136,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":138},{"ruleId":"4626","severity":1,"message":"4627","line":218,"column":48,"nodeType":"4628","messageId":"4629","endLine":218,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":218,"column":136,"nodeType":"4628","messageId":"4629","endLine":218,"endColumn":138},{"ruleId":"4626","severity":1,"message":"4627","line":228,"column":49,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":228,"column":124,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":126},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":78,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":303,"column":78,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":316,"column":78,"nodeType":"4628","messageId":"4629","endLine":316,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":328,"column":78,"nodeType":"4628","messageId":"4629","endLine":328,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":342,"column":78,"nodeType":"4628","messageId":"4629","endLine":342,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":354,"column":78,"nodeType":"4628","messageId":"4629","endLine":354,"endColumn":80},{"ruleId":"4631","severity":1,"message":"4706","line":3,"column":29,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":43},{"ruleId":"4631","severity":1,"message":"4656","line":7,"column":10,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":13},{"ruleId":"4631","severity":1,"message":"4657","line":7,"column":15,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4707","line":14,"column":8,"nodeType":"4633","messageId":"4634","endLine":14,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4708","line":20,"column":5,"nodeType":"4633","messageId":"4634","endLine":20,"endColumn":15},{"ruleId":"4626","severity":1,"message":"4630","line":109,"column":34,"nodeType":"4628","messageId":"4629","endLine":109,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":145,"column":31,"nodeType":"4628","messageId":"4629","endLine":145,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":148,"column":36,"nodeType":"4628","messageId":"4629","endLine":148,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":151,"column":40,"nodeType":"4628","messageId":"4629","endLine":151,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":151,"column":72,"nodeType":"4628","messageId":"4629","endLine":151,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":154,"column":36,"nodeType":"4628","messageId":"4629","endLine":154,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":154,"column":64,"nodeType":"4628","messageId":"4629","endLine":154,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":158,"column":31,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":158,"column":56,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":36,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":61,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":52,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":57,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":170,"column":57,"nodeType":"4628","messageId":"4629","endLine":170,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":173,"column":57,"nodeType":"4628","messageId":"4629","endLine":173,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":174,"column":52,"nodeType":"4628","messageId":"4629","endLine":174,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":175,"column":52,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":176,"column":52,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":182,"column":57,"nodeType":"4628","messageId":"4629","endLine":182,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":63,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":68,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":189,"column":68,"nodeType":"4628","messageId":"4629","endLine":189,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":192,"column":68,"nodeType":"4628","messageId":"4629","endLine":192,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":195,"column":68,"nodeType":"4628","messageId":"4629","endLine":195,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":198,"column":68,"nodeType":"4628","messageId":"4629","endLine":198,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":205,"column":30,"nodeType":"4628","messageId":"4629","endLine":205,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":209,"column":36,"nodeType":"4628","messageId":"4629","endLine":209,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":209,"column":72,"nodeType":"4628","messageId":"4629","endLine":209,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":214,"column":34,"nodeType":"4628","messageId":"4629","endLine":214,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":219,"column":36,"nodeType":"4628","messageId":"4629","endLine":219,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":219,"column":72,"nodeType":"4628","messageId":"4629","endLine":219,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":299,"column":42,"nodeType":"4628","messageId":"4629","endLine":299,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":23,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":360,"column":46,"nodeType":"4628","messageId":"4629","endLine":360,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4630","line":367,"column":37,"nodeType":"4628","messageId":"4629","endLine":367,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":409,"column":37,"nodeType":"4628","messageId":"4629","endLine":409,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":412,"column":37,"nodeType":"4628","messageId":"4629","endLine":412,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":435,"column":62,"nodeType":"4628","messageId":"4629","endLine":435,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":436,"column":43,"nodeType":"4628","messageId":"4629","endLine":436,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":437,"column":46,"nodeType":"4628","messageId":"4629","endLine":437,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":441,"column":48,"nodeType":"4628","messageId":"4629","endLine":441,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":449,"column":43,"nodeType":"4628","messageId":"4629","endLine":449,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":471,"column":33,"nodeType":"4628","messageId":"4629","endLine":471,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":546,"column":146,"nodeType":"4628","messageId":"4629","endLine":546,"endColumn":148},{"ruleId":"4631","severity":1,"message":"4709","line":618,"column":13,"nodeType":"4633","messageId":"4634","endLine":618,"endColumn":29},{"ruleId":"4631","severity":1,"message":"4710","line":622,"column":13,"nodeType":"4633","messageId":"4634","endLine":622,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4711","line":65,"column":9,"nodeType":"4633","messageId":"4634","endLine":65,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":49,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4630","line":91,"column":49,"nodeType":"4628","messageId":"4629","endLine":91,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":60,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":38,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":63,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":91,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":44,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":75,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":220,"column":60,"nodeType":"4628","messageId":"4629","endLine":220,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4630","line":225,"column":110,"nodeType":"4628","messageId":"4629","endLine":225,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4630","line":225,"column":152,"nodeType":"4628","messageId":"4629","endLine":225,"endColumn":154},{"ruleId":"4626","severity":1,"message":"4627","line":225,"column":187,"nodeType":"4628","messageId":"4629","endLine":225,"endColumn":189},{"ruleId":"4626","severity":1,"message":"4630","line":226,"column":91,"nodeType":"4628","messageId":"4629","endLine":226,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4630","line":226,"column":129,"nodeType":"4628","messageId":"4629","endLine":226,"endColumn":131},{"ruleId":"4626","severity":1,"message":"4627","line":297,"column":60,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":316,"column":51,"nodeType":"4628","messageId":"4629","endLine":316,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":333,"column":60,"nodeType":"4628","messageId":"4629","endLine":333,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":360,"column":84,"nodeType":"4628","messageId":"4629","endLine":360,"endColumn":86},{"ruleId":"4661","severity":1,"message":"4662","line":375,"column":33,"nodeType":"4655","endLine":375,"endColumn":141},{"ruleId":"4661","severity":1,"message":"4662","line":379,"column":29,"nodeType":"4655","endLine":379,"endColumn":270},{"ruleId":"4626","severity":1,"message":"4627","line":379,"column":96,"nodeType":"4628","messageId":"4629","endLine":379,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":379,"column":216,"nodeType":"4628","messageId":"4629","endLine":379,"endColumn":218},{"ruleId":"4626","severity":1,"message":"4627","line":385,"column":96,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4630","line":396,"column":198,"nodeType":"4628","messageId":"4629","endLine":396,"endColumn":200},{"ruleId":"4626","severity":1,"message":"4630","line":400,"column":84,"nodeType":"4628","messageId":"4629","endLine":400,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4630","line":400,"column":208,"nodeType":"4628","messageId":"4629","endLine":400,"endColumn":210},{"ruleId":"4626","severity":1,"message":"4630","line":403,"column":206,"nodeType":"4628","messageId":"4629","endLine":403,"endColumn":208},{"ruleId":"4626","severity":1,"message":"4630","line":409,"column":105,"nodeType":"4628","messageId":"4629","endLine":409,"endColumn":107},{"ruleId":"4626","severity":1,"message":"4630","line":410,"column":63,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":115,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4630","line":410,"column":206,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":208},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":258,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":260},{"ruleId":"4626","severity":1,"message":"4630","line":410,"column":388,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":390},{"ruleId":"4626","severity":1,"message":"4627","line":421,"column":76,"nodeType":"4628","messageId":"4629","endLine":421,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":421,"column":108,"nodeType":"4628","messageId":"4629","endLine":421,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4627","line":421,"column":139,"nodeType":"4628","messageId":"4629","endLine":421,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":422,"column":77,"nodeType":"4628","messageId":"4629","endLine":422,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":422,"column":106,"nodeType":"4628","messageId":"4629","endLine":422,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":422,"column":135,"nodeType":"4628","messageId":"4629","endLine":422,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4627","line":422,"column":163,"nodeType":"4628","messageId":"4629","endLine":422,"endColumn":165},{"ruleId":"4626","severity":1,"message":"4627","line":422,"column":191,"nodeType":"4628","messageId":"4629","endLine":422,"endColumn":193},{"ruleId":"4626","severity":1,"message":"4627","line":422,"column":220,"nodeType":"4628","messageId":"4629","endLine":422,"endColumn":222},{"ruleId":"4626","severity":1,"message":"4627","line":422,"column":249,"nodeType":"4628","messageId":"4629","endLine":422,"endColumn":251},{"ruleId":"4626","severity":1,"message":"4627","line":425,"column":112,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":114},{"ruleId":"4626","severity":1,"message":"4627","line":425,"column":171,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":173},{"ruleId":"4626","severity":1,"message":"4627","line":425,"column":228,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":230},{"ruleId":"4626","severity":1,"message":"4627","line":425,"column":315,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":317},{"ruleId":"4626","severity":1,"message":"4627","line":425,"column":373,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":375},{"ruleId":"4626","severity":1,"message":"4627","line":425,"column":427,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":429},{"ruleId":"4626","severity":1,"message":"4627","line":425,"column":481,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":483},{"ruleId":"4661","severity":1,"message":"4662","line":432,"column":69,"nodeType":"4655","endLine":432,"endColumn":124},{"ruleId":"4631","severity":1,"message":"4712","line":491,"column":13,"nodeType":"4633","messageId":"4634","endLine":491,"endColumn":23},{"ruleId":"4631","severity":1,"message":"4713","line":492,"column":13,"nodeType":"4633","messageId":"4634","endLine":492,"endColumn":20},{"ruleId":"4631","severity":1,"message":"4714","line":496,"column":13,"nodeType":"4633","messageId":"4634","endLine":496,"endColumn":30},{"ruleId":"4631","severity":1,"message":"4715","line":497,"column":13,"nodeType":"4633","messageId":"4634","endLine":497,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4716","line":498,"column":13,"nodeType":"4633","messageId":"4634","endLine":498,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4717","line":499,"column":13,"nodeType":"4633","messageId":"4634","endLine":499,"endColumn":28},{"ruleId":"4631","severity":1,"message":"4718","line":500,"column":13,"nodeType":"4633","messageId":"4634","endLine":500,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":527,"column":92,"nodeType":"4628","messageId":"4629","endLine":527,"endColumn":94},{"ruleId":"4661","severity":1,"message":"4662","line":530,"column":61,"nodeType":"4655","endLine":530,"endColumn":124},{"ruleId":"4626","severity":1,"message":"4627","line":534,"column":102,"nodeType":"4628","messageId":"4629","endLine":534,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":534,"column":208,"nodeType":"4628","messageId":"4629","endLine":534,"endColumn":210},{"ruleId":"4626","severity":1,"message":"4627","line":534,"column":295,"nodeType":"4628","messageId":"4629","endLine":534,"endColumn":297},{"ruleId":"4626","severity":1,"message":"4627","line":534,"column":380,"nodeType":"4628","messageId":"4629","endLine":534,"endColumn":382},{"ruleId":"4661","severity":1,"message":"4662","line":534,"column":387,"nodeType":"4655","endLine":534,"endColumn":444},{"ruleId":"4626","severity":1,"message":"4627","line":536,"column":125,"nodeType":"4628","messageId":"4629","endLine":536,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":536,"column":188,"nodeType":"4628","messageId":"4629","endLine":536,"endColumn":190},{"ruleId":"4626","severity":1,"message":"4627","line":536,"column":240,"nodeType":"4628","messageId":"4629","endLine":536,"endColumn":242},{"ruleId":"4626","severity":1,"message":"4627","line":549,"column":92,"nodeType":"4628","messageId":"4629","endLine":549,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4630","line":568,"column":110,"nodeType":"4628","messageId":"4629","endLine":568,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":572,"column":82,"nodeType":"4628","messageId":"4629","endLine":572,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":574,"column":68,"nodeType":"4628","messageId":"4629","endLine":574,"endColumn":70},{"ruleId":"4661","severity":1,"message":"4662","line":574,"column":75,"nodeType":"4655","endLine":574,"endColumn":154},{"ruleId":"4626","severity":1,"message":"4627","line":577,"column":68,"nodeType":"4628","messageId":"4629","endLine":577,"endColumn":70},{"ruleId":"4661","severity":1,"message":"4662","line":632,"column":53,"nodeType":"4655","endLine":632,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":667,"column":66,"nodeType":"4628","messageId":"4629","endLine":667,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":703,"column":84,"nodeType":"4628","messageId":"4629","endLine":703,"endColumn":86},{"ruleId":"4661","severity":1,"message":"4662","line":723,"column":73,"nodeType":"4655","endLine":723,"endColumn":347},{"ruleId":"4626","severity":1,"message":"4627","line":723,"column":89,"nodeType":"4628","messageId":"4629","endLine":723,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":723,"column":152,"nodeType":"4628","messageId":"4629","endLine":723,"endColumn":154},{"ruleId":"4626","severity":1,"message":"4627","line":723,"column":247,"nodeType":"4628","messageId":"4629","endLine":723,"endColumn":249},{"ruleId":"4626","severity":1,"message":"4627","line":727,"column":84,"nodeType":"4628","messageId":"4629","endLine":727,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":727,"column":162,"nodeType":"4628","messageId":"4629","endLine":727,"endColumn":164},{"ruleId":"4626","severity":1,"message":"4627","line":727,"column":290,"nodeType":"4628","messageId":"4629","endLine":727,"endColumn":292},{"ruleId":"4661","severity":1,"message":"4662","line":727,"column":297,"nodeType":"4655","endLine":727,"endColumn":364},{"ruleId":"4626","severity":1,"message":"4627","line":729,"column":120,"nodeType":"4628","messageId":"4629","endLine":729,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4627","line":729,"column":160,"nodeType":"4628","messageId":"4629","endLine":729,"endColumn":162},{"ruleId":"4626","severity":1,"message":"4627","line":730,"column":118,"nodeType":"4628","messageId":"4629","endLine":730,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":730,"column":160,"nodeType":"4628","messageId":"4629","endLine":730,"endColumn":162},{"ruleId":"4626","severity":1,"message":"4627","line":732,"column":91,"nodeType":"4628","messageId":"4629","endLine":732,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":732,"column":149,"nodeType":"4628","messageId":"4629","endLine":732,"endColumn":151},{"ruleId":"4626","severity":1,"message":"4627","line":732,"column":239,"nodeType":"4628","messageId":"4629","endLine":732,"endColumn":241},{"ruleId":"4631","severity":1,"message":"4719","line":6,"column":39,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":47},{"ruleId":"4631","severity":1,"message":"4663","line":17,"column":8,"nodeType":"4633","messageId":"4634","endLine":17,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":22,"column":56,"nodeType":"4628","messageId":"4629","endLine":22,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":22,"column":99,"nodeType":"4628","messageId":"4629","endLine":22,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":22,"column":144,"nodeType":"4628","messageId":"4629","endLine":22,"endColumn":146},{"ruleId":"4626","severity":1,"message":"4627","line":22,"column":189,"nodeType":"4628","messageId":"4629","endLine":22,"endColumn":191},{"ruleId":"4626","severity":1,"message":"4627","line":23,"column":57,"nodeType":"4628","messageId":"4629","endLine":23,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":23,"column":102,"nodeType":"4628","messageId":"4629","endLine":23,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":23,"column":147,"nodeType":"4628","messageId":"4629","endLine":23,"endColumn":149},{"ruleId":"4626","severity":1,"message":"4627","line":25,"column":59,"nodeType":"4628","messageId":"4629","endLine":25,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":26,"column":55,"nodeType":"4628","messageId":"4629","endLine":26,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":26,"column":120,"nodeType":"4628","messageId":"4629","endLine":26,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4627","line":26,"column":183,"nodeType":"4628","messageId":"4629","endLine":26,"endColumn":185},{"ruleId":"4626","severity":1,"message":"4627","line":29,"column":49,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":29,"column":94,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":29,"column":139,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":63,"column":70,"nodeType":"4628","messageId":"4629","endLine":63,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":169,"column":44,"nodeType":"4628","messageId":"4629","endLine":169,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":194,"column":21,"nodeType":"4628","messageId":"4629","endLine":194,"endColumn":23},{"ruleId":"4626","severity":1,"message":"4627","line":209,"column":39,"nodeType":"4628","messageId":"4629","endLine":209,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":214,"column":30,"nodeType":"4628","messageId":"4629","endLine":214,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":217,"column":30,"nodeType":"4628","messageId":"4629","endLine":217,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":220,"column":30,"nodeType":"4628","messageId":"4629","endLine":220,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":313,"column":68,"nodeType":"4628","messageId":"4629","endLine":313,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":325,"column":68,"nodeType":"4628","messageId":"4629","endLine":325,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":38,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":40,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":42,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":236,"column":30,"nodeType":"4628","messageId":"4629","endLine":236,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":240,"column":36,"nodeType":"4628","messageId":"4629","endLine":240,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":243,"column":40,"nodeType":"4628","messageId":"4629","endLine":243,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":243,"column":72,"nodeType":"4628","messageId":"4629","endLine":243,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":246,"column":36,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":246,"column":64,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":252,"column":31,"nodeType":"4628","messageId":"4629","endLine":252,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":252,"column":56,"nodeType":"4628","messageId":"4629","endLine":252,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":256,"column":36,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":256,"column":61,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":258,"column":52,"nodeType":"4628","messageId":"4629","endLine":258,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":261,"column":57,"nodeType":"4628","messageId":"4629","endLine":261,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":264,"column":57,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":267,"column":57,"nodeType":"4628","messageId":"4629","endLine":267,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":268,"column":52,"nodeType":"4628","messageId":"4629","endLine":268,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":269,"column":52,"nodeType":"4628","messageId":"4629","endLine":269,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":270,"column":52,"nodeType":"4628","messageId":"4629","endLine":270,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":276,"column":57,"nodeType":"4628","messageId":"4629","endLine":276,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":277,"column":63,"nodeType":"4628","messageId":"4629","endLine":277,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":280,"column":68,"nodeType":"4628","messageId":"4629","endLine":280,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":283,"column":68,"nodeType":"4628","messageId":"4629","endLine":283,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":68,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":289,"column":68,"nodeType":"4628","messageId":"4629","endLine":289,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":68,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":299,"column":30,"nodeType":"4628","messageId":"4629","endLine":299,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":303,"column":36,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":303,"column":72,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":308,"column":34,"nodeType":"4628","messageId":"4629","endLine":308,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":313,"column":36,"nodeType":"4628","messageId":"4629","endLine":313,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":313,"column":72,"nodeType":"4628","messageId":"4629","endLine":313,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":362,"column":24,"nodeType":"4628","messageId":"4629","endLine":362,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":392,"column":42,"nodeType":"4628","messageId":"4629","endLine":392,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":431,"column":23,"nodeType":"4628","messageId":"4629","endLine":431,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":453,"column":46,"nodeType":"4628","messageId":"4629","endLine":453,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4630","line":460,"column":37,"nodeType":"4628","messageId":"4629","endLine":460,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":504,"column":37,"nodeType":"4628","messageId":"4629","endLine":504,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":507,"column":37,"nodeType":"4628","messageId":"4629","endLine":507,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":530,"column":62,"nodeType":"4628","messageId":"4629","endLine":530,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":531,"column":43,"nodeType":"4628","messageId":"4629","endLine":531,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":532,"column":46,"nodeType":"4628","messageId":"4629","endLine":532,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":536,"column":48,"nodeType":"4628","messageId":"4629","endLine":536,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":544,"column":43,"nodeType":"4628","messageId":"4629","endLine":544,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":562,"column":34,"nodeType":"4628","messageId":"4629","endLine":562,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":565,"column":41,"nodeType":"4628","messageId":"4629","endLine":565,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":572,"column":46,"nodeType":"4628","messageId":"4629","endLine":572,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":585,"column":33,"nodeType":"4628","messageId":"4629","endLine":585,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":600,"column":66,"nodeType":"4628","messageId":"4629","endLine":600,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":657,"column":82,"nodeType":"4628","messageId":"4629","endLine":657,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":659,"column":83,"nodeType":"4628","messageId":"4629","endLine":659,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":687,"column":70,"nodeType":"4628","messageId":"4629","endLine":687,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":692,"column":81,"nodeType":"4628","messageId":"4629","endLine":692,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":727,"column":81,"nodeType":"4628","messageId":"4629","endLine":727,"endColumn":83},{"ruleId":"4631","severity":1,"message":"4720","line":15,"column":10,"nodeType":"4633","messageId":"4634","endLine":15,"endColumn":15},{"ruleId":"4626","severity":1,"message":"4627","line":51,"column":30,"nodeType":"4628","messageId":"4629","endLine":51,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":51,"column":58,"nodeType":"4628","messageId":"4629","endLine":51,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":61,"column":63,"nodeType":"4628","messageId":"4629","endLine":61,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":35,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":67,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":97,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":126,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":60,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":60,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":114,"column":50,"nodeType":"4628","messageId":"4629","endLine":114,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":54,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":157,"column":55,"nodeType":"4628","messageId":"4629","endLine":157,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":44,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":201,"column":25,"nodeType":"4628","messageId":"4629","endLine":201,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4627","line":210,"column":27,"nodeType":"4628","messageId":"4629","endLine":210,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":210,"column":49,"nodeType":"4628","messageId":"4629","endLine":210,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":108,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":130,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":132},{"ruleId":"4626","severity":1,"message":"4627","line":268,"column":70,"nodeType":"4628","messageId":"4629","endLine":268,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":268,"column":193,"nodeType":"4628","messageId":"4629","endLine":268,"endColumn":195},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":123,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":125},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":145,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4630","line":287,"column":70,"nodeType":"4628","messageId":"4629","endLine":287,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4630","line":287,"column":92,"nodeType":"4628","messageId":"4629","endLine":287,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":296,"column":66,"nodeType":"4628","messageId":"4629","endLine":296,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":309,"column":47,"nodeType":"4628","messageId":"4629","endLine":309,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":311,"column":98,"nodeType":"4628","messageId":"4629","endLine":311,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4630","line":323,"column":59,"nodeType":"4628","messageId":"4629","endLine":323,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4630","line":340,"column":52,"nodeType":"4628","messageId":"4629","endLine":340,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":340,"column":74,"nodeType":"4628","messageId":"4629","endLine":340,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":352,"column":77,"nodeType":"4628","messageId":"4629","endLine":352,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4630","line":352,"column":99,"nodeType":"4628","messageId":"4629","endLine":352,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":43,"column":46,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":43,"column":75,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":44,"column":54,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":45,"column":62,"nodeType":"4628","messageId":"4629","endLine":45,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":47,"column":53,"nodeType":"4628","messageId":"4629","endLine":47,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":48,"column":58,"nodeType":"4628","messageId":"4629","endLine":48,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":60,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":62},{"ruleId":"4631","severity":1,"message":"4721","line":72,"column":17,"nodeType":"4633","messageId":"4634","endLine":72,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":94,"column":64,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":132,"column":50,"nodeType":"4628","messageId":"4629","endLine":132,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":54,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":175,"column":55,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":57},{"ruleId":"4631","severity":1,"message":"4722","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":21},{"ruleId":"4626","severity":1,"message":"4627","line":55,"column":43,"nodeType":"4628","messageId":"4629","endLine":55,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":43,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":141,"column":55,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":160,"column":55,"nodeType":"4628","messageId":"4629","endLine":160,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":187,"column":103,"nodeType":"4628","messageId":"4629","endLine":187,"endColumn":105},{"ruleId":"4631","severity":1,"message":"4723","line":3,"column":52,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":56,"column":37,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":36,"column":54,"nodeType":"4628","messageId":"4629","endLine":36,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":62,"column":66,"nodeType":"4628","messageId":"4629","endLine":62,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":28,"column":51,"nodeType":"4628","messageId":"4629","endLine":28,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":29,"column":55,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":60,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":34,"column":45,"nodeType":"4628","messageId":"4629","endLine":34,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4630","line":36,"column":30,"nodeType":"4628","messageId":"4629","endLine":36,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":44,"column":49,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4630","line":52,"column":29,"nodeType":"4628","messageId":"4629","endLine":52,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":73,"column":34,"nodeType":"4628","messageId":"4629","endLine":73,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":73,"column":67,"nodeType":"4628","messageId":"4629","endLine":73,"endColumn":69},{"ruleId":"4631","severity":1,"message":"4724","line":78,"column":46,"nodeType":"4633","messageId":"4634","endLine":78,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":81,"column":35,"nodeType":"4628","messageId":"4629","endLine":81,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4630","line":85,"column":113,"nodeType":"4628","messageId":"4629","endLine":85,"endColumn":115},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":33,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":88,"column":51,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":95,"column":69,"nodeType":"4628","messageId":"4629","endLine":95,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":100,"column":36,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":53,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":130,"column":36,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":59,"column":33,"nodeType":"4628","messageId":"4629","endLine":59,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":59,"column":70,"nodeType":"4628","messageId":"4629","endLine":59,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4630","line":62,"column":36,"nodeType":"4628","messageId":"4629","endLine":62,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":67,"column":31,"nodeType":"4628","messageId":"4629","endLine":67,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":72,"column":29,"nodeType":"4628","messageId":"4629","endLine":72,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4630","line":77,"column":37,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":82,"column":82,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":96,"column":39,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4630","line":96,"column":79,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":194,"column":48,"nodeType":"4628","messageId":"4629","endLine":194,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":206,"column":48,"nodeType":"4628","messageId":"4629","endLine":206,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":226,"column":48,"nodeType":"4628","messageId":"4629","endLine":226,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":251,"column":53,"nodeType":"4628","messageId":"4629","endLine":251,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":256,"column":41,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":258,"column":78,"nodeType":"4628","messageId":"4629","endLine":258,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":378,"column":41,"nodeType":"4628","messageId":"4629","endLine":378,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":381,"column":69,"nodeType":"4628","messageId":"4629","endLine":381,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4630","line":382,"column":67,"nodeType":"4628","messageId":"4629","endLine":382,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4630","line":384,"column":69,"nodeType":"4628","messageId":"4629","endLine":384,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4630","line":385,"column":67,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4630","line":387,"column":71,"nodeType":"4628","messageId":"4629","endLine":387,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4630","line":388,"column":69,"nodeType":"4628","messageId":"4629","endLine":388,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":459,"column":170,"nodeType":"4628","messageId":"4629","endLine":459,"endColumn":172},{"ruleId":"4626","severity":1,"message":"4627","line":470,"column":121,"nodeType":"4628","messageId":"4629","endLine":470,"endColumn":123},{"ruleId":"4626","severity":1,"message":"4630","line":487,"column":56,"nodeType":"4628","messageId":"4629","endLine":487,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":507,"column":175,"nodeType":"4628","messageId":"4629","endLine":507,"endColumn":177},{"ruleId":"4626","severity":1,"message":"4630","line":518,"column":230,"nodeType":"4628","messageId":"4629","endLine":518,"endColumn":232},{"ruleId":"4626","severity":1,"message":"4627","line":541,"column":56,"nodeType":"4628","messageId":"4629","endLine":541,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":561,"column":179,"nodeType":"4628","messageId":"4629","endLine":561,"endColumn":181},{"ruleId":"4626","severity":1,"message":"4627","line":573,"column":96,"nodeType":"4628","messageId":"4629","endLine":573,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":614,"column":162,"nodeType":"4628","messageId":"4629","endLine":614,"endColumn":164},{"ruleId":"4626","severity":1,"message":"4627","line":628,"column":100,"nodeType":"4628","messageId":"4629","endLine":628,"endColumn":102},{"ruleId":"4626","severity":1,"message":"4627","line":633,"column":102,"nodeType":"4628","messageId":"4629","endLine":633,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":678,"column":96,"nodeType":"4628","messageId":"4629","endLine":678,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":32,"column":44,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":33,"column":73,"nodeType":"4628","messageId":"4629","endLine":33,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":58,"column":35,"nodeType":"4628","messageId":"4629","endLine":58,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":31,"column":48,"nodeType":"4628","messageId":"4629","endLine":31,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":15,"column":32,"nodeType":"4628","messageId":"4629","endLine":15,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4630","line":15,"column":32,"nodeType":"4628","messageId":"4629","endLine":15,"endColumn":34},{"ruleId":"4631","severity":1,"message":"4725","line":5,"column":21,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":33},{"ruleId":"4631","severity":1,"message":"4726","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":14},{"ruleId":"4626","severity":1,"message":"4630","line":19,"column":32,"nodeType":"4628","messageId":"4629","endLine":19,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":75,"column":63,"nodeType":"4628","messageId":"4629","endLine":75,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":78,"column":74,"nodeType":"4628","messageId":"4629","endLine":78,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":82,"column":74,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":90,"column":134,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":136},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":9,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":15},{"ruleId":"4631","severity":1,"message":"4727","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4728","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4684","line":7,"column":10,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4696","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4672","line":12,"column":8,"nodeType":"4633","messageId":"4634","endLine":12,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4729","line":19,"column":8,"nodeType":"4633","messageId":"4634","endLine":19,"endColumn":23},{"ruleId":"4631","severity":1,"message":"4722","line":24,"column":8,"nodeType":"4633","messageId":"4634","endLine":24,"endColumn":21},{"ruleId":"4631","severity":1,"message":"4730","line":25,"column":8,"nodeType":"4633","messageId":"4634","endLine":25,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4731","line":26,"column":8,"nodeType":"4633","messageId":"4634","endLine":26,"endColumn":23},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":38,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":151,"column":30,"nodeType":"4628","messageId":"4629","endLine":151,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":42,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":44,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":192,"column":42,"nodeType":"4628","messageId":"4629","endLine":192,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":322,"column":31,"nodeType":"4628","messageId":"4629","endLine":322,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":326,"column":36,"nodeType":"4628","messageId":"4629","endLine":326,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":329,"column":40,"nodeType":"4628","messageId":"4629","endLine":329,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":329,"column":72,"nodeType":"4628","messageId":"4629","endLine":329,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":332,"column":36,"nodeType":"4628","messageId":"4629","endLine":332,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":332,"column":64,"nodeType":"4628","messageId":"4629","endLine":332,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":31,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":56,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":342,"column":36,"nodeType":"4628","messageId":"4629","endLine":342,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":342,"column":61,"nodeType":"4628","messageId":"4629","endLine":342,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":344,"column":52,"nodeType":"4628","messageId":"4629","endLine":344,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":347,"column":57,"nodeType":"4628","messageId":"4629","endLine":347,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":350,"column":57,"nodeType":"4628","messageId":"4629","endLine":350,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":353,"column":57,"nodeType":"4628","messageId":"4629","endLine":353,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":354,"column":52,"nodeType":"4628","messageId":"4629","endLine":354,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":355,"column":52,"nodeType":"4628","messageId":"4629","endLine":355,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":361,"column":57,"nodeType":"4628","messageId":"4629","endLine":361,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":362,"column":63,"nodeType":"4628","messageId":"4629","endLine":362,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":365,"column":68,"nodeType":"4628","messageId":"4629","endLine":365,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":368,"column":68,"nodeType":"4628","messageId":"4629","endLine":368,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":371,"column":68,"nodeType":"4628","messageId":"4629","endLine":371,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":374,"column":68,"nodeType":"4628","messageId":"4629","endLine":374,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":381,"column":30,"nodeType":"4628","messageId":"4629","endLine":381,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":385,"column":36,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":385,"column":72,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":390,"column":34,"nodeType":"4628","messageId":"4629","endLine":390,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":395,"column":36,"nodeType":"4628","messageId":"4629","endLine":395,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":395,"column":72,"nodeType":"4628","messageId":"4629","endLine":395,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":436,"column":24,"nodeType":"4628","messageId":"4629","endLine":436,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":456,"column":42,"nodeType":"4628","messageId":"4629","endLine":456,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":495,"column":23,"nodeType":"4628","messageId":"4629","endLine":495,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":517,"column":46,"nodeType":"4628","messageId":"4629","endLine":517,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4630","line":524,"column":37,"nodeType":"4628","messageId":"4629","endLine":524,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":568,"column":37,"nodeType":"4628","messageId":"4629","endLine":568,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":571,"column":37,"nodeType":"4628","messageId":"4629","endLine":571,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":594,"column":62,"nodeType":"4628","messageId":"4629","endLine":594,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":595,"column":43,"nodeType":"4628","messageId":"4629","endLine":595,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":596,"column":46,"nodeType":"4628","messageId":"4629","endLine":596,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":600,"column":48,"nodeType":"4628","messageId":"4629","endLine":600,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":608,"column":43,"nodeType":"4628","messageId":"4629","endLine":608,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":627,"column":34,"nodeType":"4628","messageId":"4629","endLine":627,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":630,"column":41,"nodeType":"4628","messageId":"4629","endLine":630,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":637,"column":46,"nodeType":"4628","messageId":"4629","endLine":637,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":677,"column":48,"nodeType":"4628","messageId":"4629","endLine":677,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":693,"column":64,"nodeType":"4628","messageId":"4629","endLine":693,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":724,"column":24,"nodeType":"4628","messageId":"4629","endLine":724,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4732","line":744,"column":13,"nodeType":"4633","messageId":"4634","endLine":744,"endColumn":31},{"ruleId":"4631","severity":1,"message":"4733","line":750,"column":13,"nodeType":"4633","messageId":"4634","endLine":750,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4734","line":752,"column":13,"nodeType":"4633","messageId":"4634","endLine":752,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4735","line":753,"column":13,"nodeType":"4633","messageId":"4634","endLine":753,"endColumn":22},{"ruleId":"4631","severity":1,"message":"4736","line":754,"column":13,"nodeType":"4633","messageId":"4634","endLine":754,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4710","line":757,"column":13,"nodeType":"4633","messageId":"4634","endLine":757,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4737","line":762,"column":13,"nodeType":"4633","messageId":"4634","endLine":762,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":831,"column":66,"nodeType":"4628","messageId":"4629","endLine":831,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":836,"column":77,"nodeType":"4628","messageId":"4629","endLine":836,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":873,"column":77,"nodeType":"4628","messageId":"4629","endLine":873,"endColumn":79},{"ruleId":"4631","severity":1,"message":"4738","line":72,"column":17,"nodeType":"4633","messageId":"4634","endLine":72,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":110,"column":80,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":63,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":74,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":119,"column":74,"nodeType":"4628","messageId":"4629","endLine":119,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":127,"column":134,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":136},{"ruleId":"4626","severity":1,"message":"4627","line":139,"column":60,"nodeType":"4628","messageId":"4629","endLine":139,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":81,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":198,"column":85,"nodeType":"4628","messageId":"4629","endLine":198,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4630","line":63,"column":29,"nodeType":"4628","messageId":"4629","endLine":63,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":74,"column":44,"nodeType":"4628","messageId":"4629","endLine":74,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":79,"column":57,"nodeType":"4628","messageId":"4629","endLine":79,"endColumn":59},{"ruleId":"4631","severity":1,"message":"4738","line":193,"column":13,"nodeType":"4633","messageId":"4634","endLine":193,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":243,"column":137,"nodeType":"4628","messageId":"4629","endLine":243,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":255,"column":76,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4630","line":256,"column":66,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":289,"column":67,"nodeType":"4628","messageId":"4629","endLine":289,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":289,"column":171,"nodeType":"4628","messageId":"4629","endLine":289,"endColumn":173},{"ruleId":"4626","severity":1,"message":"4627","line":322,"column":67,"nodeType":"4628","messageId":"4629","endLine":322,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":385,"column":78,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":386,"column":118,"nodeType":"4628","messageId":"4629","endLine":386,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":389,"column":78,"nodeType":"4628","messageId":"4629","endLine":389,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":392,"column":85,"nodeType":"4628","messageId":"4629","endLine":392,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":396,"column":77,"nodeType":"4628","messageId":"4629","endLine":396,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":399,"column":85,"nodeType":"4628","messageId":"4629","endLine":399,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4630","line":407,"column":79,"nodeType":"4628","messageId":"4629","endLine":407,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":424,"column":78,"nodeType":"4628","messageId":"4629","endLine":424,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":430,"column":78,"nodeType":"4628","messageId":"4629","endLine":430,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":438,"column":77,"nodeType":"4628","messageId":"4629","endLine":438,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":160,"column":37,"nodeType":"4628","messageId":"4629","endLine":160,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":40,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":42,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":258,"column":31,"nodeType":"4628","messageId":"4629","endLine":258,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":261,"column":36,"nodeType":"4628","messageId":"4629","endLine":261,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":264,"column":40,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":264,"column":72,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":267,"column":36,"nodeType":"4628","messageId":"4629","endLine":267,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":267,"column":64,"nodeType":"4628","messageId":"4629","endLine":267,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":271,"column":31,"nodeType":"4628","messageId":"4629","endLine":271,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":271,"column":56,"nodeType":"4628","messageId":"4629","endLine":271,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":275,"column":36,"nodeType":"4628","messageId":"4629","endLine":275,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":275,"column":61,"nodeType":"4628","messageId":"4629","endLine":275,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":277,"column":52,"nodeType":"4628","messageId":"4629","endLine":277,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":280,"column":57,"nodeType":"4628","messageId":"4629","endLine":280,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":283,"column":57,"nodeType":"4628","messageId":"4629","endLine":283,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":57,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":287,"column":52,"nodeType":"4628","messageId":"4629","endLine":287,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":288,"column":52,"nodeType":"4628","messageId":"4629","endLine":288,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":289,"column":52,"nodeType":"4628","messageId":"4629","endLine":289,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":299,"column":57,"nodeType":"4628","messageId":"4629","endLine":299,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":300,"column":63,"nodeType":"4628","messageId":"4629","endLine":300,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":303,"column":68,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":306,"column":68,"nodeType":"4628","messageId":"4629","endLine":306,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":309,"column":68,"nodeType":"4628","messageId":"4629","endLine":309,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":312,"column":68,"nodeType":"4628","messageId":"4629","endLine":312,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":315,"column":68,"nodeType":"4628","messageId":"4629","endLine":315,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":322,"column":30,"nodeType":"4628","messageId":"4629","endLine":322,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":326,"column":36,"nodeType":"4628","messageId":"4629","endLine":326,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":326,"column":72,"nodeType":"4628","messageId":"4629","endLine":326,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":331,"column":34,"nodeType":"4628","messageId":"4629","endLine":331,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":336,"column":36,"nodeType":"4628","messageId":"4629","endLine":336,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":336,"column":72,"nodeType":"4628","messageId":"4629","endLine":336,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":389,"column":24,"nodeType":"4628","messageId":"4629","endLine":389,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":432,"column":42,"nodeType":"4628","messageId":"4629","endLine":432,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":478,"column":23,"nodeType":"4628","messageId":"4629","endLine":478,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":500,"column":46,"nodeType":"4628","messageId":"4629","endLine":500,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4630","line":507,"column":37,"nodeType":"4628","messageId":"4629","endLine":507,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":562,"column":33,"nodeType":"4628","messageId":"4629","endLine":562,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":565,"column":33,"nodeType":"4628","messageId":"4629","endLine":565,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":585,"column":62,"nodeType":"4628","messageId":"4629","endLine":585,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":586,"column":43,"nodeType":"4628","messageId":"4629","endLine":586,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":587,"column":46,"nodeType":"4628","messageId":"4629","endLine":587,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":591,"column":48,"nodeType":"4628","messageId":"4629","endLine":591,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":599,"column":43,"nodeType":"4628","messageId":"4629","endLine":599,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":615,"column":35,"nodeType":"4628","messageId":"4629","endLine":615,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":624,"column":40,"nodeType":"4628","messageId":"4629","endLine":624,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":627,"column":40,"nodeType":"4628","messageId":"4629","endLine":627,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":630,"column":40,"nodeType":"4628","messageId":"4629","endLine":630,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":637,"column":34,"nodeType":"4628","messageId":"4629","endLine":637,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":646,"column":46,"nodeType":"4628","messageId":"4629","endLine":646,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":664,"column":54,"nodeType":"4628","messageId":"4629","endLine":664,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":704,"column":82,"nodeType":"4628","messageId":"4629","endLine":704,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":709,"column":78,"nodeType":"4628","messageId":"4629","endLine":709,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":709,"column":108,"nodeType":"4628","messageId":"4629","endLine":709,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4627","line":709,"column":138,"nodeType":"4628","messageId":"4629","endLine":709,"endColumn":140},{"ruleId":"4626","severity":1,"message":"4627","line":715,"column":126,"nodeType":"4628","messageId":"4629","endLine":715,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":715,"column":180,"nodeType":"4628","messageId":"4629","endLine":715,"endColumn":182},{"ruleId":"4626","severity":1,"message":"4627","line":719,"column":94,"nodeType":"4628","messageId":"4629","endLine":719,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":719,"column":145,"nodeType":"4628","messageId":"4629","endLine":719,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":720,"column":128,"nodeType":"4628","messageId":"4629","endLine":720,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4627","line":720,"column":203,"nodeType":"4628","messageId":"4629","endLine":720,"endColumn":205},{"ruleId":"4626","severity":1,"message":"4627","line":722,"column":93,"nodeType":"4628","messageId":"4629","endLine":722,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":723,"column":94,"nodeType":"4628","messageId":"4629","endLine":723,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":723,"column":164,"nodeType":"4628","messageId":"4629","endLine":723,"endColumn":166},{"ruleId":"4626","severity":1,"message":"4627","line":741,"column":98,"nodeType":"4628","messageId":"4629","endLine":741,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":742,"column":80,"nodeType":"4628","messageId":"4629","endLine":742,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4630","line":742,"column":115,"nodeType":"4628","messageId":"4629","endLine":742,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4630","line":747,"column":63,"nodeType":"4628","messageId":"4629","endLine":747,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":778,"column":66,"nodeType":"4628","messageId":"4629","endLine":778,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":784,"column":88,"nodeType":"4628","messageId":"4629","endLine":784,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":806,"column":96,"nodeType":"4628","messageId":"4629","endLine":806,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":37,"column":111,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":74,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":91,"column":38,"nodeType":"4628","messageId":"4629","endLine":91,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4630","line":103,"column":48,"nodeType":"4628","messageId":"4629","endLine":103,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":103,"column":90,"nodeType":"4628","messageId":"4629","endLine":103,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":60,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":223,"column":43,"nodeType":"4628","messageId":"4629","endLine":223,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":234,"column":29,"nodeType":"4628","messageId":"4629","endLine":234,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":237,"column":34,"nodeType":"4628","messageId":"4629","endLine":237,"endColumn":36},{"ruleId":"4739","severity":1,"message":"4740","line":253,"column":72,"nodeType":"4741","messageId":"4742","endLine":253,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":253,"column":126,"nodeType":"4628","messageId":"4629","endLine":253,"endColumn":128},{"ruleId":"4739","severity":1,"message":"4740","line":253,"column":132,"nodeType":"4741","messageId":"4742","endLine":253,"endColumn":134},{"ruleId":"4626","severity":1,"message":"4627","line":253,"column":169,"nodeType":"4628","messageId":"4629","endLine":253,"endColumn":171},{"ruleId":"4626","severity":1,"message":"4627","line":259,"column":73,"nodeType":"4628","messageId":"4629","endLine":259,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4630","line":260,"column":73,"nodeType":"4628","messageId":"4629","endLine":260,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":265,"column":76,"nodeType":"4628","messageId":"4629","endLine":265,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":308,"column":77,"nodeType":"4628","messageId":"4629","endLine":308,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":311,"column":48,"nodeType":"4628","messageId":"4629","endLine":311,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":318,"column":67,"nodeType":"4628","messageId":"4629","endLine":318,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":324,"column":48,"nodeType":"4628","messageId":"4629","endLine":324,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":331,"column":67,"nodeType":"4628","messageId":"4629","endLine":331,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":405,"column":50,"nodeType":"4628","messageId":"4629","endLine":405,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":405,"column":136,"nodeType":"4628","messageId":"4629","endLine":405,"endColumn":138},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":56,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":485,"column":44,"nodeType":"4628","messageId":"4629","endLine":485,"endColumn":46},{"ruleId":"4631","severity":1,"message":"4738","line":519,"column":17,"nodeType":"4633","messageId":"4634","endLine":519,"endColumn":32},{"ruleId":"4636","severity":1,"message":"4637","line":531,"column":64,"nodeType":"4638","messageId":"4639","endLine":531,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4630","line":532,"column":46,"nodeType":"4628","messageId":"4629","endLine":532,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":533,"column":54,"nodeType":"4628","messageId":"4629","endLine":533,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":533,"column":94,"nodeType":"4628","messageId":"4629","endLine":533,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":541,"column":54,"nodeType":"4628","messageId":"4629","endLine":541,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":541,"column":108,"nodeType":"4628","messageId":"4629","endLine":541,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4627","line":558,"column":22,"nodeType":"4628","messageId":"4629","endLine":558,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4627","line":558,"column":41,"nodeType":"4628","messageId":"4629","endLine":558,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":559,"column":24,"nodeType":"4628","messageId":"4629","endLine":559,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4630","line":570,"column":47,"nodeType":"4628","messageId":"4629","endLine":570,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":705,"column":48,"nodeType":"4628","messageId":"4629","endLine":705,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":708,"column":36,"nodeType":"4628","messageId":"4629","endLine":708,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":713,"column":48,"nodeType":"4628","messageId":"4629","endLine":713,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":716,"column":36,"nodeType":"4628","messageId":"4629","endLine":716,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":751,"column":87,"nodeType":"4628","messageId":"4629","endLine":751,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":763,"column":87,"nodeType":"4628","messageId":"4629","endLine":763,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":779,"column":91,"nodeType":"4628","messageId":"4629","endLine":779,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":791,"column":91,"nodeType":"4628","messageId":"4629","endLine":791,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":804,"column":92,"nodeType":"4628","messageId":"4629","endLine":804,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":816,"column":92,"nodeType":"4628","messageId":"4629","endLine":816,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":48,"column":58,"nodeType":"4628","messageId":"4629","endLine":48,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":52,"column":68,"nodeType":"4628","messageId":"4629","endLine":52,"endColumn":70},{"ruleId":"4631","severity":1,"message":"4743","line":70,"column":13,"nodeType":"4633","messageId":"4634","endLine":70,"endColumn":23},{"ruleId":"4636","severity":1,"message":"4744","line":76,"column":50,"nodeType":"4745","messageId":"4639","endLine":76,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":83,"column":45,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":45,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":52,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":96,"column":36,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":98,"column":38,"nodeType":"4628","messageId":"4629","endLine":98,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":99,"column":37,"nodeType":"4628","messageId":"4629","endLine":99,"endColumn":39},{"ruleId":"4661","severity":1,"message":"4662","line":99,"column":111,"nodeType":"4655","endLine":99,"endColumn":195},{"ruleId":"4626","severity":1,"message":"4627","line":117,"column":124,"nodeType":"4628","messageId":"4629","endLine":117,"endColumn":126},{"ruleId":"4626","severity":1,"message":"4630","line":121,"column":71,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":71,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":141,"column":71,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":173,"column":76,"nodeType":"4628","messageId":"4629","endLine":173,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4630","line":188,"column":71,"nodeType":"4628","messageId":"4629","endLine":188,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":198,"column":71,"nodeType":"4628","messageId":"4629","endLine":198,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":208,"column":71,"nodeType":"4628","messageId":"4629","endLine":208,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":223,"column":59,"nodeType":"4628","messageId":"4629","endLine":223,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4630","line":248,"column":93,"nodeType":"4628","messageId":"4629","endLine":248,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":271,"column":101,"nodeType":"4628","messageId":"4629","endLine":271,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4630","line":286,"column":147,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":149},{"ruleId":"4626","severity":1,"message":"4630","line":288,"column":78,"nodeType":"4628","messageId":"4629","endLine":288,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":302,"column":86,"nodeType":"4628","messageId":"4629","endLine":302,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4630","line":320,"column":98,"nodeType":"4628","messageId":"4629","endLine":320,"endColumn":100},{"ruleId":"4691","severity":1,"message":"4692","line":327,"column":73,"nodeType":"4655","endLine":327,"endColumn":164},{"ruleId":"4691","severity":1,"message":"4692","line":331,"column":73,"nodeType":"4655","endLine":331,"endColumn":203},{"ruleId":"4691","severity":1,"message":"4692","line":336,"column":73,"nodeType":"4655","endLine":336,"endColumn":203},{"ruleId":"4631","severity":1,"message":"4663","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":51,"column":58,"nodeType":"4628","messageId":"4629","endLine":51,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":56,"column":68,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":70},{"ruleId":"4631","severity":1,"message":"4743","line":76,"column":13,"nodeType":"4633","messageId":"4634","endLine":76,"endColumn":23},{"ruleId":"4636","severity":1,"message":"4744","line":82,"column":50,"nodeType":"4745","messageId":"4639","endLine":82,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":45,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":45,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":94,"column":52,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":102,"column":36,"nodeType":"4628","messageId":"4629","endLine":102,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":104,"column":38,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":105,"column":37,"nodeType":"4628","messageId":"4629","endLine":105,"endColumn":39},{"ruleId":"4661","severity":1,"message":"4662","line":105,"column":111,"nodeType":"4655","endLine":105,"endColumn":195},{"ruleId":"4626","severity":1,"message":"4627","line":122,"column":138,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":140},{"ruleId":"4626","severity":1,"message":"4630","line":131,"column":83,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":134,"column":83,"nodeType":"4628","messageId":"4629","endLine":134,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4630","line":139,"column":83,"nodeType":"4628","messageId":"4629","endLine":139,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":86,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":83,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":169,"column":86,"nodeType":"4628","messageId":"4629","endLine":169,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4630","line":204,"column":83,"nodeType":"4628","messageId":"4629","endLine":204,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":208,"column":86,"nodeType":"4628","messageId":"4629","endLine":208,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":231,"column":83,"nodeType":"4628","messageId":"4629","endLine":231,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":235,"column":86,"nodeType":"4628","messageId":"4629","endLine":235,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4630","line":253,"column":83,"nodeType":"4628","messageId":"4629","endLine":253,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":256,"column":83,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":263,"column":67,"nodeType":"4628","messageId":"4629","endLine":263,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":277,"column":59,"nodeType":"4628","messageId":"4629","endLine":277,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4630","line":286,"column":69,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4630","line":300,"column":109,"nodeType":"4628","messageId":"4629","endLine":300,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4630","line":317,"column":97,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":99},{"ruleId":"4691","severity":1,"message":"4692","line":328,"column":61,"nodeType":"4655","endLine":328,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":353,"column":133,"nodeType":"4628","messageId":"4629","endLine":353,"endColumn":135},{"ruleId":"4691","severity":1,"message":"4692","line":354,"column":85,"nodeType":"4655","endLine":354,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":357,"column":116,"nodeType":"4628","messageId":"4629","endLine":357,"endColumn":118},{"ruleId":"4626","severity":1,"message":"4627","line":49,"column":58,"nodeType":"4628","messageId":"4629","endLine":49,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":54,"column":68,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":70},{"ruleId":"4631","severity":1,"message":"4743","line":72,"column":13,"nodeType":"4633","messageId":"4634","endLine":72,"endColumn":23},{"ruleId":"4636","severity":1,"message":"4744","line":78,"column":50,"nodeType":"4745","messageId":"4639","endLine":78,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":85,"column":45,"nodeType":"4628","messageId":"4629","endLine":85,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":45,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":90,"column":52,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":98,"column":36,"nodeType":"4628","messageId":"4629","endLine":98,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":100,"column":42,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":46,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":48},{"ruleId":"4661","severity":1,"message":"4662","line":101,"column":120,"nodeType":"4655","endLine":101,"endColumn":204},{"ruleId":"4626","severity":1,"message":"4627","line":121,"column":125,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4630","line":129,"column":83,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":132,"column":83,"nodeType":"4628","messageId":"4629","endLine":132,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4630","line":137,"column":83,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":141,"column":128,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4627","line":158,"column":83,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":156,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":158},{"ruleId":"4626","severity":1,"message":"4630","line":196,"column":83,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":200,"column":128,"nodeType":"4628","messageId":"4629","endLine":200,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4627","line":217,"column":83,"nodeType":"4628","messageId":"4629","endLine":217,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":221,"column":156,"nodeType":"4628","messageId":"4629","endLine":221,"endColumn":158},{"ruleId":"4626","severity":1,"message":"4630","line":239,"column":83,"nodeType":"4628","messageId":"4629","endLine":239,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":242,"column":83,"nodeType":"4628","messageId":"4629","endLine":242,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":249,"column":67,"nodeType":"4628","messageId":"4629","endLine":249,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":265,"column":59,"nodeType":"4628","messageId":"4629","endLine":265,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4630","line":275,"column":115,"nodeType":"4628","messageId":"4629","endLine":275,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4630","line":290,"column":93,"nodeType":"4628","messageId":"4629","endLine":290,"endColumn":95},{"ruleId":"4691","severity":1,"message":"4692","line":300,"column":57,"nodeType":"4655","endLine":300,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":305,"column":73,"nodeType":"4628","messageId":"4629","endLine":305,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":305,"column":102,"nodeType":"4628","messageId":"4629","endLine":305,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4630","line":305,"column":127,"nodeType":"4628","messageId":"4629","endLine":305,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":328,"column":100,"nodeType":"4628","messageId":"4629","endLine":328,"endColumn":102},{"ruleId":"4626","severity":1,"message":"4627","line":339,"column":131,"nodeType":"4628","messageId":"4629","endLine":339,"endColumn":133},{"ruleId":"4626","severity":1,"message":"4627","line":347,"column":135,"nodeType":"4628","messageId":"4629","endLine":347,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4627","line":355,"column":139,"nodeType":"4628","messageId":"4629","endLine":355,"endColumn":141},{"ruleId":"4661","severity":1,"message":"4662","line":358,"column":129,"nodeType":"4655","endLine":358,"endColumn":223},{"ruleId":"4626","severity":1,"message":"4627","line":363,"column":143,"nodeType":"4628","messageId":"4629","endLine":363,"endColumn":145},{"ruleId":"4626","severity":1,"message":"4627","line":385,"column":115,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4630","line":387,"column":119,"nodeType":"4628","messageId":"4629","endLine":387,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4627","line":392,"column":115,"nodeType":"4628","messageId":"4629","endLine":392,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4630","line":394,"column":119,"nodeType":"4628","messageId":"4629","endLine":394,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4627","line":402,"column":129,"nodeType":"4628","messageId":"4629","endLine":402,"endColumn":131},{"ruleId":"4691","severity":1,"message":"4692","line":403,"column":81,"nodeType":"4655","endLine":403,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":406,"column":112,"nodeType":"4628","messageId":"4629","endLine":406,"endColumn":114},{"ruleId":"4626","severity":1,"message":"4630","line":46,"column":38,"nodeType":"4628","messageId":"4629","endLine":46,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":65,"column":22,"nodeType":"4628","messageId":"4629","endLine":65,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4630","line":106,"column":77,"nodeType":"4628","messageId":"4629","endLine":106,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":37,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":69,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":43,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":140,"column":54,"nodeType":"4628","messageId":"4629","endLine":140,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4630","line":141,"column":54,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4630","line":143,"column":54,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4630","line":144,"column":54,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4630","line":145,"column":54,"nodeType":"4628","messageId":"4629","endLine":145,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4630","line":146,"column":54,"nodeType":"4628","messageId":"4629","endLine":146,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":73,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4630","line":186,"column":107,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4627","line":190,"column":66,"nodeType":"4628","messageId":"4629","endLine":190,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":191,"column":67,"nodeType":"4628","messageId":"4629","endLine":191,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":191,"column":99,"nodeType":"4628","messageId":"4629","endLine":191,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":193,"column":82,"nodeType":"4628","messageId":"4629","endLine":193,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":193,"column":137,"nodeType":"4628","messageId":"4629","endLine":193,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":196,"column":104,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":106},{"ruleId":"4626","severity":1,"message":"4627","line":196,"column":162,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":164},{"ruleId":"4626","severity":1,"message":"4627","line":209,"column":67,"nodeType":"4628","messageId":"4629","endLine":209,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":217,"column":67,"nodeType":"4628","messageId":"4629","endLine":217,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4630","line":293,"column":135,"nodeType":"4628","messageId":"4629","endLine":293,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4630","line":336,"column":58,"nodeType":"4628","messageId":"4629","endLine":336,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":336,"column":113,"nodeType":"4628","messageId":"4629","endLine":336,"endColumn":115},{"ruleId":"4626","severity":1,"message":"4630","line":336,"column":173,"nodeType":"4628","messageId":"4629","endLine":336,"endColumn":175},{"ruleId":"4626","severity":1,"message":"4630","line":336,"column":232,"nodeType":"4628","messageId":"4629","endLine":336,"endColumn":234},{"ruleId":"4626","severity":1,"message":"4627","line":47,"column":68,"nodeType":"4628","messageId":"4629","endLine":47,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":70,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":130,"column":70,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":72},{"ruleId":"4631","severity":1,"message":"4746","line":4,"column":54,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":47,"column":68,"nodeType":"4628","messageId":"4629","endLine":47,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":83,"column":70,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":70,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":46,"column":68,"nodeType":"4628","messageId":"4629","endLine":46,"endColumn":70},{"ruleId":"4631","severity":1,"message":"4747","line":57,"column":17,"nodeType":"4633","messageId":"4634","endLine":57,"endColumn":31},{"ruleId":"4661","severity":1,"message":"4662","line":43,"column":45,"nodeType":"4655","endLine":43,"endColumn":83},{"ruleId":"4661","severity":1,"message":"4662","line":46,"column":45,"nodeType":"4655","endLine":46,"endColumn":83},{"ruleId":"4661","severity":1,"message":"4662","line":61,"column":45,"nodeType":"4655","endLine":61,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":138,"column":38,"nodeType":"4628","messageId":"4629","endLine":138,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":155,"column":48,"nodeType":"4628","messageId":"4629","endLine":155,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":274,"column":31,"nodeType":"4628","messageId":"4629","endLine":274,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":277,"column":36,"nodeType":"4628","messageId":"4629","endLine":277,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":280,"column":40,"nodeType":"4628","messageId":"4629","endLine":280,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":280,"column":72,"nodeType":"4628","messageId":"4629","endLine":280,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":283,"column":36,"nodeType":"4628","messageId":"4629","endLine":283,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":283,"column":64,"nodeType":"4628","messageId":"4629","endLine":283,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":287,"column":31,"nodeType":"4628","messageId":"4629","endLine":287,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":287,"column":56,"nodeType":"4628","messageId":"4629","endLine":287,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":36,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":61,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":293,"column":52,"nodeType":"4628","messageId":"4629","endLine":293,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":296,"column":57,"nodeType":"4628","messageId":"4629","endLine":296,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":299,"column":57,"nodeType":"4628","messageId":"4629","endLine":299,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":302,"column":57,"nodeType":"4628","messageId":"4629","endLine":302,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":303,"column":52,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":304,"column":52,"nodeType":"4628","messageId":"4629","endLine":304,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":305,"column":52,"nodeType":"4628","messageId":"4629","endLine":305,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":311,"column":57,"nodeType":"4628","messageId":"4629","endLine":311,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":312,"column":63,"nodeType":"4628","messageId":"4629","endLine":312,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":315,"column":68,"nodeType":"4628","messageId":"4629","endLine":315,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":318,"column":68,"nodeType":"4628","messageId":"4629","endLine":318,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":321,"column":68,"nodeType":"4628","messageId":"4629","endLine":321,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":324,"column":68,"nodeType":"4628","messageId":"4629","endLine":324,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":327,"column":68,"nodeType":"4628","messageId":"4629","endLine":327,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":334,"column":30,"nodeType":"4628","messageId":"4629","endLine":334,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":36,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":72,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":343,"column":34,"nodeType":"4628","messageId":"4629","endLine":343,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":348,"column":36,"nodeType":"4628","messageId":"4629","endLine":348,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":348,"column":72,"nodeType":"4628","messageId":"4629","endLine":348,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":419,"column":24,"nodeType":"4628","messageId":"4629","endLine":419,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":463,"column":42,"nodeType":"4628","messageId":"4629","endLine":463,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":502,"column":23,"nodeType":"4628","messageId":"4629","endLine":502,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":524,"column":46,"nodeType":"4628","messageId":"4629","endLine":524,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4630","line":531,"column":37,"nodeType":"4628","messageId":"4629","endLine":531,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":37,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":578,"column":37,"nodeType":"4628","messageId":"4629","endLine":578,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":601,"column":62,"nodeType":"4628","messageId":"4629","endLine":601,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":602,"column":43,"nodeType":"4628","messageId":"4629","endLine":602,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":603,"column":46,"nodeType":"4628","messageId":"4629","endLine":603,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":607,"column":48,"nodeType":"4628","messageId":"4629","endLine":607,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":615,"column":43,"nodeType":"4628","messageId":"4629","endLine":615,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":633,"column":34,"nodeType":"4628","messageId":"4629","endLine":633,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":636,"column":41,"nodeType":"4628","messageId":"4629","endLine":636,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":643,"column":46,"nodeType":"4628","messageId":"4629","endLine":643,"endColumn":48},{"ruleId":"4631","severity":1,"message":"4732","line":702,"column":13,"nodeType":"4633","messageId":"4634","endLine":702,"endColumn":31},{"ruleId":"4631","severity":1,"message":"4733","line":708,"column":13,"nodeType":"4633","messageId":"4634","endLine":708,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4736","line":710,"column":13,"nodeType":"4633","messageId":"4634","endLine":710,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4710","line":713,"column":13,"nodeType":"4633","messageId":"4634","endLine":713,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4702","line":719,"column":15,"nodeType":"4633","messageId":"4634","endLine":719,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4627","line":789,"column":66,"nodeType":"4628","messageId":"4629","endLine":789,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":794,"column":77,"nodeType":"4628","messageId":"4629","endLine":794,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":831,"column":77,"nodeType":"4628","messageId":"4629","endLine":831,"endColumn":79},{"ruleId":"4631","severity":1,"message":"4690","line":3,"column":10,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":16},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":38,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":40},{"ruleId":"4748","severity":1,"message":"4749","line":128,"column":13,"nodeType":"4750","messageId":"4751","endLine":128,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":39,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":181,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":183},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":255,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":257},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":53,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":93,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":166,"column":50,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":166,"column":90,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":50,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":90,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":50,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":90,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":53,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":93,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":174,"column":53,"nodeType":"4628","messageId":"4629","endLine":174,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":177,"column":53,"nodeType":"4628","messageId":"4629","endLine":177,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":53,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":53,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":43,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":45},{"ruleId":"4748","severity":1,"message":"4749","line":203,"column":17,"nodeType":"4750","messageId":"4751","endLine":206,"endColumn":18},{"ruleId":"4626","severity":1,"message":"4627","line":204,"column":87,"nodeType":"4628","messageId":"4629","endLine":204,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4630","line":208,"column":40,"nodeType":"4628","messageId":"4629","endLine":208,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":212,"column":71,"nodeType":"4628","messageId":"4629","endLine":212,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":73,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":246,"column":79,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":279,"column":152,"nodeType":"4628","messageId":"4629","endLine":279,"endColumn":154},{"ruleId":"4626","severity":1,"message":"4627","line":282,"column":48,"nodeType":"4628","messageId":"4629","endLine":282,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":48,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":306,"column":172,"nodeType":"4628","messageId":"4629","endLine":306,"endColumn":174},{"ruleId":"4626","severity":1,"message":"4627","line":321,"column":48,"nodeType":"4628","messageId":"4629","endLine":321,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":323,"column":33,"nodeType":"4628","messageId":"4629","endLine":323,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":340,"column":48,"nodeType":"4628","messageId":"4629","endLine":340,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":342,"column":33,"nodeType":"4628","messageId":"4629","endLine":342,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":388,"column":75,"nodeType":"4628","messageId":"4629","endLine":388,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":388,"column":142,"nodeType":"4628","messageId":"4629","endLine":388,"endColumn":144},{"ruleId":"4626","severity":1,"message":"4627","line":389,"column":43,"nodeType":"4628","messageId":"4629","endLine":389,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":389,"column":68,"nodeType":"4628","messageId":"4629","endLine":389,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":389,"column":93,"nodeType":"4628","messageId":"4629","endLine":389,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":431,"column":17,"nodeType":"4628","messageId":"4629","endLine":431,"endColumn":19},{"ruleId":"4626","severity":1,"message":"4627","line":432,"column":44,"nodeType":"4628","messageId":"4629","endLine":432,"endColumn":46},{"ruleId":"4658","severity":1,"message":"4659","line":441,"column":42,"nodeType":"4628","messageId":"4660","endLine":441,"endColumn":43},{"ruleId":"4658","severity":1,"message":"4659","line":441,"column":59,"nodeType":"4628","messageId":"4660","endLine":441,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":472,"column":22,"nodeType":"4628","messageId":"4629","endLine":472,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4627","line":482,"column":22,"nodeType":"4628","messageId":"4629","endLine":482,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4627","line":500,"column":34,"nodeType":"4628","messageId":"4629","endLine":500,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":514,"column":23,"nodeType":"4628","messageId":"4629","endLine":514,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4743","line":526,"column":13,"nodeType":"4633","messageId":"4634","endLine":526,"endColumn":23},{"ruleId":"4636","severity":1,"message":"4744","line":532,"column":50,"nodeType":"4745","messageId":"4639","endLine":532,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":539,"column":45,"nodeType":"4628","messageId":"4629","endLine":539,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":542,"column":45,"nodeType":"4628","messageId":"4629","endLine":542,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":544,"column":52,"nodeType":"4628","messageId":"4629","endLine":544,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":553,"column":36,"nodeType":"4628","messageId":"4629","endLine":553,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":555,"column":42,"nodeType":"4628","messageId":"4629","endLine":555,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":556,"column":46,"nodeType":"4628","messageId":"4629","endLine":556,"endColumn":48},{"ruleId":"4631","severity":1,"message":"4738","line":567,"column":250,"nodeType":"4633","messageId":"4634","endLine":567,"endColumn":265},{"ruleId":"4626","severity":1,"message":"4627","line":572,"column":176,"nodeType":"4628","messageId":"4629","endLine":572,"endColumn":178},{"ruleId":"4626","severity":1,"message":"4627","line":574,"column":85,"nodeType":"4628","messageId":"4629","endLine":574,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":40,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":102,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":585,"column":189,"nodeType":"4628","messageId":"4629","endLine":585,"endColumn":191},{"ruleId":"4626","severity":1,"message":"4627","line":585,"column":214,"nodeType":"4628","messageId":"4629","endLine":585,"endColumn":216},{"ruleId":"4626","severity":1,"message":"4630","line":597,"column":67,"nodeType":"4628","messageId":"4629","endLine":597,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4630","line":603,"column":71,"nodeType":"4628","messageId":"4629","endLine":603,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4630","line":635,"column":67,"nodeType":"4628","messageId":"4629","endLine":635,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":689,"column":93,"nodeType":"4628","messageId":"4629","endLine":689,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":697,"column":82,"nodeType":"4628","messageId":"4629","endLine":697,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":717,"column":74,"nodeType":"4628","messageId":"4629","endLine":717,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":729,"column":188,"nodeType":"4628","messageId":"4629","endLine":729,"endColumn":190},{"ruleId":"4626","severity":1,"message":"4627","line":737,"column":188,"nodeType":"4628","messageId":"4629","endLine":737,"endColumn":190},{"ruleId":"4626","severity":1,"message":"4627","line":758,"column":146,"nodeType":"4628","messageId":"4629","endLine":758,"endColumn":148},{"ruleId":"4626","severity":1,"message":"4627","line":761,"column":109,"nodeType":"4628","messageId":"4629","endLine":761,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":765,"column":115,"nodeType":"4628","messageId":"4629","endLine":765,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4627","line":773,"column":125,"nodeType":"4628","messageId":"4629","endLine":773,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":778,"column":137,"nodeType":"4628","messageId":"4629","endLine":778,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":782,"column":146,"nodeType":"4628","messageId":"4629","endLine":782,"endColumn":148},{"ruleId":"4661","severity":1,"message":"4662","line":783,"column":137,"nodeType":"4655","endLine":783,"endColumn":263},{"ruleId":"4626","severity":1,"message":"4627","line":803,"column":125,"nodeType":"4628","messageId":"4629","endLine":803,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":803,"column":148,"nodeType":"4628","messageId":"4629","endLine":803,"endColumn":150},{"ruleId":"4626","severity":1,"message":"4627","line":803,"column":184,"nodeType":"4628","messageId":"4629","endLine":803,"endColumn":186},{"ruleId":"4626","severity":1,"message":"4627","line":803,"column":220,"nodeType":"4628","messageId":"4629","endLine":803,"endColumn":222},{"ruleId":"4626","severity":1,"message":"4627","line":807,"column":106,"nodeType":"4628","messageId":"4629","endLine":807,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":812,"column":117,"nodeType":"4628","messageId":"4629","endLine":812,"endColumn":119},{"ruleId":"4626","severity":1,"message":"4627","line":818,"column":121,"nodeType":"4628","messageId":"4629","endLine":818,"endColumn":123},{"ruleId":"4626","severity":1,"message":"4627","line":826,"column":125,"nodeType":"4628","messageId":"4629","endLine":826,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4630","line":860,"column":88,"nodeType":"4628","messageId":"4629","endLine":860,"endColumn":90},{"ruleId":"4661","severity":1,"message":"4662","line":863,"column":65,"nodeType":"4655","endLine":863,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4627","line":870,"column":88,"nodeType":"4628","messageId":"4629","endLine":870,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":891,"column":88,"nodeType":"4628","messageId":"4629","endLine":891,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":898,"column":146,"nodeType":"4628","messageId":"4629","endLine":898,"endColumn":148},{"ruleId":"4626","severity":1,"message":"4627","line":901,"column":109,"nodeType":"4628","messageId":"4629","endLine":901,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":905,"column":115,"nodeType":"4628","messageId":"4629","endLine":905,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4627","line":913,"column":125,"nodeType":"4628","messageId":"4629","endLine":913,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":918,"column":137,"nodeType":"4628","messageId":"4629","endLine":918,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":922,"column":146,"nodeType":"4628","messageId":"4629","endLine":922,"endColumn":148},{"ruleId":"4661","severity":1,"message":"4662","line":923,"column":137,"nodeType":"4655","endLine":923,"endColumn":263},{"ruleId":"4626","severity":1,"message":"4627","line":940,"column":125,"nodeType":"4628","messageId":"4629","endLine":940,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":940,"column":148,"nodeType":"4628","messageId":"4629","endLine":940,"endColumn":150},{"ruleId":"4626","severity":1,"message":"4627","line":940,"column":184,"nodeType":"4628","messageId":"4629","endLine":940,"endColumn":186},{"ruleId":"4626","severity":1,"message":"4627","line":940,"column":220,"nodeType":"4628","messageId":"4629","endLine":940,"endColumn":222},{"ruleId":"4626","severity":1,"message":"4627","line":944,"column":106,"nodeType":"4628","messageId":"4629","endLine":944,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":949,"column":117,"nodeType":"4628","messageId":"4629","endLine":949,"endColumn":119},{"ruleId":"4626","severity":1,"message":"4627","line":955,"column":121,"nodeType":"4628","messageId":"4629","endLine":955,"endColumn":123},{"ruleId":"4626","severity":1,"message":"4627","line":963,"column":125,"nodeType":"4628","messageId":"4629","endLine":963,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4630","line":985,"column":92,"nodeType":"4628","messageId":"4629","endLine":985,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":1039,"column":121,"nodeType":"4628","messageId":"4629","endLine":1039,"endColumn":123},{"ruleId":"4626","severity":1,"message":"4627","line":1041,"column":94,"nodeType":"4628","messageId":"4629","endLine":1041,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":1053,"column":94,"nodeType":"4628","messageId":"4629","endLine":1053,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4630","line":1054,"column":94,"nodeType":"4628","messageId":"4629","endLine":1054,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":1071,"column":98,"nodeType":"4628","messageId":"4629","endLine":1071,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":1075,"column":104,"nodeType":"4628","messageId":"4629","endLine":1075,"endColumn":106},{"ruleId":"4626","severity":1,"message":"4627","line":1082,"column":123,"nodeType":"4628","messageId":"4629","endLine":1082,"endColumn":125},{"ruleId":"4626","severity":1,"message":"4627","line":1091,"column":127,"nodeType":"4628","messageId":"4629","endLine":1091,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":1101,"column":131,"nodeType":"4628","messageId":"4629","endLine":1101,"endColumn":133},{"ruleId":"4661","severity":1,"message":"4662","line":1105,"column":125,"nodeType":"4655","endLine":1105,"endColumn":209},{"ruleId":"4626","severity":1,"message":"4627","line":1113,"column":135,"nodeType":"4628","messageId":"4629","endLine":1113,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4627","line":1120,"column":127,"nodeType":"4628","messageId":"4629","endLine":1120,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":1134,"column":131,"nodeType":"4628","messageId":"4629","endLine":1134,"endColumn":133},{"ruleId":"4626","severity":1,"message":"4627","line":1163,"column":106,"nodeType":"4628","messageId":"4629","endLine":1163,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":1169,"column":145,"nodeType":"4628","messageId":"4629","endLine":1169,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":1169,"column":168,"nodeType":"4628","messageId":"4629","endLine":1169,"endColumn":170},{"ruleId":"4626","severity":1,"message":"4627","line":1169,"column":204,"nodeType":"4628","messageId":"4629","endLine":1169,"endColumn":206},{"ruleId":"4626","severity":1,"message":"4627","line":1169,"column":240,"nodeType":"4628","messageId":"4629","endLine":1169,"endColumn":242},{"ruleId":"4626","severity":1,"message":"4627","line":1172,"column":126,"nodeType":"4628","messageId":"4629","endLine":1172,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":1176,"column":137,"nodeType":"4628","messageId":"4629","endLine":1176,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":1183,"column":141,"nodeType":"4628","messageId":"4629","endLine":1183,"endColumn":143},{"ruleId":"4626","severity":1,"message":"4627","line":1192,"column":145,"nodeType":"4628","messageId":"4629","endLine":1192,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":1218,"column":166,"nodeType":"4628","messageId":"4629","endLine":1218,"endColumn":168},{"ruleId":"4626","severity":1,"message":"4627","line":1220,"column":129,"nodeType":"4628","messageId":"4629","endLine":1220,"endColumn":131},{"ruleId":"4626","severity":1,"message":"4627","line":1224,"column":135,"nodeType":"4628","messageId":"4629","endLine":1224,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4627","line":1232,"column":145,"nodeType":"4628","messageId":"4629","endLine":1232,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":1237,"column":157,"nodeType":"4628","messageId":"4629","endLine":1237,"endColumn":159},{"ruleId":"4626","severity":1,"message":"4627","line":1241,"column":166,"nodeType":"4628","messageId":"4629","endLine":1241,"endColumn":168},{"ruleId":"4661","severity":1,"message":"4662","line":1242,"column":157,"nodeType":"4655","endLine":1242,"endColumn":283},{"ruleId":"4626","severity":1,"message":"4627","line":1259,"column":145,"nodeType":"4628","messageId":"4629","endLine":1259,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":1259,"column":168,"nodeType":"4628","messageId":"4629","endLine":1259,"endColumn":170},{"ruleId":"4626","severity":1,"message":"4627","line":1259,"column":204,"nodeType":"4628","messageId":"4629","endLine":1259,"endColumn":206},{"ruleId":"4626","severity":1,"message":"4627","line":1259,"column":240,"nodeType":"4628","messageId":"4629","endLine":1259,"endColumn":242},{"ruleId":"4626","severity":1,"message":"4627","line":1263,"column":126,"nodeType":"4628","messageId":"4629","endLine":1263,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":1268,"column":137,"nodeType":"4628","messageId":"4629","endLine":1268,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":1275,"column":141,"nodeType":"4628","messageId":"4629","endLine":1275,"endColumn":143},{"ruleId":"4626","severity":1,"message":"4627","line":1284,"column":145,"nodeType":"4628","messageId":"4629","endLine":1284,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":1317,"column":128,"nodeType":"4628","messageId":"4629","endLine":1317,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4630","line":1330,"column":89,"nodeType":"4628","messageId":"4629","endLine":1330,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4630","line":1330,"column":124,"nodeType":"4628","messageId":"4629","endLine":1330,"endColumn":126},{"ruleId":"4626","severity":1,"message":"4627","line":1340,"column":90,"nodeType":"4628","messageId":"4629","endLine":1340,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4630","line":1340,"column":130,"nodeType":"4628","messageId":"4629","endLine":1340,"endColumn":132},{"ruleId":"4626","severity":1,"message":"4627","line":1340,"column":165,"nodeType":"4628","messageId":"4629","endLine":1340,"endColumn":167},{"ruleId":"4626","severity":1,"message":"4627","line":1358,"column":71,"nodeType":"4628","messageId":"4629","endLine":1358,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":1370,"column":83,"nodeType":"4628","messageId":"4629","endLine":1370,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":1370,"column":132,"nodeType":"4628","messageId":"4629","endLine":1370,"endColumn":134},{"ruleId":"4626","severity":1,"message":"4627","line":1393,"column":84,"nodeType":"4628","messageId":"4629","endLine":1393,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4630","line":1481,"column":110,"nodeType":"4628","messageId":"4629","endLine":1481,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4630","line":1486,"column":101,"nodeType":"4628","messageId":"4629","endLine":1486,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4630","line":1647,"column":146,"nodeType":"4628","messageId":"4629","endLine":1647,"endColumn":148},{"ruleId":"4626","severity":1,"message":"4630","line":1648,"column":117,"nodeType":"4628","messageId":"4629","endLine":1648,"endColumn":119},{"ruleId":"4626","severity":1,"message":"4627","line":1666,"column":63,"nodeType":"4628","messageId":"4629","endLine":1666,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":1682,"column":108,"nodeType":"4628","messageId":"4629","endLine":1682,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4627","line":1689,"column":115,"nodeType":"4628","messageId":"4629","endLine":1689,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4627","line":1712,"column":108,"nodeType":"4628","messageId":"4629","endLine":1712,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4630","line":29,"column":47,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4630","line":29,"column":105,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":107},{"ruleId":"4626","severity":1,"message":"4630","line":29,"column":167,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":169},{"ruleId":"4626","severity":1,"message":"4627","line":25,"column":41,"nodeType":"4628","messageId":"4629","endLine":25,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":27,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":60,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":82,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":30,"column":99,"nodeType":"4628","messageId":"4629","endLine":30,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":32,"column":72,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":32,"column":114,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":116},{"ruleId":"4626","severity":1,"message":"4627","line":32,"column":136,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":138},{"ruleId":"4626","severity":1,"message":"4630","line":36,"column":55,"nodeType":"4628","messageId":"4629","endLine":36,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":44,"column":58,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":50,"column":55,"nodeType":"4628","messageId":"4629","endLine":50,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":57,"column":55,"nodeType":"4628","messageId":"4629","endLine":57,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":63,"column":37,"nodeType":"4628","messageId":"4629","endLine":63,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":84,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":126,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":148,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":150},{"ruleId":"4626","severity":1,"message":"4627","line":65,"column":50,"nodeType":"4628","messageId":"4629","endLine":65,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":53,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":75,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4630","line":82,"column":55,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":58,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":96,"column":55,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":103,"column":55,"nodeType":"4628","messageId":"4629","endLine":103,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4630","line":112,"column":27,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4630","line":112,"column":54,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":88,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":122,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":124},{"ruleId":"4631","severity":1,"message":"4752","line":148,"column":17,"nodeType":"4633","messageId":"4634","endLine":148,"endColumn":34},{"ruleId":"4631","severity":1,"message":"4753","line":148,"column":49,"nodeType":"4633","messageId":"4634","endLine":148,"endColumn":54},{"ruleId":"4631","severity":1,"message":"4754","line":148,"column":56,"nodeType":"4633","messageId":"4634","endLine":148,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":19,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":21},{"ruleId":"4626","severity":1,"message":"4627","line":201,"column":97,"nodeType":"4628","messageId":"4629","endLine":201,"endColumn":99},{"ruleId":"4631","severity":1,"message":"4726","line":3,"column":8,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":14},{"ruleId":"4691","severity":1,"message":"4692","line":41,"column":37,"nodeType":"4655","endLine":41,"endColumn":97},{"ruleId":"4691","severity":1,"message":"4692","line":44,"column":37,"nodeType":"4655","endLine":44,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":45,"column":83,"nodeType":"4628","messageId":"4629","endLine":45,"endColumn":85},{"ruleId":"4631","severity":1,"message":"4720","line":13,"column":10,"nodeType":"4633","messageId":"4634","endLine":13,"endColumn":15},{"ruleId":"4626","severity":1,"message":"4630","line":32,"column":67,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4630","line":54,"column":52,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":63,"column":60,"nodeType":"4628","messageId":"4629","endLine":63,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":95,"column":34,"nodeType":"4628","messageId":"4629","endLine":95,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":108,"column":58,"nodeType":"4628","messageId":"4629","endLine":108,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":108,"column":109,"nodeType":"4628","messageId":"4629","endLine":108,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":111,"column":62,"nodeType":"4628","messageId":"4629","endLine":111,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":148,"column":44,"nodeType":"4628","messageId":"4629","endLine":148,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":175,"column":48,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":231,"column":59,"nodeType":"4628","messageId":"4629","endLine":231,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":304,"column":30,"nodeType":"4628","messageId":"4629","endLine":304,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":304,"column":58,"nodeType":"4628","messageId":"4629","endLine":304,"endColumn":60},{"ruleId":"4631","severity":1,"message":"4755","line":325,"column":13,"nodeType":"4633","messageId":"4634","endLine":325,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4756","line":326,"column":13,"nodeType":"4633","messageId":"4634","endLine":326,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4757","line":329,"column":13,"nodeType":"4633","messageId":"4634","endLine":329,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4627","line":333,"column":144,"nodeType":"4628","messageId":"4629","endLine":333,"endColumn":146},{"ruleId":"4631","severity":1,"message":"4758","line":336,"column":57,"nodeType":"4633","messageId":"4634","endLine":336,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4630","line":361,"column":66,"nodeType":"4628","messageId":"4629","endLine":361,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":365,"column":87,"nodeType":"4628","messageId":"4629","endLine":365,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4630","line":367,"column":66,"nodeType":"4628","messageId":"4629","endLine":367,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":372,"column":147,"nodeType":"4628","messageId":"4629","endLine":372,"endColumn":149},{"ruleId":"4626","severity":1,"message":"4627","line":383,"column":70,"nodeType":"4628","messageId":"4629","endLine":383,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4630","line":439,"column":82,"nodeType":"4628","messageId":"4629","endLine":439,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":442,"column":74,"nodeType":"4628","messageId":"4629","endLine":442,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":449,"column":79,"nodeType":"4628","messageId":"4629","endLine":449,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":449,"column":153,"nodeType":"4628","messageId":"4629","endLine":449,"endColumn":155},{"ruleId":"4626","severity":1,"message":"4630","line":464,"column":102,"nodeType":"4628","messageId":"4629","endLine":464,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4630","line":465,"column":128,"nodeType":"4628","messageId":"4629","endLine":465,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4630","line":484,"column":102,"nodeType":"4628","messageId":"4629","endLine":484,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4630","line":485,"column":128,"nodeType":"4628","messageId":"4629","endLine":485,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4630","line":506,"column":51,"nodeType":"4628","messageId":"4629","endLine":506,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4630","line":514,"column":43,"nodeType":"4628","messageId":"4629","endLine":514,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":520,"column":52,"nodeType":"4628","messageId":"4629","endLine":520,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":576,"column":95,"nodeType":"4628","messageId":"4629","endLine":576,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4630","line":577,"column":77,"nodeType":"4628","messageId":"4629","endLine":577,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":578,"column":69,"nodeType":"4628","messageId":"4629","endLine":578,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":578,"column":101,"nodeType":"4628","messageId":"4629","endLine":578,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4627","line":582,"column":84,"nodeType":"4628","messageId":"4629","endLine":582,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4630","line":583,"column":84,"nodeType":"4628","messageId":"4629","endLine":583,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":589,"column":87,"nodeType":"4628","messageId":"4629","endLine":589,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4630","line":612,"column":57,"nodeType":"4628","messageId":"4629","endLine":612,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":614,"column":55,"nodeType":"4628","messageId":"4629","endLine":614,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4630","line":616,"column":70,"nodeType":"4628","messageId":"4629","endLine":616,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":617,"column":63,"nodeType":"4628","messageId":"4629","endLine":617,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":47,"column":54,"nodeType":"4628","messageId":"4629","endLine":47,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":50,"column":48,"nodeType":"4628","messageId":"4629","endLine":50,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":58,"column":48,"nodeType":"4628","messageId":"4629","endLine":58,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":66,"column":37,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":48,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":118,"column":39,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":137,"column":24,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":198,"column":140,"nodeType":"4628","messageId":"4629","endLine":198,"endColumn":142},{"ruleId":"4691","severity":1,"message":"4692","line":199,"column":33,"nodeType":"4655","endLine":199,"endColumn":119},{"ruleId":"4626","severity":1,"message":"4627","line":199,"column":93,"nodeType":"4628","messageId":"4629","endLine":199,"endColumn":95},{"ruleId":"4631","severity":1,"message":"4723","line":4,"column":52,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":47,"column":88,"nodeType":"4628","messageId":"4629","endLine":47,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":49,"column":48,"nodeType":"4628","messageId":"4629","endLine":49,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":58,"column":48,"nodeType":"4628","messageId":"4629","endLine":58,"endColumn":50},{"ruleId":"4658","severity":1,"message":"4659","line":69,"column":74,"nodeType":"4628","messageId":"4660","endLine":69,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":80,"column":60,"nodeType":"4628","messageId":"4629","endLine":80,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":44,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":126,"column":37,"nodeType":"4628","messageId":"4629","endLine":126,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":130,"column":111,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":139,"column":106,"nodeType":"4628","messageId":"4629","endLine":139,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":157,"column":37,"nodeType":"4628","messageId":"4629","endLine":157,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":194,"column":37,"nodeType":"4628","messageId":"4629","endLine":194,"endColumn":39},{"ruleId":"4658","severity":1,"message":"4659","line":201,"column":142,"nodeType":"4628","messageId":"4660","endLine":201,"endColumn":143},{"ruleId":"4658","severity":1,"message":"4659","line":212,"column":134,"nodeType":"4628","messageId":"4660","endLine":212,"endColumn":135},{"ruleId":"4658","severity":1,"message":"4659","line":256,"column":201,"nodeType":"4628","messageId":"4660","endLine":256,"endColumn":202},{"ruleId":"4658","severity":1,"message":"4659","line":266,"column":204,"nodeType":"4628","messageId":"4660","endLine":266,"endColumn":205},{"ruleId":"4658","severity":1,"message":"4659","line":291,"column":208,"nodeType":"4628","messageId":"4660","endLine":291,"endColumn":209},{"ruleId":"4691","severity":1,"message":"4692","line":41,"column":37,"nodeType":"4655","endLine":41,"endColumn":89},{"ruleId":"4691","severity":1,"message":"4692","line":52,"column":45,"nodeType":"4655","endLine":52,"endColumn":48},{"ruleId":"4691","severity":1,"message":"4692","line":53,"column":45,"nodeType":"4655","endLine":53,"endColumn":48},{"ruleId":"4691","severity":1,"message":"4692","line":63,"column":45,"nodeType":"4655","endLine":63,"endColumn":78},{"ruleId":"4691","severity":1,"message":"4692","line":69,"column":45,"nodeType":"4655","endLine":69,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":85,"column":63,"nodeType":"4628","messageId":"4629","endLine":85,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":74,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":74,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":100,"column":134,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":136},{"ruleId":"4626","severity":1,"message":"4627","line":113,"column":81,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":82,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":84},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":17,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":23},{"ruleId":"4661","severity":1,"message":"4662","line":34,"column":37,"nodeType":"4655","endLine":34,"endColumn":145},{"ruleId":"4661","severity":1,"message":"4662","line":37,"column":45,"nodeType":"4655","endLine":37,"endColumn":114},{"ruleId":"4661","severity":1,"message":"4662","line":45,"column":49,"nodeType":"4655","endLine":45,"endColumn":111},{"ruleId":"4661","severity":1,"message":"4662","line":51,"column":53,"nodeType":"4655","endLine":51,"endColumn":88},{"ruleId":"4661","severity":1,"message":"4662","line":55,"column":49,"nodeType":"4655","endLine":55,"endColumn":119},{"ruleId":"4661","severity":1,"message":"4662","line":59,"column":53,"nodeType":"4655","endLine":59,"endColumn":88},{"ruleId":"4661","severity":1,"message":"4662","line":65,"column":49,"nodeType":"4655","endLine":65,"endColumn":121},{"ruleId":"4661","severity":1,"message":"4662","line":71,"column":53,"nodeType":"4655","endLine":71,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4630","line":76,"column":27,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4630","line":76,"column":68,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":82,"column":31,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":88,"column":38,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":113,"column":30,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":119,"column":31,"nodeType":"4628","messageId":"4629","endLine":119,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":121,"column":30,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":26,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":32,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":38,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":63,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":104,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":106},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":40,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":32,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":78,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":127,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":137,"column":42,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":137,"column":93,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":139,"column":37,"nodeType":"4628","messageId":"4629","endLine":139,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":139,"column":85,"nodeType":"4628","messageId":"4629","endLine":139,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":139,"column":139,"nodeType":"4628","messageId":"4629","endLine":139,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":141,"column":44,"nodeType":"4628","messageId":"4629","endLine":141,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":34,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":34,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":176,"column":43,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":196,"column":47,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":207,"column":38,"nodeType":"4628","messageId":"4629","endLine":207,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":207,"column":87,"nodeType":"4628","messageId":"4629","endLine":207,"endColumn":89},{"ruleId":"4631","severity":1,"message":"4738","line":249,"column":17,"nodeType":"4633","messageId":"4634","endLine":249,"endColumn":32},{"ruleId":"4636","severity":1,"message":"4637","line":262,"column":64,"nodeType":"4638","messageId":"4639","endLine":262,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4630","line":263,"column":36,"nodeType":"4628","messageId":"4629","endLine":263,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":264,"column":54,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":264,"column":94,"nodeType":"4628","messageId":"4629","endLine":264,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":272,"column":54,"nodeType":"4628","messageId":"4629","endLine":272,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":272,"column":108,"nodeType":"4628","messageId":"4629","endLine":272,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4630","line":289,"column":28,"nodeType":"4628","messageId":"4629","endLine":289,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":293,"column":33,"nodeType":"4628","messageId":"4629","endLine":293,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":293,"column":90,"nodeType":"4628","messageId":"4629","endLine":293,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":15,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":326,"column":37,"nodeType":"4628","messageId":"4629","endLine":326,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":332,"column":48,"nodeType":"4628","messageId":"4629","endLine":332,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":349,"column":64,"nodeType":"4628","messageId":"4629","endLine":349,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":366,"column":71,"nodeType":"4628","messageId":"4629","endLine":366,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4630","line":366,"column":110,"nodeType":"4628","messageId":"4629","endLine":366,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":374,"column":68,"nodeType":"4628","messageId":"4629","endLine":374,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":383,"column":71,"nodeType":"4628","messageId":"4629","endLine":383,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":383,"column":110,"nodeType":"4628","messageId":"4629","endLine":383,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":390,"column":52,"nodeType":"4628","messageId":"4629","endLine":390,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":434,"column":49,"nodeType":"4628","messageId":"4629","endLine":434,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":439,"column":68,"nodeType":"4628","messageId":"4629","endLine":439,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":439,"column":91,"nodeType":"4628","messageId":"4629","endLine":439,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4630","line":448,"column":147,"nodeType":"4628","messageId":"4629","endLine":448,"endColumn":149},{"ruleId":"4626","severity":1,"message":"4630","line":452,"column":66,"nodeType":"4628","messageId":"4629","endLine":452,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":466,"column":66,"nodeType":"4628","messageId":"4629","endLine":466,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":486,"column":85,"nodeType":"4628","messageId":"4629","endLine":486,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":486,"column":154,"nodeType":"4628","messageId":"4629","endLine":486,"endColumn":156},{"ruleId":"4626","severity":1,"message":"4627","line":486,"column":221,"nodeType":"4628","messageId":"4629","endLine":486,"endColumn":223},{"ruleId":"4626","severity":1,"message":"4627","line":486,"column":294,"nodeType":"4628","messageId":"4629","endLine":486,"endColumn":296},{"ruleId":"4626","severity":1,"message":"4627","line":486,"column":363,"nodeType":"4628","messageId":"4629","endLine":486,"endColumn":365},{"ruleId":"4626","severity":1,"message":"4627","line":486,"column":438,"nodeType":"4628","messageId":"4629","endLine":486,"endColumn":440},{"ruleId":"4626","severity":1,"message":"4627","line":486,"column":509,"nodeType":"4628","messageId":"4629","endLine":486,"endColumn":511},{"ruleId":"4626","severity":1,"message":"4627","line":497,"column":109,"nodeType":"4628","messageId":"4629","endLine":497,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4630","line":504,"column":84,"nodeType":"4628","messageId":"4629","endLine":504,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":504,"column":130,"nodeType":"4628","messageId":"4629","endLine":504,"endColumn":132},{"ruleId":"4626","severity":1,"message":"4627","line":504,"column":154,"nodeType":"4628","messageId":"4629","endLine":504,"endColumn":156},{"ruleId":"4626","severity":1,"message":"4627","line":508,"column":79,"nodeType":"4628","messageId":"4629","endLine":508,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":511,"column":91,"nodeType":"4628","messageId":"4629","endLine":511,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":514,"column":91,"nodeType":"4628","messageId":"4629","endLine":514,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":80,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":98,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":116,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":118},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":187,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":189},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":205,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":207},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":223,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":225},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":268,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":270},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":286,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":288},{"ruleId":"4626","severity":1,"message":"4627","line":522,"column":304,"nodeType":"4628","messageId":"4629","endLine":522,"endColumn":306},{"ruleId":"4626","severity":1,"message":"4627","line":559,"column":95,"nodeType":"4628","messageId":"4629","endLine":559,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4627","line":562,"column":95,"nodeType":"4628","messageId":"4629","endLine":562,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":87,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":105,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":107},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":123,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":125},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":194,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":196},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":212,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":214},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":230,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":232},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":275,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":277},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":293,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":295},{"ruleId":"4626","severity":1,"message":"4627","line":569,"column":311,"nodeType":"4628","messageId":"4629","endLine":569,"endColumn":313},{"ruleId":"4626","severity":1,"message":"4627","line":570,"column":83,"nodeType":"4628","messageId":"4629","endLine":570,"endColumn":85},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4688","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4697","line":4,"column":21,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4698","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4651","line":5,"column":20,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":36},{"ruleId":"4631","severity":1,"message":"4663","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4700","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":10},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":71,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":73},{"ruleId":"4631","severity":1,"message":"4652","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":20},{"ruleId":"4631","severity":1,"message":"4759","line":5,"column":22,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":36},{"ruleId":"4631","severity":1,"message":"4760","line":7,"column":10,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4761","line":7,"column":26,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":33},{"ruleId":"4631","severity":1,"message":"4762","line":9,"column":10,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":19},{"ruleId":"4626","severity":1,"message":"4630","line":21,"column":23,"nodeType":"4628","messageId":"4629","endLine":21,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4763","line":31,"column":36,"nodeType":"4633","messageId":"4634","endLine":31,"endColumn":51},{"ruleId":"4631","severity":1,"message":"4764","line":31,"column":53,"nodeType":"4633","messageId":"4634","endLine":31,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4630","line":32,"column":80,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":41,"column":34,"nodeType":"4628","messageId":"4629","endLine":41,"endColumn":36},{"ruleId":"4661","severity":1,"message":"4662","line":46,"column":29,"nodeType":"4655","endLine":46,"endColumn":81},{"ruleId":"4661","severity":1,"message":"4662","line":58,"column":29,"nodeType":"4655","endLine":58,"endColumn":145},{"ruleId":"4626","severity":1,"message":"4627","line":58,"column":80,"nodeType":"4628","messageId":"4629","endLine":58,"endColumn":82},{"ruleId":"4661","severity":1,"message":"4662","line":63,"column":29,"nodeType":"4655","endLine":63,"endColumn":210},{"ruleId":"4626","severity":1,"message":"4627","line":63,"column":135,"nodeType":"4628","messageId":"4629","endLine":63,"endColumn":137},{"ruleId":"4661","severity":1,"message":"4662","line":71,"column":21,"nodeType":"4655","endLine":71,"endColumn":173},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":107,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":109},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4688","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4697","line":4,"column":21,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4698","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4651","line":5,"column":20,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":36},{"ruleId":"4631","severity":1,"message":"4700","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":10},{"ruleId":"4658","severity":1,"message":"4659","line":83,"column":46,"nodeType":"4628","messageId":"4660","endLine":83,"endColumn":47},{"ruleId":"4631","severity":1,"message":"4765","line":92,"column":17,"nodeType":"4633","messageId":"4634","endLine":92,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4733","line":92,"column":28,"nodeType":"4633","messageId":"4634","endLine":92,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":142,"column":99,"nodeType":"4628","messageId":"4629","endLine":142,"endColumn":101},{"ruleId":"4631","severity":1,"message":"4690","line":3,"column":10,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4766","line":3,"column":18,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":29},{"ruleId":"4631","severity":1,"message":"4697","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4699","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":20},{"ruleId":"4631","severity":1,"message":"4663","line":8,"column":8,"nodeType":"4633","messageId":"4634","endLine":8,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4700","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":10},{"ruleId":"4631","severity":1,"message":"4767","line":11,"column":10,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":22},{"ruleId":"4631","severity":1,"message":"4768","line":14,"column":28,"nodeType":"4633","messageId":"4634","endLine":14,"endColumn":33},{"ruleId":"4631","severity":1,"message":"4769","line":14,"column":35,"nodeType":"4633","messageId":"4634","endLine":14,"endColumn":40},{"ruleId":"4631","severity":1,"message":"4673","line":17,"column":8,"nodeType":"4633","messageId":"4634","endLine":17,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":60,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":164,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":166},{"ruleId":"4626","severity":1,"message":"4627","line":110,"column":17,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4765","line":142,"column":38,"nodeType":"4633","messageId":"4634","endLine":142,"endColumn":47},{"ruleId":"4631","severity":1,"message":"4702","line":144,"column":15,"nodeType":"4633","messageId":"4634","endLine":144,"endColumn":27},{"ruleId":"4691","severity":1,"message":"4692","line":163,"column":29,"nodeType":"4655","endLine":163,"endColumn":86},{"ruleId":"4661","severity":1,"message":"4662","line":186,"column":37,"nodeType":"4655","endLine":186,"endColumn":80},{"ruleId":"4661","severity":1,"message":"4662","line":196,"column":33,"nodeType":"4655","endLine":196,"endColumn":214},{"ruleId":"4626","severity":1,"message":"4627","line":196,"column":139,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":141},{"ruleId":"4653","severity":1,"message":"4654","line":200,"column":29,"nodeType":"4655","endLine":203,"endColumn":49},{"ruleId":"4661","severity":1,"message":"4662","line":204,"column":33,"nodeType":"4655","endLine":204,"endColumn":214},{"ruleId":"4626","severity":1,"message":"4627","line":204,"column":139,"nodeType":"4628","messageId":"4629","endLine":204,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":224,"column":81,"nodeType":"4628","messageId":"4629","endLine":224,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":228,"column":87,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":236,"column":97,"nodeType":"4628","messageId":"4629","endLine":236,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":241,"column":109,"nodeType":"4628","messageId":"4629","endLine":241,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":245,"column":118,"nodeType":"4628","messageId":"4629","endLine":245,"endColumn":120},{"ruleId":"4661","severity":1,"message":"4662","line":246,"column":109,"nodeType":"4655","endLine":246,"endColumn":232},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":93,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":116,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":118},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":151,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":153},{"ruleId":"4626","severity":1,"message":"4627","line":266,"column":186,"nodeType":"4628","messageId":"4629","endLine":266,"endColumn":188},{"ruleId":"4626","severity":1,"message":"4627","line":270,"column":75,"nodeType":"4628","messageId":"4629","endLine":270,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":281,"column":73,"nodeType":"4628","messageId":"4629","endLine":281,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":311,"column":83,"nodeType":"4628","messageId":"4629","endLine":311,"endColumn":85},{"ruleId":"4631","severity":1,"message":"4681","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4770","line":7,"column":10,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":29},{"ruleId":"4631","severity":1,"message":"4682","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4771","line":19,"column":8,"nodeType":"4633","messageId":"4634","endLine":19,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":155,"column":60,"nodeType":"4628","messageId":"4629","endLine":155,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":60,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":182,"column":56,"nodeType":"4628","messageId":"4629","endLine":182,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":69,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":188,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":190},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":233,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":235},{"ruleId":"4626","severity":1,"message":"4627","line":320,"column":48,"nodeType":"4628","messageId":"4629","endLine":320,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":378,"column":65,"nodeType":"4628","messageId":"4629","endLine":378,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":378,"column":184,"nodeType":"4628","messageId":"4629","endLine":378,"endColumn":186},{"ruleId":"4626","severity":1,"message":"4627","line":378,"column":229,"nodeType":"4628","messageId":"4629","endLine":378,"endColumn":231},{"ruleId":"4631","severity":1,"message":"4772","line":393,"column":13,"nodeType":"4633","messageId":"4634","endLine":393,"endColumn":23},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":103,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":105},{"ruleId":"4626","severity":1,"message":"4627","line":417,"column":107,"nodeType":"4628","messageId":"4629","endLine":417,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4630","line":430,"column":125,"nodeType":"4628","messageId":"4629","endLine":430,"endColumn":127},{"ruleId":"4661","severity":1,"message":"4662","line":441,"column":61,"nodeType":"4655","endLine":441,"endColumn":136},{"ruleId":"4661","severity":1,"message":"4662","line":451,"column":69,"nodeType":"4655","endLine":451,"endColumn":254},{"ruleId":"4626","severity":1,"message":"4627","line":451,"column":177,"nodeType":"4628","messageId":"4629","endLine":451,"endColumn":179},{"ruleId":"4653","severity":1,"message":"4654","line":455,"column":65,"nodeType":"4655","endLine":458,"endColumn":85},{"ruleId":"4661","severity":1,"message":"4662","line":459,"column":69,"nodeType":"4655","endLine":459,"endColumn":254},{"ruleId":"4626","severity":1,"message":"4627","line":459,"column":177,"nodeType":"4628","messageId":"4629","endLine":459,"endColumn":179},{"ruleId":"4658","severity":1,"message":"4659","line":470,"column":103,"nodeType":"4628","messageId":"4660","endLine":470,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":474,"column":292,"nodeType":"4628","messageId":"4629","endLine":474,"endColumn":294},{"ruleId":"4626","severity":1,"message":"4627","line":497,"column":135,"nodeType":"4628","messageId":"4629","endLine":497,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4627","line":503,"column":139,"nodeType":"4628","messageId":"4629","endLine":503,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":510,"column":143,"nodeType":"4628","messageId":"4629","endLine":510,"endColumn":145},{"ruleId":"4661","severity":1,"message":"4662","line":513,"column":133,"nodeType":"4655","endLine":513,"endColumn":220},{"ruleId":"4626","severity":1,"message":"4627","line":518,"column":147,"nodeType":"4628","messageId":"4629","endLine":518,"endColumn":149},{"ruleId":"4626","severity":1,"message":"4627","line":574,"column":144,"nodeType":"4628","messageId":"4629","endLine":574,"endColumn":146},{"ruleId":"4626","severity":1,"message":"4627","line":574,"column":312,"nodeType":"4628","messageId":"4629","endLine":574,"endColumn":314},{"ruleId":"4626","severity":1,"message":"4627","line":595,"column":127,"nodeType":"4628","messageId":"4629","endLine":595,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":601,"column":131,"nodeType":"4628","messageId":"4629","endLine":601,"endColumn":133},{"ruleId":"4626","severity":1,"message":"4627","line":608,"column":135,"nodeType":"4628","messageId":"4629","endLine":608,"endColumn":137},{"ruleId":"4661","severity":1,"message":"4662","line":611,"column":125,"nodeType":"4655","endLine":611,"endColumn":212},{"ruleId":"4626","severity":1,"message":"4627","line":616,"column":139,"nodeType":"4628","messageId":"4629","endLine":616,"endColumn":141},{"ruleId":"4631","severity":1,"message":"4688","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4767","line":4,"column":21,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":33},{"ruleId":"4631","severity":1,"message":"4773","line":4,"column":35,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":43},{"ruleId":"4631","severity":1,"message":"4697","line":4,"column":45,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":49},{"ruleId":"4631","severity":1,"message":"4774","line":4,"column":51,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":57},{"ruleId":"4631","severity":1,"message":"4775","line":4,"column":59,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":69},{"ruleId":"4631","severity":1,"message":"4704","line":4,"column":71,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":80},{"ruleId":"4631","severity":1,"message":"4776","line":98,"column":17,"nodeType":"4633","messageId":"4634","endLine":98,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4765","line":98,"column":17,"nodeType":"4633","messageId":"4634","endLine":98,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":138,"column":75,"nodeType":"4628","messageId":"4629","endLine":138,"endColumn":77},{"ruleId":"4631","severity":1,"message":"4697","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4700","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":10},{"ruleId":"4631","severity":1,"message":"4777","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":20},{"ruleId":"4661","severity":1,"message":"4662","line":109,"column":33,"nodeType":"4655","endLine":109,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":53,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":118,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":81,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":87,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":97,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":148,"column":109,"nodeType":"4628","messageId":"4629","endLine":148,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":152,"column":118,"nodeType":"4628","messageId":"4629","endLine":152,"endColumn":120},{"ruleId":"4661","severity":1,"message":"4662","line":153,"column":109,"nodeType":"4655","endLine":153,"endColumn":236},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":93,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":116,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":118},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":151,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":153},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":186,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":188},{"ruleId":"4626","severity":1,"message":"4627","line":175,"column":79,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":179,"column":81,"nodeType":"4628","messageId":"4629","endLine":179,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":184,"column":82,"nodeType":"4628","messageId":"4629","endLine":184,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":189,"column":80,"nodeType":"4628","messageId":"4629","endLine":189,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":207,"column":81,"nodeType":"4628","messageId":"4629","endLine":207,"endColumn":83},{"ruleId":"4658","severity":1,"message":"4659","line":50,"column":61,"nodeType":"4628","messageId":"4660","endLine":50,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":58,"column":38,"nodeType":"4628","messageId":"4629","endLine":58,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":134,"column":44,"nodeType":"4628","messageId":"4629","endLine":134,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":53,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":93,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":50,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":90,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":50,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":90,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":50,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":53,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":93,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":170,"column":53,"nodeType":"4628","messageId":"4629","endLine":170,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":173,"column":53,"nodeType":"4628","messageId":"4629","endLine":173,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":197,"column":39,"nodeType":"4628","messageId":"4629","endLine":197,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":79,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":256,"column":127,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":256,"column":171,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":173},{"ruleId":"4626","severity":1,"message":"4627","line":274,"column":44,"nodeType":"4628","messageId":"4629","endLine":274,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":290,"column":63,"nodeType":"4628","messageId":"4629","endLine":290,"endColumn":65},{"ruleId":"4631","severity":1,"message":"4778","line":313,"column":15,"nodeType":"4633","messageId":"4634","endLine":313,"endColumn":25},{"ruleId":"4658","severity":1,"message":"4659","line":392,"column":42,"nodeType":"4628","messageId":"4660","endLine":392,"endColumn":43},{"ruleId":"4658","severity":1,"message":"4659","line":392,"column":59,"nodeType":"4628","messageId":"4660","endLine":392,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":404,"column":23,"nodeType":"4628","messageId":"4629","endLine":404,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4738","line":440,"column":17,"nodeType":"4633","messageId":"4634","endLine":440,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":455,"column":22,"nodeType":"4628","messageId":"4629","endLine":455,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4627","line":455,"column":41,"nodeType":"4628","messageId":"4629","endLine":455,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":457,"column":24,"nodeType":"4628","messageId":"4629","endLine":457,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":216,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":218},{"ruleId":"4626","severity":1,"message":"4627","line":586,"column":73,"nodeType":"4628","messageId":"4629","endLine":586,"endColumn":75},{"ruleId":"4631","severity":1,"message":"4779","line":629,"column":28,"nodeType":"4633","messageId":"4634","endLine":629,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":631,"column":176,"nodeType":"4628","messageId":"4629","endLine":631,"endColumn":178},{"ruleId":"4626","severity":1,"message":"4627","line":663,"column":53,"nodeType":"4628","messageId":"4629","endLine":663,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":707,"column":118,"nodeType":"4628","messageId":"4629","endLine":707,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":709,"column":81,"nodeType":"4628","messageId":"4629","endLine":709,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":713,"column":87,"nodeType":"4628","messageId":"4629","endLine":713,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":721,"column":97,"nodeType":"4628","messageId":"4629","endLine":721,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":726,"column":109,"nodeType":"4628","messageId":"4629","endLine":726,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":730,"column":118,"nodeType":"4628","messageId":"4629","endLine":730,"endColumn":120},{"ruleId":"4661","severity":1,"message":"4662","line":731,"column":109,"nodeType":"4655","endLine":731,"endColumn":235},{"ruleId":"4626","severity":1,"message":"4627","line":748,"column":97,"nodeType":"4628","messageId":"4629","endLine":748,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":748,"column":120,"nodeType":"4628","messageId":"4629","endLine":748,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4627","line":748,"column":156,"nodeType":"4628","messageId":"4629","endLine":748,"endColumn":158},{"ruleId":"4626","severity":1,"message":"4627","line":748,"column":192,"nodeType":"4628","messageId":"4629","endLine":748,"endColumn":194},{"ruleId":"4626","severity":1,"message":"4627","line":751,"column":78,"nodeType":"4628","messageId":"4629","endLine":751,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":756,"column":86,"nodeType":"4628","messageId":"4629","endLine":756,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":761,"column":87,"nodeType":"4628","messageId":"4629","endLine":761,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":766,"column":85,"nodeType":"4628","messageId":"4629","endLine":766,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4630","line":797,"column":60,"nodeType":"4628","messageId":"4629","endLine":797,"endColumn":62},{"ruleId":"4661","severity":1,"message":"4662","line":800,"column":37,"nodeType":"4655","endLine":800,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":810,"column":60,"nodeType":"4628","messageId":"4629","endLine":810,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":834,"column":60,"nodeType":"4628","messageId":"4629","endLine":834,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":841,"column":118,"nodeType":"4628","messageId":"4629","endLine":841,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":843,"column":81,"nodeType":"4628","messageId":"4629","endLine":843,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":847,"column":87,"nodeType":"4628","messageId":"4629","endLine":847,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":855,"column":97,"nodeType":"4628","messageId":"4629","endLine":855,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":860,"column":109,"nodeType":"4628","messageId":"4629","endLine":860,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":864,"column":118,"nodeType":"4628","messageId":"4629","endLine":864,"endColumn":120},{"ruleId":"4661","severity":1,"message":"4662","line":865,"column":109,"nodeType":"4655","endLine":865,"endColumn":235},{"ruleId":"4626","severity":1,"message":"4627","line":882,"column":97,"nodeType":"4628","messageId":"4629","endLine":882,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":882,"column":120,"nodeType":"4628","messageId":"4629","endLine":882,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4627","line":882,"column":156,"nodeType":"4628","messageId":"4629","endLine":882,"endColumn":158},{"ruleId":"4626","severity":1,"message":"4627","line":882,"column":192,"nodeType":"4628","messageId":"4629","endLine":882,"endColumn":194},{"ruleId":"4626","severity":1,"message":"4627","line":885,"column":78,"nodeType":"4628","messageId":"4629","endLine":885,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":889,"column":84,"nodeType":"4628","messageId":"4629","endLine":889,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":894,"column":85,"nodeType":"4628","messageId":"4629","endLine":894,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":899,"column":83,"nodeType":"4628","messageId":"4629","endLine":899,"endColumn":85},{"ruleId":"4780","severity":1,"message":"4781","line":928,"column":33,"nodeType":"4655","endLine":930,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4630","line":953,"column":56,"nodeType":"4628","messageId":"4629","endLine":953,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":49,"column":48,"nodeType":"4628","messageId":"4629","endLine":49,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":40,"column":60,"nodeType":"4628","messageId":"4629","endLine":40,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4630","line":161,"column":48,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":166,"column":48,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":169,"column":169,"nodeType":"4628","messageId":"4629","endLine":169,"endColumn":171},{"ruleId":"4626","severity":1,"message":"4630","line":169,"column":470,"nodeType":"4628","messageId":"4629","endLine":169,"endColumn":472},{"ruleId":"4631","severity":1,"message":"4726","line":3,"column":8,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4782","line":4,"column":13,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":22},{"ruleId":"4631","severity":1,"message":"4726","line":4,"column":8,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":14},{"ruleId":"4691","severity":1,"message":"4692","line":39,"column":29,"nodeType":"4655","endLine":39,"endColumn":124},{"ruleId":"4626","severity":1,"message":"4627","line":48,"column":69,"nodeType":"4628","messageId":"4629","endLine":48,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":84,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":37,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":96,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":98,"column":68,"nodeType":"4628","messageId":"4629","endLine":98,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":116,"column":18,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4627","line":234,"column":53,"nodeType":"4628","messageId":"4629","endLine":234,"endColumn":55},{"ruleId":"4631","severity":1,"message":"4668","line":2,"column":17,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4656","line":2,"column":28,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":31},{"ruleId":"4631","severity":1,"message":"4657","line":2,"column":33,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":36},{"ruleId":"4631","severity":1,"message":"4783","line":2,"column":38,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":42},{"ruleId":"4631","severity":1,"message":"4687","line":3,"column":13,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4727","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4671","line":6,"column":8,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":21},{"ruleId":"4631","severity":1,"message":"4669","line":7,"column":10,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4784","line":8,"column":10,"nodeType":"4633","messageId":"4634","endLine":8,"endColumn":23},{"ruleId":"4631","severity":1,"message":"4785","line":8,"column":25,"nodeType":"4633","messageId":"4634","endLine":8,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":37,"column":36,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":37,"column":67,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":76,"column":49,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":58,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":60},{"ruleId":"4661","severity":1,"message":"4662","line":106,"column":29,"nodeType":"4655","endLine":106,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":120,"column":73,"nodeType":"4628","messageId":"4629","endLine":120,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":73,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":128,"column":66,"nodeType":"4628","messageId":"4629","endLine":128,"endColumn":68},{"ruleId":"4661","severity":1,"message":"4662","line":129,"column":41,"nodeType":"4655","endLine":129,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":70,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":127,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":68,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":135,"column":165,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":167},{"ruleId":"4631","severity":1,"message":"4786","line":5,"column":13,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":15},{"ruleId":"4631","severity":1,"message":"4787","line":6,"column":10,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":24},{"ruleId":"4661","severity":1,"message":"4662","line":65,"column":45,"nodeType":"4655","endLine":65,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":70,"column":142,"nodeType":"4628","messageId":"4629","endLine":70,"endColumn":144},{"ruleId":"4626","severity":1,"message":"4627","line":70,"column":223,"nodeType":"4628","messageId":"4629","endLine":70,"endColumn":225},{"ruleId":"4626","severity":1,"message":"4630","line":105,"column":18,"nodeType":"4628","messageId":"4629","endLine":105,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4630","line":22,"column":67,"nodeType":"4628","messageId":"4629","endLine":22,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":36,"column":52,"nodeType":"4628","messageId":"4629","endLine":36,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":38,"column":57,"nodeType":"4628","messageId":"4629","endLine":38,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":43,"column":64,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4630","line":122,"column":53,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":49,"column":34,"nodeType":"4628","messageId":"4629","endLine":49,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":73,"column":60,"nodeType":"4628","messageId":"4629","endLine":73,"endColumn":62},{"ruleId":"4658","severity":1,"message":"4659","line":113,"column":104,"nodeType":"4628","messageId":"4660","endLine":113,"endColumn":105},{"ruleId":"4626","severity":1,"message":"4627","line":128,"column":72,"nodeType":"4628","messageId":"4629","endLine":128,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":72,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":142,"column":49,"nodeType":"4628","messageId":"4629","endLine":142,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":115,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4627","line":150,"column":128,"nodeType":"4628","messageId":"4629","endLine":150,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4627","line":151,"column":76,"nodeType":"4628","messageId":"4629","endLine":151,"endColumn":78},{"ruleId":"4631","severity":1,"message":"4726","line":4,"column":8,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":14},{"ruleId":"4661","severity":1,"message":"4662","line":35,"column":33,"nodeType":"4655","endLine":35,"endColumn":137},{"ruleId":"4653","severity":1,"message":"4654","line":39,"column":29,"nodeType":"4655","endLine":42,"endColumn":49},{"ruleId":"4661","severity":1,"message":"4662","line":43,"column":33,"nodeType":"4655","endLine":43,"endColumn":137},{"ruleId":"4631","severity":1,"message":"4723","line":3,"column":52,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":56,"column":37,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":42,"column":60,"nodeType":"4628","messageId":"4629","endLine":42,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":62,"column":43,"nodeType":"4628","messageId":"4629","endLine":62,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":40,"column":60,"nodeType":"4628","messageId":"4629","endLine":40,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":62,"column":43,"nodeType":"4628","messageId":"4629","endLine":62,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":122,"column":52,"nodeType":"4628","messageId":"4629","endLine":122,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":128,"column":52,"nodeType":"4628","messageId":"4629","endLine":128,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":52,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":65,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4630","line":158,"column":46,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":173,"column":29,"nodeType":"4628","messageId":"4629","endLine":173,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4630","line":282,"column":52,"nodeType":"4628","messageId":"4629","endLine":282,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":306,"column":54,"nodeType":"4628","messageId":"4629","endLine":306,"endColumn":56},{"ruleId":"4631","severity":1,"message":"4699","line":10,"column":8,"nodeType":"4633","messageId":"4634","endLine":10,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4627","line":29,"column":51,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":31,"column":52,"nodeType":"4628","messageId":"4629","endLine":31,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":35,"column":55,"nodeType":"4628","messageId":"4629","endLine":35,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":36,"column":60,"nodeType":"4628","messageId":"4629","endLine":36,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":40,"column":45,"nodeType":"4628","messageId":"4629","endLine":40,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4630","line":42,"column":30,"nodeType":"4628","messageId":"4629","endLine":42,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":42,"column":99,"nodeType":"4628","messageId":"4629","endLine":42,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":45,"column":81,"nodeType":"4628","messageId":"4629","endLine":45,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":50,"column":49,"nodeType":"4628","messageId":"4629","endLine":50,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":55,"column":45,"nodeType":"4628","messageId":"4629","endLine":55,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4630","line":61,"column":29,"nodeType":"4628","messageId":"4629","endLine":61,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":61,"column":98,"nodeType":"4628","messageId":"4629","endLine":61,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":82,"column":34,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":82,"column":67,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":106,"column":35,"nodeType":"4628","messageId":"4629","endLine":106,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4630","line":110,"column":264,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":266},{"ruleId":"4626","severity":1,"message":"4627","line":111,"column":33,"nodeType":"4628","messageId":"4629","endLine":111,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":113,"column":51,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":53},{"ruleId":"4653","severity":1,"message":"4654","line":138,"column":41,"nodeType":"4655","endLine":141,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":154,"column":69,"nodeType":"4628","messageId":"4629","endLine":154,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":36,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":179,"column":54,"nodeType":"4628","messageId":"4629","endLine":179,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":54,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":78,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":187,"column":53,"nodeType":"4628","messageId":"4629","endLine":187,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":193,"column":36,"nodeType":"4628","messageId":"4629","endLine":193,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":208,"column":69,"nodeType":"4628","messageId":"4629","endLine":208,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":211,"column":63,"nodeType":"4628","messageId":"4629","endLine":211,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":212,"column":62,"nodeType":"4628","messageId":"4629","endLine":212,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":52,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":242,"column":57,"nodeType":"4628","messageId":"4629","endLine":242,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":246,"column":57,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":250,"column":57,"nodeType":"4628","messageId":"4629","endLine":250,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":38,"column":60,"nodeType":"4628","messageId":"4629","endLine":38,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4630","line":54,"column":46,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":43,"column":60,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":64,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":132,"column":60,"nodeType":"4628","messageId":"4629","endLine":132,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":60,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":62,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":62,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":177,"column":75,"nodeType":"4628","messageId":"4629","endLine":177,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":63,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":128,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":192,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":194},{"ruleId":"4626","severity":1,"message":"4627","line":53,"column":43,"nodeType":"4628","messageId":"4629","endLine":53,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":54,"column":38,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":59,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":106,"column":54,"nodeType":"4628","messageId":"4629","endLine":106,"endColumn":56},{"ruleId":"4653","severity":1,"message":"4654","line":33,"column":29,"nodeType":"4655","endLine":33,"endColumn":110},{"ruleId":"4631","severity":1,"message":"4759","line":14,"column":20,"nodeType":"4633","messageId":"4634","endLine":14,"endColumn":34},{"ruleId":"4631","severity":1,"message":"4704","line":16,"column":29,"nodeType":"4633","messageId":"4634","endLine":16,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":94,"column":37,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":248,"column":67,"nodeType":"4628","messageId":"4629","endLine":248,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":252,"column":79,"nodeType":"4628","messageId":"4629","endLine":252,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":256,"column":83,"nodeType":"4628","messageId":"4629","endLine":256,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":267,"column":64,"nodeType":"4628","messageId":"4629","endLine":267,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":51,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":82,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":114,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":116},{"ruleId":"4626","severity":1,"message":"4627","line":301,"column":40,"nodeType":"4628","messageId":"4629","endLine":301,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":65,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":82,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":327,"column":25,"nodeType":"4628","messageId":"4629","endLine":327,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4627","line":328,"column":62,"nodeType":"4628","messageId":"4629","endLine":328,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":330,"column":45,"nodeType":"4628","messageId":"4629","endLine":330,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":333,"column":53,"nodeType":"4628","messageId":"4629","endLine":333,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":339,"column":57,"nodeType":"4628","messageId":"4629","endLine":339,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":351,"column":42,"nodeType":"4628","messageId":"4629","endLine":351,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":397,"column":45,"nodeType":"4628","messageId":"4629","endLine":397,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":398,"column":88,"nodeType":"4628","messageId":"4629","endLine":398,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":417,"column":63,"nodeType":"4628","messageId":"4629","endLine":417,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":417,"column":94,"nodeType":"4628","messageId":"4629","endLine":417,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":417,"column":126,"nodeType":"4628","messageId":"4629","endLine":417,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":437,"column":41,"nodeType":"4628","messageId":"4629","endLine":437,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":438,"column":80,"nodeType":"4628","messageId":"4629","endLine":438,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4630","line":440,"column":77,"nodeType":"4628","messageId":"4629","endLine":440,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":443,"column":85,"nodeType":"4628","messageId":"4629","endLine":443,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":449,"column":89,"nodeType":"4628","messageId":"4629","endLine":449,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":461,"column":75,"nodeType":"4628","messageId":"4629","endLine":461,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":475,"column":43,"nodeType":"4628","messageId":"4629","endLine":475,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":475,"column":74,"nodeType":"4628","messageId":"4629","endLine":475,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":475,"column":106,"nodeType":"4628","messageId":"4629","endLine":475,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":488,"column":66,"nodeType":"4628","messageId":"4629","endLine":488,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":496,"column":45,"nodeType":"4628","messageId":"4629","endLine":496,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":497,"column":87,"nodeType":"4628","messageId":"4629","endLine":497,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":517,"column":63,"nodeType":"4628","messageId":"4629","endLine":517,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":517,"column":94,"nodeType":"4628","messageId":"4629","endLine":517,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":517,"column":126,"nodeType":"4628","messageId":"4629","endLine":517,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":539,"column":79,"nodeType":"4628","messageId":"4629","endLine":539,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4630","line":541,"column":80,"nodeType":"4628","messageId":"4629","endLine":541,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":544,"column":92,"nodeType":"4628","messageId":"4629","endLine":544,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":550,"column":96,"nodeType":"4628","messageId":"4629","endLine":550,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":563,"column":80,"nodeType":"4628","messageId":"4629","endLine":563,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":578,"column":47,"nodeType":"4628","messageId":"4629","endLine":578,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":578,"column":78,"nodeType":"4628","messageId":"4629","endLine":578,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":578,"column":110,"nodeType":"4628","messageId":"4629","endLine":578,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":599,"column":45,"nodeType":"4628","messageId":"4629","endLine":599,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":600,"column":87,"nodeType":"4628","messageId":"4629","endLine":600,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":619,"column":63,"nodeType":"4628","messageId":"4629","endLine":619,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":619,"column":94,"nodeType":"4628","messageId":"4629","endLine":619,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":619,"column":126,"nodeType":"4628","messageId":"4629","endLine":619,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":643,"column":79,"nodeType":"4628","messageId":"4629","endLine":643,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4630","line":645,"column":80,"nodeType":"4628","messageId":"4629","endLine":645,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":648,"column":92,"nodeType":"4628","messageId":"4629","endLine":648,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":654,"column":96,"nodeType":"4628","messageId":"4629","endLine":654,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":667,"column":80,"nodeType":"4628","messageId":"4629","endLine":667,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":682,"column":47,"nodeType":"4628","messageId":"4629","endLine":682,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":682,"column":78,"nodeType":"4628","messageId":"4629","endLine":682,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":682,"column":110,"nodeType":"4628","messageId":"4629","endLine":682,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":700,"column":31,"nodeType":"4628","messageId":"4629","endLine":700,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":704,"column":26,"nodeType":"4628","messageId":"4629","endLine":704,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":803,"column":73,"nodeType":"4628","messageId":"4629","endLine":803,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":804,"column":80,"nodeType":"4628","messageId":"4629","endLine":804,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":804,"column":99,"nodeType":"4628","messageId":"4629","endLine":804,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":810,"column":80,"nodeType":"4628","messageId":"4629","endLine":810,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":810,"column":99,"nodeType":"4628","messageId":"4629","endLine":810,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":848,"column":52,"nodeType":"4628","messageId":"4629","endLine":848,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":854,"column":52,"nodeType":"4628","messageId":"4629","endLine":854,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":913,"column":98,"nodeType":"4628","messageId":"4629","endLine":913,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":931,"column":54,"nodeType":"4628","messageId":"4629","endLine":931,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":931,"column":85,"nodeType":"4628","messageId":"4629","endLine":931,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":931,"column":117,"nodeType":"4628","messageId":"4629","endLine":931,"endColumn":119},{"ruleId":"4626","severity":1,"message":"4627","line":107,"column":55,"nodeType":"4628","messageId":"4629","endLine":107,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":105,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":107},{"ruleId":"4626","severity":1,"message":"4627","line":147,"column":98,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":94,"column":44,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":56,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":80,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":130,"column":56,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":130,"column":80,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":82},{"ruleId":"4641","severity":1,"message":"4788","line":132,"column":18,"nodeType":"4633","messageId":"4643","endLine":132,"endColumn":21},{"ruleId":"4626","severity":1,"message":"4630","line":148,"column":41,"nodeType":"4628","messageId":"4629","endLine":148,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":148,"column":69,"nodeType":"4628","messageId":"4629","endLine":148,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":148,"column":96,"nodeType":"4628","messageId":"4629","endLine":148,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4630","line":164,"column":41,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":164,"column":69,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4630","line":164,"column":96,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":324,"column":65,"nodeType":"4628","messageId":"4629","endLine":324,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":324,"column":90,"nodeType":"4628","messageId":"4629","endLine":324,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":331,"column":70,"nodeType":"4628","messageId":"4629","endLine":331,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":331,"column":95,"nodeType":"4628","messageId":"4629","endLine":331,"endColumn":97},{"ruleId":"4631","severity":1,"message":"4723","line":3,"column":52,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":56,"column":37,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":39},{"ruleId":"4631","severity":1,"message":"4789","line":3,"column":10,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":29},{"ruleId":"4631","severity":1,"message":"4790","line":3,"column":31,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":50},{"ruleId":"4631","severity":1,"message":"4723","line":3,"column":52,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":68},{"ruleId":"4631","severity":1,"message":"4791","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4663","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4687","line":9,"column":13,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":16},{"ruleId":"4626","severity":1,"message":"4627","line":42,"column":60,"nodeType":"4628","messageId":"4629","endLine":42,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":62,"column":43,"nodeType":"4628","messageId":"4629","endLine":62,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":40,"column":60,"nodeType":"4628","messageId":"4629","endLine":40,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":38,"column":60,"nodeType":"4628","messageId":"4629","endLine":38,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4630","line":54,"column":46,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":48},{"ruleId":"4631","severity":1,"message":"4699","line":10,"column":8,"nodeType":"4633","messageId":"4634","endLine":10,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4627","line":29,"column":51,"nodeType":"4628","messageId":"4629","endLine":29,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":31,"column":52,"nodeType":"4628","messageId":"4629","endLine":31,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":35,"column":55,"nodeType":"4628","messageId":"4629","endLine":35,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":36,"column":60,"nodeType":"4628","messageId":"4629","endLine":36,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":41,"column":44,"nodeType":"4628","messageId":"4629","endLine":41,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":44,"column":30,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":44,"column":99,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":52,"column":49,"nodeType":"4628","messageId":"4629","endLine":52,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":67,"column":34,"nodeType":"4628","messageId":"4629","endLine":67,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":67,"column":67,"nodeType":"4628","messageId":"4629","endLine":67,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":90,"column":35,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4630","line":94,"column":263,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":265},{"ruleId":"4626","severity":1,"message":"4627","line":95,"column":33,"nodeType":"4628","messageId":"4629","endLine":95,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":97,"column":51,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":53},{"ruleId":"4653","severity":1,"message":"4654","line":122,"column":41,"nodeType":"4655","endLine":125,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":138,"column":69,"nodeType":"4628","messageId":"4629","endLine":138,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":36,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":166,"column":36,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":52,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":54},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4697","line":4,"column":21,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4767","line":4,"column":27,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":39},{"ruleId":"4631","severity":1,"message":"4698","line":5,"column":10,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4651","line":5,"column":20,"nodeType":"4633","messageId":"4634","endLine":5,"endColumn":36},{"ruleId":"4631","severity":1,"message":"4663","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4700","line":11,"column":8,"nodeType":"4633","messageId":"4634","endLine":11,"endColumn":10},{"ruleId":"4631","severity":1,"message":"4701","line":17,"column":8,"nodeType":"4633","messageId":"4634","endLine":17,"endColumn":21},{"ruleId":"4631","severity":1,"message":"4765","line":93,"column":17,"nodeType":"4633","messageId":"4634","endLine":93,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":89,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":62,"column":43,"nodeType":"4628","messageId":"4629","endLine":62,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":52,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":52,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":134,"column":52,"nodeType":"4628","messageId":"4629","endLine":134,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":65,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4630","line":159,"column":46,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":29,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4630","line":287,"column":52,"nodeType":"4628","messageId":"4629","endLine":287,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":311,"column":54,"nodeType":"4628","messageId":"4629","endLine":311,"endColumn":56},{"ruleId":"4631","severity":1,"message":"4698","line":17,"column":10,"nodeType":"4633","messageId":"4634","endLine":17,"endColumn":18},{"ruleId":"4626","severity":1,"message":"4630","line":65,"column":40,"nodeType":"4628","messageId":"4629","endLine":65,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":78,"column":40,"nodeType":"4628","messageId":"4629","endLine":78,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":81,"column":44,"nodeType":"4628","messageId":"4629","endLine":81,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":83,"column":56,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":52,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":52,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":52,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":95,"column":52,"nodeType":"4628","messageId":"4629","endLine":95,"endColumn":54},{"ruleId":"4739","severity":1,"message":"4740","line":180,"column":72,"nodeType":"4741","messageId":"4742","endLine":180,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":126,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":128},{"ruleId":"4739","severity":1,"message":"4740","line":180,"column":132,"nodeType":"4741","messageId":"4742","endLine":180,"endColumn":134},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":169,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":171},{"ruleId":"4626","severity":1,"message":"4627","line":208,"column":44,"nodeType":"4628","messageId":"4629","endLine":208,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":216,"column":63,"nodeType":"4628","messageId":"4629","endLine":216,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":38,"column":60,"nodeType":"4628","messageId":"4629","endLine":38,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":73,"column":49,"nodeType":"4628","messageId":"4629","endLine":73,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4630","line":158,"column":32,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4630","line":163,"column":32,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4630","line":166,"column":153,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":155},{"ruleId":"4626","severity":1,"message":"4630","line":166,"column":451,"nodeType":"4628","messageId":"4629","endLine":166,"endColumn":453},{"ruleId":"4626","severity":1,"message":"4627","line":104,"column":28,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":106,"column":34,"nodeType":"4628","messageId":"4629","endLine":106,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":109,"column":30,"nodeType":"4628","messageId":"4629","endLine":109,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":111,"column":32,"nodeType":"4628","messageId":"4629","endLine":111,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":119,"column":29,"nodeType":"4628","messageId":"4629","endLine":119,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":121,"column":36,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":32,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":44,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":168,"column":44,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":184,"column":60,"nodeType":"4628","messageId":"4629","endLine":184,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4630","line":185,"column":63,"nodeType":"4628","messageId":"4629","endLine":185,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":77,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":211,"column":48,"nodeType":"4628","messageId":"4629","endLine":211,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":276,"column":81,"nodeType":"4628","messageId":"4629","endLine":276,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":309,"column":65,"nodeType":"4628","messageId":"4629","endLine":309,"endColumn":67},{"ruleId":"4739","severity":1,"message":"4740","line":323,"column":72,"nodeType":"4741","messageId":"4742","endLine":323,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":323,"column":126,"nodeType":"4628","messageId":"4629","endLine":323,"endColumn":128},{"ruleId":"4739","severity":1,"message":"4740","line":323,"column":132,"nodeType":"4741","messageId":"4742","endLine":323,"endColumn":134},{"ruleId":"4626","severity":1,"message":"4627","line":323,"column":169,"nodeType":"4628","messageId":"4629","endLine":323,"endColumn":171},{"ruleId":"4626","severity":1,"message":"4627","line":348,"column":44,"nodeType":"4628","messageId":"4629","endLine":348,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":355,"column":63,"nodeType":"4628","messageId":"4629","endLine":355,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":19,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":21},{"ruleId":"4626","severity":1,"message":"4627","line":415,"column":26,"nodeType":"4628","messageId":"4629","endLine":415,"endColumn":28},{"ruleId":"4636","severity":1,"message":"4637","line":491,"column":40,"nodeType":"4638","messageId":"4639","endLine":491,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":492,"column":23,"nodeType":"4628","messageId":"4629","endLine":492,"endColumn":25},{"ruleId":"4636","severity":1,"message":"4637","line":513,"column":48,"nodeType":"4638","messageId":"4639","endLine":513,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":514,"column":31,"nodeType":"4628","messageId":"4629","endLine":514,"endColumn":33},{"ruleId":"4636","severity":1,"message":"4637","line":524,"column":48,"nodeType":"4638","messageId":"4639","endLine":524,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":525,"column":31,"nodeType":"4628","messageId":"4629","endLine":525,"endColumn":33},{"ruleId":"4636","severity":1,"message":"4637","line":550,"column":44,"nodeType":"4638","messageId":"4639","endLine":550,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":551,"column":27,"nodeType":"4628","messageId":"4629","endLine":551,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":41,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":43},{"ruleId":"4636","severity":1,"message":"4637","line":576,"column":40,"nodeType":"4638","messageId":"4639","endLine":576,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":578,"column":36,"nodeType":"4628","messageId":"4629","endLine":578,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":579,"column":39,"nodeType":"4628","messageId":"4629","endLine":579,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":583,"column":31,"nodeType":"4628","messageId":"4629","endLine":583,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":586,"column":25,"nodeType":"4628","messageId":"4629","endLine":586,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4630","line":586,"column":41,"nodeType":"4628","messageId":"4629","endLine":586,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":590,"column":30,"nodeType":"4628","messageId":"4629","endLine":590,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":590,"column":72,"nodeType":"4628","messageId":"4629","endLine":590,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":594,"column":30,"nodeType":"4628","messageId":"4629","endLine":594,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":598,"column":30,"nodeType":"4628","messageId":"4629","endLine":598,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":598,"column":59,"nodeType":"4628","messageId":"4629","endLine":598,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4630","line":619,"column":41,"nodeType":"4628","messageId":"4629","endLine":619,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":620,"column":47,"nodeType":"4628","messageId":"4629","endLine":620,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":621,"column":34,"nodeType":"4628","messageId":"4629","endLine":621,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":621,"column":65,"nodeType":"4628","messageId":"4629","endLine":621,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":638,"column":42,"nodeType":"4628","messageId":"4629","endLine":638,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":639,"column":42,"nodeType":"4628","messageId":"4629","endLine":639,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":640,"column":45,"nodeType":"4628","messageId":"4629","endLine":640,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":646,"column":29,"nodeType":"4628","messageId":"4629","endLine":646,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":653,"column":29,"nodeType":"4628","messageId":"4629","endLine":653,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":665,"column":29,"nodeType":"4628","messageId":"4629","endLine":665,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":672,"column":29,"nodeType":"4628","messageId":"4629","endLine":672,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":686,"column":26,"nodeType":"4628","messageId":"4629","endLine":686,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":686,"column":75,"nodeType":"4628","messageId":"4629","endLine":686,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":687,"column":40,"nodeType":"4628","messageId":"4629","endLine":687,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":687,"column":50,"nodeType":"4628","messageId":"4629","endLine":687,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":687,"column":102,"nodeType":"4628","messageId":"4629","endLine":687,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":687,"column":198,"nodeType":"4628","messageId":"4629","endLine":687,"endColumn":200},{"ruleId":"4626","severity":1,"message":"4627","line":687,"column":253,"nodeType":"4628","messageId":"4629","endLine":687,"endColumn":255},{"ruleId":"4626","severity":1,"message":"4627","line":691,"column":32,"nodeType":"4628","messageId":"4629","endLine":691,"endColumn":34},{"ruleId":"4631","severity":1,"message":"4792","line":718,"column":13,"nodeType":"4633","messageId":"4634","endLine":718,"endColumn":28},{"ruleId":"4631","severity":1,"message":"4793","line":722,"column":13,"nodeType":"4633","messageId":"4634","endLine":722,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4630","line":735,"column":73,"nodeType":"4628","messageId":"4629","endLine":735,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":735,"column":119,"nodeType":"4628","messageId":"4629","endLine":735,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4630","line":735,"column":173,"nodeType":"4628","messageId":"4629","endLine":735,"endColumn":175},{"ruleId":"4626","severity":1,"message":"4627","line":735,"column":222,"nodeType":"4628","messageId":"4629","endLine":735,"endColumn":224},{"ruleId":"4626","severity":1,"message":"4627","line":863,"column":83,"nodeType":"4628","messageId":"4629","endLine":863,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":869,"column":70,"nodeType":"4628","messageId":"4629","endLine":869,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":893,"column":70,"nodeType":"4628","messageId":"4629","endLine":893,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":903,"column":69,"nodeType":"4628","messageId":"4629","endLine":903,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4630","line":903,"column":86,"nodeType":"4628","messageId":"4629","endLine":903,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":960,"column":63,"nodeType":"4628","messageId":"4629","endLine":960,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4630","line":962,"column":109,"nodeType":"4628","messageId":"4629","endLine":962,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":962,"column":129,"nodeType":"4628","messageId":"4629","endLine":962,"endColumn":131},{"ruleId":"4626","severity":1,"message":"4630","line":966,"column":102,"nodeType":"4628","messageId":"4629","endLine":966,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":966,"column":122,"nodeType":"4628","messageId":"4629","endLine":966,"endColumn":124},{"ruleId":"4626","severity":1,"message":"4627","line":987,"column":104,"nodeType":"4628","messageId":"4629","endLine":987,"endColumn":106},{"ruleId":"4626","severity":1,"message":"4627","line":988,"column":102,"nodeType":"4628","messageId":"4629","endLine":988,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":1004,"column":114,"nodeType":"4628","messageId":"4629","endLine":1004,"endColumn":116},{"ruleId":"4626","severity":1,"message":"4627","line":1006,"column":91,"nodeType":"4628","messageId":"4629","endLine":1006,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":1019,"column":76,"nodeType":"4628","messageId":"4629","endLine":1019,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4630","line":1025,"column":66,"nodeType":"4628","messageId":"4629","endLine":1025,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":1025,"column":84,"nodeType":"4628","messageId":"4629","endLine":1025,"endColumn":86},{"ruleId":"4631","severity":1,"message":"4726","line":6,"column":8,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":14},{"ruleId":"4626","severity":1,"message":"4630","line":87,"column":99,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":64,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":40,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":42},{"ruleId":"4636","severity":1,"message":"4794","line":162,"column":82,"nodeType":"4638","messageId":"4795","endLine":162,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":41,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":50,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":92,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":126,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":168,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":170},{"ruleId":"4636","severity":1,"message":"4794","line":170,"column":74,"nodeType":"4638","messageId":"4795","endLine":170,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":171,"column":37,"nodeType":"4628","messageId":"4629","endLine":171,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":51,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":94,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":172,"column":140,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":142},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":40,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":240,"column":35,"nodeType":"4628","messageId":"4629","endLine":240,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":241,"column":94,"nodeType":"4628","messageId":"4629","endLine":241,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":244,"column":94,"nodeType":"4628","messageId":"4629","endLine":244,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4630","line":262,"column":41,"nodeType":"4628","messageId":"4629","endLine":262,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":279,"column":47,"nodeType":"4628","messageId":"4629","endLine":279,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":302,"column":30,"nodeType":"4628","messageId":"4629","endLine":302,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":323,"column":53,"nodeType":"4628","messageId":"4629","endLine":323,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":327,"column":68,"nodeType":"4628","messageId":"4629","endLine":327,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":327,"column":138,"nodeType":"4628","messageId":"4629","endLine":327,"endColumn":140},{"ruleId":"4626","severity":1,"message":"4627","line":355,"column":47,"nodeType":"4628","messageId":"4629","endLine":355,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":366,"column":43,"nodeType":"4628","messageId":"4629","endLine":366,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":401,"column":34,"nodeType":"4628","messageId":"4629","endLine":401,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":418,"column":61,"nodeType":"4628","messageId":"4629","endLine":418,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":436,"column":30,"nodeType":"4628","messageId":"4629","endLine":436,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":450,"column":30,"nodeType":"4628","messageId":"4629","endLine":450,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":462,"column":41,"nodeType":"4628","messageId":"4629","endLine":462,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":469,"column":56,"nodeType":"4628","messageId":"4629","endLine":469,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":469,"column":126,"nodeType":"4628","messageId":"4629","endLine":469,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":472,"column":122,"nodeType":"4628","messageId":"4629","endLine":472,"endColumn":124},{"ruleId":"4626","severity":1,"message":"4627","line":472,"column":231,"nodeType":"4628","messageId":"4629","endLine":472,"endColumn":233},{"ruleId":"4626","severity":1,"message":"4630","line":481,"column":30,"nodeType":"4628","messageId":"4629","endLine":481,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":490,"column":30,"nodeType":"4628","messageId":"4629","endLine":490,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":500,"column":41,"nodeType":"4628","messageId":"4629","endLine":500,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":547,"column":28,"nodeType":"4628","messageId":"4629","endLine":547,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4630","line":547,"column":68,"nodeType":"4628","messageId":"4629","endLine":547,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":563,"column":118,"nodeType":"4628","messageId":"4629","endLine":563,"endColumn":120},{"ruleId":"4739","severity":1,"message":"4740","line":570,"column":45,"nodeType":"4741","messageId":"4742","endLine":570,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":570,"column":53,"nodeType":"4628","messageId":"4629","endLine":570,"endColumn":55},{"ruleId":"4739","severity":1,"message":"4740","line":570,"column":67,"nodeType":"4741","messageId":"4742","endLine":570,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":570,"column":75,"nodeType":"4628","messageId":"4629","endLine":570,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":570,"column":96,"nodeType":"4628","messageId":"4629","endLine":570,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":570,"column":130,"nodeType":"4628","messageId":"4629","endLine":570,"endColumn":132},{"ruleId":"4626","severity":1,"message":"4627","line":570,"column":182,"nodeType":"4628","messageId":"4629","endLine":570,"endColumn":184},{"ruleId":"4626","severity":1,"message":"4627","line":571,"column":55,"nodeType":"4628","messageId":"4629","endLine":571,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":572,"column":59,"nodeType":"4628","messageId":"4629","endLine":572,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":572,"column":118,"nodeType":"4628","messageId":"4629","endLine":572,"endColumn":120},{"ruleId":"4739","severity":1,"message":"4796","line":575,"column":56,"nodeType":"4741","messageId":"4742","endLine":575,"endColumn":58},{"ruleId":"4739","severity":1,"message":"4796","line":575,"column":81,"nodeType":"4741","messageId":"4742","endLine":575,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":89,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":114,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":116},{"ruleId":"4626","severity":1,"message":"4627","line":575,"column":170,"nodeType":"4628","messageId":"4629","endLine":575,"endColumn":172},{"ruleId":"4626","severity":1,"message":"4627","line":581,"column":52,"nodeType":"4628","messageId":"4629","endLine":581,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":598,"column":35,"nodeType":"4628","messageId":"4629","endLine":598,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":601,"column":40,"nodeType":"4628","messageId":"4629","endLine":601,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":619,"column":44,"nodeType":"4628","messageId":"4629","endLine":619,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":645,"column":34,"nodeType":"4628","messageId":"4629","endLine":645,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":657,"column":40,"nodeType":"4628","messageId":"4629","endLine":657,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":667,"column":78,"nodeType":"4628","messageId":"4629","endLine":667,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":689,"column":61,"nodeType":"4628","messageId":"4629","endLine":689,"endColumn":63},{"ruleId":"4631","severity":1,"message":"4797","line":700,"column":13,"nodeType":"4633","messageId":"4634","endLine":700,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4713","line":703,"column":13,"nodeType":"4633","messageId":"4634","endLine":703,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4627","line":712,"column":40,"nodeType":"4628","messageId":"4629","endLine":712,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":723,"column":43,"nodeType":"4628","messageId":"4629","endLine":723,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":724,"column":84,"nodeType":"4628","messageId":"4629","endLine":724,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":725,"column":55,"nodeType":"4628","messageId":"4629","endLine":725,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":732,"column":140,"nodeType":"4628","messageId":"4629","endLine":732,"endColumn":142},{"ruleId":"4626","severity":1,"message":"4627","line":763,"column":53,"nodeType":"4628","messageId":"4629","endLine":763,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":774,"column":52,"nodeType":"4628","messageId":"4629","endLine":774,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":805,"column":93,"nodeType":"4628","messageId":"4629","endLine":805,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":805,"column":164,"nodeType":"4628","messageId":"4629","endLine":805,"endColumn":166},{"ruleId":"4626","severity":1,"message":"4627","line":805,"column":239,"nodeType":"4628","messageId":"4629","endLine":805,"endColumn":241},{"ruleId":"4626","severity":1,"message":"4627","line":810,"column":96,"nodeType":"4628","messageId":"4629","endLine":810,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":810,"column":162,"nodeType":"4628","messageId":"4629","endLine":810,"endColumn":164},{"ruleId":"4691","severity":1,"message":"4692","line":811,"column":57,"nodeType":"4655","endLine":811,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":825,"column":101,"nodeType":"4628","messageId":"4629","endLine":825,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4627","line":829,"column":76,"nodeType":"4628","messageId":"4629","endLine":829,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":838,"column":71,"nodeType":"4628","messageId":"4629","endLine":838,"endColumn":73},{"ruleId":"4658","severity":1,"message":"4659","line":853,"column":73,"nodeType":"4628","messageId":"4660","endLine":853,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":859,"column":133,"nodeType":"4628","messageId":"4629","endLine":859,"endColumn":135},{"ruleId":"4626","severity":1,"message":"4627","line":860,"column":141,"nodeType":"4628","messageId":"4629","endLine":860,"endColumn":143},{"ruleId":"4626","severity":1,"message":"4627","line":861,"column":95,"nodeType":"4628","messageId":"4629","endLine":861,"endColumn":97},{"ruleId":"4626","severity":1,"message":"4627","line":861,"column":153,"nodeType":"4628","messageId":"4629","endLine":861,"endColumn":155},{"ruleId":"4626","severity":1,"message":"4627","line":865,"column":126,"nodeType":"4628","messageId":"4629","endLine":865,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":866,"column":141,"nodeType":"4628","messageId":"4629","endLine":866,"endColumn":143},{"ruleId":"4626","severity":1,"message":"4627","line":867,"column":96,"nodeType":"4628","messageId":"4629","endLine":867,"endColumn":98},{"ruleId":"4626","severity":1,"message":"4627","line":867,"column":147,"nodeType":"4628","messageId":"4629","endLine":867,"endColumn":149},{"ruleId":"4626","severity":1,"message":"4627","line":877,"column":77,"nodeType":"4628","messageId":"4629","endLine":877,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":881,"column":55,"nodeType":"4628","messageId":"4629","endLine":881,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":890,"column":342,"nodeType":"4628","messageId":"4629","endLine":890,"endColumn":344},{"ruleId":"4691","severity":1,"message":"4692","line":897,"column":73,"nodeType":"4655","endLine":897,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":900,"column":88,"nodeType":"4628","messageId":"4629","endLine":900,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":900,"column":134,"nodeType":"4628","messageId":"4629","endLine":900,"endColumn":136},{"ruleId":"4626","severity":1,"message":"4627","line":900,"column":158,"nodeType":"4628","messageId":"4629","endLine":900,"endColumn":160},{"ruleId":"4626","severity":1,"message":"4627","line":908,"column":88,"nodeType":"4628","messageId":"4629","endLine":908,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":908,"column":134,"nodeType":"4628","messageId":"4629","endLine":908,"endColumn":136},{"ruleId":"4626","severity":1,"message":"4627","line":908,"column":158,"nodeType":"4628","messageId":"4629","endLine":908,"endColumn":160},{"ruleId":"4691","severity":1,"message":"4692","line":921,"column":61,"nodeType":"4655","endLine":921,"endColumn":220},{"ruleId":"4626","severity":1,"message":"4627","line":921,"column":173,"nodeType":"4628","messageId":"4629","endLine":921,"endColumn":175},{"ruleId":"4626","severity":1,"message":"4627","line":922,"column":153,"nodeType":"4628","messageId":"4629","endLine":922,"endColumn":155},{"ruleId":"4626","severity":1,"message":"4627","line":937,"column":70,"nodeType":"4628","messageId":"4629","endLine":937,"endColumn":72},{"ruleId":"4631","severity":1,"message":"4700","line":2,"column":8,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":10},{"ruleId":"4626","severity":1,"message":"4627","line":35,"column":105,"nodeType":"4628","messageId":"4629","endLine":35,"endColumn":107},{"ruleId":"4626","severity":1,"message":"4627","line":35,"column":240,"nodeType":"4628","messageId":"4629","endLine":35,"endColumn":242},{"ruleId":"4626","severity":1,"message":"4627","line":35,"column":327,"nodeType":"4628","messageId":"4629","endLine":35,"endColumn":329},{"ruleId":"4626","severity":1,"message":"4627","line":36,"column":107,"nodeType":"4628","messageId":"4629","endLine":36,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4630","line":37,"column":107,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":109},{"ruleId":"4739","severity":1,"message":"4740","line":37,"column":254,"nodeType":"4741","messageId":"4742","endLine":37,"endColumn":256},{"ruleId":"4626","severity":1,"message":"4627","line":37,"column":290,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":292},{"ruleId":"4739","severity":1,"message":"4740","line":37,"column":304,"nodeType":"4741","messageId":"4742","endLine":37,"endColumn":306},{"ruleId":"4626","severity":1,"message":"4627","line":37,"column":340,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":342},{"ruleId":"4626","severity":1,"message":"4627","line":41,"column":111,"nodeType":"4628","messageId":"4629","endLine":41,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":34,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":72,"column":34,"nodeType":"4628","messageId":"4629","endLine":72,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":72,"column":62,"nodeType":"4628","messageId":"4629","endLine":72,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":80,"column":29,"nodeType":"4628","messageId":"4629","endLine":80,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":104,"column":36,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":77,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":115,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4627","line":113,"column":36,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":153,"column":48,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":165,"column":43,"nodeType":"4628","messageId":"4629","endLine":165,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":44,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":176,"column":49,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":176,"column":83,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":176,"column":119,"nodeType":"4628","messageId":"4629","endLine":176,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4627","line":179,"column":47,"nodeType":"4628","messageId":"4629","endLine":179,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":214,"column":44,"nodeType":"4628","messageId":"4629","endLine":214,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":229,"column":48,"nodeType":"4628","messageId":"4629","endLine":229,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":246,"column":44,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":46},{"ruleId":"4739","severity":1,"message":"4740","line":293,"column":138,"nodeType":"4741","messageId":"4742","endLine":293,"endColumn":140},{"ruleId":"4626","severity":1,"message":"4627","line":293,"column":192,"nodeType":"4628","messageId":"4629","endLine":293,"endColumn":194},{"ruleId":"4739","severity":1,"message":"4740","line":293,"column":198,"nodeType":"4741","messageId":"4742","endLine":293,"endColumn":200},{"ruleId":"4626","severity":1,"message":"4627","line":293,"column":235,"nodeType":"4628","messageId":"4629","endLine":293,"endColumn":237},{"ruleId":"4626","severity":1,"message":"4627","line":298,"column":31,"nodeType":"4628","messageId":"4629","endLine":298,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":302,"column":73,"nodeType":"4628","messageId":"4629","endLine":302,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4630","line":303,"column":73,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":309,"column":75,"nodeType":"4628","messageId":"4629","endLine":309,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":341,"column":40,"nodeType":"4628","messageId":"4629","endLine":341,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":348,"column":204,"nodeType":"4628","messageId":"4629","endLine":348,"endColumn":206},{"ruleId":"4626","severity":1,"message":"4627","line":351,"column":48,"nodeType":"4628","messageId":"4629","endLine":351,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":358,"column":67,"nodeType":"4628","messageId":"4629","endLine":358,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":364,"column":48,"nodeType":"4628","messageId":"4629","endLine":364,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":371,"column":67,"nodeType":"4628","messageId":"4629","endLine":371,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":396,"column":31,"nodeType":"4628","messageId":"4629","endLine":396,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":425,"column":27,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4630","line":425,"column":67,"nodeType":"4628","messageId":"4629","endLine":425,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":431,"column":39,"nodeType":"4628","messageId":"4629","endLine":431,"endColumn":41},{"ruleId":"4739","severity":1,"message":"4740","line":431,"column":49,"nodeType":"4741","messageId":"4742","endLine":431,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":431,"column":82,"nodeType":"4628","messageId":"4629","endLine":431,"endColumn":84},{"ruleId":"4739","severity":1,"message":"4740","line":431,"column":92,"nodeType":"4741","messageId":"4742","endLine":431,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":431,"column":125,"nodeType":"4628","messageId":"4629","endLine":431,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":534,"column":61,"nodeType":"4628","messageId":"4629","endLine":534,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4630","line":560,"column":70,"nodeType":"4628","messageId":"4629","endLine":560,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4630","line":572,"column":69,"nodeType":"4628","messageId":"4629","endLine":572,"endColumn":71},{"ruleId":"4691","severity":1,"message":"4692","line":631,"column":101,"nodeType":"4655","endLine":631,"endColumn":219},{"ruleId":"4626","severity":1,"message":"4630","line":640,"column":119,"nodeType":"4628","messageId":"4629","endLine":640,"endColumn":121},{"ruleId":"4691","severity":1,"message":"4692","line":642,"column":109,"nodeType":"4655","endLine":642,"endColumn":228},{"ruleId":"4691","severity":1,"message":"4692","line":702,"column":97,"nodeType":"4655","endLine":702,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4630","line":712,"column":115,"nodeType":"4628","messageId":"4629","endLine":712,"endColumn":117},{"ruleId":"4691","severity":1,"message":"4692","line":714,"column":105,"nodeType":"4655","endLine":714,"endColumn":224},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":73,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":40,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":83,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":127,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":314,"column":216,"nodeType":"4628","messageId":"4629","endLine":314,"endColumn":218},{"ruleId":"4626","severity":1,"message":"4630","line":401,"column":38,"nodeType":"4628","messageId":"4629","endLine":401,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":60,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":449,"column":54,"nodeType":"4628","messageId":"4629","endLine":449,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":460,"column":46,"nodeType":"4628","messageId":"4629","endLine":460,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":517,"column":127,"nodeType":"4628","messageId":"4629","endLine":517,"endColumn":129},{"ruleId":"4626","severity":1,"message":"4627","line":517,"column":171,"nodeType":"4628","messageId":"4629","endLine":517,"endColumn":173},{"ruleId":"4626","severity":1,"message":"4627","line":523,"column":73,"nodeType":"4628","messageId":"4629","endLine":523,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4630","line":524,"column":73,"nodeType":"4628","messageId":"4629","endLine":524,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":530,"column":75,"nodeType":"4628","messageId":"4629","endLine":530,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":560,"column":74,"nodeType":"4628","messageId":"4629","endLine":560,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":563,"column":48,"nodeType":"4628","messageId":"4629","endLine":563,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":579,"column":67,"nodeType":"4628","messageId":"4629","endLine":579,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":586,"column":48,"nodeType":"4628","messageId":"4629","endLine":586,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":602,"column":67,"nodeType":"4628","messageId":"4629","endLine":602,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":673,"column":55,"nodeType":"4628","messageId":"4629","endLine":673,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":862,"column":50,"nodeType":"4628","messageId":"4629","endLine":862,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":887,"column":61,"nodeType":"4628","messageId":"4629","endLine":887,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4630","line":889,"column":69,"nodeType":"4628","messageId":"4629","endLine":889,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":890,"column":69,"nodeType":"4628","messageId":"4629","endLine":890,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4630","line":894,"column":67,"nodeType":"4628","messageId":"4629","endLine":894,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4630","line":905,"column":53,"nodeType":"4628","messageId":"4629","endLine":905,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":905,"column":87,"nodeType":"4628","messageId":"4629","endLine":905,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":925,"column":82,"nodeType":"4628","messageId":"4629","endLine":925,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":925,"column":109,"nodeType":"4628","messageId":"4629","endLine":925,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":928,"column":71,"nodeType":"4628","messageId":"4629","endLine":928,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":954,"column":91,"nodeType":"4628","messageId":"4629","endLine":954,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":962,"column":59,"nodeType":"4628","messageId":"4629","endLine":962,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":968,"column":137,"nodeType":"4628","messageId":"4629","endLine":968,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":976,"column":137,"nodeType":"4628","messageId":"4629","endLine":976,"endColumn":139},{"ruleId":"4636","severity":1,"message":"4744","line":992,"column":38,"nodeType":"4745","messageId":"4639","endLine":992,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":999,"column":33,"nodeType":"4628","messageId":"4629","endLine":999,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":1002,"column":33,"nodeType":"4628","messageId":"4629","endLine":1002,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":1004,"column":40,"nodeType":"4628","messageId":"4629","endLine":1004,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":1018,"column":48,"nodeType":"4628","messageId":"4629","endLine":1018,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":1020,"column":54,"nodeType":"4628","messageId":"4629","endLine":1020,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":1021,"column":58,"nodeType":"4628","messageId":"4629","endLine":1021,"endColumn":60},{"ruleId":"4631","severity":1,"message":"4738","line":1066,"column":13,"nodeType":"4633","messageId":"4634","endLine":1066,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":1091,"column":73,"nodeType":"4628","messageId":"4629","endLine":1091,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":1098,"column":146,"nodeType":"4628","messageId":"4629","endLine":1098,"endColumn":148},{"ruleId":"4626","severity":1,"message":"4627","line":1121,"column":58,"nodeType":"4628","messageId":"4629","endLine":1121,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":1129,"column":55,"nodeType":"4628","messageId":"4629","endLine":1129,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":1163,"column":56,"nodeType":"4628","messageId":"4629","endLine":1163,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":1186,"column":99,"nodeType":"4628","messageId":"4629","endLine":1186,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":1211,"column":94,"nodeType":"4628","messageId":"4629","endLine":1211,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":1217,"column":94,"nodeType":"4628","messageId":"4629","endLine":1217,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":1237,"column":68,"nodeType":"4628","messageId":"4629","endLine":1237,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":1237,"column":102,"nodeType":"4628","messageId":"4629","endLine":1237,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":1248,"column":68,"nodeType":"4628","messageId":"4629","endLine":1248,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":1248,"column":102,"nodeType":"4628","messageId":"4629","endLine":1248,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4630","line":43,"column":37,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4630","line":43,"column":97,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4630","line":46,"column":23,"nodeType":"4628","messageId":"4629","endLine":46,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":46,"column":63,"nodeType":"4628","messageId":"4629","endLine":46,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4630","line":70,"column":29,"nodeType":"4628","messageId":"4629","endLine":70,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":81,"column":42,"nodeType":"4628","messageId":"4629","endLine":81,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":56,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":121,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":123},{"ruleId":"4626","severity":1,"message":"4627","line":90,"column":44,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":96,"column":57,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":59},{"ruleId":"4631","severity":1,"message":"4743","line":200,"column":13,"nodeType":"4633","messageId":"4634","endLine":200,"endColumn":23},{"ruleId":"4636","severity":1,"message":"4744","line":206,"column":50,"nodeType":"4745","messageId":"4639","endLine":206,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":213,"column":45,"nodeType":"4628","messageId":"4629","endLine":213,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":216,"column":45,"nodeType":"4628","messageId":"4629","endLine":216,"endColumn":47},{"ruleId":"4626","severity":1,"message":"4627","line":218,"column":52,"nodeType":"4628","messageId":"4629","endLine":218,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":227,"column":36,"nodeType":"4628","messageId":"4629","endLine":227,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":229,"column":38,"nodeType":"4628","messageId":"4629","endLine":229,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":230,"column":37,"nodeType":"4628","messageId":"4629","endLine":230,"endColumn":39},{"ruleId":"4661","severity":1,"message":"4662","line":230,"column":129,"nodeType":"4655","endLine":230,"endColumn":186},{"ruleId":"4631","severity":1,"message":"4738","line":245,"column":13,"nodeType":"4633","messageId":"4634","endLine":245,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":138,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":140},{"ruleId":"4626","severity":1,"message":"4627","line":304,"column":78,"nodeType":"4628","messageId":"4629","endLine":304,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4630","line":305,"column":68,"nodeType":"4628","messageId":"4629","endLine":305,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":67,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":172,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":174},{"ruleId":"4626","severity":1,"message":"4627","line":371,"column":67,"nodeType":"4628","messageId":"4629","endLine":371,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":432,"column":74,"nodeType":"4628","messageId":"4629","endLine":432,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":451,"column":79,"nodeType":"4628","messageId":"4629","endLine":451,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":470,"column":79,"nodeType":"4628","messageId":"4629","endLine":470,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":477,"column":82,"nodeType":"4628","messageId":"4629","endLine":477,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":483,"column":82,"nodeType":"4628","messageId":"4629","endLine":483,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":491,"column":81,"nodeType":"4628","messageId":"4629","endLine":491,"endColumn":83},{"ruleId":"4631","severity":1,"message":"4798","line":7,"column":41,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":40,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":137,"column":31,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":137,"column":71,"nodeType":"4628","messageId":"4629","endLine":137,"endColumn":73},{"ruleId":"4631","severity":1,"message":"4738","line":155,"column":17,"nodeType":"4633","messageId":"4634","endLine":155,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":159,"column":32,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":73,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":131,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":133},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":21,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":23},{"ruleId":"4626","severity":1,"message":"4630","line":211,"column":28,"nodeType":"4628","messageId":"4629","endLine":211,"endColumn":30},{"ruleId":"4636","severity":1,"message":"4637","line":217,"column":61,"nodeType":"4638","messageId":"4639","endLine":217,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":219,"column":58,"nodeType":"4628","messageId":"4629","endLine":219,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":219,"column":98,"nodeType":"4628","messageId":"4629","endLine":219,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":258,"column":40,"nodeType":"4628","messageId":"4629","endLine":258,"endColumn":42},{"ruleId":"4631","severity":1,"message":"4738","line":267,"column":17,"nodeType":"4633","messageId":"4634","endLine":267,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":282,"column":21,"nodeType":"4628","messageId":"4629","endLine":282,"endColumn":23},{"ruleId":"4626","severity":1,"message":"4627","line":282,"column":40,"nodeType":"4628","messageId":"4629","endLine":282,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":20,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4630","line":296,"column":33,"nodeType":"4628","messageId":"4629","endLine":296,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":385,"column":50,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":393,"column":130,"nodeType":"4628","messageId":"4629","endLine":393,"endColumn":132},{"ruleId":"4626","severity":1,"message":"4627","line":402,"column":199,"nodeType":"4628","messageId":"4629","endLine":402,"endColumn":201},{"ruleId":"4626","severity":1,"message":"4627","line":506,"column":69,"nodeType":"4628","messageId":"4629","endLine":506,"endColumn":71},{"ruleId":"4664","severity":1,"message":"4665","line":8,"column":5,"nodeType":"4666","messageId":"4667","endLine":10,"endColumn":6},{"ruleId":"4691","severity":1,"message":"4692","line":23,"column":61,"nodeType":"4655","endLine":23,"endColumn":174},{"ruleId":"4631","severity":1,"message":"4690","line":2,"column":17,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":23},{"ruleId":"4631","severity":1,"message":"4799","line":2,"column":25,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":30},{"ruleId":"4631","severity":1,"message":"4800","line":6,"column":21,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":27},{"ruleId":"4631","severity":1,"message":"4704","line":6,"column":29,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":38},{"ruleId":"4631","severity":1,"message":"4801","line":6,"column":46,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":53},{"ruleId":"4636","severity":1,"message":"4637","line":69,"column":74,"nodeType":"4638","messageId":"4639","endLine":69,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":49,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":73,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":54,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":82,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":84,"column":54,"nodeType":"4628","messageId":"4629","endLine":84,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":84,"column":83,"nodeType":"4628","messageId":"4629","endLine":84,"endColumn":85},{"ruleId":"4661","severity":1,"message":"4662","line":122,"column":37,"nodeType":"4655","endLine":122,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":85,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":134,"column":92,"nodeType":"4628","messageId":"4629","endLine":134,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":134,"column":111,"nodeType":"4628","messageId":"4629","endLine":134,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":140,"column":92,"nodeType":"4628","messageId":"4629","endLine":140,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":140,"column":111,"nodeType":"4628","messageId":"4629","endLine":140,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":169,"column":72,"nodeType":"4628","messageId":"4629","endLine":169,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":174,"column":79,"nodeType":"4628","messageId":"4629","endLine":174,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":82,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":186,"column":86,"nodeType":"4628","messageId":"4629","endLine":186,"endColumn":88},{"ruleId":"4661","severity":1,"message":"4662","line":187,"column":131,"nodeType":"4655","endLine":187,"endColumn":241},{"ruleId":"4626","severity":1,"message":"4630","line":203,"column":90,"nodeType":"4628","messageId":"4629","endLine":203,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":46,"column":43,"nodeType":"4628","messageId":"4629","endLine":46,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":57,"column":60,"nodeType":"4628","messageId":"4629","endLine":57,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":59,"column":34,"nodeType":"4628","messageId":"4629","endLine":59,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":91,"column":43,"nodeType":"4628","messageId":"4629","endLine":91,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":24,"column":111,"nodeType":"4628","messageId":"4629","endLine":24,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":53,"column":74,"nodeType":"4628","messageId":"4629","endLine":53,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":55,"column":38,"nodeType":"4628","messageId":"4629","endLine":55,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4630","line":61,"column":44,"nodeType":"4628","messageId":"4629","endLine":61,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":68,"column":64,"nodeType":"4628","messageId":"4629","endLine":68,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":76,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":170,"column":76,"nodeType":"4628","messageId":"4629","endLine":170,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":182,"column":77,"nodeType":"4628","messageId":"4629","endLine":182,"endColumn":79},{"ruleId":"4631","severity":1,"message":"4802","line":206,"column":7,"nodeType":"4633","messageId":"4634","endLine":206,"endColumn":14},{"ruleId":"4626","severity":1,"message":"4627","line":45,"column":43,"nodeType":"4628","messageId":"4629","endLine":45,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":56,"column":60,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":58,"column":34,"nodeType":"4628","messageId":"4629","endLine":58,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":43,"column":43,"nodeType":"4628","messageId":"4629","endLine":43,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":53,"column":60,"nodeType":"4628","messageId":"4629","endLine":53,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":55,"column":34,"nodeType":"4628","messageId":"4629","endLine":55,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":85,"column":35,"nodeType":"4628","messageId":"4629","endLine":85,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":55,"column":32,"nodeType":"4628","messageId":"4629","endLine":55,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":56,"column":46,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":32,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":56,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":82,"column":19,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":21},{"ruleId":"4626","severity":1,"message":"4627","line":82,"column":38,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4630","line":83,"column":23,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":28,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":25,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":35,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":97,"column":24,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4630","line":97,"column":47,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":97,"column":65,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":67},{"ruleId":"4631","severity":1,"message":"4803","line":113,"column":13,"nodeType":"4633","messageId":"4634","endLine":113,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":117,"column":36,"nodeType":"4628","messageId":"4629","endLine":117,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":118,"column":33,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":118,"column":93,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":83,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":135,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":100,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":102},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":72,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":153,"column":40,"nodeType":"4628","messageId":"4629","endLine":153,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":159,"column":40,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":159,"column":65,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":89,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":182,"column":64,"nodeType":"4628","messageId":"4629","endLine":182,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4630","line":191,"column":52,"nodeType":"4628","messageId":"4629","endLine":191,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":198,"column":52,"nodeType":"4628","messageId":"4629","endLine":198,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":207,"column":64,"nodeType":"4628","messageId":"4629","endLine":207,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":215,"column":57,"nodeType":"4628","messageId":"4629","endLine":215,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":218,"column":68,"nodeType":"4628","messageId":"4629","endLine":218,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":228,"column":56,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":234,"column":56,"nodeType":"4628","messageId":"4629","endLine":234,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":239,"column":56,"nodeType":"4628","messageId":"4629","endLine":239,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":248,"column":68,"nodeType":"4628","messageId":"4629","endLine":248,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":258,"column":64,"nodeType":"4628","messageId":"4629","endLine":258,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4630","line":268,"column":52,"nodeType":"4628","messageId":"4629","endLine":268,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":275,"column":52,"nodeType":"4628","messageId":"4629","endLine":275,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":284,"column":64,"nodeType":"4628","messageId":"4629","endLine":284,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":293,"column":44,"nodeType":"4628","messageId":"4629","endLine":293,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":297,"column":68,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":308,"column":88,"nodeType":"4628","messageId":"4629","endLine":308,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":322,"column":52,"nodeType":"4628","messageId":"4629","endLine":322,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":355,"column":40,"nodeType":"4628","messageId":"4629","endLine":355,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4630","line":356,"column":80,"nodeType":"4628","messageId":"4629","endLine":356,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4630","line":359,"column":48,"nodeType":"4628","messageId":"4629","endLine":359,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":77,"column":34,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":80,"column":41,"nodeType":"4628","messageId":"4629","endLine":80,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":136,"column":29,"nodeType":"4628","messageId":"4629","endLine":136,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":155,"column":42,"nodeType":"4628","messageId":"4629","endLine":155,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":224,"column":33,"nodeType":"4628","messageId":"4629","endLine":224,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4627","line":228,"column":43,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":235,"column":34,"nodeType":"4628","messageId":"4629","endLine":235,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":271,"column":35,"nodeType":"4628","messageId":"4629","endLine":271,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4630","line":306,"column":47,"nodeType":"4628","messageId":"4629","endLine":306,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":348,"column":33,"nodeType":"4628","messageId":"4629","endLine":348,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":363,"column":66,"nodeType":"4628","messageId":"4629","endLine":363,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":410,"column":76,"nodeType":"4628","messageId":"4629","endLine":410,"endColumn":78},{"ruleId":"4626","severity":1,"message":"4627","line":477,"column":63,"nodeType":"4628","messageId":"4629","endLine":477,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4630","line":482,"column":54,"nodeType":"4628","messageId":"4629","endLine":482,"endColumn":56},{"ruleId":"4804","severity":1,"message":"4805","line":41,"column":15,"nodeType":"4806","messageId":"4629","endLine":41,"endColumn":19},{"ruleId":"4631","severity":1,"message":"4807","line":1,"column":17,"nodeType":"4633","messageId":"4634","endLine":1,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":84,"column":39,"nodeType":"4628","messageId":"4629","endLine":84,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":91,"column":60,"nodeType":"4628","messageId":"4629","endLine":91,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":100,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":102},{"ruleId":"4626","severity":1,"message":"4627","line":185,"column":104,"nodeType":"4628","messageId":"4629","endLine":185,"endColumn":106},{"ruleId":"4626","severity":1,"message":"4627","line":253,"column":100,"nodeType":"4628","messageId":"4629","endLine":253,"endColumn":102},{"ruleId":"4626","severity":1,"message":"4627","line":260,"column":104,"nodeType":"4628","messageId":"4629","endLine":260,"endColumn":106},{"ruleId":"4631","severity":1,"message":"4807","line":1,"column":17,"nodeType":"4633","messageId":"4634","endLine":1,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":60,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":106,"column":60,"nodeType":"4628","messageId":"4629","endLine":106,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":25,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":27},{"ruleId":"4626","severity":1,"message":"4627","line":140,"column":60,"nodeType":"4628","messageId":"4629","endLine":140,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":157,"column":29,"nodeType":"4628","messageId":"4629","endLine":157,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":241,"column":97,"nodeType":"4628","messageId":"4629","endLine":241,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":241,"column":139,"nodeType":"4628","messageId":"4629","endLine":241,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":248,"column":101,"nodeType":"4628","messageId":"4629","endLine":248,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4627","line":248,"column":143,"nodeType":"4628","messageId":"4629","endLine":248,"endColumn":145},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":97,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":291,"column":139,"nodeType":"4628","messageId":"4629","endLine":291,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":298,"column":101,"nodeType":"4628","messageId":"4629","endLine":298,"endColumn":103},{"ruleId":"4626","severity":1,"message":"4627","line":298,"column":143,"nodeType":"4628","messageId":"4629","endLine":298,"endColumn":145},{"ruleId":"4631","severity":1,"message":"4767","line":4,"column":21,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":33},{"ruleId":"4631","severity":1,"message":"4773","line":4,"column":35,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":43},{"ruleId":"4631","severity":1,"message":"4808","line":6,"column":10,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":21},{"ruleId":"4631","severity":1,"message":"4809","line":6,"column":23,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":37},{"ruleId":"4631","severity":1,"message":"4810","line":6,"column":39,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":54},{"ruleId":"4631","severity":1,"message":"4700","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":10},{"ruleId":"4631","severity":1,"message":"4699","line":15,"column":8,"nodeType":"4633","messageId":"4634","endLine":15,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4627","line":32,"column":111,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4630","line":50,"column":35,"nodeType":"4628","messageId":"4629","endLine":50,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":82,"column":74,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4630","line":84,"column":38,"nodeType":"4628","messageId":"4629","endLine":84,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":262,"column":48,"nodeType":"4628","messageId":"4629","endLine":262,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":265,"column":36,"nodeType":"4628","messageId":"4629","endLine":265,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":270,"column":48,"nodeType":"4628","messageId":"4629","endLine":270,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":273,"column":36,"nodeType":"4628","messageId":"4629","endLine":273,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":311,"column":79,"nodeType":"4628","messageId":"4629","endLine":311,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":87,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":333,"column":79,"nodeType":"4628","messageId":"4629","endLine":333,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":339,"column":87,"nodeType":"4628","messageId":"4629","endLine":339,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":354,"column":79,"nodeType":"4628","messageId":"4629","endLine":354,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":360,"column":87,"nodeType":"4628","messageId":"4629","endLine":360,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":34,"column":70,"nodeType":"4628","messageId":"4629","endLine":34,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":58,"column":50,"nodeType":"4628","messageId":"4629","endLine":58,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":66,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":59,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":102,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":154,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":156},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":201,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":203},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":61,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":109,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":65,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":90,"column":69,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":62,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":110,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":146,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":148},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":189,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":191},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":220,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":222},{"ruleId":"4626","severity":1,"message":"4627","line":93,"column":88,"nodeType":"4628","messageId":"4629","endLine":93,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":95,"column":58,"nodeType":"4628","messageId":"4629","endLine":95,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":95,"column":106,"nodeType":"4628","messageId":"4629","endLine":95,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":95,"column":142,"nodeType":"4628","messageId":"4629","endLine":95,"endColumn":144},{"ruleId":"4626","severity":1,"message":"4627","line":110,"column":59,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":110,"column":102,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":104},{"ruleId":"4626","severity":1,"message":"4627","line":110,"column":154,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":156},{"ruleId":"4626","severity":1,"message":"4627","line":110,"column":201,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":203},{"ruleId":"4626","severity":1,"message":"4627","line":111,"column":61,"nodeType":"4628","messageId":"4629","endLine":111,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":111,"column":109,"nodeType":"4628","messageId":"4629","endLine":111,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":65,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4627","line":113,"column":69,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":62,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":110,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":112},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":146,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":148},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":189,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":191},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":220,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":222},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":307,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":309},{"ruleId":"4626","severity":1,"message":"4627","line":118,"column":58,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4630","line":118,"column":106,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":108},{"ruleId":"4626","severity":1,"message":"4627","line":118,"column":142,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":144},{"ruleId":"4626","severity":1,"message":"4627","line":132,"column":62,"nodeType":"4628","messageId":"4629","endLine":132,"endColumn":64},{"ruleId":"4631","severity":1,"message":"4681","line":3,"column":10,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4699","line":6,"column":8,"nodeType":"4633","messageId":"4634","endLine":6,"endColumn":20},{"ruleId":"4631","severity":1,"message":"4811","line":8,"column":8,"nodeType":"4633","messageId":"4634","endLine":8,"endColumn":10},{"ruleId":"4626","severity":1,"message":"4630","line":72,"column":41,"nodeType":"4628","messageId":"4629","endLine":72,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":76,"column":34,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":31,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":112,"column":56,"nodeType":"4628","messageId":"4629","endLine":112,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":36,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":116,"column":61,"nodeType":"4628","messageId":"4629","endLine":116,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":118,"column":52,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":121,"column":57,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":124,"column":57,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":127,"column":57,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":128,"column":52,"nodeType":"4628","messageId":"4629","endLine":128,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":52,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":139,"column":57,"nodeType":"4628","messageId":"4629","endLine":139,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":140,"column":63,"nodeType":"4628","messageId":"4629","endLine":140,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":68,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":146,"column":68,"nodeType":"4628","messageId":"4629","endLine":146,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":68,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4627","line":152,"column":68,"nodeType":"4628","messageId":"4629","endLine":152,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":159,"column":30,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":36,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":163,"column":72,"nodeType":"4628","messageId":"4629","endLine":163,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":168,"column":34,"nodeType":"4628","messageId":"4629","endLine":168,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":173,"column":36,"nodeType":"4628","messageId":"4629","endLine":173,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":173,"column":72,"nodeType":"4628","messageId":"4629","endLine":173,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":216,"column":41,"nodeType":"4628","messageId":"4629","endLine":216,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":238,"column":49,"nodeType":"4628","messageId":"4629","endLine":238,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4630","line":259,"column":62,"nodeType":"4628","messageId":"4629","endLine":259,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4627","line":260,"column":43,"nodeType":"4628","messageId":"4629","endLine":260,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":261,"column":46,"nodeType":"4628","messageId":"4629","endLine":261,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":265,"column":48,"nodeType":"4628","messageId":"4629","endLine":265,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":273,"column":43,"nodeType":"4628","messageId":"4629","endLine":273,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":288,"column":35,"nodeType":"4628","messageId":"4629","endLine":288,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":297,"column":40,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":300,"column":40,"nodeType":"4628","messageId":"4629","endLine":300,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":303,"column":40,"nodeType":"4628","messageId":"4629","endLine":303,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":338,"column":42,"nodeType":"4628","messageId":"4629","endLine":338,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":373,"column":51,"nodeType":"4628","messageId":"4629","endLine":373,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":437,"column":19,"nodeType":"4628","messageId":"4629","endLine":437,"endColumn":21},{"ruleId":"4626","severity":1,"message":"4627","line":459,"column":42,"nodeType":"4628","messageId":"4629","endLine":459,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":466,"column":33,"nodeType":"4628","messageId":"4629","endLine":466,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":478,"column":31,"nodeType":"4628","messageId":"4629","endLine":478,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":497,"column":54,"nodeType":"4628","messageId":"4629","endLine":497,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":543,"column":82,"nodeType":"4628","messageId":"4629","endLine":543,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":548,"column":78,"nodeType":"4628","messageId":"4629","endLine":548,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":548,"column":108,"nodeType":"4628","messageId":"4629","endLine":548,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4627","line":548,"column":138,"nodeType":"4628","messageId":"4629","endLine":548,"endColumn":140},{"ruleId":"4626","severity":1,"message":"4627","line":554,"column":126,"nodeType":"4628","messageId":"4629","endLine":554,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":554,"column":180,"nodeType":"4628","messageId":"4629","endLine":554,"endColumn":182},{"ruleId":"4626","severity":1,"message":"4627","line":558,"column":94,"nodeType":"4628","messageId":"4629","endLine":558,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":558,"column":145,"nodeType":"4628","messageId":"4629","endLine":558,"endColumn":147},{"ruleId":"4626","severity":1,"message":"4627","line":559,"column":128,"nodeType":"4628","messageId":"4629","endLine":559,"endColumn":130},{"ruleId":"4626","severity":1,"message":"4627","line":559,"column":203,"nodeType":"4628","messageId":"4629","endLine":559,"endColumn":205},{"ruleId":"4626","severity":1,"message":"4627","line":561,"column":93,"nodeType":"4628","messageId":"4629","endLine":561,"endColumn":95},{"ruleId":"4626","severity":1,"message":"4627","line":562,"column":94,"nodeType":"4628","messageId":"4629","endLine":562,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4627","line":562,"column":164,"nodeType":"4628","messageId":"4629","endLine":562,"endColumn":166},{"ruleId":"4626","severity":1,"message":"4627","line":576,"column":59,"nodeType":"4628","messageId":"4629","endLine":576,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":582,"column":67,"nodeType":"4628","messageId":"4629","endLine":582,"endColumn":69},{"ruleId":"4631","severity":1,"message":"4789","line":3,"column":10,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":29},{"ruleId":"4631","severity":1,"message":"4790","line":3,"column":31,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":50},{"ruleId":"4631","severity":1,"message":"4723","line":3,"column":52,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":68},{"ruleId":"4631","severity":1,"message":"4791","line":4,"column":10,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":25},{"ruleId":"4631","severity":1,"message":"4663","line":7,"column":8,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4687","line":9,"column":13,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":16},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":275,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":277},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":313,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":315},{"ruleId":"4626","severity":1,"message":"4627","line":66,"column":43,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":80,"column":19,"nodeType":"4628","messageId":"4629","endLine":80,"endColumn":21},{"ruleId":"4691","severity":1,"message":"4692","line":179,"column":45,"nodeType":"4655","endLine":179,"endColumn":300},{"ruleId":"4626","severity":1,"message":"4627","line":179,"column":176,"nodeType":"4628","messageId":"4629","endLine":179,"endColumn":178},{"ruleId":"4626","severity":1,"message":"4627","line":180,"column":156,"nodeType":"4628","messageId":"4629","endLine":180,"endColumn":158},{"ruleId":"4626","severity":1,"message":"4630","line":206,"column":113,"nodeType":"4628","messageId":"4629","endLine":206,"endColumn":115},{"ruleId":"4626","severity":1,"message":"4630","line":223,"column":113,"nodeType":"4628","messageId":"4629","endLine":223,"endColumn":115},{"ruleId":"4626","severity":1,"message":"4630","line":240,"column":114,"nodeType":"4628","messageId":"4629","endLine":240,"endColumn":116},{"ruleId":"4626","severity":1,"message":"4627","line":265,"column":84,"nodeType":"4628","messageId":"4629","endLine":265,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":307,"column":88,"nodeType":"4628","messageId":"4629","endLine":307,"endColumn":90},{"ruleId":"4631","severity":1,"message":"4663","line":4,"column":8,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":44,"column":44,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":63,"column":49,"nodeType":"4628","messageId":"4629","endLine":63,"endColumn":51},{"ruleId":"4691","severity":1,"message":"4692","line":100,"column":37,"nodeType":"4655","endLine":100,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":117,"column":64,"nodeType":"4628","messageId":"4629","endLine":117,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4630","line":117,"column":98,"nodeType":"4628","messageId":"4629","endLine":117,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":124,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":126},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":133,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":135},{"ruleId":"4626","severity":1,"message":"4627","line":28,"column":97,"nodeType":"4628","messageId":"4629","endLine":28,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":196,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":198},{"ruleId":"4626","severity":1,"message":"4627","line":152,"column":64,"nodeType":"4628","messageId":"4629","endLine":152,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":159,"column":64,"nodeType":"4628","messageId":"4629","endLine":159,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":174,"column":196,"nodeType":"4628","messageId":"4629","endLine":174,"endColumn":198},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":64,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":185,"column":60,"nodeType":"4628","messageId":"4629","endLine":185,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":200,"column":64,"nodeType":"4628","messageId":"4629","endLine":200,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":202,"column":60,"nodeType":"4628","messageId":"4629","endLine":202,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4630","line":218,"column":84,"nodeType":"4628","messageId":"4629","endLine":218,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":221,"column":52,"nodeType":"4628","messageId":"4629","endLine":221,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":232,"column":52,"nodeType":"4628","messageId":"4629","endLine":232,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":331,"column":200,"nodeType":"4628","messageId":"4629","endLine":331,"endColumn":202},{"ruleId":"4626","severity":1,"message":"4627","line":334,"column":52,"nodeType":"4628","messageId":"4629","endLine":334,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":348,"column":52,"nodeType":"4628","messageId":"4629","endLine":348,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":390,"column":26,"nodeType":"4628","messageId":"4629","endLine":390,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4630","line":391,"column":28,"nodeType":"4628","messageId":"4629","endLine":391,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":399,"column":29,"nodeType":"4628","messageId":"4629","endLine":399,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":442,"column":73,"nodeType":"4628","messageId":"4629","endLine":442,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":442,"column":115,"nodeType":"4628","messageId":"4629","endLine":442,"endColumn":117},{"ruleId":"4626","severity":1,"message":"4627","line":449,"column":77,"nodeType":"4628","messageId":"4629","endLine":449,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":449,"column":119,"nodeType":"4628","messageId":"4629","endLine":449,"endColumn":121},{"ruleId":"4626","severity":1,"message":"4630","line":462,"column":125,"nodeType":"4628","messageId":"4629","endLine":462,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":527,"column":148,"nodeType":"4628","messageId":"4629","endLine":527,"endColumn":150},{"ruleId":"4626","severity":1,"message":"4627","line":547,"column":135,"nodeType":"4628","messageId":"4629","endLine":547,"endColumn":137},{"ruleId":"4626","severity":1,"message":"4627","line":553,"column":139,"nodeType":"4628","messageId":"4629","endLine":553,"endColumn":141},{"ruleId":"4626","severity":1,"message":"4627","line":560,"column":143,"nodeType":"4628","messageId":"4629","endLine":560,"endColumn":145},{"ruleId":"4661","severity":1,"message":"4662","line":563,"column":129,"nodeType":"4655","endLine":563,"endColumn":216},{"ruleId":"4626","severity":1,"message":"4627","line":568,"column":147,"nodeType":"4628","messageId":"4629","endLine":568,"endColumn":149},{"ruleId":"4626","severity":1,"message":"4630","line":581,"column":120,"nodeType":"4628","messageId":"4629","endLine":581,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4627","line":583,"column":144,"nodeType":"4628","messageId":"4629","endLine":583,"endColumn":146},{"ruleId":"4626","severity":1,"message":"4627","line":590,"column":144,"nodeType":"4628","messageId":"4629","endLine":590,"endColumn":146},{"ruleId":"4626","severity":1,"message":"4630","line":644,"column":54,"nodeType":"4628","messageId":"4629","endLine":644,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":53,"column":22,"nodeType":"4628","messageId":"4629","endLine":53,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4627","line":60,"column":35,"nodeType":"4628","messageId":"4629","endLine":60,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":60,"column":67,"nodeType":"4628","messageId":"4629","endLine":60,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":60,"column":97,"nodeType":"4628","messageId":"4629","endLine":60,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":60,"column":126,"nodeType":"4628","messageId":"4629","endLine":60,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":66,"column":50,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":82,"column":49,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4630","line":82,"column":99,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":104,"column":48,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":104,"column":98,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":100},{"ruleId":"4626","severity":1,"message":"4627","line":110,"column":54,"nodeType":"4628","messageId":"4629","endLine":110,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":117,"column":48,"nodeType":"4628","messageId":"4629","endLine":117,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":117,"column":99,"nodeType":"4628","messageId":"4629","endLine":117,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":123,"column":55,"nodeType":"4628","messageId":"4629","endLine":123,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":130,"column":52,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4630","line":130,"column":121,"nodeType":"4628","messageId":"4629","endLine":130,"endColumn":123},{"ruleId":"4631","severity":1,"message":"4812","line":37,"column":9,"nodeType":"4633","messageId":"4634","endLine":37,"endColumn":19},{"ruleId":"4626","severity":1,"message":"4627","line":50,"column":82,"nodeType":"4628","messageId":"4629","endLine":50,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":79,"column":44,"nodeType":"4628","messageId":"4629","endLine":79,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":94,"column":44,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":100,"column":52,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":113,"column":44,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":91,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":93},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":144,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":146},{"ruleId":"4626","severity":1,"message":"4627","line":115,"column":203,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":205},{"ruleId":"4626","severity":1,"message":"4630","line":124,"column":63,"nodeType":"4628","messageId":"4629","endLine":124,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":138,"column":44,"nodeType":"4628","messageId":"4629","endLine":138,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":147,"column":53,"nodeType":"4628","messageId":"4629","endLine":147,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":149,"column":30,"nodeType":"4628","messageId":"4629","endLine":149,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":154,"column":48,"nodeType":"4628","messageId":"4629","endLine":154,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":195,"column":28,"nodeType":"4628","messageId":"4629","endLine":195,"endColumn":30},{"ruleId":"4631","severity":1,"message":"4813","line":7,"column":26,"nodeType":"4633","messageId":"4634","endLine":7,"endColumn":37},{"ruleId":"4631","severity":1,"message":"4814","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4651","line":15,"column":10,"nodeType":"4633","messageId":"4634","endLine":15,"endColumn":26},{"ruleId":"4631","severity":1,"message":"4815","line":16,"column":159,"nodeType":"4633","messageId":"4634","endLine":16,"endColumn":183},{"ruleId":"4631","severity":1,"message":"4816","line":27,"column":7,"nodeType":"4633","messageId":"4634","endLine":27,"endColumn":12},{"ruleId":"4626","severity":1,"message":"4627","line":27,"column":57,"nodeType":"4628","messageId":"4629","endLine":27,"endColumn":59},{"ruleId":"4631","severity":1,"message":"4812","line":85,"column":9,"nodeType":"4633","messageId":"4634","endLine":85,"endColumn":19},{"ruleId":"4626","severity":1,"message":"4630","line":97,"column":43,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":47,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4627","line":102,"column":43,"nodeType":"4628","messageId":"4629","endLine":102,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":104,"column":50,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":106,"column":50,"nodeType":"4628","messageId":"4629","endLine":106,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":121,"column":44,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":125,"column":63,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4630","line":127,"column":29,"nodeType":"4628","messageId":"4629","endLine":127,"endColumn":31},{"ruleId":"4626","severity":1,"message":"4627","line":158,"column":31,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":158,"column":56,"nodeType":"4628","messageId":"4629","endLine":158,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":36,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":162,"column":61,"nodeType":"4628","messageId":"4629","endLine":162,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":164,"column":35,"nodeType":"4628","messageId":"4629","endLine":164,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":210,"column":18,"nodeType":"4628","messageId":"4629","endLine":210,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4627","line":213,"column":23,"nodeType":"4628","messageId":"4629","endLine":213,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":217,"column":23,"nodeType":"4628","messageId":"4629","endLine":217,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":221,"column":23,"nodeType":"4628","messageId":"4629","endLine":221,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":229,"column":20,"nodeType":"4628","messageId":"4629","endLine":229,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4627","line":249,"column":44,"nodeType":"4628","messageId":"4629","endLine":249,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":273,"column":44,"nodeType":"4628","messageId":"4629","endLine":273,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":295,"column":44,"nodeType":"4628","messageId":"4629","endLine":295,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":316,"column":44,"nodeType":"4628","messageId":"4629","endLine":316,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":333,"column":18,"nodeType":"4628","messageId":"4629","endLine":333,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4630","line":334,"column":40,"nodeType":"4628","messageId":"4629","endLine":334,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":352,"column":23,"nodeType":"4628","messageId":"4629","endLine":352,"endColumn":25},{"ruleId":"4626","severity":1,"message":"4627","line":353,"column":39,"nodeType":"4628","messageId":"4629","endLine":353,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":357,"column":44,"nodeType":"4628","messageId":"4629","endLine":357,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":361,"column":44,"nodeType":"4628","messageId":"4629","endLine":361,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":365,"column":43,"nodeType":"4628","messageId":"4629","endLine":365,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":385,"column":43,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4630","line":385,"column":82,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":390,"column":43,"nodeType":"4628","messageId":"4629","endLine":390,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":390,"column":80,"nodeType":"4628","messageId":"4629","endLine":390,"endColumn":82},{"ruleId":"4626","severity":1,"message":"4627","line":391,"column":41,"nodeType":"4628","messageId":"4629","endLine":391,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":391,"column":112,"nodeType":"4628","messageId":"4629","endLine":391,"endColumn":114},{"ruleId":"4626","severity":1,"message":"4627","line":405,"column":44,"nodeType":"4628","messageId":"4629","endLine":405,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":433,"column":34,"nodeType":"4628","messageId":"4629","endLine":433,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4630","line":433,"column":66,"nodeType":"4628","messageId":"4629","endLine":433,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":433,"column":97,"nodeType":"4628","messageId":"4629","endLine":433,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4630","line":433,"column":126,"nodeType":"4628","messageId":"4629","endLine":433,"endColumn":128},{"ruleId":"4626","severity":1,"message":"4627","line":456,"column":44,"nodeType":"4628","messageId":"4629","endLine":456,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":497,"column":44,"nodeType":"4628","messageId":"4629","endLine":497,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":535,"column":31,"nodeType":"4628","messageId":"4629","endLine":535,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":537,"column":46,"nodeType":"4628","messageId":"4629","endLine":537,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":538,"column":36,"nodeType":"4628","messageId":"4629","endLine":538,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":538,"column":73,"nodeType":"4628","messageId":"4629","endLine":538,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":538,"column":107,"nodeType":"4628","messageId":"4629","endLine":538,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4627","line":539,"column":44,"nodeType":"4628","messageId":"4629","endLine":539,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":546,"column":41,"nodeType":"4628","messageId":"4629","endLine":546,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":553,"column":37,"nodeType":"4628","messageId":"4629","endLine":553,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":564,"column":36,"nodeType":"4628","messageId":"4629","endLine":564,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":564,"column":66,"nodeType":"4628","messageId":"4629","endLine":564,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":565,"column":46,"nodeType":"4628","messageId":"4629","endLine":565,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":566,"column":36,"nodeType":"4628","messageId":"4629","endLine":566,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":567,"column":44,"nodeType":"4628","messageId":"4629","endLine":567,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":574,"column":43,"nodeType":"4628","messageId":"4629","endLine":574,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":598,"column":155,"nodeType":"4628","messageId":"4629","endLine":598,"endColumn":157},{"ruleId":"4626","severity":1,"message":"4627","line":601,"column":48,"nodeType":"4628","messageId":"4629","endLine":601,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":613,"column":57,"nodeType":"4628","messageId":"4629","endLine":613,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":615,"column":34,"nodeType":"4628","messageId":"4629","endLine":615,"endColumn":36},{"ruleId":"4641","severity":1,"message":"4817","line":621,"column":29,"nodeType":"4633","messageId":"4643","endLine":621,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4630","line":621,"column":61,"nodeType":"4628","messageId":"4629","endLine":621,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":623,"column":38,"nodeType":"4628","messageId":"4629","endLine":623,"endColumn":40},{"ruleId":"4641","severity":1,"message":"4818","line":624,"column":38,"nodeType":"4633","messageId":"4643","endLine":624,"endColumn":41},{"ruleId":"4626","severity":1,"message":"4627","line":628,"column":56,"nodeType":"4628","messageId":"4629","endLine":628,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":645,"column":48,"nodeType":"4628","messageId":"4629","endLine":645,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":655,"column":68,"nodeType":"4628","messageId":"4629","endLine":655,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":667,"column":61,"nodeType":"4628","messageId":"4629","endLine":667,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":669,"column":38,"nodeType":"4628","messageId":"4629","endLine":669,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":674,"column":56,"nodeType":"4628","messageId":"4629","endLine":674,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":693,"column":28,"nodeType":"4628","messageId":"4629","endLine":693,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":736,"column":28,"nodeType":"4628","messageId":"4629","endLine":736,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":765,"column":44,"nodeType":"4628","messageId":"4629","endLine":765,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":793,"column":53,"nodeType":"4628","messageId":"4629","endLine":793,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":795,"column":30,"nodeType":"4628","messageId":"4629","endLine":795,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":800,"column":48,"nodeType":"4628","messageId":"4629","endLine":800,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":810,"column":18,"nodeType":"4628","messageId":"4629","endLine":810,"endColumn":20},{"ruleId":"4626","severity":1,"message":"4627","line":813,"column":23,"nodeType":"4628","messageId":"4629","endLine":813,"endColumn":25},{"ruleId":"4636","severity":1,"message":"4637","line":822,"column":78,"nodeType":"4638","messageId":"4639","endLine":822,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4627","line":823,"column":42,"nodeType":"4628","messageId":"4629","endLine":823,"endColumn":44},{"ruleId":"4636","severity":1,"message":"4637","line":835,"column":86,"nodeType":"4638","messageId":"4639","endLine":835,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":836,"column":42,"nodeType":"4628","messageId":"4629","endLine":836,"endColumn":44},{"ruleId":"4636","severity":1,"message":"4637","line":848,"column":72,"nodeType":"4638","messageId":"4639","endLine":848,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":849,"column":42,"nodeType":"4628","messageId":"4629","endLine":849,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":898,"column":107,"nodeType":"4628","messageId":"4629","endLine":898,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4627","line":901,"column":63,"nodeType":"4628","messageId":"4629","endLine":901,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":903,"column":69,"nodeType":"4628","messageId":"4629","endLine":903,"endColumn":71},{"ruleId":"4626","severity":1,"message":"4627","line":905,"column":73,"nodeType":"4628","messageId":"4629","endLine":905,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":984,"column":120,"nodeType":"4628","messageId":"4629","endLine":984,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4627","line":986,"column":71,"nodeType":"4628","messageId":"4629","endLine":986,"endColumn":73},{"ruleId":"4626","severity":1,"message":"4627","line":988,"column":77,"nodeType":"4628","messageId":"4629","endLine":988,"endColumn":79},{"ruleId":"4626","severity":1,"message":"4627","line":990,"column":81,"nodeType":"4628","messageId":"4629","endLine":990,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4627","line":992,"column":85,"nodeType":"4628","messageId":"4629","endLine":992,"endColumn":87},{"ruleId":"4626","severity":1,"message":"4627","line":994,"column":89,"nodeType":"4628","messageId":"4629","endLine":994,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":1002,"column":72,"nodeType":"4628","messageId":"4629","endLine":1002,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":1002,"column":111,"nodeType":"4628","messageId":"4629","endLine":1002,"endColumn":113},{"ruleId":"4626","severity":1,"message":"4627","line":1002,"column":151,"nodeType":"4628","messageId":"4629","endLine":1002,"endColumn":153},{"ruleId":"4626","severity":1,"message":"4627","line":1002,"column":190,"nodeType":"4628","messageId":"4629","endLine":1002,"endColumn":192},{"ruleId":"4626","severity":1,"message":"4627","line":1002,"column":228,"nodeType":"4628","messageId":"4629","endLine":1002,"endColumn":230},{"ruleId":"4626","severity":1,"message":"4627","line":1060,"column":83,"nodeType":"4628","messageId":"4629","endLine":1060,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":1061,"column":89,"nodeType":"4628","messageId":"4629","endLine":1061,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":1071,"column":52,"nodeType":"4628","messageId":"4629","endLine":1071,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":1274,"column":223,"nodeType":"4628","messageId":"4629","endLine":1274,"endColumn":225},{"ruleId":"4626","severity":1,"message":"4630","line":1292,"column":104,"nodeType":"4628","messageId":"4629","endLine":1292,"endColumn":106},{"ruleId":"4626","severity":1,"message":"4630","line":1308,"column":103,"nodeType":"4628","messageId":"4629","endLine":1308,"endColumn":105},{"ruleId":"4626","severity":1,"message":"4630","line":1329,"column":108,"nodeType":"4628","messageId":"4629","endLine":1329,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":21,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":23},{"ruleId":"4626","severity":1,"message":"4627","line":88,"column":38,"nodeType":"4628","messageId":"4629","endLine":88,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":97,"column":26,"nodeType":"4628","messageId":"4629","endLine":97,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":113,"column":34,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":131,"column":44,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":46},{"ruleId":"4658","severity":1,"message":"4659","line":198,"column":100,"nodeType":"4628","messageId":"4660","endLine":198,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4630","line":229,"column":75,"nodeType":"4628","messageId":"4629","endLine":229,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":44,"column":83,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":64,"column":54,"nodeType":"4628","messageId":"4629","endLine":64,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":90,"column":114,"nodeType":"4628","messageId":"4629","endLine":90,"endColumn":116},{"ruleId":"4626","severity":1,"message":"4627","line":129,"column":66,"nodeType":"4628","messageId":"4629","endLine":129,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":45,"column":83,"nodeType":"4628","messageId":"4629","endLine":45,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4630","line":56,"column":50,"nodeType":"4628","messageId":"4629","endLine":56,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":89,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":104,"column":44,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":118,"column":190,"nodeType":"4628","messageId":"4629","endLine":118,"endColumn":192},{"ruleId":"4626","severity":1,"message":"4630","line":121,"column":211,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":213},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":60,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":66,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":255,"column":66,"nodeType":"4628","messageId":"4629","endLine":255,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":300,"column":15,"nodeType":"4628","messageId":"4629","endLine":300,"endColumn":17},{"ruleId":"4739","severity":1,"message":"4740","line":300,"column":20,"nodeType":"4741","messageId":"4742","endLine":300,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4627","line":300,"column":53,"nodeType":"4628","messageId":"4629","endLine":300,"endColumn":55},{"ruleId":"4739","severity":1,"message":"4740","line":300,"column":66,"nodeType":"4741","messageId":"4742","endLine":300,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":300,"column":99,"nodeType":"4628","messageId":"4629","endLine":300,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":71,"column":89,"nodeType":"4628","messageId":"4629","endLine":71,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":92,"column":44,"nodeType":"4628","messageId":"4629","endLine":92,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":107,"column":42,"nodeType":"4628","messageId":"4629","endLine":107,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4627","line":161,"column":50,"nodeType":"4628","messageId":"4629","endLine":161,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":167,"column":74,"nodeType":"4628","messageId":"4629","endLine":167,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":292,"column":66,"nodeType":"4628","messageId":"4629","endLine":292,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":77,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":79},{"ruleId":"4739","severity":1,"message":"4796","line":317,"column":82,"nodeType":"4741","messageId":"4742","endLine":317,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":317,"column":124,"nodeType":"4628","messageId":"4629","endLine":317,"endColumn":126},{"ruleId":"4739","severity":1,"message":"4796","line":317,"column":129,"nodeType":"4741","messageId":"4742","endLine":317,"endColumn":131},{"ruleId":"4626","severity":1,"message":"4627","line":320,"column":84,"nodeType":"4628","messageId":"4629","endLine":320,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":347,"column":88,"nodeType":"4628","messageId":"4629","endLine":347,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4630","line":381,"column":92,"nodeType":"4628","messageId":"4629","endLine":381,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":37,"column":83,"nodeType":"4628","messageId":"4629","endLine":37,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":88,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4627","line":109,"column":133,"nodeType":"4628","messageId":"4629","endLine":109,"endColumn":135},{"ruleId":"4626","severity":1,"message":"4627","line":69,"column":83,"nodeType":"4628","messageId":"4629","endLine":69,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":60,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":54,"column":89,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":80,"column":48,"nodeType":"4628","messageId":"4629","endLine":80,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":87,"column":48,"nodeType":"4628","messageId":"4629","endLine":87,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":102,"column":41,"nodeType":"4628","messageId":"4629","endLine":102,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4627","line":54,"column":89,"nodeType":"4628","messageId":"4629","endLine":54,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":79,"column":48,"nodeType":"4628","messageId":"4629","endLine":79,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":48,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":41,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":43},{"ruleId":"4631","severity":1,"message":"4723","line":3,"column":52,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":57,"column":37,"nodeType":"4628","messageId":"4629","endLine":57,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":154,"column":83,"nodeType":"4628","messageId":"4629","endLine":154,"endColumn":85},{"ruleId":"4626","severity":1,"message":"4627","line":174,"column":50,"nodeType":"4628","messageId":"4629","endLine":174,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":178,"column":44,"nodeType":"4628","messageId":"4629","endLine":178,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":183,"column":74,"nodeType":"4628","messageId":"4629","endLine":183,"endColumn":76},{"ruleId":"4626","severity":1,"message":"4627","line":323,"column":66,"nodeType":"4628","messageId":"4629","endLine":323,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4627","line":359,"column":77,"nodeType":"4628","messageId":"4629","endLine":359,"endColumn":79},{"ruleId":"4739","severity":1,"message":"4796","line":359,"column":82,"nodeType":"4741","messageId":"4742","endLine":359,"endColumn":84},{"ruleId":"4626","severity":1,"message":"4627","line":359,"column":124,"nodeType":"4628","messageId":"4629","endLine":359,"endColumn":126},{"ruleId":"4739","severity":1,"message":"4796","line":359,"column":129,"nodeType":"4741","messageId":"4742","endLine":359,"endColumn":131},{"ruleId":"4626","severity":1,"message":"4627","line":362,"column":84,"nodeType":"4628","messageId":"4629","endLine":362,"endColumn":86},{"ruleId":"4626","severity":1,"message":"4627","line":388,"column":88,"nodeType":"4628","messageId":"4629","endLine":388,"endColumn":90},{"ruleId":"4626","severity":1,"message":"4630","line":423,"column":92,"nodeType":"4628","messageId":"4629","endLine":423,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":57,"column":40,"nodeType":"4628","messageId":"4629","endLine":57,"endColumn":42},{"ruleId":"4626","severity":1,"message":"4627","line":63,"column":36,"nodeType":"4628","messageId":"4629","endLine":63,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":81,"column":36,"nodeType":"4628","messageId":"4629","endLine":81,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":108,"column":44,"nodeType":"4628","messageId":"4629","endLine":108,"endColumn":46},{"ruleId":"4631","severity":1,"message":"4663","line":4,"column":8,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":17},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":30,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4630","line":83,"column":60,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":108,"column":44,"nodeType":"4628","messageId":"4629","endLine":108,"endColumn":46},{"ruleId":"4631","severity":1,"message":"4819","line":120,"column":19,"nodeType":"4633","messageId":"4634","endLine":120,"endColumn":30},{"ruleId":"4631","severity":1,"message":"4820","line":120,"column":32,"nodeType":"4633","messageId":"4634","endLine":120,"endColumn":42},{"ruleId":"4631","severity":1,"message":"4821","line":120,"column":44,"nodeType":"4633","messageId":"4634","endLine":120,"endColumn":59},{"ruleId":"4631","severity":1,"message":"4765","line":120,"column":61,"nodeType":"4633","messageId":"4634","endLine":120,"endColumn":70},{"ruleId":"4631","severity":1,"message":"4822","line":148,"column":13,"nodeType":"4633","messageId":"4634","endLine":148,"endColumn":18},{"ruleId":"4626","severity":1,"message":"4627","line":113,"column":36,"nodeType":"4628","messageId":"4629","endLine":113,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4630","line":131,"column":36,"nodeType":"4628","messageId":"4629","endLine":131,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":156,"column":44,"nodeType":"4628","messageId":"4629","endLine":156,"endColumn":46},{"ruleId":"4631","severity":1,"message":"4663","line":3,"column":8,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":17},{"ruleId":"4631","severity":1,"message":"4687","line":4,"column":13,"nodeType":"4633","messageId":"4634","endLine":4,"endColumn":16},{"ruleId":"4631","severity":1,"message":"4823","line":12,"column":10,"nodeType":"4633","messageId":"4634","endLine":12,"endColumn":26},{"ruleId":"4626","severity":1,"message":"4627","line":41,"column":34,"nodeType":"4628","messageId":"4629","endLine":41,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":94,"column":51,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4630","line":216,"column":51,"nodeType":"4628","messageId":"4629","endLine":216,"endColumn":53},{"ruleId":"4631","severity":1,"message":"4656","line":2,"column":10,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":13},{"ruleId":"4631","severity":1,"message":"4657","line":2,"column":15,"nodeType":"4633","messageId":"4634","endLine":2,"endColumn":18},{"ruleId":"4631","severity":1,"message":"4824","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4726","line":10,"column":8,"nodeType":"4633","messageId":"4634","endLine":10,"endColumn":14},{"ruleId":"4631","severity":1,"message":"4825","line":12,"column":8,"nodeType":"4633","messageId":"4634","endLine":12,"endColumn":24},{"ruleId":"4631","severity":1,"message":"4782","line":14,"column":13,"nodeType":"4633","messageId":"4634","endLine":14,"endColumn":22},{"ruleId":"4626","severity":1,"message":"4630","line":70,"column":38,"nodeType":"4628","messageId":"4629","endLine":70,"endColumn":40},{"ruleId":"4626","severity":1,"message":"4627","line":89,"column":22,"nodeType":"4628","messageId":"4629","endLine":89,"endColumn":24},{"ruleId":"4626","severity":1,"message":"4627","line":28,"column":118,"nodeType":"4628","messageId":"4629","endLine":28,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4627","line":66,"column":50,"nodeType":"4628","messageId":"4629","endLine":66,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":76,"column":27,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4627","line":76,"column":49,"nodeType":"4628","messageId":"4629","endLine":76,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4630","line":78,"column":31,"nodeType":"4628","messageId":"4629","endLine":78,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4630","line":78,"column":63,"nodeType":"4628","messageId":"4629","endLine":78,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":81,"column":27,"nodeType":"4628","messageId":"4629","endLine":81,"endColumn":29},{"ruleId":"4626","severity":1,"message":"4630","line":83,"column":31,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":33},{"ruleId":"4626","severity":1,"message":"4627","line":148,"column":48,"nodeType":"4628","messageId":"4629","endLine":148,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":221,"column":89,"nodeType":"4628","messageId":"4629","endLine":221,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4627","line":34,"column":50,"nodeType":"4628","messageId":"4629","endLine":34,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":48,"column":44,"nodeType":"4628","messageId":"4629","endLine":48,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4630","line":68,"column":56,"nodeType":"4628","messageId":"4629","endLine":68,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":83,"column":60,"nodeType":"4628","messageId":"4629","endLine":83,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":91,"column":16,"nodeType":"4628","messageId":"4629","endLine":91,"endColumn":18},{"ruleId":"4626","severity":1,"message":"4630","line":100,"column":42,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":104,"column":47,"nodeType":"4628","messageId":"4629","endLine":104,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4630","line":120,"column":42,"nodeType":"4628","messageId":"4629","endLine":120,"endColumn":44},{"ruleId":"4626","severity":1,"message":"4630","line":121,"column":37,"nodeType":"4628","messageId":"4629","endLine":121,"endColumn":39},{"ruleId":"4626","severity":1,"message":"4627","line":174,"column":107,"nodeType":"4628","messageId":"4629","endLine":174,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4627","line":192,"column":67,"nodeType":"4628","messageId":"4629","endLine":192,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":196,"column":192,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":194},{"ruleId":"4626","severity":1,"message":"4627","line":196,"column":323,"nodeType":"4628","messageId":"4629","endLine":196,"endColumn":325},{"ruleId":"4626","severity":1,"message":"4627","line":199,"column":207,"nodeType":"4628","messageId":"4629","endLine":199,"endColumn":209},{"ruleId":"4626","severity":1,"message":"4630","line":207,"column":162,"nodeType":"4628","messageId":"4629","endLine":207,"endColumn":164},{"ruleId":"4626","severity":1,"message":"4627","line":228,"column":92,"nodeType":"4628","messageId":"4629","endLine":228,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":230,"column":52,"nodeType":"4628","messageId":"4629","endLine":230,"endColumn":54},{"ruleId":"4626","severity":1,"message":"4627","line":235,"column":70,"nodeType":"4628","messageId":"4629","endLine":235,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4630","line":246,"column":64,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4630","line":246,"column":86,"nodeType":"4628","messageId":"4629","endLine":246,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":77,"column":60,"nodeType":"4628","messageId":"4629","endLine":77,"endColumn":62},{"ruleId":"4626","severity":1,"message":"4627","line":101,"column":53,"nodeType":"4628","messageId":"4629","endLine":101,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4627","line":125,"column":28,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":125,"column":59,"nodeType":"4628","messageId":"4629","endLine":125,"endColumn":61},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":32,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":133,"column":63,"nodeType":"4628","messageId":"4629","endLine":133,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4630","line":188,"column":86,"nodeType":"4628","messageId":"4629","endLine":188,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4630","line":189,"column":81,"nodeType":"4628","messageId":"4629","endLine":189,"endColumn":83},{"ruleId":"4626","severity":1,"message":"4630","line":207,"column":56,"nodeType":"4628","messageId":"4629","endLine":207,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4627","line":210,"column":44,"nodeType":"4628","messageId":"4629","endLine":210,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":222,"column":34,"nodeType":"4628","messageId":"4629","endLine":222,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":227,"column":53,"nodeType":"4628","messageId":"4629","endLine":227,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":239,"column":54,"nodeType":"4628","messageId":"4629","endLine":239,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":261,"column":43,"nodeType":"4628","messageId":"4629","endLine":261,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":261,"column":72,"nodeType":"4628","messageId":"4629","endLine":261,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":290,"column":33,"nodeType":"4628","messageId":"4629","endLine":290,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":297,"column":30,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":297,"column":62,"nodeType":"4628","messageId":"4629","endLine":297,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":334,"column":54,"nodeType":"4628","messageId":"4629","endLine":334,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":334,"column":90,"nodeType":"4628","messageId":"4629","endLine":334,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4630","line":374,"column":65,"nodeType":"4628","messageId":"4629","endLine":374,"endColumn":67},{"ruleId":"4626","severity":1,"message":"4630","line":393,"column":125,"nodeType":"4628","messageId":"4629","endLine":393,"endColumn":127},{"ruleId":"4626","severity":1,"message":"4627","line":393,"column":216,"nodeType":"4628","messageId":"4629","endLine":393,"endColumn":218},{"ruleId":"4626","severity":1,"message":"4627","line":393,"column":255,"nodeType":"4628","messageId":"4629","endLine":393,"endColumn":257},{"ruleId":"4626","severity":1,"message":"4630","line":405,"column":109,"nodeType":"4628","messageId":"4629","endLine":405,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4630","line":408,"column":68,"nodeType":"4628","messageId":"4629","endLine":408,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":408,"column":107,"nodeType":"4628","messageId":"4629","endLine":408,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4630","line":420,"column":72,"nodeType":"4628","messageId":"4629","endLine":420,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":423,"column":72,"nodeType":"4628","messageId":"4629","endLine":423,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":432,"column":121,"nodeType":"4628","messageId":"4629","endLine":432,"endColumn":123},{"ruleId":"4626","severity":1,"message":"4627","line":432,"column":218,"nodeType":"4628","messageId":"4629","endLine":432,"endColumn":220},{"ruleId":"4626","severity":1,"message":"4627","line":432,"column":257,"nodeType":"4628","messageId":"4629","endLine":432,"endColumn":259},{"ruleId":"4626","severity":1,"message":"4630","line":444,"column":109,"nodeType":"4628","messageId":"4629","endLine":444,"endColumn":111},{"ruleId":"4626","severity":1,"message":"4630","line":447,"column":68,"nodeType":"4628","messageId":"4629","endLine":447,"endColumn":70},{"ruleId":"4626","severity":1,"message":"4630","line":447,"column":107,"nodeType":"4628","messageId":"4629","endLine":447,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4630","line":459,"column":72,"nodeType":"4628","messageId":"4629","endLine":459,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4630","line":462,"column":72,"nodeType":"4628","messageId":"4629","endLine":462,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":474,"column":120,"nodeType":"4628","messageId":"4629","endLine":474,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4627","line":474,"column":213,"nodeType":"4628","messageId":"4629","endLine":474,"endColumn":215},{"ruleId":"4626","severity":1,"message":"4627","line":474,"column":252,"nodeType":"4628","messageId":"4629","endLine":474,"endColumn":254},{"ruleId":"4658","severity":1,"message":"4659","line":478,"column":125,"nodeType":"4628","messageId":"4660","endLine":478,"endColumn":126},{"ruleId":"4658","severity":1,"message":"4659","line":497,"column":125,"nodeType":"4628","messageId":"4660","endLine":497,"endColumn":126},{"ruleId":"4658","severity":1,"message":"4659","line":516,"column":125,"nodeType":"4628","messageId":"4660","endLine":516,"endColumn":126},{"ruleId":"4626","severity":1,"message":"4630","line":533,"column":77,"nodeType":"4628","messageId":"4629","endLine":533,"endColumn":79},{"ruleId":"4658","severity":1,"message":"4659","line":536,"column":138,"nodeType":"4628","messageId":"4660","endLine":536,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":558,"column":175,"nodeType":"4628","messageId":"4629","endLine":558,"endColumn":177},{"ruleId":"4626","severity":1,"message":"4627","line":558,"column":214,"nodeType":"4628","messageId":"4629","endLine":558,"endColumn":216},{"ruleId":"4626","severity":1,"message":"4627","line":562,"column":86,"nodeType":"4628","messageId":"4629","endLine":562,"endColumn":88},{"ruleId":"4626","severity":1,"message":"4627","line":25,"column":57,"nodeType":"4628","messageId":"4629","endLine":25,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4627","line":100,"column":36,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":38},{"ruleId":"4626","severity":1,"message":"4627","line":103,"column":41,"nodeType":"4628","messageId":"4629","endLine":103,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":115,"column":33,"nodeType":"4628","messageId":"4629","endLine":115,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":135,"column":26,"nodeType":"4628","messageId":"4629","endLine":135,"endColumn":28},{"ruleId":"4626","severity":1,"message":"4627","line":143,"column":51,"nodeType":"4628","messageId":"4629","endLine":143,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4627","line":144,"column":47,"nodeType":"4628","messageId":"4629","endLine":144,"endColumn":49},{"ruleId":"4626","severity":1,"message":"4630","line":198,"column":44,"nodeType":"4628","messageId":"4629","endLine":198,"endColumn":46},{"ruleId":"4626","severity":1,"message":"4627","line":200,"column":56,"nodeType":"4628","messageId":"4629","endLine":200,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":224,"column":46,"nodeType":"4628","messageId":"4629","endLine":224,"endColumn":48},{"ruleId":"4626","severity":1,"message":"4627","line":226,"column":58,"nodeType":"4628","messageId":"4629","endLine":226,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":308,"column":89,"nodeType":"4628","messageId":"4629","endLine":308,"endColumn":91},{"ruleId":"4626","severity":1,"message":"4630","line":312,"column":53,"nodeType":"4628","messageId":"4629","endLine":312,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":316,"column":53,"nodeType":"4628","messageId":"4629","endLine":316,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":320,"column":51,"nodeType":"4628","messageId":"4629","endLine":320,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4630","line":324,"column":50,"nodeType":"4628","messageId":"4629","endLine":324,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4630","line":328,"column":53,"nodeType":"4628","messageId":"4629","endLine":328,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":332,"column":78,"nodeType":"4628","messageId":"4629","endLine":332,"endColumn":80},{"ruleId":"4626","severity":1,"message":"4630","line":336,"column":49,"nodeType":"4628","messageId":"4629","endLine":336,"endColumn":51},{"ruleId":"4626","severity":1,"message":"4630","line":373,"column":48,"nodeType":"4628","messageId":"4629","endLine":373,"endColumn":50},{"ruleId":"4626","severity":1,"message":"4630","line":376,"column":56,"nodeType":"4628","messageId":"4629","endLine":376,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":379,"column":50,"nodeType":"4628","messageId":"4629","endLine":379,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4630","line":382,"column":56,"nodeType":"4628","messageId":"4629","endLine":382,"endColumn":58},{"ruleId":"4626","severity":1,"message":"4630","line":385,"column":66,"nodeType":"4628","messageId":"4629","endLine":385,"endColumn":68},{"ruleId":"4626","severity":1,"message":"4630","line":388,"column":62,"nodeType":"4628","messageId":"4629","endLine":388,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":391,"column":70,"nodeType":"4628","messageId":"4629","endLine":391,"endColumn":72},{"ruleId":"4626","severity":1,"message":"4627","line":402,"column":34,"nodeType":"4628","messageId":"4629","endLine":402,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":434,"column":63,"nodeType":"4628","messageId":"4629","endLine":434,"endColumn":65},{"ruleId":"4626","severity":1,"message":"4627","line":458,"column":99,"nodeType":"4628","messageId":"4629","endLine":458,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":495,"column":107,"nodeType":"4628","messageId":"4629","endLine":495,"endColumn":109},{"ruleId":"4626","severity":1,"message":"4630","line":663,"column":108,"nodeType":"4628","messageId":"4629","endLine":663,"endColumn":110},{"ruleId":"4626","severity":1,"message":"4630","line":31,"column":97,"nodeType":"4628","messageId":"4629","endLine":31,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4630","line":32,"column":94,"nodeType":"4628","messageId":"4629","endLine":32,"endColumn":96},{"ruleId":"4626","severity":1,"message":"4630","line":33,"column":92,"nodeType":"4628","messageId":"4629","endLine":33,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4630","line":48,"column":99,"nodeType":"4628","messageId":"4629","endLine":48,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":28,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":30},{"ruleId":"4626","severity":1,"message":"4627","line":86,"column":58,"nodeType":"4628","messageId":"4629","endLine":86,"endColumn":60},{"ruleId":"4626","severity":1,"message":"4627","line":94,"column":32,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":34},{"ruleId":"4626","severity":1,"message":"4627","line":94,"column":62,"nodeType":"4628","messageId":"4629","endLine":94,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":146,"column":87,"nodeType":"4628","messageId":"4629","endLine":146,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4630","line":146,"column":157,"nodeType":"4628","messageId":"4629","endLine":146,"endColumn":159},{"ruleId":"4626","severity":1,"message":"4630","line":151,"column":53,"nodeType":"4628","messageId":"4629","endLine":151,"endColumn":55},{"ruleId":"4626","severity":1,"message":"4630","line":172,"column":79,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4630","line":172,"column":105,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":107},{"ruleId":"4626","severity":1,"message":"4630","line":172,"column":203,"nodeType":"4628","messageId":"4629","endLine":172,"endColumn":205},{"ruleId":"4626","severity":1,"message":"4630","line":175,"column":55,"nodeType":"4628","messageId":"4629","endLine":175,"endColumn":57},{"ruleId":"4626","severity":1,"message":"4627","line":194,"column":43,"nodeType":"4628","messageId":"4629","endLine":194,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":207,"column":34,"nodeType":"4628","messageId":"4629","endLine":207,"endColumn":36},{"ruleId":"4626","severity":1,"message":"4627","line":216,"column":43,"nodeType":"4628","messageId":"4629","endLine":216,"endColumn":45},{"ruleId":"4626","severity":1,"message":"4627","line":216,"column":72,"nodeType":"4628","messageId":"4629","endLine":216,"endColumn":74},{"ruleId":"4626","severity":1,"message":"4627","line":245,"column":33,"nodeType":"4628","messageId":"4629","endLine":245,"endColumn":35},{"ruleId":"4626","severity":1,"message":"4630","line":252,"column":30,"nodeType":"4628","messageId":"4629","endLine":252,"endColumn":32},{"ruleId":"4626","severity":1,"message":"4627","line":252,"column":62,"nodeType":"4628","messageId":"4629","endLine":252,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":286,"column":54,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":56},{"ruleId":"4626","severity":1,"message":"4627","line":286,"column":90,"nodeType":"4628","messageId":"4629","endLine":286,"endColumn":92},{"ruleId":"4626","severity":1,"message":"4627","line":320,"column":61,"nodeType":"4628","messageId":"4629","endLine":320,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4630","line":341,"column":120,"nodeType":"4628","messageId":"4629","endLine":341,"endColumn":122},{"ruleId":"4626","severity":1,"message":"4630","line":350,"column":99,"nodeType":"4628","messageId":"4629","endLine":350,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4630","line":351,"column":57,"nodeType":"4628","messageId":"4629","endLine":351,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4630","line":363,"column":67,"nodeType":"4628","messageId":"4629","endLine":363,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4630","line":372,"column":116,"nodeType":"4628","messageId":"4629","endLine":372,"endColumn":118},{"ruleId":"4626","severity":1,"message":"4630","line":381,"column":99,"nodeType":"4628","messageId":"4629","endLine":381,"endColumn":101},{"ruleId":"4626","severity":1,"message":"4630","line":382,"column":57,"nodeType":"4628","messageId":"4629","endLine":382,"endColumn":59},{"ruleId":"4626","severity":1,"message":"4630","line":394,"column":67,"nodeType":"4628","messageId":"4629","endLine":394,"endColumn":69},{"ruleId":"4626","severity":1,"message":"4627","line":405,"column":112,"nodeType":"4628","messageId":"4629","endLine":405,"endColumn":114},{"ruleId":"4658","severity":1,"message":"4659","line":409,"column":113,"nodeType":"4628","messageId":"4660","endLine":409,"endColumn":114},{"ruleId":"4626","severity":1,"message":"4630","line":417,"column":129,"nodeType":"4628","messageId":"4629","endLine":417,"endColumn":131},{"ruleId":"4658","severity":1,"message":"4659","line":429,"column":113,"nodeType":"4628","messageId":"4660","endLine":429,"endColumn":114},{"ruleId":"4626","severity":1,"message":"4630","line":437,"column":129,"nodeType":"4628","messageId":"4629","endLine":437,"endColumn":131},{"ruleId":"4626","severity":1,"message":"4627","line":448,"column":87,"nodeType":"4628","messageId":"4629","endLine":448,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4627","line":448,"column":122,"nodeType":"4628","messageId":"4629","endLine":448,"endColumn":124},{"ruleId":"4658","severity":1,"message":"4659","line":456,"column":119,"nodeType":"4628","messageId":"4660","endLine":456,"endColumn":120},{"ruleId":"4626","severity":1,"message":"4630","line":460,"column":146,"nodeType":"4628","messageId":"4629","endLine":460,"endColumn":148},{"ruleId":"4626","severity":1,"message":"4630","line":480,"column":137,"nodeType":"4628","messageId":"4629","endLine":480,"endColumn":139},{"ruleId":"4626","severity":1,"message":"4627","line":496,"column":61,"nodeType":"4628","messageId":"4629","endLine":496,"endColumn":63},{"ruleId":"4626","severity":1,"message":"4627","line":496,"column":147,"nodeType":"4628","messageId":"4629","endLine":496,"endColumn":149},{"ruleId":"4631","severity":1,"message":"4826","line":10,"column":85,"nodeType":"4633","messageId":"4634","endLine":10,"endColumn":99},{"ruleId":"4626","severity":1,"message":"4627","line":16,"column":92,"nodeType":"4628","messageId":"4629","endLine":16,"endColumn":94},{"ruleId":"4626","severity":1,"message":"4627","line":24,"column":35,"nodeType":"4628","messageId":"4629","endLine":24,"endColumn":37},{"ruleId":"4626","severity":1,"message":"4627","line":38,"column":75,"nodeType":"4628","messageId":"4629","endLine":38,"endColumn":77},{"ruleId":"4626","severity":1,"message":"4627","line":44,"column":79,"nodeType":"4628","messageId":"4629","endLine":44,"endColumn":81},{"ruleId":"4626","severity":1,"message":"4627","line":51,"column":83,"nodeType":"4628","messageId":"4629","endLine":51,"endColumn":85},{"ruleId":"4661","severity":1,"message":"4662","line":54,"column":73,"nodeType":"4655","endLine":54,"endColumn":160},{"ruleId":"4626","severity":1,"message":"4627","line":59,"column":87,"nodeType":"4628","messageId":"4629","endLine":59,"endColumn":89},{"ruleId":"4626","severity":1,"message":"4630","line":72,"column":64,"nodeType":"4628","messageId":"4629","endLine":72,"endColumn":66},{"ruleId":"4626","severity":1,"message":"4627","line":74,"column":73,"nodeType":"4628","messageId":"4629","endLine":74,"endColumn":75},{"ruleId":"4626","severity":1,"message":"4627","line":79,"column":73,"nodeType":"4628","messageId":"4629","endLine":79,"endColumn":75},{"ruleId":"4691","severity":1,"message":"4692","line":44,"column":29,"nodeType":"4655","endLine":44,"endColumn":88},{"ruleId":"4691","severity":1,"message":"4692","line":45,"column":29,"nodeType":"4655","endLine":45,"endColumn":107},{"ruleId":"4631","severity":1,"message":"4726","line":9,"column":8,"nodeType":"4633","messageId":"4634","endLine":9,"endColumn":14},{"ruleId":"4636","severity":1,"message":"4637","line":43,"column":41,"nodeType":"4638","messageId":"4639","endLine":43,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":82,"column":41,"nodeType":"4628","messageId":"4629","endLine":82,"endColumn":43},{"ruleId":"4626","severity":1,"message":"4630","line":84,"column":62,"nodeType":"4628","messageId":"4629","endLine":84,"endColumn":64},{"ruleId":"4626","severity":1,"message":"4630","line":96,"column":51,"nodeType":"4628","messageId":"4629","endLine":96,"endColumn":53},{"ruleId":"4626","severity":1,"message":"4630","line":100,"column":50,"nodeType":"4628","messageId":"4629","endLine":100,"endColumn":52},{"ruleId":"4626","severity":1,"message":"4627","line":126,"column":34,"nodeType":"4628","messageId":"4629","endLine":126,"endColumn":36},{"ruleId":"4658","severity":1,"message":"4659","line":202,"column":100,"nodeType":"4628","messageId":"4660","endLine":202,"endColumn":101},{"ruleId":"4631","severity":1,"message":"4726","line":3,"column":8,"nodeType":"4633","messageId":"4634","endLine":3,"endColumn":14},"no-native-reassign",["4827"],"no-negated-in-lhs",["4828"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'httpsVar' is assigned a value but never used.","Identifier","unusedVar","'httpVar' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'HEADER_REF' is defined but never used.","no-redeclare","'userAnalytic' is already defined.","redeclared","'get' is defined but never used.","no-dupe-keys","Duplicate key 'REFER_LOCK'.","ObjectExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'AppSelectedSport' is defined but never used.","'MATCH_TYPE' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'Row' is defined but never used.","'Col' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'WSManager' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'FormGroup' is defined but never used.","'inputStyleLeft' is defined but never used.","'MomentDateComponent' is defined but never used.","'FloatingLabel' is defined but never used.","'Skeleton' is defined but never used.","'CountdownTimer' is defined but never used.","'isLoading' is assigned a value but never used.","'game_starts_in' is assigned a value but never used.","'isBtnEnbl' is assigned a value but never used.","'PickemLobby' is defined but never used.","'PickemMycontest' is defined but never used.","'OpenPredictionLeaderboard' is assigned a value but never used.","'DefaultLanguage' is assigned a value but never used.","'Helmet' is defined but never used.","'MetaData' is defined but never used.","'Checkbox' is defined but never used.","'NavLink' is defined but never used.","'getAppStoreLink' is defined but never used.","'CustomPhoneInput' is defined but never used.","'WSC' is defined but never used.","'Utilities' is defined but never used.","'notify' is defined but never used.","'Button' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'filterDataBy' is assigned a value but never used.","'SPONSORDATA' is assigned a value but never used.","'OpenPredictorFPPFixture' is defined but never used.","'Slider' is defined but never used.","'_Map' is defined but never used.","'setValue' is defined but never used.","'CustomHeader' is defined but never used.","'ls' is defined but never used.","'LeagueDetails' is defined but never used.","'HeaderOption' is assigned a value but never used.","'showContestDetail' is assigned a value but never used.","'_debounce' is defined but never used.","'OpenPredictorFixture' is defined but never used.","'getLobbyBanner' is defined but never used.","'Filter' is defined but never used.","'bannerData' is assigned a value but never used.","'filterLeagueList' is assigned a value but never used.","'FitlerOptions' is assigned a value but never used.","'userProfileDataFromLS' is assigned a value but never used.","'masterData' is assigned a value but never used.","'hasMore' is assigned a value but never used.","'showEditCodeModal' is assigned a value but never used.","'IsModalHide' is assigned a value but never used.","'IsModalShow' is assigned a value but never used.","'isModalHideEdit' is assigned a value but never used.","'isModalShowEdit' is assigned a value but never used.","'GameType' is defined but never used.","'isIOS' is defined but never used.","'profileData' is assigned a value but never used.","'AllLeagueList' is defined but never used.","'EmailShareButton' is defined but never used.","'onMakePrediction' is assigned a value but never used.","'parseURLDate' is defined but never used.","'Images' is defined but never used.","'MyContext' is defined but never used.","'LobbyBannerSlider' is defined but never used.","'HallofFameModal' is defined but never used.","'ConfirmationPopup' is defined but never used.","'FreeToPlayLobby' is defined but never used.","'viewLeaugeSheduled' is assigned a value but never used.","'MiniLeagueList' is assigned a value but never used.","'pageLanding' is assigned a value but never used.","'showLobby' is assigned a value but never used.","'hallOfFameItem' is assigned a value but never used.","'bannerLength' is assigned a value but never used.","'allowCollection' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'prize_text' is assigned a value but never used.","Array.prototype.map() expects a return value from function.","FunctionExpression","'CONTEST_UPCOMING' is defined but never used.","'ROTATION_RANGE' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'contestSliderData' is assigned a value but never used.","'keyId' is assigned a value but never used.","'showContestItem' is assigned a value but never used.","'useWinningAmt' is assigned a value but never used.","'BalanceDetail' is assigned a value but never used.","'BalDetail' is assigned a value but never used.","'isFromFreeToPlay' is assigned a value but never used.","'SELECTED_GAMET' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'MatchInfo' is defined but never used.","'gotoLeaderBoard' is assigned a value but never used.","'isFromFreeToPlayLandingPage' is assigned a value but never used.","'LobyyData' is assigned a value but never used.","'ProgressBar' is defined but never used.","'_isUndefined' is defined but never used.","'Table' is defined but never used.","'Panel' is defined but never used.","'downloadContestTeam' is defined but never used.","'AllPrizes' is defined but never used.","'lineupData' is assigned a value but never used.","'_isEmpty' is defined but never used.","'_sumBy' is defined but never used.","'_cloneDeep' is defined but never used.","'prizeType' is assigned a value but never used.","'PrizeSection' is defined but never used.","'matchParam' is assigned a value but never used.","'ContestDetail' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'AppLabels' is defined but never used.","'text' is defined but never used.","'checkUsername' is defined but never used.","'updateUsername' is defined but never used.","'AL' is defined but never used.","'DataCountBlock' is defined but never used.","'obj' is already defined.","'FacebookShareButton' is defined but never used.","'WhatsappShareButton' is defined but never used.","'CopyToClipboard' is defined but never used.","'numberOfWinners' is assigned a value but never used.","'disableWinner' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","Unexpected mix of '||' and '&&'.","'TotalSalary' is assigned a value but never used.","'Constants' is defined but never used.","'Label' is defined but never used.","'_times' is defined but never used.","'_filter' is defined but never used.","'Shimmer' is assigned a value but never used.","'shareContest' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'Fragment' is defined but never used.","'joinContest' is defined but never used.","'getUserLineUps' is defined but never used.","'getMyCollection' is defined but never used.","'MD' is defined but never used.","'globalThis' is assigned a value but never used.","'selectStyle' is defined but never used.","'DatePicker' is defined but never used.","'joinContestWithMultiTeam' is defined but never used.","'today' is assigned a value but never used.","'errorMsg' is already defined.","'key' is already defined.","'joinContest' is assigned a value but never used.","'lineupPath' is assigned a value but never used.","'FixturedContest' is assigned a value but never used.","'email' is assigned a value but never used.","'AdSenseComponent' is defined but never used.","'Select' is defined but never used.","'DownloadAppModal' is defined but never used.","'TeamComparison' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]