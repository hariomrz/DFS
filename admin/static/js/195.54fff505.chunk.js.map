{"version":3,"sources":["views/Cms/MinimumWithdrawl.jsx"],"names":["MinimumWithdrawl","props","handleInputChange","e","name","target","value","setState","_","isEmpty","state","MinAmount","notify","show","formValid","MaxAmount","parseInt","this","getContent","WSManager","Rest","NC","then","Response","response_code","data","min_withdrawl","max_withdrawl","catch","error","params","message","className","md","htmlFor","type","placeholder","onChange","disabled","onClick","updateConfiguration","Component"],"mappings":"iXAMqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0BVC,kBAAoB,SAACC,GAAO,IAAD,EACnBC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACrB,EAAKC,UAAL,mBAAiBH,EAAOE,GAAxB,2BAA0C,GAA1C,IAAkD,WAE9C,GAAIE,IAAEC,QAAQ,EAAKC,MAAMC,WAAY,CAEjCC,SAAOC,KADG,mCACO,QAAS,KAC1B,EAAKN,SAAS,CAAEO,WAAW,IAG/B,GAAIN,IAAEC,QAAQ,EAAKC,MAAMK,WAAY,CAEjCH,SAAOC,KADG,mCACO,QAAS,KAC1B,EAAKN,SAAS,CAAEO,WAAW,IAG/B,GAAI,EAAKJ,MAAMC,UAAY,EAAG,CAE1BC,SAAOC,KADE,2CACQ,QAAS,KAC1B,EAAKN,SAAS,CAAEO,WAAW,IAG/B,GAAIE,SAAS,EAAKN,MAAMK,WAAaC,SAAS,EAAKN,MAAMC,WAAY,CAEjEC,SAAOC,KADG,iEACO,QAAS,KAC1B,EAAKN,SAAS,CAAEO,WAAW,SAnDnC,EAAKJ,MAAQ,CACTC,UAAY,GACZI,UAAY,GACZD,WAAY,GALD,E,gEASfG,KAAKC,e,mCAGK,IAAD,OACTC,IAAUC,KAAKC,KAAaA,KAAgC,IAAIC,MAAK,SAAAC,GAC7DA,EAASC,eAAiBH,KAC1B,EAAKd,SAAS,CACVI,UAAWY,EAASE,KAAKC,cACzBX,UAAWQ,EAASE,KAAKE,gBAG7Bf,SAAOC,KAAKQ,KAAiB,QAAS,QAE3CO,OAAM,SAAAC,GACLjB,SAAOC,KAAKQ,KAAiB,QAAS,U,4CAqC1CJ,KAAKV,SAAS,CAAEO,WAAW,IADT,MAEaG,KAAKP,MAChCoB,EAAS,CACT,cAJc,EAEZnB,UAGF,cALc,EAEDI,WAKjBI,IAAUC,KAAKC,KAAaA,KAAmCS,GAAQR,MAAK,SAAAC,GACpEA,EAASC,eAAiBH,KAC1BT,SAAOC,KAAKU,EAASQ,QAAS,UAAW,KAEzCnB,SAAOC,KAAKQ,KAAiB,QAAS,QAE3CO,OAAM,SAAAC,GACLjB,SAAOC,KAAKQ,KAAiB,QAAS,U,+BAIpC,IAAD,SACqCJ,KAAKP,MAAzCC,EADD,EACCA,UAAWI,EADZ,EACYA,UAAWD,EADvB,EACuBA,UAC5B,OACI,yBAAKkB,UAAU,yBACX,yBAAKA,UAAU,2BACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,IACL,yBAAKD,UAAU,0BAAf,wBAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,GACL,2BAAOC,QAAQ,YAAf,kBACA,kBAAC,IAAD,CACIC,KAAK,SACL/B,KAAK,YACLE,MAAOK,EACPyB,YAAY,MACZC,SAAU,SAAClC,GAAD,OAAO,EAAKD,kBAAkBC,OAGhD,kBAAC,IAAD,CAAK8B,GAAI,GACL,2BAAOC,QAAQ,YAAf,kBACA,kBAAC,IAAD,CACIC,KAAK,SACL/B,KAAK,YACLE,MAAOS,EACPqB,YAAY,MACZC,SAAU,SAAClC,GAAD,OAAO,EAAKD,kBAAkBC,QAIpD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK8B,GAAI,IACL,yBAAKD,UAAU,qBACX,kBAAC,IAAD,CACIM,SAAUxB,EACVkB,UAAU,wBACVO,QAAS,kBAAM,EAAKC,wBAHxB,iB,GAjHcC","file":"static/js/195.54fff505.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Input, Button } from 'reactstrap';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport _ from 'lodash';\r\nexport default class MinimumWithdrawl extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            MinAmount : '', \r\n            MaxAmount : '',\r\n            formValid : true\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getContent()\r\n     }\r\n\r\n    getContent() {\r\n        WSManager.Rest(NC.baseURL + NC.GET_MIN_MAX_WITHDRAWL_LIMIT, {}).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({\r\n                    MinAmount: Response.data.min_withdrawl,\r\n                    MaxAmount: Response.data.max_withdrawl,\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({ [name]: value, formValid: false },()=>{\r\n\r\n            if (_.isEmpty(this.state.MinAmount)) {\r\n                let msg = 'Minimum amount can not be empty.'\r\n                notify.show(msg, 'error', 5000)\r\n                this.setState({ formValid: true })\r\n            }\r\n            \r\n            if (_.isEmpty(this.state.MaxAmount)) {\r\n                let msg = 'Maximum amount can not be empty.'\r\n                notify.show(msg, 'error', 5000)\r\n                this.setState({ formValid: true })\r\n            }\r\n            \r\n            if (this.state.MinAmount < 1) {\r\n               let msg = 'Minimum amount should be greater than 0.'\r\n                notify.show(msg, 'error', 5000)\r\n                this.setState({ formValid: true })                \r\n            }\r\n\r\n            if (parseInt(this.state.MaxAmount) < parseInt(this.state.MinAmount)) {\r\n                let msg = 'Maximum amount should be greater than equal to minimum amount.'\r\n                notify.show(msg, 'error', 5000)\r\n                this.setState({ formValid: true })                \r\n            }           \r\n            \r\n        });\r\n    }\r\n\r\n    updateConfiguration() {\r\n        this.setState({ formValid: true })\r\n        let { MinAmount, MaxAmount } = this.state\r\n        let params = {\r\n            'min_withdrawl': MinAmount,\r\n            'max_withdrawl': MaxAmount,\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.UPDATE_MIN_MAX_WITHDRAWL_LIMIT, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                notify.show(Response.message, 'success', 5000)                \r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { MinAmount, MaxAmount, formValid } = this.state\r\n        return (\r\n            <div className=\"min-wdl-page hub-page\">\r\n                <div className=\"hp-dy-banners hp-bg-box\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"hp-dy-title float-left\">Minimum Withdrawal</div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"language\">Minimum Amount</label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                name='MinAmount'\r\n                                value={MinAmount}\r\n                                placeholder='100'\r\n                                onChange={(e) => this.handleInputChange(e)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"language\">Maximum Amount</label>\r\n                            <Input\r\n                                type=\"number\"\r\n                                name='MaxAmount'\r\n                                value={MaxAmount}\r\n                                placeholder='500'\r\n                                onChange={(e) => this.handleInputChange(e)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"float-right mt-30\">\r\n                                <Button\r\n                                    disabled={formValid}\r\n                                    className=\"btn-secondary-outline\"\r\n                                    onClick={() => this.updateConfiguration()}\r\n                                >Save\r\n                            </Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}