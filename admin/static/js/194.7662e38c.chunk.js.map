{"version":3,"sources":["views/Cms/HubPage.jsx"],"names":["HubPage","props","handleLangChange","value","_","isNull","setState","LanguageType","getConfiguration","handleInputChange","e","idx","name","target","ConfigureList","state","handleModuleChange","BannerData","updateBannerStatus","item","toggPosting","params","WSManager","Rest","NC","then","responseJson","response_code","notify","show","message","catch","error","revertOrigional","type","ImagePosting","key_name","game_key","getBannerData","onChangeGTypeImg","event","tempConImg","file","files","imgType","data","FormData","append","multipartPost","image","image_name","formValid","onChangeImage","img_for","NewBgImage","URL","createObjectURL","fileUplode","ModuleSetting","languageOptions","HF","getLanguageData","BannerIcon","this","BannerImg","isEmpty","map","Response","up_item","msg","flag","Select_Props","is_disabled","is_searchable","is_clearable","menu_is_open","class_name","sel_options","place_holder","selected_value","modalCallback","className","md","htmlFor","SelectProps","onChange","onClick","src","Images","no_image","alt","checked","key_value","titleName","isUndefined","replace","toUpperCase","key","maxLength","placeholder","accept","disabled","updateConfiguration","Component"],"mappings":"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","file":"static/js/194.7662e38c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Input, Button } from 'reactstrap';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport _ from 'lodash';\r\nimport Select from 'react-select';\r\nimport Images from '../../components/images';\r\nimport Loader from \"../../components/Loader\";\r\nimport HF from '../../helper/HelperFunction';\r\nimport SelectDropdown from \"../../components/SelectDropdown\";\r\nexport default class HubPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ModuleSetting: \"1\",\r\n            LanguageType: 'en',\r\n            languageOptions: HF.getLanguageData() ? HF.getLanguageData() : [],\r\n            ConfigureList: [],\r\n            toggPosting: false,\r\n            BannerData: [],\r\n            BannerIcon: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getConfiguration()\r\n        this.getBannerData()\r\n    }\r\n\r\n    getBannerData() {\r\n        WSManager.Rest(NC.baseURL + NC.GET_HUB_ICON_BANNER, {}).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                let BannerImg = []\r\n                let BannerIcon = []\r\n                if (!_.isEmpty(responseJson.data)) {\r\n                    _.map(responseJson.data, (item, idx) => {\r\n                        if (item.key_name === 'allow_hub_banner') {\r\n                            BannerImg = responseJson.data[idx]\r\n                        }\r\n                        if (item.key_name === 'allow_hub_icon') {\r\n                            BannerIcon = responseJson.data[idx]\r\n                        }\r\n                    })\r\n                }\r\n                this.setState({\r\n                    BannerData: BannerImg,\r\n                    BannerIcon: BannerIcon,\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    handleLangChange = (value) => {\r\n        if (!_.isNull(value)) {\r\n            this.setState({ LanguageType: value.value }, () => {\r\n                this.getConfiguration()\r\n            })\r\n        }\r\n    }\r\n\r\n    getConfiguration() {\r\n        let params = {\r\n            \"language\": this.state.LanguageType\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.GET_SPORTS_HUB_LIST, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n\r\n                _.map(Response.data, (item, idx) => {\r\n                    Response.data[idx].ImagePosting = true\r\n                    Response.data[idx].formValid = true\r\n                })\r\n\r\n                this.setState({\r\n                    ConfigureList: Response.data,\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    updateConfiguration(up_item, idx) {\r\n        let { LanguageType } = this.state\r\n        let msg = ''\r\n        let flag = false\r\n        if (_.isEmpty(up_item[LanguageType + '_title'])) {\r\n            msg = 'Title can not be empty'\r\n            flag = true\r\n        }\r\n\r\n        if (flag) {\r\n            notify.show(msg, 'error', 5000)\r\n            return false\r\n        }\r\n\r\n        let params = {\r\n            \"language\": LanguageType,\r\n            \"title\": up_item[LanguageType + '_title'],\r\n            \"body\": up_item[LanguageType + '_desc'],\r\n            \"image\": up_item.image,\r\n            \"game_key\": up_item.game_key\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.UPDATE_SPORTS_HUB, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                notify.show(Response.message, 'success', 5000)\r\n                let ConfigureList = this.state.ConfigureList;\r\n                ConfigureList[idx]['formValid'] = true;\r\n                this.setState({\r\n                    ConfigureList\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    handleInputChange = (e, idx) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        let ConfigureList = this.state.ConfigureList;\r\n        ConfigureList[idx][name] = value;\r\n        ConfigureList[idx]['formValid'] = false;\r\n        this.setState({\r\n            ConfigureList\r\n        });\r\n    }\r\n\r\n    handleModuleChange = () => {\r\n        let { BannerData } = this.state\r\n        BannerData['key_value'] = BannerData['key_value'] == \"1\" ? \"0\" : \"1\";\r\n        this.setState({\r\n            BannerData\r\n        }, this.updateBannerStatus)\r\n    }\r\n\r\n    updateBannerStatus = (item) => {\r\n        this.setState({ toggPosting: true })\r\n        let params = {\r\n            \"key_name\": \"allow_hub_banner\",\r\n            \"status\": this.state.BannerData['key_value']\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.TOGGLE_BANNER_IMAGE_STATUS, params).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                notify.show(responseJson.message, \"success\", 3000)\r\n                this.setState({ toggPosting: false })\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n        })\r\n    }\r\n\r\n    revertOrigional = (item, type) => {\r\n        this.setState({ ImagePosting: false })\r\n        let params = {\r\n            \"type\": type,\r\n            \"key_name\": type == '2' ? item.key_name : item.game_key\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.REVERT_TO_ORIGNAL_HUB, params).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                notify.show(responseJson.message, \"success\", 3000)\r\n                if (type == '2') {\r\n                    this.getBannerData()\r\n                }\r\n                if (type == '1') {\r\n                    this.getConfiguration()\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n        })\r\n    }\r\n\r\n    onChangeGTypeImg = (event, idx, key_name) => {\r\n\r\n        let { ConfigureList } = this.state\r\n\r\n        let tempConImg = ConfigureList\r\n        tempConImg[idx].ImagePosting = false\r\n\r\n        this.setState({ ConfigureList: tempConImg })\r\n\r\n        const file = event.target.files[0];\r\n        if (!file) {\r\n            return;\r\n        }\r\n        let imgType = 0;\r\n        if (key_name === 'allow_dfs')\r\n            imgType = 1\r\n\r\n        var data = new FormData();\r\n        data.append(\"name\", file);\r\n        data.append(\"type\", imgType);\r\n        WSManager.multipartPost(NC.baseURL + NC.HUB_IMAGE_DO_UPLOAD, data)\r\n            .then(responseJson => {\r\n                if (responseJson.response_code === NC.successCode) {\r\n                    tempConImg[idx].image = responseJson.data.image_name\r\n                    tempConImg[idx].formValid = false\r\n                    this.setState({\r\n                        ConfigureList: tempConImg,\r\n                    })\r\n                    notify.show(responseJson.message, \"success\", 3000)\r\n                }\r\n                tempConImg[idx].ImagePosting = true\r\n                this.setState({\r\n                    ConfigureList: tempConImg,\r\n                })\r\n            }).catch(error => {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n            });\r\n    }\r\n\r\n    onChangeImage = (event, img_for) => {\r\n        this.setState({\r\n            NewBgImage: URL.createObjectURL(event.target.files[0]),\r\n            fileUplode: event.target.files[0].name\r\n        });\r\n\r\n        const file = event.target.files[0];\r\n        if (!file) {\r\n            return;\r\n        }\r\n\r\n        var data = new FormData();\r\n        data.append(\"name\", file);\r\n        data.append(\"type\", img_for);\r\n        WSManager.multipartPost(NC.baseURL + NC.HUB_IMAGE_DO_UPLOAD, data)\r\n            .then(responseJson => {\r\n                notify.show(responseJson.message, \"success\", 3000)\r\n                this.getBannerData()\r\n            }).catch(error => {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { languageOptions, LanguageType, ConfigureList, BannerData, BannerIcon } = this.state\r\n        const Select_Props = {\r\n            is_disabled: false,\r\n            is_searchable: true,\r\n            is_clearable: false,\r\n            menu_is_open: false,\r\n            class_name: \"\",\r\n            sel_options: languageOptions,\r\n            place_holder: \"Select Language\",\r\n            selected_value: LanguageType,\r\n            modalCallback: this.handleLangChange\r\n        }\r\n        return (\r\n            <div className=\"hub-page\">\r\n                <h2 className=\"h2-cls\">Hub Page</h2>\r\n                <Row className=\"hp-lang\">\r\n                    <Col md={3}>\r\n                        <label htmlFor=\"language\">Language</label>\r\n                        <SelectDropdown SelectProps={Select_Props} />\r\n                    </Col>\r\n                    <Col md={9}></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <div className=\"hp-bg-box mt-30\">\r\n                            <Row>\r\n                                <Col md={2}>\r\n                                    <label htmlFor=\"SportsHubButton\">Sports Hub Button</label>\r\n                                </Col>\r\n                                <Col md={10}>\r\n                                    <div className=\"hp-up-img-btn\">\r\n                                        <div className=\"hp-up-img\">\r\n                                            <span className=\"hp-up-img-txt\">\r\n                                                Upload Image\r\n                                            </span>\r\n                                            <Input\r\n                                                type=\"file\"\r\n                                                name='PageHubImg'\r\n                                                className=\"ph-img\"\r\n                                                onChange={(e) => this.onChangeImage(e, 2)}\r\n                                            />\r\n                                        </div>\r\n                                        {\r\n                                            (!_.isEmpty(BannerIcon.image)) &&\r\n                                            <div\r\n                                                className=\"hp-revert-div-txt\"\r\n                                                onClick={() => this.revertOrigional(BannerIcon, 2)}\r\n                                            >\r\n                                                Revert to orignal\r\n                                        </div>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"hp-size-txt\">Size - 150*150</div>\r\n                                    <figure className=\"hp-img-box\">\r\n                                        {\r\n                                            (!_.isEmpty(BannerIcon.image)) ?\r\n                                                <img\r\n                                                    className=\"img-cover\"\r\n                                                    src={(BannerIcon.image) ? NC.S3 + NC.SETTING_IMG_PATH + BannerIcon.image : Images.no_image}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                                :\r\n                                                (_.isEmpty(BannerIcon.image)) ?\r\n                                                    ''\r\n                                                    :\r\n                                                    <Loader />\r\n                                        }\r\n                                    </figure>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <div className=\"hp-bg-box mt-30\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <div className=\"hp-bann-title float-left\">\r\n                                        Banner\r\n                                    </div>\r\n                                    <div className=\"activate-module float-right\">\r\n                                        {\r\n                                            <label className=\"global-switch\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={BannerData.key_value == \"1\" ? false : true}\r\n                                                    onChange={this.handleModuleChange}\r\n                                                />\r\n                                                <span className=\"switch-slide round\">\r\n                                                    <span className={`switch-on ${BannerData.key_value == \"1\" ? 'active' : ''}`}>ON</span>\r\n                                                    <span className={`switch-off ${BannerData.key_value == \"0\" ? 'active' : ''}`}>OFF</span>\r\n                                                </span>\r\n                                            </label>\r\n                                        }\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            {\r\n                                BannerData.key_value === \"1\" &&\r\n                                <Row>\r\n                                    <Col md={2}>\r\n                                        <label htmlFor=\"SportsHubButton\">Banner Image</label>\r\n                                    </Col>\r\n                                    <Col md={10}>\r\n                                        <div className=\"hp-up-img-btn\">\r\n                                            <div className=\"hp-up-img\">\r\n                                                <span className=\"hp-up-img-txt\">\r\n                                                    Upload Image\r\n                                        </span>\r\n                                                <Input\r\n                                                    type=\"file\"\r\n                                                    name='PageHubImg'\r\n                                                    className=\"ph-img\"\r\n                                                    onChange={(e) => this.onChangeImage(e, 3)}\r\n                                                />\r\n                                            </div>\r\n                                            {\r\n                                                (!_.isEmpty(BannerData.image)) &&\r\n                                                <div\r\n                                                    className=\"hp-revert-div-txt\"\r\n                                                    onClick={() => this.revertOrigional(BannerData, 2)}\r\n                                                >\r\n                                                    Revert to orignal\r\n                                                </div>\r\n                                            }\r\n                                        </div>\r\n                                        <div className=\"hp-size-txt\">Size - 1024*375</div>\r\n                                        <figure className=\"hp-img-box\">\r\n                                            {\r\n                                                (!_.isEmpty(BannerData.image)) ?\r\n                                                    <img\r\n                                                        className=\"img-cover\"\r\n                                                        src={(BannerData.image) ? NC.S3 + NC.SETTING_IMG_PATH + BannerData.image : Images.no_image}\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                    :\r\n                                                    (_.isEmpty(BannerData.image)) ?\r\n                                                        ''\r\n                                                        :\r\n                                                        <Loader />\r\n                                            }\r\n                                        </figure>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    _.map(ConfigureList, (item, idx) => {\r\n                        let titleName = \"\"\r\n                        if (!_.isUndefined(item.game_key)) {\r\n                            let rmAllpw = item.game_key.replace('allow_', ' ')\r\n                            titleName = rmAllpw.replace(/_/g, ' ').toUpperCase()\r\n                        }\r\n                        return (\r\n                            <div key={idx} className=\"hp-dy-banners\">\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <div className=\"hp-dy-title float-left\">\r\n                                            {titleName}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-5\">\r\n                                    <Col md={6}>\r\n                                        <Row>\r\n                                            <Col md={3}>\r\n                                                <label className=\"hp-dy-label\" htmlFor=\"language\">Title</label>\r\n                                            </Col>\r\n                                            <Col md={9}>\r\n                                                <Input\r\n                                                    maxLength={30}\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Daily Fantasy Image\"\r\n                                                    name={LanguageType + '_title'}\r\n                                                    value={item[LanguageType + '_title']}\r\n                                                    onChange={(e) => this.handleInputChange(e, idx)}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <Row>\r\n                                            <Col md={3}>\r\n                                                <label className=\"hp-dy-label\" htmlFor=\"language\">Content</label>\r\n                                            </Col>\r\n                                            <Col md={9}>\r\n                                                <Input\r\n                                                    maxLength={250}\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Winnings + Bonus Cash + Deposit\"\r\n                                                    name={LanguageType + '_desc'}\r\n                                                    value={item[LanguageType + '_desc']}\r\n                                                    onChange={(e) => this.handleInputChange(e, idx)}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Row>\r\n                                            <Col md={3}>\r\n                                                <label className=\"hp-dy-label\" htmlFor=\"SportsHubButton\">Image</label>\r\n                                            </Col>\r\n                                            <Col md={9}>\r\n                                                <div className=\"hp-up-img-btn\">\r\n                                                    <div className=\"hp-up-img\">\r\n                                                        <span className=\"hp-up-img-txt\">\r\n                                                            Upload Image\r\n                                                        </span>\r\n                                                        <Input\r\n                                                            accept=\"image/*\"\r\n                                                            type=\"file\"\r\n                                                            name='PageHubImg'\r\n                                                            className=\"ph-img\"\r\n                                                            onChange={(e) => this.onChangeGTypeImg(e, idx, item.game_key)}\r\n                                                        />\r\n                                                    </div>\r\n                                                    {\r\n                                                        (!_.isEmpty(item.image)) &&\r\n                                                        <div\r\n                                                            className=\"hp-revert-div-txt\"\r\n                                                            onClick={() => this.revertOrigional(item, 1)}\r\n                                                        >\r\n                                                            Revert to orignal\r\n                                                        </div>\r\n                                                    }\r\n                                                </div>\r\n                                                <div className=\"hp-size-txt\">\r\n                                                    {\r\n                                                        item.game_key === 'allow_dfs' ?\r\n                                                            'Size - 650*840'\r\n                                                            :\r\n                                                            'Size - 120*90'\r\n                                                    }\r\n                                                </div>\r\n                                                <figure className=\"hp-ban-img-box\">\r\n                                                    {\r\n                                                        (!_.isEmpty(item.image) && item.ImagePosting) ?\r\n                                                            <img\r\n                                                                className=\"img-cover\"\r\n                                                                src={(item.image) ? NC.S3 + NC.SETTING_IMG_PATH + item.image : Images.no_image}\r\n                                                                alt=\"\"\r\n                                                            />\r\n                                                            :\r\n                                                            (_.isEmpty(item.image) && item.ImagePosting) ?\r\n                                                                ''\r\n                                                                :\r\n                                                                <Loader />\r\n                                                    }\r\n                                                </figure>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                    <Col md={6}></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Button\r\n                                            disabled={item.formValid}\r\n                                            className=\"btn-secondary-outline float-right\"\r\n                                            onClick={() => this.updateConfiguration(item, idx)}\r\n                                        >Save\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}