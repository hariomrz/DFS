{"version":3,"sources":["components/CustomComponent.jsx","../node_modules/reactstrap/es/Table.js","views/OpenPredictorWithPrize/PredictionCompletedQues.jsx"],"names":["MomentDateComponent","data","date","format","WSManager","getUtcToLocal","propTypes","className","PropTypes","string","cssModule","object","size","bordered","bool","borderless","striped","dark","hover","responsive","oneOfType","tag","tagPropType","responsiveTag","innerRef","func","Table","props","Tag","ResponsiveTag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","table","React","createElement","_extends","ref","responsiveClassName","defaultProps","PredictionCompletedQues","getCompletedQuestion","setState","ListPosting","state","PERPAGE","CURRENT_PAGE","params","season_game_uid","match","items_perpage","current_page","status","Rest","NC","then","Response","response_code","PredictionList","predictions","result","Total","total","notify","show","catch","error","getBgColor","prediction_count","total_user_joined","toggleUserListModal","prediction_master_id","pre_question","HistoryModalOpen","preQuestion","predictionMasterId","getPredictionUserList","PartiListPosting","LIST_CURRENT_PAGE","Participants","prediction_participants","TotalParticipants","this","isOpen","toggle","md","_","map","item","idx","key","user_name","option","bet_coins","estimated_winning","colSpan","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","e","handleParticipantsPageChange","activeIndex","activeAnswer","onClick","history","push","predictUserListModal","preIdx","ReadMore","charLimit","readMoreText","readLessText","desc","options","pre_options","pColor","style","backgroundImage","toFixed","src","Images","REWARD_ICON","alt","total_pool","deadline_date","toggleSubmitAnswerModal","handlePageChange","Component"],"mappings":"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","file":"static/js/159.4f482b8f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport WSManager from '../helper/WSManager';\r\nexport function MomentDateComponent({ data }) {\r\n    let date = data.date;\r\n    let format = data.format;\r\n    return (date ? <Moment date={WSManager.getUtcToLocal(date)} format={format} /> : '')\r\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","import React, { Component, Fragment } from 'react';\r\nimport { Row, Col, Button, Modal, ModalBody, ModalHeader, Table } from 'reactstrap'; import _ from 'lodash';\r\nimport WSManager from '../../helper/WSManager';\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport { notify } from 'react-notify-toast';\r\nimport Pagination from \"react-js-pagination\";\r\nimport Loader from '../../components/Loader';\r\nimport Images from '../../components/images';\r\nimport ReadMoreAndLess from 'react-read-more-less';\r\nimport { MomentDateComponent } from \"../../components/CustomComponent\";\r\n\r\nclass PredictionCompletedQues extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            CURRENT_PAGE: 1,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getCompletedQuestion()\r\n    }\r\n\r\n    getCompletedQuestion = () => {\r\n        this.setState({ ListPosting: true })\r\n        let { PERPAGE, CURRENT_PAGE } = this.state\r\n        let params = {\r\n            season_game_uid: this.props.match.params.season_game_uid,\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            status: \"2\"\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.GET_ALL_PREDICTION, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({\r\n                    PredictionList: Response.data.predictions.result,\r\n                    Total: Response.data.predictions.total,\r\n                    ListPosting: false\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    getBgColor = (prediction_count, total_user_joined) => {\r\n        return (prediction_count != \"0\" && total_user_joined != \"0\") ? ((prediction_count / total_user_joined) * 100) : \"0\"\r\n    }\r\n\r\n    toggleUserListModal = (prediction_master_id, pre_question) => {\r\n        this.setState({\r\n            HistoryModalOpen: !this.state.HistoryModalOpen,\r\n            preQuestion: pre_question,\r\n            predictionMasterId: prediction_master_id,\r\n        }, () => {\r\n            if (prediction_master_id)\r\n                this.getPredictionUserList()\r\n        }\r\n        )\r\n    }\r\n\r\n    getPredictionUserList = () => {\r\n        this.setState({ PartiListPosting: true })\r\n        let { PERPAGE, LIST_CURRENT_PAGE, predictionMasterId } = this.state\r\n        let params = {\r\n            prediction_master_id: predictionMasterId,\r\n            items_perpage: PERPAGE,\r\n            current_page: LIST_CURRENT_PAGE\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.GET_PREDICTION_PARTICIPANTS, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({\r\n                    Participants: Response.data.prediction_participants,\r\n                    TotalParticipants: Response.data.total,\r\n                    PartiListPosting: false\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    predictUserListModal() {\r\n        let { PartiListPosting, LIST_CURRENT_PAGE, PERPAGE, Participants, TotalParticipants, ListPosting, preQuestion } = this.state\r\n        return (\r\n            <Modal\r\n                isOpen={this.state.HistoryModalOpen}\r\n                className=\"modal-md coupon-history prediction-popup\"\r\n                toggle={() => this.toggleUserListModal('', preQuestion)}\r\n            >\r\n                <ModalHeader>{preQuestion ? preQuestion : '--'}</ModalHeader>\r\n                <ModalBody>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"participant-count\">Participant List ({TotalParticipants ? TotalParticipants : '0'})</div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"table-responsive common-table\">\r\n                                <div className=\"tbl-min-hgt\">\r\n                                    <Table>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th className=\"pl-4\">Name</th>\r\n                                                <th>Pick</th>\r\n                                                <th>Bid</th>\r\n                                                <th>Estimated Winnings</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        {\r\n                                            TotalParticipants > 0 ?\r\n                                                _.map(Participants, (item, idx) => {\r\n                                                    return (\r\n                                                        <tbody key={idx}>\r\n                                                            <tr>\r\n                                                                <td className=\"pl-4\">{item.user_name ? item.user_name : '--'}</td>\r\n                                                                <td className=\"text-ellipsis\">{item.option ? item.option : '--'}</td>\r\n                                                                <td>{item.bet_coins ? item.bet_coins : '--'}</td>\r\n                                                                <td>{item.estimated_winning ? item.estimated_winning : '--'}</td>\r\n                                                            </tr>\r\n                                                        </tbody>\r\n                                                    )\r\n                                                })\r\n                                                :\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td colSpan=\"8\">\r\n                                                            {(TotalParticipants == 0 && !PartiListPosting) ?\r\n                                                                <div className=\"no-records\">\r\n                                                                    {NC.NO_RECORDS}</div>\r\n                                                                :\r\n                                                                <Loader />\r\n                                                            }\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                        }\r\n                                    </Table>\r\n                                </div>\r\n                                {TotalParticipants > PERPAGE && (\r\n                                    <div className=\"custom-pagination\">\r\n                                        <Pagination\r\n                                            activePage={LIST_CURRENT_PAGE}\r\n                                            itemsCountPerPage={PERPAGE}\r\n                                            totalItemsCount={TotalParticipants}\r\n                                            pageRangeDisplayed={5}\r\n                                            onChange={e => this.handleParticipantsPageChange(e)}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        this.setState({\r\n            CURRENT_PAGE: current_page\r\n        }, () => {\r\n            this.getCompletedQuestion()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { activeIndex, activeAnswer, CURRENT_PAGE, PERPAGE, PredictionList, Total, ListPosting } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Row className=\"com-head-box\">\r\n                    <Col md={12}>\r\n                        <div className=\"pre-heading float-left\">Completed Question</div>\r\n                        <div onClick={() => this.props.history.push('/prize-prediction/fixture')} className=\"go-back mt-0\">{'<'}  Back to fixture </div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"prediction-dashboard mt-3\">\r\n                    {this.predictUserListModal()}\r\n                    {Total > 0 ?\r\n                        _.map(PredictionList, (item, preIdx) => {\r\n                            return (\r\n                                <Col md={4} key={preIdx}>\r\n                                    <div className=\"question-box\">\r\n                                        <div className=\"clearfix\">\r\n                                            <div className=\"ques\"><ReadMoreAndLess\r\n                                                ref={this.ReadMore}\r\n                                                charLimit={90}\r\n                                                readMoreText=\"Read more\"\r\n                                                readLessText=\"Read less\"\r\n                                            >\r\n                                                {item.desc}\r\n                                            </ReadMoreAndLess></div>\r\n                                        </div>\r\n                                        <div className=\"pool-answer\">\r\n                                            <ul className=\"pool-list\">\r\n                                                {\r\n                                                    _.map(item.options, (pre_options, idx) => {\r\n                                                        let pColor = this.getBgColor(pre_options.prediction_count, item.total_user_joined)\r\n                                                        return (\r\n                                                            <li\r\n                                                                style={{\r\n                                                                    backgroundImage:\r\n                                                                        \"linear-gradient(to right, #E4F9FE \" +\r\n                                                                        pColor + \"%, #F2F2F2 0%)\"\r\n                                                                }}\r\n                                                                key={idx}\r\n                                                                className=\"clearfix pool-item\">\r\n                                                                <div className=\"float-left answer-opt\">\r\n                                                                    {pre_options.option}\r\n                                                                </div>\r\n                                                                <div className=\"float-right\">\r\n                                                                    {pre_options.prediction_count != \"0\" || item.total_user_joined != \"0\" ?\r\n                                                                        ((pre_options.prediction_count / item.total_user_joined) * 100).toFixed(2)\r\n                                                                        :\r\n                                                                        \"0\"\r\n                                                                    }%\r\n</div>\r\n                                                            </li>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                        </div>\r\n                                        <div className=\"pool-box clearfix\">\r\n                                            <div className=\"float-left\">\r\n                                                <div className=\"poll-info\">\r\n                                                    Pool\r\n                            <img src={Images.REWARD_ICON} alt=\"\" />\r\n                                                    {item.total_pool}\r\n                                                </div>\r\n                                                <div className=\"pre-timer\">\r\n                                                    <ul className=\"prediction-list\">\r\n                                                        <li className=\"time\">\r\n                                                            <MomentDateComponent data={{ date: item.deadline_date, format: \"D MMM - hh:mm A\" }} />\r\n                                                        </li>\r\n                                                        <li className=\"predicted\"\r\n                                                            onClick={() => item.total_user_joined > 0 ? this.toggleUserListModal(item.prediction_master_id, item.desc) : ''}>{item.total_user_joined} Predicted\r\n                                </li>\r\n\r\n                                                    </ul>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"float-right\">\r\n                                                {(activeAnswer != 0 && activeIndex == preIdx) &&\r\n                                                    <Button onClick={() => this.toggleSubmitAnswerModal()} className=\"ques-action action-status\">ANSWER</Button>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </Col>\r\n                            )\r\n                        })\r\n                        :\r\n                        <Col md={12}>\r\n                            {(Total == 0 && !ListPosting) ?\r\n                                <div className=\"no-records\">{NC.NO_RECORDS}</div>\r\n                                :\r\n                                <Loader />\r\n                            }\r\n                        </Col>\r\n                    }\r\n                </Row>\r\n                {Total > PERPAGE && (\r\n                    <div className=\"custom-pagination float-right\">\r\n                        <Pagination\r\n                            activePage={CURRENT_PAGE}\r\n                            itemsCountPerPage={PERPAGE}\r\n                            totalItemsCount={Total}\r\n                            pageRangeDisplayed={5}\r\n                            onChange={e => this.handlePageChange(e)}\r\n                        />\r\n                    </div>\r\n                )\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default PredictionCompletedQues"],"sourceRoot":""}