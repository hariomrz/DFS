{"version":3,"sources":["helper/WSCalling.jsx","views/Marketing/Marketing.config.js","views/Marketing/CommunicationCampaign/CustomTemplate.jsx"],"names":["getAllSport","data","params","WSManager","Rest","NC","createLeague","editLeague","getLeagues","getNewLeagues","publishMatchPickem","getPickemParticipants","getCoinConfigApi","saveCoinConfig","createPlayer","editPlayer","getPlayers","savePlayerImage","multipartPost","createPickem","getPickem","getUnpubMatches","pickemResult","deletePickem","getTrendingPickems","getPickemCounts","getCoinsVsUsersGraph","getTopTeamGraph","getUsers_SU","createUsers_SU","getContestDetail_SU","getContestJoined_SU","getSystemUsersForContest_SU","joinSystemUsers_SU","deleteUsers_SU","updateUsers_SU","do_upload_SU","getSeasonDetails","getRoles","addRoles","rolesList","getRolesDetails","deleteRoles","updateRoles","remove_image_SU","get_all_avatars","change_avatar_status","createGroup","updateGroup","getGroup","uploadGroupIcon","deleteGroup","getAllNetworkContest","publishNetworkContest","getNetworkContestDetails","getNetworkContestParticipants","saveSports","updateSports","deletePTSports","enableSports","PT_CreateTournment","PT_getUpcomingFixtures","PT_getTournamentMasterData","PT_getAllTournament","PT_getTournamentFixtures","PT_getTournamentEditData","PT_addMatchesToTournament","PT_updateTournamentSeasonResult","PT_removeTournamentLogo","PT_updateTournamentResult","PT_removeTournamentBanner","getErpMasterData","getErpDashboardData","getErpTransactionList","saveErpTransaction","updateErpTransaction","deleteErpTransaction","getErpCategoryList","ErpSaveCategory","ErpUpdateCategory","PT_getTournamentParticipants","PT_getTournamentLeaderboard","PT_cancelTournament","PT_deleteTournamentPickem","getNGContestDetail_SU","getNGContestJoined_SU","getNGSystemUsersForContest_SU","joinNGSystemUsers_SU","getReferralRank","getAppUsageData","getAllSeasonWeek","getWeekSeason","DFST_getTournamentMasterData","DFST_removeTournamentLogo","DFST_removeTournamentBanner","DFST_getAllTournament","DFST_CreateTournment","DFST_getUpcomingFixtures","DFST_getTournamentFixtures","DFST_getTournamentParticipants","DFST_getTournamentSeasonParticipants","DFST_getTournamentEditData","DFST_updateTournament","DFST_getTournamentLeaderboard","DFST_getSeasonLeaderboard","DFST_cancelTournament","DFST_deleteTournamentMatch","getSmsTemplate","updateSmsTemplate","updateNewMasterScoringPoints","changeScrWinStatus","getScratchCardList","deleteScratchCard","xpGetLevelList","xpGetBadgeList","xpAddRewards","xpDeleteLevel","LB_geTMasterData","LB_getLeaderboardList","LB_toggleLeaderboardById","LB_leaderboardByDetails","LB_leaderboardUserList","LB_getLiveUpcomingLeagues","xpUpdateLevel","xpDeleteReward","xpUpdateReward","xpGetActivitiesList","xpDelActivity","xpGetActivityMastList","xpAddActivity","xpUpdateActivity","xpActivitiesLeaderboard","addScratchCard","updateScratchCard","joinMultiSystemUsers_SU","GET_FILTER_RESULT_TEST","GET_DEPOSIT_PROMOCODES","GET_SEGEMENTATION_TEMPLATE_LIST","GET_RECENT_COMMUNICATION_LIST","NOTIFY_BY_SELECTION","NOTIFY_BY_SELECTION_COUNT","GET_RECENT_COMMUNICATION_DETAIL","GET_CD_BALANCE","ADD_NOTIFICATION_ENTITY","EXPORT_FILTER_DATA","GET_LIVE_UPCOMING_MATCHS","RENDER_EMAIL_BODY","GET_CITY_NAMES","GET_PREFERENCE_LIST","UPDATE_PREFERENCE_LIST","CREATE_USER_BASE_LIST","DELETE_USER_BASE_LIST","GET_SINGLE_USER_BASE_LIST","CREATE_NEW_CATEGORY","GET_USER_COUNT","GET_USER_BASE_LIST","GET_CUSTOME_TEMPLATE","GET_TEMPLATE_CATEGORY","CREATE_NEW_TEMPLATE","UPDATE_USER_BASE_LIST","GET_DELAYED_FIXTURES","UTM_SOURCE_SMS","UTM_MEDIUM","userBaseType","1","all_user","text","2","login","3","signup","4","fixture_participation","userBases","sourceByTemplate","121","120","124","131","132","fixtureChannelMap","email_fixture_model","message_fixture_model","notification_fixture_model","notification_landing_pages","label","value","GenderOptions","id","name","extend","obj","src","key","hasOwnProperty","CustomeTemplate","props","getAllCategory","MODULE_C","then","responseJson","response_code","category_list","category_list_modal","_","map","item","category_id","push","category_name","setState","CategoryList","CategoryListModal","catch","error","notify","show","getCustomTemplates","state","activeTab","param","SelectedFilterCategory","PERPAGE","CURRENT_PAGE","TemplateList","Total","length","handleFilter","e","renderCommonBodyView","template_data","isEmpty","className","idx","message_body","md","subject","isUndefined","header_image","isNull","Images","NO_IMAGE","dangerouslySetInnerHTML","__html","body_image","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","handlePageChange","toggleRecentCModal","email_item","communication_review_modal","email_body","replace","Date","getFullYear","EmailBody","EmailSubject","emailTemplateModal","isOpen","toggle","sm","renderEmailView","onClick","handleInputChange","event","target","CreatePosting","bodyLength","NotifyBodyLength","addCategoryToggle","CategoryName","addCateModalOpen","addCategoryModal","maxLength","type","disabled","createCategory","ResponseJson","message","addSmsNotiToggle","SelectedSmsCategory","TemplateName","NotificationSub","NotificationBody","SelectedReditectTo","SmsUrl","addSmsNotiModalOpen","addSmsNotiModal","NotifyTextLength","NotifyUrlLength","SavePosting","NotiHeadImg","NotiBodyImg","htmlFor","options","placeholder","href","accept","onChangeImage","resetFile","saveTemplate","NotiHeadImgName","NotiBodyImgName","redirect_to","Response","imgUrl","imgName","URL","createObjectURL","files","file","FormData","append","apiURL","image_name","n_flag","getSmsDltTemplates","smsTblPosting","DltSmsTempList","DltTotalTemp","smsTempToggle","smsTempModalOpen","DltSmsItem","SmsTemplateName","DltTemplateId","dlt_template_id","DltMessage","DltSmsTempStatus","status","addDltSmsModal","dltSmsPosting","handleDLTInput","checked","saveDltSmsTemplate","sms_template_id","reference_id","Filter","FilterList","CreateSmsPosting","previewObj","TemplateStatus","this","url","location","search","queryString","parse","category","tab","current_page","lg","tabs","tabId","_Map","colSpan","Component"],"mappings":"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","file":"static/js/167.87b4f753.chunk.js","sourcesContent":["import WSManager from './WSManager';\r\nimport * as NC from './NetworkingConstants';\r\n\r\n/*Pickem */\r\nexport function getAllSport(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_ALL_SPORTS, params);\r\n}\r\n\r\n/*Pickem */\r\nexport function createLeague(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.CREATE_LEAGUE, params);\r\n}\r\nexport function editLeague(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.EDIT_LEAGUE, params);\r\n}\r\n\r\nexport function getLeagues(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_LEAGUES, params);\r\n}\r\n\r\nexport function getNewLeagues(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_LEAGUES_NEW, params);\r\n}\r\n\r\nexport function publishMatchPickem(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PUBLISH_MATCH_PICKEM, params);\r\n}\r\n\r\nexport function getPickemParticipants(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_PICKEM_PARTICIPANTS, params);\r\n}\r\n\r\nexport function getCoinConfigApi(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_COIN_CONFIG, params);\r\n}\r\n\r\nexport function saveCoinConfig(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.SAVE_COIN_CONFIG, params);\r\n}\r\n\r\nexport function createPlayer(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.CREATE_TEAM_STATS, params);\r\n}\r\n\r\nexport function editPlayer(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.EDIT_TEAM, params);\r\n}\r\n\r\nexport function getPlayers(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_TEAMS, params);\r\n}\r\n\r\nexport function savePlayerImage(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.multipartPost(NC.baseURL + NC.DO_UPLOAD_FLAG, params);\r\n}\r\n\r\nexport function createPickem(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.CREATE_PICKEM, params);\r\n}\r\n\r\nexport function getPickem(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_ALL_PICKEM, params);\r\n}\r\n\r\nexport function getUnpubMatches(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_UNPUBLISHED_MATCHES, params);\r\n}\r\n\r\nexport function pickemResult(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.UPDATE_PICKEM_RESULT, params);\r\n}\r\n\r\nexport function deletePickem(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DELETE_PICKEM, params);\r\n}\r\n\r\nexport function getTrendingPickems(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_TRENDING_PICKEMS, params);\r\n}\r\n\r\nexport function getPickemCounts(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_PICKEM_COUNTS, params);\r\n}\r\n\r\nexport function getCoinsVsUsersGraph(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PEM_GET_COINS_VS_USERS_GRAPH, params);\r\n}\r\n\r\nexport function getTopTeamGraph(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PEM_GET_TOP_TEAM_GRAPH, params);\r\n}\r\n\r\nexport function getUsers_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_USERS, params);\r\n}\r\n\r\nexport function createUsers_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.CREATE_USER, params);\r\n}\r\n\r\nexport function getContestDetail_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_CONTEST_DETAIL, params);\r\n}\r\n\r\nexport function getContestJoined_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_CONTEST_JOINED_SYSTEM_USERS, params);\r\n}\r\n\r\nexport function getSystemUsersForContest_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_SYSTEM_USERS_FOR_CONTEST, params);\r\n}\r\n\r\nexport function joinSystemUsers_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.JOIN_SYSTEM_USERS, params);\r\n}\r\n\r\nexport function deleteUsers_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DELETE_USER, params);\r\n}\r\n\r\nexport function updateUsers_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.UPDATE_USER, params);\r\n}\r\n\r\nexport function do_upload_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.multipartPost(NC.baseURL + NC.SU_DO_UPLOAD, params);\r\n}\r\n\r\nexport function getSeasonDetails(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_SEASON_DETAILS, params);\r\n}\r\n\r\n\r\n//Admin roles\r\nexport function getRoles(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_ADMIN_ROLES, params);\r\n}\r\n\r\nexport function addRoles(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ADD_ROLES, params);\r\n}\r\n\r\nexport function rolesList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ROLES_LIST, params);\r\n}\r\n\r\nexport function getRolesDetails(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_ROLES_DETAIL, params);\r\n}\r\n\r\nexport function deleteRoles(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DELETE_ROLES, params);\r\n}\r\n\r\nexport function updateRoles(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.UPDATE_ROLES, params);\r\n}\r\n\r\nexport function remove_image_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.SU_REMOVE_PROFILE_IMAGE, params);\r\n}\r\n// Start New Communication Dashboard\r\nexport function getTempList_CD(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_SEGEMENTATION_TEMPLATE_LIST, params);\r\n}\r\n// End New Communication Dashboard\r\n\r\nexport function get_all_avatars(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_ALL_AVATARS, params);\r\n}\r\n\r\nexport function change_avatar_status(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.CHANGE_AVATAR_STATUS, params);\r\n}\r\n\r\nexport function avatar_do_upload(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.AVATAR_DO_UPLOAD, params);\r\n}\r\n\r\nexport function submit_avatars(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.SUBMIT_AVATARS, params);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Start code for Add contest category\r\n\r\nexport function createGroup(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.CREATE_GROUP, params);\r\n}\r\n\r\nexport function updateGroup(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.UPDATE_GROUP, params);\r\n}\r\n\r\nexport function getGroup(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_GROUP, params);\r\n}\r\n\r\nexport function uploadGroupIcon(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.multipartPost(NC.baseURL + NC.UPLOAD_GROUP_ICON, params);\r\n}\r\n\r\nexport function removeGroupIcon(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.REMOVE_GROUP_ICON, params);\r\n}\r\n\r\nexport function deleteGroup(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DELETE_GROUP, params);\r\n}\r\n//End code for Add contest category\r\n\r\nexport function getAllNetworkContest(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_ALL_NETWORK_CONTEST, params);\r\n}\r\n\r\nexport function publishNetworkContest(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PUBLISH_NETWORK_CONTEST, params);\r\n}\r\n\r\nexport function getNetworkContestDetails(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_NETWORK_CONTEST_DETAILS, params);\r\n}\r\n\r\nexport function getGameLineupDetail(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_GAME_LINEUP_DETAIL, params);\r\n}\r\n\r\nexport function getNetworkContestParticipants(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_NETWORK_CONTEST_PARTICIPANTS, params);\r\n}\r\n\r\n//Pickem Tournament\r\nexport function saveSports(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_SAVE_SPORTS, params);\r\n}\r\n\r\nexport function updateSports(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_UPDATE_SPORTS, params);\r\n}\r\n\r\nexport function deletePTSports(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_UPDATE_SPORTS, params);\r\n}\r\n\r\nexport function enableSports(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_ENABLE_SPORTS, params);\r\n}\r\n\r\nexport function PT_CreateTournment(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_CREATE_TOURNAMENT, params);\r\n}\r\n\r\nexport function PT_getUpcomingFixtures(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_GET_UPCOMING_FIXTURES, params);\r\n}\r\n\r\nexport function PT_getTournamentMasterData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_GET_TOURNAMENT_MASTER_DATA, params);\r\n}\r\n\r\nexport function PT_getAllTournament(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_GET_ALL_TOURNAMENT, params);\r\n}\r\n\r\nexport function PT_getTournamentFixtures(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_GET_TOURNAMENT_FIXTURES, params);\r\n}\r\n\r\nexport function PT_getTournamentEditData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_GET_TOURNAMENT_EDIT_DATA, params);\r\n}\r\n\r\nexport function PT_addMatchesToTournament(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_ADD_MATCHES_TO_TOURNAMENT, params);\r\n}\r\n\r\nexport function PT_deletePickem(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_DELETE_PICKEM, params);\r\n}\r\n\r\nexport function PT_updateTournamentSeasonResult(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_UPDATE_TOURNAMENT_SEASON_RESULT, params);\r\n}\r\n\r\nexport function PT_removeTournamentLogo(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_REMOVE_TOURNAMENT_LOGO, params);\r\n}\r\n\r\nexport function PT_updateTournamentResult(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_UPDATE_TOURNAMENT_RESULT, params);\r\n}\r\n\r\nexport function PT_removeTournamentBanner(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_REMOVE_TOURNAMENT_BANNER, params);\r\n}\r\n//start ERP finance\r\nexport function getErpMasterData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_GET_MASTER_DATA, params);\r\n}\r\n\r\nexport function getErpDashboardData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_GET_DASHBOARD_DATA, params);\r\n}\r\n\r\nexport function getErpTransactionList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_GET_TRANSACTION_LIST, params);\r\n}\r\n\r\nexport function saveErpTransaction(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_SAVE_TRANSACTION, params);\r\n}\r\n\r\nexport function updateErpTransaction(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_UPDATE_TRANSACTION, params);\r\n}\r\n\r\nexport function deleteErpTransaction(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_DELETE_TRANSACTION, params);\r\n}\r\n\r\nexport function getErpCategoryList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_GET_CATEGORY_LIST, params);\r\n}\r\n\r\nexport function ErpSaveCategory(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_SAVE_CATEGORY, params);\r\n}\r\n\r\nexport function ErpUpdateCategory(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ERP_UPDATE_CATEGORY, params);\r\n}\r\n\r\n\r\nexport function PT_getTournamentParticipants(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_GET_TOURNAMENT_PARTICIPANTS, params);\r\n}\r\n\r\nexport function PT_getTournamentLeaderboard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_GET_TOURNAMENT_LEADERBOARD, params);\r\n}\r\n\r\nexport function PT_cancelTournament(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_CANCEL_TOURNAMENT, params);\r\n}\r\n\r\nexport function PT_deleteTournamentPickem(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.PT_DELETE_TOURNAMENT_PICKEM, params);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Netwok game system user\r\nexport function getNGContestDetail_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.NG_GET_CONTEST_DETAIL, params);\r\n}\r\n\r\nexport function getNGContestJoined_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.NG_GET_CONTEST_JOINED_SYSTEM_USERS, params);\r\n}\r\n\r\nexport function getNGSystemUsersForContest_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.NG_GET_SYSTEM_USERS_FOR_CONTEST, params);\r\n}\r\n\r\nexport function joinNGSystemUsers_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.NG_JOIN_SYSTEM_USERS, params);\r\n}\r\n//Leaderboards\r\nexport function getReferralRank(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_REFERRAL_RANK, params);\r\n}\r\n\r\nexport function getAppUsageData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_APP_USAGE_DATA, params);\r\n}\r\n\r\nexport function getAllSeasonWeek(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_ALL_SEASON_WEEKS, params);\r\n}\r\n\r\nexport function getWeekSeason(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_WEEK_SEASONS, params);\r\n}\r\n\r\n//Dfs Tournament\r\nexport function DFST_getTournamentMasterData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_TOURNAMENT_MASTER_DATA, params);\r\n}\r\n\r\nexport function DFST_removeTournamentLogo(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_REMOVE_TOURNAMENT_LOGO, params);\r\n}\r\n\r\nexport function DFST_removeTournamentBanner(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_REMOVE_TOURNAMENT_BANNER, params);\r\n}\r\n\r\nexport function DFST_getAllTournament(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_ALL_TOURNAMENT, params);\r\n}\r\n\r\nexport function DFST_CreateTournment(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_CREATE_TOURNAMENT, params);\r\n}\r\n\r\nexport function DFST_getUpcomingFixtures(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_UPCOMING_FIXTURES, params);\r\n}\r\n\r\nexport function DFST_getTournamentFixtures(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_TOURNAMENT_FIXTURES, params);\r\n}\r\n\r\nexport function DFST_getTournamentParticipants(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_TOURNAMENT_PARTICIPANTS, params);\r\n}\r\n\r\nexport function DFST_getTournamentSeasonParticipants(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_TOURNAMENT_SEASON_PARTICIPANTS, params);\r\n}\r\n\r\nexport function DFST_getTournamentEditData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_TOURNAMENT_EDIT_DATA, params);\r\n}\r\n\r\nexport function DFST_updateTournament(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_UPDATE_TOURNAMENT, params);\r\n}\r\n\r\nexport function DFST_getTournamentLeaderboard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_TOURNAMENT_LEADERBOARD, params);\r\n}\r\n\r\nexport function DFST_getSeasonLeaderboard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_GET_TOURNAMENT_SEASON_LEADERBOARD, params);\r\n}\r\n\r\nexport function DFST_cancelTournament(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_CANCEL_TOURNAMENT, params);\r\n}\r\n\r\nexport function DFST_deleteTournamentMatch(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DFST_DELETE_TOURNAMENT_FIXTURE, params);\r\n}\r\n\r\nexport function getSmsTemplate(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_SMS_TEMPLATE, params);\r\n}\r\n\r\nexport function updateSmsTemplate(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.UPDATE_SMS_TEMPLATE, params);\r\n    }\r\n\r\nexport function updateNewMasterScoringPoints(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.UPDATE_NEW_MASTER_SCORING_POINTS, params);\r\n}\r\n\r\nexport function changeScrWinStatus(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.CHANGE_SCRATCH_WIN_STATUS, params);\r\n}\r\n\r\nexport function getScratchCardList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.GET_SCRATCH_CARD_LIST, params);\r\n}\r\n\r\nexport function deleteScratchCard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.DELETE_SCRATCH_CARD, params);\r\n}\r\n\r\n//XP Module\r\nexport function xpGetLevelList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_GET_LEVEL_LIST, params);\r\n}\r\n\r\nexport function xpGetBadgeList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_GET_BADGE_MASTER_LIST, params);\r\n}\r\n\r\nexport function xpAddRewards(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_ADD_REWARD, params);\r\n}\r\n\r\nexport function xpDeleteLevel(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_DELETE_LEVEL, params);\r\n}\r\nexport function LB_geTMasterData(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_GET_MASTER_DATA, params);\r\n}\r\n\r\nexport function LB_geSportLeague(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_GET_SPORT_LEAGUES, params);\r\n}\r\n\r\nexport function LB_getLeaderboardList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_GET_LEADERBOARD_LIST, params);\r\n}\r\n\r\nexport function LB_toggleLeaderboardById(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_TOGGLE_LEADERBOARD_BY_ID, params);\r\n}\r\nexport function LB_leaderboardByDetails(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_TOGGLE_LEADERBOARD_DETAILS, params);\r\n}\r\nexport function LB_leaderboardUserList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_TOGGLE_LEADERBOARD_USER_LIST, params);\r\n}\r\nexport function LB_getLiveUpcomingLeagues(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_GET_LIVE_UPCOMING_LEAGUES, params);\r\n}\r\nexport function LB_getPrizeDetails(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.LB_GET_PRIZE_DETAIL, params);\r\n}\r\n\r\n\r\n\r\n\r\nexport function xpUpdateLevel(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_UPDATE_LEVELS, params);\r\n}\r\n\r\nexport function xpDeleteReward(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_DELETE_REWARD, params);\r\n}\r\n\r\nexport function xpUpdateReward(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_UPDATE_REWARD, params);\r\n}\r\n\r\nexport function xpGetActivitiesList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_GET_ACTIVITIES_LIST, params);\r\n}\r\n\r\nexport function xpDelActivity(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_DELETE_ACTIVITY, params);\r\n}\r\n\r\nexport function xpGetActivityMastList(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_GET_ACTIVITIES_MASTER_LIST, params);\r\n}\r\n\r\nexport function xpAddActivity(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_ADD_ACTIVITY, params);\r\n}\r\n\r\nexport function xpUpdateActivity(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_UPDATE_ACTIVITY, params);\r\n}\r\n\r\nexport function xpLevelLeaderboard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_LEVEL_LEADERBOARD, params);\r\n}\r\n\r\nexport function xpActivitiesLeaderboard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.XP_ACTIVITIES_LEADERBOARD, params);\r\n}\r\n\r\nexport function addScratchCard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.ADD_SCRATCH_CARD, params);\r\n}\r\n\r\nexport function updateScratchCard(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.UPDATE_SCRATCH_CARD, params);\r\n}\r\n\r\nexport function joinMultiSystemUsers_SU(data) {\r\n    let params = data ? data : {}\r\n    return WSManager.Rest(NC.baseURL + NC.JOIN_MULTIPLE_SYSTEM_USERS, params);\r\n}\r\n\r\n","// export const GET_FILTER_RESULT_TEST = \"adminapi/communication_dashboard/user_segmentation/get_filter_result_test/false\";\r\nexport const GET_FILTER_RESULT_TEST = \"adminapi/communication_dashboard/user_segmentation/get_filter_result_test\";\r\nexport const GET_DEPOSIT_PROMOCODES = \"adminapi/communication_dashboard/user_segmentation/get_deposit_promocodes\";\r\nexport const GET_SEGEMENTATION_TEMPLATE_LIST = \"adminapi/communication_dashboard/user_segmentation/get_segementation_template_list\";\r\nexport const GET_RECENT_COMMUNICATION_LIST = \"adminapi/communication_dashboard/user_segmentation/get_recent_communication_list\";\r\n\r\nexport const NOTIFY_BY_SELECTION = \"adminapi/communication_dashboard/user_segmentation/notify_by_selection\";\r\nexport const NOTIFY_BY_SELECTION_COUNT = \"adminapi/communication_dashboard/user_segmentation/notify_by_selection_counts\";\r\nexport const RECENT_COMMUNICATION = \"adminapi/communication_dashboard/user_segmentation/resent_communication\";\r\nexport const GET_RECENT_COMMUNICATION_DETAIL = \"adminapi/communication_dashboard/user_segmentation/get_recent_communication_detail\";\r\nexport const GET_CD_BALANCE = \"adminapi/communication_dashboard/user_segmentation/get_cd_balance\";\r\nexport const ADD_NOTIFICATION_ENTITY = \"adminapi/communication_dashboard/user_segmentation/add_notify_entity\";\r\nexport const EXPORT_FILTER_DATA = \"adminapi/communication_dashboard/user_segmentation/export_filter_data\";\r\nexport const GET_LIVE_UPCOMING_MATCHS = \"adminapi/communication_dashboard/new_campaign/get_live_upcoming_fixtures\";\r\nexport const RENDER_EMAIL_BODY = \"adminapi/communication_dashboard/new_campaign/render_cd_body\";\r\n\r\nexport const GET_CITY_NAMES = \"adminapi/communication_dashboard/user_segmentation/get_city_names\";\r\nexport const GET_PREFERENCE_LIST = \"adminapi/communication_dashboard/user_segmentation/get_preference_list\";\r\nexport const UPDATE_PREFERENCE_LIST = \"adminapi/communication_dashboard/user_segmentation/update_preference_list\";\r\nexport const CREATE_USER_BASE_LIST = \"adminapi/communication_dashboard/user_segmentation/create_user_base_list\";\r\nexport const DELETE_USER_BASE_LIST = \"adminapi/communication_dashboard/user_segmentation/delete_user_base_list\";\r\nexport const GET_SINGLE_USER_BASE_LIST = \"adminapi/communication_dashboard/user_segmentation/get_single_user_base_list\";\r\nexport const CREATE_NEW_CATEGORY = \"adminapi/communication_dashboard/user_segmentation/create_new_category\";\r\nexport const GET_USER_COUNT = \"adminapi/communication_dashboard/user_segmentation/get_user_count\";\r\nexport const GET_USER_BASE_LIST = \"adminapi/communication_dashboard/user_segmentation/get_user_base_list\";\r\nexport const GET_CUSTOME_TEMPLATE = \"adminapi/communication_dashboard/user_segmentation/get_custome_template\";\r\nexport const GET_TEMPLATE_CATEGORY = \"adminapi/communication_dashboard/user_segmentation/get_template_category\";\r\nexport const CREATE_NEW_TEMPLATE = \"adminapi/communication_dashboard/user_segmentation/create_new_template\";\r\nexport const UPDATE_USER_BASE_LIST = \"adminapi/communication_dashboard/user_segmentation/update_user_base_list\";\r\nexport const GET_DELAYED_FIXTURES = \"adminapi/communication_dashboard/user_segmentation/get_delayed_fixtures\";\r\n\r\nexport const UTM_SOURCE_SMS = 'SMS';\r\nexport const UTM_SOURCE_NOTIFICATION = 'noti';\r\nexport const UTM_MEDIUM = 'VtechAdmin';\r\nexport const userBaseType = {\r\n  1: {\r\n    all_user: 1,\r\n    text: 'All User'\r\n  },\r\n  2: {\r\n    login: 1,\r\n    text: 'Login'\r\n  },\r\n  3: {\r\n    signup: 1,\r\n    text: 'Signup'\r\n  },\r\n  4: {\r\n    fixture_participation: 1,\r\n    text: 'By Fixture Participation'\r\n  }\r\n}\r\n\r\nexport const userBases = {\r\n  1: {\r\n    all_user: 1\r\n  },\r\n  2: {\r\n    login: 1\r\n  },\r\n  3: {\r\n    signup: 1\r\n  },\r\n  4: {\r\n    fixture_participation: 1\r\n  }\r\n}\r\n\r\nexport const sourceByTemplate = {\r\n  121: 'contest_id',\r\n  120: 'promo_code_id',\r\n  124: 'season_game_uid',\r\n  131: 'season_game_uid',\r\n  132: 'season_game_uid'\r\n}\r\n\r\nexport const fixtureChannelMap = {\r\n  email_fixture_model: 'email',\r\n  message_fixture_model: 'message',\r\n  notification_fixture_model: 'notification'\r\n}\r\n\r\n//Lobby, Wallet, My Profile, My contests, Refer a Friend.\r\nexport const notification_landing_pages = [{\r\n    label: 'Lobby',\r\n    value: 1\r\n  },\r\n  {\r\n    label: 'Wallet',\r\n    value: 2\r\n  },\r\n  {\r\n    label: 'My Profile',\r\n    value: 3\r\n  },\r\n  {\r\n    label: 'My contests',\r\n    value: 4\r\n  },\r\n  {\r\n    label: 'Refer a Friend',\r\n    value: 5\r\n  },\r\n  {\r\n    label: 'Contest Listing',\r\n    value: 6\r\n  },\r\n  {\r\n    label: 'Add Fund',\r\n    value: 7\r\n  },\r\n]\r\n\r\nexport const GenderOptions = [\r\n  {id: '1',name: 'Male'},\r\n  {id: '2',name: 'Female'},\r\n  {id: '3',name: 'Other'},\r\n];\r\n\r\nexport const extend = (obj, src) => {\r\n  for (var key in src) {\r\n    if (src.hasOwnProperty(key)) obj[key] = src[key];\r\n  }\r\n  return obj;\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport Select from 'react-select'\r\nimport { Col, Row, Button, Input, Nav, NavItem, NavLink, Modal, ModalBody, ModalFooter, ModalHeader, TabContent, TabPane, Table } from 'reactstrap';\r\nimport { notify } from 'react-notify-toast';\r\nimport Pagination from \"react-js-pagination\";\r\nimport * as NC from \"../../../helper/NetworkingConstants\";\r\nimport _ from 'lodash';\r\nimport WSManager from \"../../../helper/WSManager\";\r\nimport * as MODULE_C from \"../Marketing.config\";\r\nimport queryString from 'query-string';\r\nimport Images from '../../../components/images';\r\nimport { _times, _Map } from '../../../helper/HelperFunction';\r\nimport { getSmsTemplate, updateSmsTemplate } from '../../../helper/WSCalling';\r\nimport Loader from '../../../components/Loader';\r\nclass CustomeTemplate extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTab: '1',\r\n            CURRENT_PAGE: 1,\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            Filter: 0,\r\n            FilterList: [],\r\n            addCateModalOpen: false,\r\n            CreatePosting: true,\r\n            addSmsNotiModalOpen: false,\r\n            CreateSmsPosting: true,\r\n            CategoryList: [],\r\n            CategoryListModal: [],\r\n            CategoryName: '',\r\n            TemplateName: '',\r\n            NotificationSub: '',\r\n            NotificationBody: '',\r\n            NotifyBodyLength: 0,\r\n            NotifyTextLength: 0,\r\n            NotifyUrlLength: 0,\r\n            previewObj: {},\r\n            TemplateList: [],\r\n            SavePosting: false,\r\n            NotiHeadImgName : '',\r\n            NotiBodyImgName : '',\r\n            smsTempModalOpen : false,\r\n            DltTemplateId : '',\r\n            TemplateStatus : '',\r\n            DltSmsTempList : [],            \r\n            smsTblPosting : true,            \r\n            DltSmsTempStatus : '0',            \r\n            DltSmsItem : [],            \r\n            DltMessage : '',            \r\n            dltSmsPosting : false,            \r\n            SmsTemplateName : '',            \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllCategory()\r\n        // this.getCustomTemplates()\r\n        this.getSmsDltTemplates()\r\n        let url = this.props.location.search;\r\n        let urlParams = queryString.parse(url);\r\n        if (urlParams.category) {\r\n            this.setState({ addCateModalOpen: true })\r\n        }\r\n    }\r\n\r\n    getAllCategory = () => {\r\n        WSManager.Rest(NC.baseURL + MODULE_C.GET_TEMPLATE_CATEGORY, {}).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                var category_list = [{\r\n                    value: \"\",\r\n                    label: \"All Templates\"\r\n                }];\r\n                var category_list_modal = [];\r\n                _.map(responseJson.data, (item) => {\r\n                    if (item.category_id != \"9\" && item.category_id != \"10\") {\r\n                        category_list.push({\r\n                            value: item.category_id,\r\n                            label: item.category_name\r\n                        });\r\n                        category_list_modal.push({\r\n                            value: item.category_id,\r\n                            label: item.category_name\r\n                        });\r\n                    }\r\n                });\r\n                this.setState({\r\n                    CategoryList: category_list,\r\n                    CategoryListModal: category_list_modal,\r\n                });\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    getCustomTemplates = () => {\r\n        let { activeTab, SelectedFilterCategory, PERPAGE, CURRENT_PAGE } = this.state\r\n        let param = {\r\n            \"template_id\": '',\r\n            \"category_id\": SelectedFilterCategory,\r\n            \"message_type\": activeTab == '3' ? '' : activeTab,\r\n            \"item_perpage\": PERPAGE,\r\n            \"current_page\": CURRENT_PAGE,\r\n        }\r\n        WSManager.Rest(NC.baseURL + MODULE_C.GET_CUSTOME_TEMPLATE, param).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                this.setState({\r\n                    TemplateList: responseJson.data,\r\n                    Total: responseJson.data.length,\r\n                });\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    toggle(tab) {\r\n        if (tab != this.state.activeTab)\r\n            this.setState({ activeTab: tab, Filter: 0 },()=>{\r\n                if(this.state.activeTab == \"1\")\r\n                    this.getSmsDltTemplates()\r\n                else\r\n                    this.getCustomTemplates()\r\n            })\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        if (this.state.CURRENT_PAGE != current_page) {\r\n            this.setState({\r\n                CURRENT_PAGE: current_page\r\n            }, this.getCustomTemplates\r\n            );\r\n        }\r\n    }\r\n\r\n    handleFilter = (e, name) => {\r\n        if (e) {\r\n            this.setState({ [name]: e.value }, this.getCustomTemplates)\r\n        }\r\n    }\r\n\r\n    renderCommonBodyView = (template_data) => {\r\n        let { PERPAGE, CURRENT_PAGE, Total, activeTab } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    {\r\n                        !_.isEmpty(template_data) ?\r\n                            _.map(template_data, (item, idx) => {\r\n                                return (\r\n                                    !_.isEmpty(item.message_body) &&\r\n                                    <Col md={4} key={idx}>\r\n                                        <div className={`cus-temp-wrapper ${activeTab == '2' ? ' temp-noti-sty' : ''}`}>\r\n                                            {activeTab == '2' &&\r\n                                                <div className=\"noti-headear clearfix\">\r\n                                                <div className={`temp-subject ${activeTab == '2' ? ' noti-sty' : ''}`}>\r\n                                                    {item.subject}\r\n                                                </div>\r\n                                                {\r\n                                                    (!_.isUndefined(item.header_image) && !_.isNull(item.header_image)) &&\r\n                                                    <div className=\"img-head-view\">\r\n                                                    <img \r\n                                                        className=\"img-cover\" \r\n                                                            src={item.header_image ? NC.S3 + NC.PUSH_HEADER + item.header_image : Images.NO_IMAGE} />\r\n                                                    </div>\r\n                                                } \r\n                                            </div>\r\n                                            }\r\n                                            <div className=\"temp-desc\">\r\n                                                <div dangerouslySetInnerHTML={{ __html: item.message_body }}></div>\r\n                                            </div>\r\n                                            {\r\n                                                (!_.isUndefined(item.header_image) && !_.isNull(item.body_image)) &&\r\n                                                <div className=\"img-body-view\">\r\n                                                    <img\r\n                                                        className=\"img-cover\"\r\n                                                        src={item.body_image ? NC.S3 + NC.PUSH_BODY + item.body_image : Images.NO_IMAGE} />\r\n                                                </div>\r\n                                            } \r\n                                            {/* <div className=\"temp-url\">\r\n                                                    <a href={item.message_url} target=\"_blank\">\r\n                                                        {item.message_url}\r\n                                                    </a>\r\n                                                </div> */}\r\n                                        </div>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                            :\r\n                            <div className=\"no-records mt-4\">{NC.NO_RECORDS}</div>\r\n                    }\r\n                </Row>\r\n                {Total > PERPAGE && (\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"custom-pagination float-right mb-5\">\r\n                                <Pagination\r\n                                    activePage={CURRENT_PAGE}\r\n                                    itemsCountPerPage={PERPAGE}\r\n                                    totalItemsCount={Total}\r\n                                    pageRangeDisplayed={5}\r\n                                    onChange={e => this.handlePageChange(e)}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    toggleRecentCModal = (email_item) => {\r\n\r\n        this.setState({\r\n            communication_review_modal: !this.state.communication_review_modal,\r\n            email_item: email_item\r\n        }, () => {\r\n            var email_body = this.state.email_item.email_body;\r\n            email_body = email_body.replace(\"{{year}}\", (new Date()).getFullYear());\r\n            email_body = email_body.replace(\"{{SITE_TITLE}}\", 'Fantasy Sports');\r\n            this.setState({\r\n                EmailBody: email_body,\r\n                EmailSubject: this.state.email_item.subject,\r\n            });\r\n        });\r\n    }\r\n\r\n    emailTemplateModal = () => {\r\n        let { EmailBody, EmailSubject, email_item } = this.state\r\n        return (\r\n            <Modal\r\n                isOpen={this.state.communication_review_modal}\r\n                toggle={() => this.toggleRecentCModal(email_item)}\r\n                className={this.props.className}\r\n                className=\"modal-md\">\r\n                <ModalHeader toggle={() => this.toggleRecentCModal(email_item)} className=\"promotion\">\r\n                    <h5 className=\"promotion title\"> Preview</h5>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"popuppreviewtab\">\r\n                        <Row>\r\n                            <Col sm=\"12\" className=\"temptab\">\r\n                                <div className=\"subjecttemp mb-20\">\r\n                                    <text className=\"subject\">Subject - {EmailSubject}</text>\r\n                                </div>\r\n\r\n\r\n                                <div dangerouslySetInnerHTML={{ __html: EmailBody }}>\r\n\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <div className=\"templatepreview\">\r\n\r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderEmailView = (template_data) => {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    {\r\n                        !_.isEmpty(template_data) ?\r\n                            _.map(template_data, (item, idx) => {\r\n                                return (\r\n                                    !_.isEmpty(item.email_body) &&\r\n                                    <Col md={4}>\r\n                                        <div className=\"cus-temp-wrapper\">\r\n                                            <div className=\"temp-subject\">Template subject : {item.subject}</div>\r\n                                            <div className=\"text-center\">\r\n                                                <Button className=\"btn-secondary-outline\" onClick={() => this.toggleRecentCModal(item)} >Preview</Button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                            :\r\n                            <div className=\"no-records mt-4\">{NC.NO_RECORDS}</div>\r\n                    }\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        let name = event.target.name\r\n        let value = event.target.value\r\n\r\n        if (value.length > 2)\r\n            this.setState({ CreatePosting: false })\r\n        else\r\n            this.setState({ CreatePosting: true })\r\n\r\n        this.setState({ [name]: value }, () => {\r\n            if (name === 'NotificationBody') {\r\n                let bodyLength = value.length\r\n                this.setState({ NotifyBodyLength: bodyLength })                \r\n            }\r\n        })\r\n    }\r\n\r\n    addCategoryToggle = () => {\r\n        this.setState({ CategoryName: '' })\r\n        this.setState({ addCateModalOpen: !this.state.addCateModalOpen })\r\n    }\r\n\r\n    addCategoryModal = () => {\r\n        let { CreatePosting, CategoryName } = this.state\r\n        return (\r\n            <div>\r\n                <Modal className=\"addmore-su-modal\" isOpen={this.state.addCateModalOpen}\r\n                    toggle={this.addCategoryToggle}>\r\n                    <ModalBody>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <h3 className=\"h3-cls\">Add Category</h3>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <label>Enter Category</label>\r\n                                <Input\r\n                                    maxLength=\"30\"\r\n                                    type=\"text\"\r\n                                    name=\"CategoryName\"\r\n                                    value={CategoryName}\r\n                                    onChange={(e) => this.handleInputChange(e)}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button className=\"btn-default-gray\" onClick={this.addCategoryToggle}>Cancel</Button>\r\n                        <Button className=\"btn-secondary-outline\"\r\n                            disabled={CreatePosting}\r\n                            onClick={this.createCategory}>Add</Button>{' '}\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    createCategory = () => {\r\n        let param = {\r\n            \"category_name\": this.state.CategoryName\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + MODULE_C.CREATE_NEW_CATEGORY, param).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                this.getAllCategory()\r\n                this.addCategoryToggle()\r\n                notify.show(ResponseJson.message, \"success\", 3000)\r\n                this.setState({\r\n                    CategoryName: '',\r\n                    CreatePosting: false\r\n                })\r\n            } else {\r\n                this.setState({ CreatePosting: false })\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            this.setState({ CreatePosting: false })\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    addSmsNotiToggle = () => {\r\n        this.setState({\r\n            SelectedSmsCategory: '',\r\n            TemplateName: '',\r\n            NotificationSub: '',\r\n            NotificationBody: '',\r\n            SelectedReditectTo: '',\r\n            SmsUrl: ''\r\n        })\r\n        this.setState({ addSmsNotiModalOpen: !this.state.addSmsNotiModalOpen })\r\n    }\r\n\r\n    addSmsNotiModal = () => {\r\n        let { CategoryListModal, NotifyTextLength, NotifyUrlLength, SmsUrl, SelectedReditectTo, NotifyBodyLength, NotificationBody, NotificationSub, TemplateName, SelectedSmsCategory, CategoryList, SavePosting, activeTab, NotiHeadImg, NotiBodyImg } = this.state\r\n        return (\r\n            <Modal\r\n                isOpen={this.state.addSmsNotiModalOpen}\r\n                className=\"modal-md cus-noti-popup\"\r\n                toggle={() => this.addSmsNotiToggle()}\r\n            >\r\n                <ModalHeader>CREATE NEW TEMPLATE</ModalHeader>\r\n                <ModalBody>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"h2-cls\">\r\n                                {activeTab == \"1\" && \"SMS\"}\r\n                                {activeTab == \"2\" && \"Notification\"}\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-1\">\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"ProofDesc\">Select Category</label>\r\n                            <Select\r\n                                value={SelectedSmsCategory}\r\n                                options={CategoryListModal}\r\n                                onChange={(e) => this.handleFilter(e, 'SelectedSmsCategory')}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"ProofDesc\">Enter Template Name</label>\r\n                            <Input\r\n                                maxLength=\"40\"\r\n                                type=\"text\"\r\n                                name=\"TemplateName\"\r\n                                placeholder=\"Template Name\"\r\n                                value={TemplateName}\r\n                                onChange={this.handleInputChange}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <a className=\"pull-right mt-2\" href=\"https://coolsymbol.com/emojis/emoji-for-copy-and-paste.html\" target=\"_blank\">Emoji Keyboard</a>\r\n                            <div className=\"noti-input-box\">\r\n                                {\r\n                                    activeTab == \"2\" &&\r\n                                    <div className=\"noti-area\">\r\n                                        <Row>\r\n                                            <Col md={10}>\r\n                                                <Input\r\n                                                    maxLength=\"50\"\r\n                                                    type=\"text\"\r\n                                                    name=\"NotificationSub\"\r\n                                                    value={NotificationSub}\r\n                                                    className=\"subject-input\"\r\n                                                    placeholder=\"Header\"\r\n                                                    onChange={this.handleInputChange}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md={2}>\r\n                                                <div className=\"head-img-dashbox float-right\">\r\n                                                        {!_.isEmpty(NotiHeadImg) ?\r\n                                                            <Fragment>\r\n                                                            <i onClick={() => this.resetFile('NotiHeadImg')} className=\"icon-close\"></i>\r\n                                                                <img className=\"img-cover\" src={NotiHeadImg} />\r\n                                                            </Fragment>\r\n                                                            :\r\n                                                            <Fragment>\r\n                                                                <input\r\n                                                                    accept=\"image/x-png,\r\n                                                                    image/jpeg,image/jpg\"\r\n                                                                    type=\"file\"\r\n                                                                    name='NotiHeadImg'\r\n                                                                    id=\"NotiHeadImgName\"\r\n                                                                    className=\"head-img-inpt\"\r\n                                                                    onChange={this.onChangeImage}\r\n                                                                />\r\n                                                            <span className=\"head-img-txt\">\r\n                                                                Upload \r\n                                                                Image \r\n                                                                192*192\r\n                                                            </span>\r\n                                                            </Fragment>\r\n                                                        }\r\n                                                    </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                }\r\n                                <div className={`temp-body-box ${activeTab === '2' ? ' temp-noti-sty' : ''}`}>\r\n                                    <Input\r\n                                        type=\"textarea\"\r\n                                        // maxLength={160 - NotifyUrlLength}\r\n                                        maxLength={160}\r\n                                        className=\"noti-body\"\r\n                                        name=\"NotificationBody\"\r\n                                        value={NotificationBody}\r\n                                        placeholder=\"Body\"\r\n                                        onChange={this.handleInputChange}\r\n                                    />\r\n                                    {\r\n                                        activeTab === '2' &&\r\n                                        <div className=\"head-img-dashbox\">\r\n                                            {!_.isEmpty(NotiBodyImg) ?\r\n                                                <Fragment>\r\n                                                    <i onClick={() => this.resetFile('NotiBodyImg')} className=\"icon-close\"></i>\r\n                                                    <img className=\"img-cover\" src={NotiBodyImg} />\r\n                                                </Fragment>\r\n                                                :\r\n                                                <Fragment>\r\n                                                    <input\r\n                                                        accept=\"image/x-png,\r\n                                                        image/jpeg,image/jpg\"\r\n                                                        type=\"file\"\r\n                                                        name='NotiBodyImg'\r\n                                                        id=\"NotiBodyImgName\"\r\n                                                        className=\"head-img-inpt temp-body-box\"\r\n                                                        onChange={this.onChangeImage}\r\n                                                    />\r\n                                                <span className=\"head-img-txt font-lg\">\r\n                                                    Upload Image<br /> 720x240\r\n                                                </span>\r\n                                                </Fragment>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                \r\n                                <span className=\"char-limit float-right\">({NotifyBodyLength}/160 Characters)</span>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        {activeTab == \"2\" && <Col md={6}>\r\n                            <label htmlFor=\"ProofDesc\">Redirect To</label>\r\n                            <Select\r\n                                value={SelectedReditectTo}\r\n                                options={MODULE_C.notification_landing_pages}\r\n                                onChange={(e) => this.handleFilter(e, 'SelectedReditectTo')}\r\n                            />\r\n                        </Col>}\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter className=\"request-footer\">\r\n                    <Button\r\n                        className=\"btn-secondary-outline ripple no-btn\"\r\n                        onClick={() => this.addSmsNotiToggle()}>Cancel</Button>\r\n                    <Button\r\n                        disabled={SavePosting}\r\n                        onClick={this.saveTemplate}\r\n                        className=\"btn-secondary-outline\">Save</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    saveTemplate = () => {\r\n        let { activeTab, SelectedSmsCategory, TemplateName, NotificationSub, NotificationBody, SelectedReditectTo, SmsUrl, NotiHeadImgName, NotiBodyImgName } = this.state\r\n        if (_.isEmpty(SelectedSmsCategory) || _.isEmpty(TemplateName) || _.isEmpty(NotificationBody)) {\r\n            notify.show(\"Pleae complete the template form\", 'error', 5000)\r\n            return false\r\n        }\r\n\r\n        if (activeTab == \"2\" && _.isEmpty(NotificationSub)) {\r\n            notify.show(\"Pleae enetr notification subject\", 'error', 5000)\r\n            return false\r\n        }\r\n        this.setState({ SavePosting: true })\r\n        let params = {\r\n            \"message_type\": activeTab,\r\n            \"category_id\": SelectedSmsCategory,\r\n            \"template_name\": TemplateName,\r\n            \"message_body\": NotificationBody,\r\n            \"message_url\": SmsUrl,\r\n        }\r\n\r\n        if (activeTab == '2') {\r\n            params.subject = NotificationSub\r\n            params.redirect_to = SelectedReditectTo\r\n            params.header_image = NotiHeadImgName\r\n            params.body_image = NotiBodyImgName\r\n        }\r\n        \r\n        WSManager.Rest(NC.baseURL + MODULE_C.CREATE_NEW_TEMPLATE, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({\r\n                    SelectedSmsCategory: '',\r\n                    TemplateName: '',\r\n                    NotificationSub: '',\r\n                    NotificationBody: '',\r\n                    SelectedReditectTo: '',\r\n                    SmsUrl: '',\r\n                    NotiHeadImgName: null,\r\n                    NotiBodyImgName: null,\r\n                    NotiHeadImg: null,\r\n                    NotiBodyImg: null,\r\n                })\r\n                notify.show(Response.message, 'success', 5000)\r\n                this.addSmsNotiToggle()\r\n                this.getCustomTemplates()\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n            this.setState({ SavePosting: false })\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    onChangeImage = (event) => {\r\n\r\n        if (event)\r\n        {        \r\n            let imgUrl = event.target.name\r\n            let imgName = event.target.id        \r\n\r\n            this.setState({\r\n                [imgUrl]: URL.createObjectURL(event.target.files[0]),\r\n                SavePosting: true\r\n            });\r\n            const file = event.target.files[0];\r\n            if (!file) {\r\n                return;\r\n            }\r\n            var data = new FormData();\r\n            data.append(\"file\", file);\r\n\r\n            let apiURL = NC.HEADER_IMAGE\r\n            if (imgUrl === 'NotiBodyImg')\r\n            {\r\n                apiURL = NC.BODY_IMAGE\r\n            }\r\n\r\n            WSManager.multipartPost(NC.baseURL + apiURL, data)\r\n                .then(Response => {\r\n                    if (Response.response_code == NC.successCode) {\r\n                        this.setState({\r\n                            [imgName]: Response.data.image_name,\r\n                            SavePosting: false,\r\n                        });\r\n                    } else {\r\n                        this.setState({\r\n                            [imgUrl]: null,\r\n                            SavePosting: false,\r\n                        });\r\n                    }\r\n                }).catch(error => {\r\n                    notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n                });\r\n        } else {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n        }\r\n    }\r\n\r\n    resetFile = (n_flag) => {\r\n        this.setState({\r\n            [n_flag]: null,\r\n            [n_flag + 'Name']: '',\r\n        });\r\n    }\r\n\r\n    getSmsDltTemplates = () => { \r\n        this.setState({ smsTblPosting : true })       \r\n        getSmsTemplate({}).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                this.setState({\r\n                    DltSmsTempList: responseJson.data,\r\n                    DltTotalTemp: responseJson.data.length,\r\n                    smsTblPosting: false\r\n                });\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    smsTempToggle = (item) => {\r\n        if(!this.state.smsTempModalOpen)\r\n        {\r\n            this.setState({\r\n                DltSmsItem: item,\r\n                SmsTemplateName: item.name,\r\n                DltTemplateId: item.dlt_template_id,\r\n                DltMessage: item.message,\r\n                DltSmsTempStatus: item.status,                \r\n            })\r\n        }      \r\n        this.setState({\r\n            smsTempModalOpen: !this.state.smsTempModalOpen\r\n        })        \r\n    }\r\n\r\n    addDltSmsModal = () => {\r\n        let { NotifyBodyLength, DltMessage, dltSmsPosting, activeTab, DltTemplateId, DltSmsTempStatus, SmsTemplateName } = this.state\r\n        return (\r\n            <Modal\r\n                isOpen={this.state.smsTempModalOpen}\r\n                className=\"modal-md cus-noti-popup\"\r\n                toggle={() => this.smsTempToggle()}\r\n            >\r\n                \r\n                <ModalBody>\r\n                    <Row className=\"mt-4\">\r\n                        <Col md={12}>\r\n                            <label htmlFor=\"ProofDesc\">Enter Template Name</label>\r\n                            <Input\r\n                                disabled={true}\r\n                                maxLength=\"40\"\r\n                                type=\"text\"\r\n                                name=\"SmsTemplateName\"\r\n                                placeholder=\"Template Name\"\r\n                                value={SmsTemplateName}\r\n                                onChange={this.handleInputChange}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12} className=\"mt-3\">\r\n                            <label htmlFor=\"ProofDesc\">DLT Template Id</label>\r\n                            <Input\r\n                                maxLength=\"50\"\r\n                                type=\"text\"\r\n                                name=\"DltTemplateId\"\r\n                                placeholder=\"DLT Template Id\"\r\n                                value={DltTemplateId}\r\n                                onChange={this.handleDLTInput}\r\n                            />\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <a className=\"pull-right mt-2\" href=\"https://coolsymbol.com/emojis/emoji-for-copy-and-paste.html\" target=\"_blank\">Emoji Keyboard</a>\r\n                            <div className=\"noti-input-box\">\r\n                                <div className={`temp-body-box ${activeTab === '2' ? ' temp-noti-sty' : ''}`}>\r\n                                    <Input\r\n                                        type=\"textarea\"\r\n                                        // maxLength={160 - NotifyUrlLength}\r\n                                        maxLength={160}\r\n                                        className=\"noti-body\"\r\n                                        name=\"DltMessage\"\r\n                                        value={DltMessage}\r\n                                        placeholder=\"Body\"\r\n                                        onChange={this.handleInputChange}\r\n                                    />\r\n                                </div>                                \r\n                                <span className=\"char-limit float-right\">({NotifyBodyLength}/160 Characters)</span>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <label htmlFor=\"ProofDesc\">Template Status</label>\r\n                            <ul className=\"radio-option-list\">\r\n                                <li className=\"radio-option-item\">\r\n                                    <div className=\"custom-radio\">\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"custom-control-input\"\r\n                                            name=\"DltSmsTempStatus\"\r\n                                            value=\"1\"\r\n                                            checked={DltSmsTempStatus === '1'}\r\n                                            onChange={this.handleDLTInput}\r\n                                        />\r\n                                        <label className=\"custom-control-label\">\r\n                                            <span className=\"input-text\">Active</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"radio-option-item\">\r\n                                    <div className=\"custom-radio\">\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"custom-control-input\"\r\n                                            name=\"DltSmsTempStatus\"\r\n                                            value=\"0\"\r\n                                            checked={DltSmsTempStatus === '0'}\r\n                                            onChange={this.handleDLTInput}\r\n                                        />\r\n                                        <label className=\"custom-control-label\">\r\n                                            <span className=\"input-text\">Inactive</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </li>\r\n                            </ul>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter className=\"request-footer\">\r\n                    <Button\r\n                        className=\"btn-secondary-outline ripple no-btn\"\r\n                        onClick={() => this.smsTempToggle()}>Cancel</Button>\r\n                    <Button\r\n                        disabled={dltSmsPosting}\r\n                        onClick={this.saveDltSmsTemplate}\r\n                        className=\"btn-secondary-outline\">Save</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    handleDLTInput = (event) => {\r\n        if(event){\r\n            let name = event.target.name\r\n            let value = event.target.value    \r\n            this.setState({ [name]: value })\r\n        }else{\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        }\r\n    }\r\n\r\n    saveDltSmsTemplate = () => {\r\n        let { DltSmsItem, DltMessage, DltTemplateId, SmsTemplateName, DltSmsTempStatus } = this.state\r\n        if (_.isEmpty(DltMessage)) {\r\n            notify.show(\"Pleae enter messgae\", 'error', 5000)\r\n            return false\r\n        }\r\n        \r\n        if (_.isEmpty(DltTemplateId)) {\r\n            notify.show(\"Pleae enter dlt template id\", 'error', 5000)\r\n            return false\r\n        }\r\n\r\n        this.setState({ dltSmsPosting: true })\r\n        let params = {\r\n            \"sms_template_id\": DltSmsItem.sms_template_id,\r\n            \"name\": SmsTemplateName,\r\n            \"dlt_template_id\": DltTemplateId,\r\n            \"message\": DltMessage,\r\n            \"reference_id\": DltSmsItem.reference_id,\r\n            \"status\": DltSmsTempStatus\r\n        }\r\n\r\n        updateSmsTemplate(params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({\r\n                    SmsTemplateName: '',\r\n                    DltTemplateId: '',\r\n                    DltMessage: '',\r\n                    DltSmsTempStatus: '0',\r\n                    smsTempModalOpen: false,\r\n                })\r\n                notify.show(Response.message, 'success', 5000)\r\n                this.getSmsDltTemplates()\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n            this.setState({ dltSmsPosting: false })\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { TemplateList, CategoryList, SelectedFilterCategory, activeTab, smsTempModalOpen, DltSmsTempList, DltTotalTemp, smsTblPosting } = this.state\r\n        return (\r\n            <Fragment>\r\n                {this.addCategoryModal()}\r\n                {this.addSmsNotiModal()}\r\n                {this.emailTemplateModal()}\r\n                {smsTempModalOpen && this.addDltSmsModal()}\r\n                <div className=\"custom-template-main\">\r\n                    <Row className=\"cus-tem-header\">\r\n                        <Col lg={12}>\r\n                            <h2 className=\"h2-cls float-left\">Custom Templates</h2>\r\n                            {(activeTab != '3' && activeTab != '1') && <div className=\"float-right\">\r\n                                <Button\r\n                                    className='btn-secondary-outline float-right'\r\n                                    onClick={() => { this.addSmsNotiToggle() }}>+ Create Template</Button>\r\n                                <Button\r\n                                    className='btn-secondary-outline float-right mr-4'\r\n                                    onClick={() => { this.addCategoryToggle() }}>+ Create Category</Button>\r\n                            </div>}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"user-navigation\">\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <Nav tabs>\r\n                                            <NavItem\r\n                                                className={activeTab === '1' ? \"active\" : \"\"}\r\n                                                onClick={() => { this.toggle('1'); }}\r\n                                            >\r\n                                                <NavLink>\r\n                                                    SMS\r\n                                            </NavLink>\r\n                                            </NavItem>\r\n                                            <NavItem\r\n                                                className={activeTab === '2' ? \"active\" : \"\"}\r\n                                                onClick={() => { this.toggle('2'); }}\r\n                                            >\r\n                                                <NavLink>\r\n                                                    Notification\r\n                                            </NavLink>\r\n                                            </NavItem>\r\n                                            <NavItem\r\n                                                className={activeTab === '3' ? \"active\" : \"\"}\r\n                                                onClick={() => { this.toggle('3'); }}\r\n                                            >\r\n                                                <NavLink>\r\n                                                    Email\r\n                                            </NavLink>\r\n                                            </NavItem>\r\n                                        </Nav>\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"custem-bg-box\">\r\n                                    {\r\n                                        activeTab != \"1\" &&\r\n                                        <Row>\r\n                                            <Col md={3}>\r\n                                                <div className=\"select-categories\">\r\n                                                    <label htmlFor=\"categories\">\r\n                                                        Select Categories\r\n                                                    </label>\r\n                                                    <Select\r\n                                                        value={SelectedFilterCategory}\r\n                                                        options={CategoryList}\r\n                                                        onChange={(e) => this.handleFilter(e, 'SelectedFilterCategory')}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    }\r\n                                    <TabContent activeTab={activeTab}>\r\n                                        {\r\n                                            (activeTab == '1') &&\r\n                                            <TabPane tabId=\"1\" className=\"animated fadeIn\">\r\n                                                <Row>\r\n                                                    <Col md={12} className=\"table-responsive common-table\">\r\n                                                        <Table>\r\n                                                            <thead>\r\n                                                                <tr>\r\n                                                                    <th className=\"left-th\">Template Name</th>\r\n                                                                    <th>Dlt Template ID</th>\r\n                                                                    <th>Body</th>\r\n                                                                    <th>Status</th>\r\n                                                                    <th className=\"right-th\"></th>\r\n                                                                </tr>\r\n                                                            </thead>\r\n                                                            {\r\n                                                                DltTotalTemp > 0 ?\r\n                                                                _Map(DltSmsTempList, (item, idx) => {\r\n                                                                        return (\r\n                                                                            <tbody key={idx}>\r\n                                                                                <tr>\r\n                                                                                    <td>{item.name ? item.name : '--'}</td>\r\n                                                                                    <td>{item.dlt_template_id ? item.dlt_template_id : '--'}</td>\r\n                                                                                    <td>\r\n                                                                                        <div className=\"sms-t-desc\">\r\n                                                                                            {item.message ? item.message : '--'}\r\n                                                                                        </div>\r\n                                                                                    </td>\r\n                                                                                    <td className={item.status == \"1\" ? 'text-green' : 'text-red'}>\r\n                                                                                        {item.status == '1' && 'Active'}\r\n                                                                                        {item.status == '0' && 'Inactive'}                                                                                        \r\n                                                                                    </td>\r\n                                                                                    <td>\r\n                                                                                        <Button \r\n                                                                                            className=\"btn-secondary dlt-e-btn\"\r\n                                                                                            onClick={() => this.smsTempToggle(item)}\r\n                                                                                        >Edit</Button>\r\n                                                                                    </td>\r\n                                                                                </tr>\r\n                                                                            </tbody>\r\n                                                                        )\r\n                                                                    })\r\n                                                                :\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td colSpan='22'>\r\n                                                                            {(DltTotalTemp == 0 && !smsTblPosting) ?\r\n                                                                                <div className=\"no-records\">{NC.NO_RECORDS}</div>\r\n                                                                                :\r\n                                                                                <Loader />\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                            </tbody>\r\n                                                            }\r\n                                                        </Table>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </TabPane>\r\n                                        }\r\n                                        {\r\n                                            (activeTab == '2') &&\r\n                                            <TabPane tabId=\"2\" className=\"animated fadeIn\">\r\n                                                {this.renderCommonBodyView(TemplateList)}\r\n                                            </TabPane>\r\n                                        }\r\n                                        {\r\n                                            (activeTab == '3') &&\r\n                                            <TabPane tabId=\"3\" className=\"animated fadeIn\">\r\n                                                {this.renderEmailView(TemplateList)}\r\n                                            </TabPane>\r\n                                        }\r\n                                    </TabContent>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default CustomeTemplate"],"sourceRoot":""}