{"version":3,"sources":["components/ActionRequestModal/ActionRequestModal.jsx","views/PrivateContest/PC_Setting.jsx"],"names":["ActionRequestModal","props","this","Message","ActionPopupOpen","Screen","posting","Fragment","isOpen","className","toggle","modalCallback","src","Images","ERROR_ICON","alt","onClick","disabled","modalReportActionCallback","modalUpdatePendingCallback","modalActioCallback","Component","PC_Setting","getPageContent","WSManager","Rest","NC","then","ResponseJson","response_code","setState","AdminCommission","data","site_rake","OwnerCommission","host_rake","Visibility","visibility","notify","show","catch","error","AdminToolTipToggle","toggleAdminToolTip","state","OwnToolTipToggle","toggleOwnToolTip","toggleActionPopup","val","NewVisibility","savePCVisibility","visiPosting","params","message","handleInputChange","event","name","target","value","adminPosting","OwnerPosting","length","newVal","HF","decimalValidate","parseFloat","_","isEmpty","saveCommission","call_type","URL","allowPrivateContest","history","push","ActionCallback","md","id","placement","type","onChange","checked"],"mappings":"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","file":"static/js/173.154511c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport Images from \"../images\";\r\nclass ActionRequestModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        let { Message, ActionPopupOpen, Screen, posting } = this.props\r\n        return (\r\n            <React.Fragment>\r\n                <Modal\r\n                    isOpen={ActionPopupOpen}\r\n                    className=\"modal-sm action-request\"\r\n                    toggle={() => this.props.modalCallback()}\r\n                >\r\n                    <ModalHeader>\r\n                        <img src={Images.ERROR_ICON} alt=\"\" />\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <span className=\"info-text\">{Message}</span>\r\n                    </ModalBody>\r\n                    <ModalFooter className=\"request-footer\">\r\n                        <Button className=\"btn-secondary-outline ripple no-btn\" onClick={this.props.modalCallback}>No</Button>\r\n                        <Button\r\n                            disabled={posting}\r\n                            className=\"btn-secondary-outline ripple\"\r\n                            onClick={() => Screen == 'Report' ? this.props.modalReportActionCallback()\r\n                                :\r\n                                Screen == 'Approve' ?\r\n                                    this.props.modalUpdatePendingCallback()\r\n                                    :\r\n                                    this.props.modalActioCallback()}>Yes</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default ActionRequestModal","import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col, Tooltip, Button, Input } from 'reactstrap';\r\nimport _ from 'lodash';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from 'moment';\r\nimport ActionRequestModal from '../../components/ActionRequestModal/ActionRequestModal';\r\nimport HF from '../../helper/HelperFunction';\r\nclass PC_Setting extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // Visibility: '1',\r\n            OwnerCommission: '',\r\n            AdminCommission: '',\r\n            adminPosting: true,\r\n            OwnerPosting: true,\r\n            visiPosting: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (HF.allowPrivateContest() == '0') {\r\n            notify.show(NC.MODULE_NOT_ENABLE, 'error', 5000)\r\n            this.props.history.push('/dashboard')\r\n        }\r\n        this.getPageContent()\r\n    }\r\n\r\n    getPageContent = () => {\r\n        WSManager.Rest(NC.baseURL + NC.PC_GET_SETTINGS_DATA, {}).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                this.setState({\r\n                    AdminCommission: ResponseJson.data ? ResponseJson.data.site_rake : 0,\r\n                    OwnerCommission: ResponseJson.data ? ResponseJson.data.host_rake : 0,\r\n                    Visibility: ResponseJson.data ? ResponseJson.data.visibility : 0,\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000)\r\n        })\r\n    }\r\n\r\n    AdminToolTipToggle = () => {\r\n        this.setState({\r\n            toggleAdminToolTip: !this.state.toggleAdminToolTip\r\n        });\r\n    }\r\n\r\n    OwnToolTipToggle = () => {\r\n        this.setState({\r\n            toggleOwnToolTip: !this.state.toggleOwnToolTip\r\n        });\r\n    }\r\n\r\n    toggleActionPopup = (val) => {\r\n        this.setState({\r\n            NewVisibility: val,\r\n            Message: NC.MSG_PC_VISIBILITY,\r\n            ActionPopupOpen: !this.state.ActionPopupOpen\r\n        })\r\n    }\r\n\r\n    savePCVisibility = () => {\r\n        this.setState({ visiPosting: true })\r\n        let { NewVisibility } = this.state\r\n        let params = {\r\n            'visibility': NewVisibility\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.PC_TOGGLE_VISIBILITY, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                this.setState({ Visibility: NewVisibility, visiPosting: false })\r\n                this.toggleActionPopup()\r\n                notify.show(ResponseJson.message, \"success\", 5000)\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000)\r\n        })\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        if (event) {\r\n            let name = event.target.name\r\n            let value = event.target.value\r\n            if (name === 'AdminCommission') {\r\n                this.setState({ adminPosting: false })\r\n            }\r\n            if (name === 'OwnerCommission') {\r\n                this.setState({ OwnerPosting: false })\r\n            }\r\n\r\n            if (value.length <= 5) {\r\n                let newVal = HF.decimalValidate(value, 3);\r\n                this.setState({ [name]: newVal }, () => {\r\n                    if ((parseFloat(this.state.OwnerCommission) + parseFloat(this.state.AdminCommission)) > 100) {\r\n                        notify.show('Sum of owner commission and admin commission percentage must be between 0 & 100.', \"error\", 5000)\r\n                        this.setState({ adminPosting: true, OwnerPosting: true })\r\n                    }\r\n\r\n                    if (_.isEmpty(this.state.AdminCommission)) {\r\n                        this.setState({ adminPosting: true })\r\n                    }\r\n                    if (_.isEmpty(this.state.OwnerCommission)) {\r\n                        this.setState({ OwnerPosting: true })\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    saveCommission = (call_type) => {\r\n        let { OwnerCommission, AdminCommission } = this.state\r\n        let URL = ''\r\n        let params = { 'site_rake': '' }\r\n        if (call_type === 1) {\r\n            this.setState({ OwnerPosting: true })\r\n            URL = NC.PC_UPDATE_HOST_RAKE\r\n            params = {\r\n                'host_rake': OwnerCommission\r\n            }\r\n        } else {\r\n            this.setState({ adminPosting: true })\r\n            URL = NC.PC_UPDATE_SITE_RAKE\r\n            params = {\r\n                'site_rake': AdminCommission\r\n            }\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + URL, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                notify.show(ResponseJson.message, \"success\", 5000)\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { Visibility, OwnerCommission, AdminCommission, adminPosting, OwnerPosting, visiPosting, Message, ActionPopupOpen } = this.state\r\n        const ActionCallback = {\r\n            posting: visiPosting,\r\n            Message: Message,\r\n            modalCallback: this.toggleActionPopup,\r\n            ActionPopupOpen: ActionPopupOpen,\r\n            modalActioCallback: this.savePCVisibility,\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <div className=\"PC-dashboard PC-setting\">\r\n                    <ActionRequestModal {...ActionCallback} />\r\n                    <Row className=\"mt-30 mb-20\">\r\n                        <Col md={12}>\r\n                            <h2 className=\"h2-cls\">Setting</h2>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mb-30\">\r\n                        <Col md={12}>\r\n                            <ul className=\"pc-headbox-list\">\r\n                                <li className=\"pc-headbox-item\">\r\n                                    <div className=\"info-icon-wrapper text-right\">\r\n                                        <i className=\"icon-info\" id=\"owner_tt\">\r\n                                            <Tooltip placement=\"top\" isOpen={this.state.toggleOwnToolTip} target=\"owner_tt\" toggle={this.OwnToolTipToggle}>Entered percentage of the total entry fee collected will go to the \"User's\" Wallet.</Tooltip>\r\n                                        </i>\r\n                                    </div>\r\n                                    <div className=\"pc-b-title\">Set Owner commission</div>\r\n                                    <div className=\"pc-b-count\">\r\n                                        <div className=\"pc-ctr-div\">\r\n                                            <Input\r\n                                                type=\"number\"\r\n                                                className='pc-comm-inp'\r\n                                                name='OwnerCommission'\r\n                                                value={OwnerCommission}\r\n                                                // placeholder=\"10\"\r\n                                                onChange={this.handleInputChange}\r\n                                            />\r\n                                        </div>\r\n                                        <span className=\"pc-percent\">%</span>\r\n                                    </div>\r\n                                    <Button\r\n                                        disabled={OwnerPosting}\r\n                                        className=\"btn-secondary-outline\"\r\n                                        onClick={() => this.saveCommission(1)}\r\n                                    >\r\n                                        Save\r\n                                    </Button>\r\n                                </li>\r\n                                <li className=\"pc-headbox-item\">\r\n                                    <div className=\"info-icon-wrapper text-right\">\r\n                                        <i className=\"icon-info\" id=\"admin_tt\">\r\n                                            <Tooltip placement=\"top\" isOpen={this.state.toggleAdminToolTip} target=\"admin_tt\" toggle={this.AdminToolTipToggle}>Entered percentage of the total entry fee collected will go to \"Admin's\" Wallet.</Tooltip>\r\n                                        </i>\r\n                                    </div>\r\n                                    <div className=\"pc-b-title\">Set Admin commission</div>\r\n                                    <div className=\"pc-b-count\">\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            className='pc-comm-inp'\r\n                                            name='AdminCommission'\r\n                                            value={AdminCommission}\r\n                                            // placeholder=\"10\"\r\n                                            onChange={this.handleInputChange}\r\n                                        />\r\n                                        <span className=\"pc-percent\">%</span>\r\n                                    </div>\r\n                                    <Button\r\n                                        disabled={adminPosting}\r\n                                        className=\"btn-secondary-outline\"\r\n                                        onClick={() => this.saveCommission(2)}\r\n                                    >\r\n                                        Save\r\n                                    </Button>\r\n                                </li>\r\n                            </ul>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-30\">\r\n                        <Col md={12}>\r\n                            <h3 className=\"h3-cls\">Private contest visibility</h3>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-2\">\r\n                        <Col md={12}>\r\n                            <div className=\"input-box\">\r\n                                <ul className=\"coupons-option-list\">\r\n                                    <li className=\"coupons-option-item\">\r\n                                        <div className=\"custom-radio\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=\"custom-control-input\"\r\n                                                name=\"Visibility\"\r\n                                                value=\"2\"\r\n                                                checked={Visibility === '2'}\r\n                                                onChange={() => this.toggleActionPopup(\"2\")}\r\n                                            />\r\n                                            <label className=\"custom-control-label\">\r\n                                                <span className=\"input-text\">Show as big banner</span>\r\n                                            </label>\r\n                                        </div>\r\n                                    </li>\r\n                                    <li className=\"coupons-option-item\">\r\n                                        <div className=\"custom-radio\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=\"custom-control-input\"\r\n                                                name=\"Visibility\"\r\n                                                value=\"1\"\r\n                                                checked={Visibility === '1'}\r\n                                                onChange={() => this.toggleActionPopup(\"1\")}\r\n                                            />\r\n                                            <label className=\"custom-control-label\">\r\n                                                <span className=\"input-text\">Show as a button</span>\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                    </li>\r\n                                    {/* <li className=\"coupons-option-item\">\r\n                                        <div className=\"custom-radio\">\r\n                                            <input\r\n                                                type=\"radio\"\r\n                                                className=\"custom-control-input\"\r\n                                                name=\"Visibility\"\r\n                                                value=\"0\"\r\n                                                checked={Visibility === '0'}\r\n                                                onChange={() => this.toggleActionPopup(\"0\")}\r\n                                            />\r\n                                            <label className=\"custom-control-label\">\r\n                                                <span className=\"input-text\">No private contest</span>\r\n                                            </label>\r\n                                        </div>\r\n                                    </li> */}\r\n                                </ul>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default PC_Setting"],"sourceRoot":""}