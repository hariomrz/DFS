{"version":3,"sources":["views/OpenPredictor/PredictionType.jsx"],"names":["PredictionType","props","getPredictionModule","WSManager","Rest","NC","then","Response","response_code","setState","ModuleSetting","data","allow_open_predictor","notify","show","catch","error","updatePredictionModule","state","params","status","history","push","global_error","setKeyValueInLocal","setTimeout","window","location","reload","this","className","md","src","Images","OP_PREDICTION_1","alt","OP_PREDICTION_2","OP_PREDICTION_3","onClick","Component"],"mappings":"gTAMMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAUVC,oBAAsB,WAClBC,IAAUC,KAAKC,KAAaA,KAA6B,IAAIC,MAAK,SAAAC,GAC1DA,EAASC,eAAiBH,KAC1B,EAAKI,SAAS,CAAEC,cAAeH,EAASI,KAAKC,uBAE7CC,SAAOC,KAAKT,KAAiB,QAAS,QAE3CU,OAAM,SAAAC,GACLH,SAAOC,KAAKT,KAAiB,QAAS,SAnB3B,EAuBnBY,uBAAyB,WAAO,IACtBP,EAAkB,EAAKQ,MAAvBR,cACFS,EAAS,CACTC,OAAyB,GAAjBV,EAAqB,EAAI,GAErCP,IAAUC,KAAKC,KAAaA,KAAgCc,GAAQb,MAAK,SAAAC,GACjEA,EAASC,eAAiBH,MAEL,GAAjBK,GACA,EAAKT,MAAMoB,QAAQC,KAAK,4BAC5BT,SAAOC,KAAKP,EAASgB,aAAc,UAAW,KAC9C,EAAKd,SAAS,CAAEC,cAAgC,GAAjBA,EAAqB,EAAI,IACxDP,IAAUqB,mBAAmB,uBAAwB,GACrDC,YAAW,WACPC,OAAOC,SAASC,WACjB,MAGHf,SAAOC,KAAKT,KAAiB,QAAS,QAE3CU,OAAM,SAAAC,GACLH,SAAOC,KAAKT,KAAiB,QAAS,SA1C1C,EAAKa,MAAQ,CACTR,cAAe,IAHJ,E,gEAQfmB,KAAK3B,wB,+BAwCC,IACAQ,EAAiBmB,KAAKX,MAAtBR,cACN,OACI,kBAAC,WAAD,KACI,yBAAKoB,UAAU,qBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,IACL,yBAAKD,UAAU,2BAAf,gCAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,IACL,yBAAKD,UAAU,aACX,wBAAIA,UAAU,mBACV,wBAAIA,UAAU,8BACV,4BAAQA,UAAU,2BACd,yBAAKE,IAAKC,IAAOC,gBAAiBC,IAAI,MAE1C,yBAAKL,UAAU,0BACX,yBAAKA,UAAU,aAAf,qBACA,yBAAKA,UAAU,iBAAf,qEAGR,wBAAIA,UAAU,+BACV,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,aAAf,2BACA,yBAAKA,UAAU,iBAAf,yEAEJ,4BAAQA,UAAU,2BACd,yBAAKE,IAAKC,IAAOG,gBAAiBD,IAAI,GAAGL,UAAU,gBAG3D,wBAAIA,UAAU,8BACV,4BAAQA,UAAU,2BACd,yBAAKE,IAAKC,IAAOI,gBAAiBF,IAAI,MAE1C,yBAAKL,UAAU,0BACX,yBAAKA,UAAU,aAAf,mBACA,yBAAKA,UAAU,iBAAf,wEAOxB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,IACL,yBAAKD,UAAU,WACX,kBAAC,IAAD,CAAQQ,QAAST,KAAKZ,uBAAwBa,UAAU,yBAE/B,GAAjBpB,EAAqB,wBAA0B,oC,GAnG1D6B,aA8GdvC","file":"static/js/205.86eff2e2.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport Images from '../../components/images';\r\nimport { Button, Row, Col } from 'reactstrap';\r\nimport WSManager from '../../helper/WSManager';\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport { notify } from 'react-notify-toast';\r\nclass PredictionType extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ModuleSetting: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPredictionModule()\r\n    }\r\n\r\n    getPredictionModule = () => {\r\n        WSManager.Rest(NC.baseURL + NC.OP_GET_PREDICTION_STATUS, {}).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({ ModuleSetting: Response.data.allow_open_predictor })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    updatePredictionModule = () => {\r\n        let { ModuleSetting } = this.state\r\n        let params = {\r\n            status: ModuleSetting == 1 ? 0 : 1            \r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.OP_UPDATE_PREDICTION_STATUS, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                \r\n                if (ModuleSetting == 0)\r\n                    this.props.history.push('/open-predictor/category')\r\n                notify.show(Response.global_error, 'success', 5000)\r\n                this.setState({ ModuleSetting: ModuleSetting == 1 ? 0 : 1 })\r\n                WSManager.setKeyValueInLocal('ALLOW_OPEN_PREDICTOR', 1);\r\n                setTimeout(() => {\r\n                    window.location.reload()\r\n                }, 1000);\r\n                \r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { ModuleSetting} = this.state\r\n        return (\r\n            <Fragment>\r\n                <div className=\"prediction-module\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"pre-heading text-center\">Prediction Module Benefits</div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"container\">\r\n                                <ul className=\"prediction-list\">\r\n                                    <li className=\"prediction-item float-left\">\r\n                                        <figure className=\"pre-img-container pr-20\">\r\n                                            <img src={Images.OP_PREDICTION_1} alt=\"\" />\r\n                                        </figure>\r\n                                        <div className=\"pre-info-box text-left\">\r\n                                            <div className=\"pre-title\">Generic Questions</div>\r\n                                            <div className=\"pre-sub-title\">Post general question related to important affairs in the world</div>\r\n                                        </div>\r\n                                    </li>\r\n                                    <li className=\"prediction-item float-right\">\r\n                                        <div className=\"pre-info-box text-right\">\r\n                                            <div className=\"pre-title\">Customizable Categories</div>\r\n                                            <div className=\"pre-sub-title\">You can add custom categories as per your requirement. No limitation</div>\r\n                                        </div>\r\n                                        <figure className=\"pre-img-container pl-20\">\r\n                                            <img src={Images.OP_PREDICTION_2} alt=\"\" className=\"img-cover\" />\r\n                                        </figure>\r\n                                    </li>\r\n                                    <li className=\"prediction-item float-left\">\r\n                                        <figure className=\"pre-img-container pr-20\">\r\n                                            <img src={Images.OP_PREDICTION_3} alt=\"\" />\r\n                                        </figure>\r\n                                        <div className=\"pre-info-box text-left\">\r\n                                            <div className=\"pre-title\">Store For Users</div>\r\n                                            <div className=\"pre-sub-title\">Coins can be redeemed in real cash, merchandise, vouchers etc.</div>\r\n                                        </div>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <div className=\"pre-btn\">\r\n                                <Button onClick={this.updatePredictionModule} className=\"btn-secondary-outline\">\r\n                                    {\r\n                                        ModuleSetting == 1 ? 'Deactivate Prediction' : 'Activate Prediction Now'\r\n                                    }\r\n                                    </Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default PredictionType"],"sourceRoot":""}