{"version":3,"sources":["views/XPModule/AddActiviyModal.jsx","views/XPModule/ActivitiesLevel.jsx"],"names":["AddActivitiesLevelModal","props","getActivity","xpGetActivityMastList","then","ApiResponse","response_code","NC","res","data","l_arr","_Map","push","value","activity_master_id","label","activity_title","activity_type","setState","ActOptions","notify","show","catch","error","getCount","tArr","_times","n","CountOption","handleSelectChange","name","_isNull","ActType","handleInputChange","e","inp_name","target","getAttribute","EarnPoints","EditForm","Number","state","msg","addActivity","ActivitySelect","CountSelect","_isEmpty","EditRItem","XP_SEL_ACTIVITY","toString","XP_SEL_COUNT","XP_EARN_POINTS","params","addActPosting","api_call","xpAddActivity","_isUndefined","activity_id","xpUpdateActivity","message","modalActioYesCallback","changeEditState","xp_point","recurrent_count","this","modalCallback","AddActiModalOpen","EditFlag","comm_select_props","is_disabled","is_searchable","is_clearable","menu_is_open","class_name","place_holder","activity_select","sel_options","selected_value","select_name","act_count_select","Modal","isOpen","toggle","className","ModalBody","Row","Col","md","SelectDropdown","SelectProps","Input","type","placeholder","data-inp","onChange","ModalFooter","Button","disabled","onClick","Component","RewardsLevel","getActivityList","listPosting","items_perpage","PERPAGE","current_page","CURRENT_PAGE","sort_order","isDescOrder","sort_field","sortField","xpGetActivitiesList","ActivityList","activities_list","Total","total","toggleActionPopup","flg","edit_itm","toggleYesActionPopup","deleteToggle","ACT_id","idx","prevState","delIdx","ACT_ID","DeleteModalOpen","deleteReward","DeletePosting","param","t_act_list","xpDelActivity","responseJson","_remove","item","length","HF","allowXpPoints","history","sortfiled","Order","Message","AddActivityModalProps","DeleteModalProps","publishModalOpen","publishPosting","modalActionNo","modalActionYes","MainMessage","XP_DELETE_LEVEL","SubMessage","XP_DELETE_LEVEL_SUB","PromptModal","xs","Table","sortByColumn","_","map","key","colSpan","Loader","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange"],"mappings":"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","file":"static/js/215.dec5133a.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col, Button, Modal, ModalBody, ModalFooter, Input } from 'reactstrap';\r\nimport { _isEmpty, _Map, _isNull, _times, _isUndefined } from \"../../helper/HelperFunction\";\r\nimport SelectDropdown from \"../../components/SelectDropdown\";\r\nimport { xpGetActivityMastList, xpAddActivity, xpUpdateActivity } from '../../helper/WSCalling';\r\nimport { notify } from 'react-notify-toast';\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport { XP_SEL_ACTIVITY, XP_SEL_COUNT, XP_EARN_POINTS } from \"../../helper/Message\";\r\nexport default class AddActivitiesLevelModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            ActOptions: [],\r\n            CountOption: [],\r\n            ActivitySelect: '',\r\n            CountSelect: '',\r\n            EarnPoints: '',\r\n            ActType: '',\r\n            addActPosting: false,\r\n            EditForm: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getActivity()\r\n        this.getCount()\r\n    }\r\n\r\n    getActivity = () => {\r\n        let params = {}\r\n        xpGetActivityMastList(params).then(ApiResponse => {\r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                let res = ApiResponse.data ? ApiResponse.data : []\r\n                let l_arr = []\r\n                _Map(res, function (data) {\r\n                    l_arr.push({\r\n                        value: data.activity_master_id,\r\n                        label: data.activity_title,\r\n                        activity_type: data.activity_type,\r\n                    });\r\n                })\r\n                this.setState({ ActOptions: l_arr })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    getCount = () => {\r\n        let tArr = []\r\n        _times(101, (n) => {\r\n            if (n !== 0)\r\n                tArr.push({ value: n, label: n })\r\n        })\r\n        this.setState({ CountOption: tArr })\r\n    }\r\n\r\n    handleSelectChange = (value, name) => {\r\n        if (!_isNull(value)) {\r\n            this.setState({ [name]: value.value, EditForm: false }, () => {                \r\n                if (name == 'ActivitySelect') {\r\n                    this.setState({ ActType: value.activity_type })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        if (e) {\r\n            let inp_name = e.target.getAttribute(\"data-inp\");\r\n            let value = e.target.value;\r\n            this.setState({ EarnPoints: value, EditForm: false }, () => {\r\n            // this.setState({ EarnPoints: value, EditForm: true }, () => {\r\n                if (Number(this.state.EarnPoints) < 1 || Number(this.state.EarnPoints) > 99999) {\r\n                    let msg = inp_name + ' value should be between 1 to 100000'\r\n                    notify.show(msg, 'error', 3000)\r\n                    this.setState({ EarnPoints: '' })\r\n                    return false\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    addActivity = () => {\r\n        let { ActivitySelect, CountSelect, EarnPoints, ActType } = this.state\r\n        if (_isEmpty(ActivitySelect) && _isEmpty(this.props.EditRItem)) {\r\n            notify.show(XP_SEL_ACTIVITY, 'error', 1500)\r\n            return false\r\n        }\r\n\r\n        if (ActType == '2' && _isEmpty(CountSelect.toString())) {\r\n            notify.show(XP_SEL_COUNT, 'error', 1500)\r\n            return false\r\n        }\r\n\r\n        if (_isEmpty(EarnPoints)) {\r\n            notify.show(XP_EARN_POINTS, 'error', 1500)\r\n            return false\r\n        }\r\n\r\n        let params = {\r\n            \"activity_master_id\": ActivitySelect,\r\n            \"xp_point\": EarnPoints,\r\n            \"recurrent_count\": CountSelect,\r\n        }\r\n        this.setState({ addActPosting: true })\r\n        let api_call = xpAddActivity\r\n        if (!_isUndefined(this.props.EditRItem.activity_id)) {\r\n            params.activity_id = this.props.EditRItem.activity_id\r\n            delete params.activity_master_id;\r\n            api_call = xpUpdateActivity\r\n        }\r\n\r\n        api_call(params).then(ApiResponse => {\r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                this.setState({\r\n                    ActivitySelect: '',\r\n                    CountSelect: '',\r\n                    EarnPoints: '',\r\n                    EditForm: true,\r\n                })\r\n                notify.show(ApiResponse.message, 'success', 3000)\r\n                this.props.modalActioYesCallback()\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n            this.setState({ addActPosting: false })\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n    \r\n    changeEditState = () => {\r\n        if(this.state.EarnPoints != this.props.EditRItem.xp_point)\r\n        {\r\n            this.setState({\r\n                EarnPoints: this.props.EditRItem.xp_point,\r\n                CountSelect: this.props.EditRItem.recurrent_count,\r\n                ActType: this.props.EditRItem.activity_type,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { modalCallback, AddActiModalOpen, EditRItem, EditFlag } = this.props\r\n        const { ActType, ActOptions, ActivitySelect, CountSelect, CountOption, EarnPoints, addActPosting, EditForm } = this.state\r\n\r\n\r\n        if (EditForm && !_isEmpty(EditRItem)) {\r\n            this.changeEditState()\r\n        }\r\n\r\n        const comm_select_props = {\r\n            is_disabled: false,\r\n            is_searchable: false,\r\n            is_clearable: false,\r\n            menu_is_open: false,\r\n            class_name: \"custom-form-control\",\r\n            place_holder: \"Select\",\r\n            modalCallback: (e, name) => this.handleSelectChange(e, name)\r\n        }\r\n\r\n        const activity_select = {\r\n            ...comm_select_props,\r\n            sel_options: ActOptions,\r\n            selected_value: ActivitySelect,\r\n            select_name: 'ActivitySelect',\r\n        }\r\n\r\n        const act_count_select = {\r\n            ...comm_select_props,\r\n            sel_options: CountOption,\r\n            // selected_value: CountSelect || (EditForm && !_isEmpty(EditRItem)) && EditRItem.recurrent_count,\r\n            selected_value: CountSelect,\r\n            select_name: 'CountSelect',\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                isOpen={AddActiModalOpen}\r\n                toggle={modalCallback}\r\n                className=\"addrewards-modal modal-md addact-modal animate-modal-top\"\r\n            >\r\n                <ModalBody>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h3 className=\"h3-cls\">{EditRItem['activity_id'] ? 'Update' : 'Add'} Activities</h3>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <div className=\"input-box\">\r\n                                <label>Select Activity</label>\r\n                                {\r\n                                    EditRItem['activity_id'] ?\r\n                                        <div className=\"xp-sel-title\">\r\n                                            {EditRItem ? EditRItem.activity_title : ''}\r\n                                        </div>\r\n                                        :\r\n                                        <SelectDropdown SelectProps={activity_select} />\r\n                                }\r\n                                <span className=\"act-type\">\r\n                                    {ActType == '1' && 'One time'}\r\n                                    {ActType == '2' && 'Recurrent'}\r\n                                </span>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <div className={`input-box ${(ActType == '2') ? 'opc-1' : 'opc-0'}`}>\r\n                                <label>Count</label>\r\n                                <SelectDropdown SelectProps={act_count_select} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <div className=\"input-box\">\r\n                                <label>Earn Points</label>\r\n                                <Input\r\n                                    className=\"form-control\"\r\n                                    type=\"number\"\r\n                                    placeholder=\"Points\"\r\n                                    name='EarnPoints'\r\n                                    // value={(EditForm && !_isEmpty(EditRItem)) ? EditRItem.xp_point : EarnPoints}\r\n                                    value={EarnPoints}\r\n                                    data-inp='Earn points'\r\n                                    onChange={(e) => this.handleInputChange(e)}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        disabled={addActPosting}\r\n                        className=\"btn-secondary-outline\"\r\n                        onClick={this.addActivity}\r\n                    >{EditRItem['activity_id'] ? 'Update' : 'Add'} Activity</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Button, Row, Col, Table } from 'reactstrap';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport Pagination from \"react-js-pagination\";\r\nimport _ from 'lodash';\r\nimport AddActiviyModal from './AddActiviyModal';\r\nimport { xpGetActivitiesList, xpDelActivity } from '../../helper/WSCalling';\r\nimport Loader from '../../components/Loader';\r\nimport HF, { _remove } from \"../../helper/HelperFunction\";\r\nimport { XP_DELETE_LEVEL, XP_DELETE_LEVEL_SUB } from \"../../helper/Message\";\r\nimport PromptModal from '../../components/Modals/PromptModal';\r\nclass RewardsLevel extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            CURRENT_PAGE: 1,\r\n            sortField: 'activity_id',\r\n            isDescOrder: 'true',\r\n            AddActiModalOpen: false,\r\n            listPosting: false,\r\n            DeleteModalOpen: false,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        if (HF.allowXpPoints() == '0') {\r\n            notify.show(NC.MODULE_NOT_ENABLE, 'error', 5000)\r\n            this.props.history.push('/dashboard')\r\n        }\r\n        this.getActivityList();\r\n    }\r\n\r\n    sortByColumn(sortfiled, isDescOrder) {\r\n        let Order = isDescOrder ? false : true\r\n        this.setState({\r\n            sortField: sortfiled,\r\n            isDescOrder: Order,\r\n            CURRENT_PAGE: 1,\r\n\r\n        }, this.getActivityList)\r\n    }\r\n\r\n    getActivityList = () => {\r\n        this.setState({ listPosting: true })\r\n        const { PERPAGE, CURRENT_PAGE, isDescOrder, sortField } = this.state\r\n        let params = {\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            sort_order: isDescOrder ? 'DESC' : 'ASC',\r\n            sort_field: sortField,\r\n        }\r\n\r\n        xpGetActivitiesList(params).then(ApiResponse => {\r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                this.setState({\r\n                    ActivityList: ApiResponse.data ? ApiResponse.data.activities_list : [],\r\n                    Total: ApiResponse.data ? ApiResponse.data.total : 0,\r\n                    listPosting: false,\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        if (current_page !== this.state.CURRENT_PAGE) {\r\n            this.setState({\r\n                CURRENT_PAGE: current_page\r\n            }, () => {\r\n                this.getActivityList();\r\n            });\r\n        }\r\n    }\r\n\r\n    //function to toggle action popup\r\n    toggleActionPopup = (flg, edit_itm) => {\r\n        if (!flg) {\r\n            edit_itm = {}\r\n        }\r\n        this.setState({\r\n            AddActiModalOpen: !this.state.AddActiModalOpen,\r\n            EditRItem: edit_itm,\r\n            EditFlag: flg,\r\n        })\r\n    }\r\n    \r\n    toggleYesActionPopup = () => {\r\n        this.setState({\r\n            AddActiModalOpen: false,\r\n        }, () => {\r\n            this.getActivityList();\r\n        })\r\n    }\r\n\r\n    deleteToggle = (ACT_id, idx) => {\r\n        this.setState(prevState => ({\r\n            delIdx: idx,\r\n            ACT_ID: ACT_id,\r\n            DeleteModalOpen: !prevState.DeleteModalOpen\r\n        }));\r\n    }\r\n\r\n    deleteReward = () => {\r\n        this.setState({ DeletePosting: true })\r\n        const { delIdx, ACT_ID, ActivityList } = this.state\r\n        const param = { activity_id: ACT_ID }\r\n        let t_act_list = ActivityList\r\n\r\n        xpDelActivity(param).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                _remove(t_act_list, function (item, idx) {\r\n                    return idx == delIdx\r\n                })\r\n\r\n                notify.show(responseJson.message, \"success\", 5000);\r\n                this.setState({\r\n                    ActivityList: t_act_list,\r\n                    DeletePosting: false,\r\n                    DeleteModalOpen: false,\r\n                    Total: t_act_list.length,\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { ActivityList, CURRENT_PAGE, PERPAGE, Total, AddActiModalOpen, Message, isDescOrder, sortField, listPosting, DeleteModalOpen, DeletePosting, EditRItem } = this.state\r\n        const AddActivityModalProps = {\r\n            Message: Message,\r\n            modalCallback: this.toggleActionPopup,\r\n            AddActiModalOpen: AddActiModalOpen,\r\n            modalActioYesCallback: this.toggleYesActionPopup,\r\n            EditRItem: EditRItem,\r\n        }\r\n\r\n        let DeleteModalProps = {\r\n            publishModalOpen: DeleteModalOpen,\r\n            publishPosting: DeletePosting,\r\n            modalActionNo: this.deleteToggle,\r\n            modalActionYes: this.deleteReward,\r\n            MainMessage: XP_DELETE_LEVEL,\r\n            SubMessage: XP_DELETE_LEVEL_SUB,\r\n        }\r\n\r\n        return (\r\n            <div className=\"rewards-level animated fadeIn\">\r\n                {AddActiModalOpen && <AddActiviyModal {...AddActivityModalProps} />}\r\n                {DeleteModalOpen && <PromptModal {...DeleteModalProps} />}\r\n\r\n                <Row className=\"level-sub-header mb-20\">\r\n                    <Col xs={6}>\r\n                        <h2>Activities:</h2>\r\n                    </Col>\r\n                    <Col xs={6} className=\"text-right\">\r\n                        <Button className=\"btn-secondary-outline\" onClick={() => this.toggleActionPopup()}>Add Activities</Button>\r\n                    </Col>\r\n                </Row>\r\n                <div className=\"white-container\">\r\n                    <Row>\r\n                        <Col md={12} className=\"table-responsive common-table\">\r\n                            <Table>\r\n                                <thead className=\"height-40\">\r\n                                    <tr>\r\n                                        <th onClick={() => this.sortByColumn('activity_id', isDescOrder)}>\r\n                                            Activity\r\n                                        <div className={`d-inline-block ${(sortField === 'activity_id' && isDescOrder) ? '' : 'rotate-icon'}`}>\r\n                                                <i className=\"icon-Shape ml-1\"></i>\r\n                                            </div>\r\n                                        </th>\r\n                                        <th className=\"cursor-default\">Points</th>\r\n                                        <th className=\"cursor-default\">Type</th>\r\n                                        <th className=\"text-center cursor-default\">Action</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {\r\n                                    Total > 0 ?\r\n                                        _.map(ActivityList, (item, idx) => {\r\n                                            return (\r\n                                                <tbody key={idx}>\r\n                                                    <tr>\r\n                                                        <td>{item.activity_title}</td>\r\n                                                        <td>{item.xp_point}</td>\r\n                                                        <td>\r\n                                                            {item.activity_type == '1' && 'One time'}\r\n                                                            {item.activity_type == '2' && 'Recurrent'}\r\n                                                        </td>\r\n                                                        <td className=\"text-center\">\r\n                                                            <a\r\n                                                                className=\"action-icn\"\r\n                                                                onClick={() => this.toggleActionPopup(true, item)}\r\n                                                            >\r\n                                                                <i className=\"icon-edit\"></i>\r\n                                                            </a>\r\n                                                            <a\r\n                                                                className=\"action-icn\"\r\n                                                                onClick={() => this.deleteToggle(item.activity_id, idx)}\r\n                                                            >\r\n                                                                <i className=\"icon-delete\"></i>\r\n                                                            </a>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        })\r\n                                        :\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td colSpan='22'>\r\n                                                    {(Total == 0 && !listPosting) ?\r\n                                                        <div className=\"no-records\">{NC.NO_RECORDS}</div>\r\n                                                        :\r\n                                                        <Loader />\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                }\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </div>\r\n                {\r\n                    Total > PERPAGE\r\n                    && (\r\n                        <div className=\"custom-pagination lobby-paging\">\r\n                            <Pagination\r\n                                activePage={CURRENT_PAGE}\r\n                                itemsCountPerPage={PERPAGE}\r\n                                totalItemsCount={Total}\r\n                                pageRangeDisplayed={5}\r\n                                onChange={e => this.handlePageChange(e)}\r\n                            />\r\n                        </div>\r\n                    )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default RewardsLevel\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}