{"version":3,"sources":["views/Settings/Reward.jsx"],"names":["Reward","props","getReward","setState","ListPosting","state","params","items_perpage","PERPAGE","current_page","CURRENT_PAGE","getScratchCardList","then","ResponseJson","response_code","NC","res","data","RewardList","result","Total","total","prizeOptions","prize_type","notify","show","catch","error","deleteToggle","r_id","RewardId","DeleteModalOpen","deleteReward","DeletePosting","param","scratch_card_id","tempRewardList","deleteScratchCard","responseJson","_","remove","item","length","message","addEditRewadModalToggle","flag","SCRATCH_CARD_ID","SelectPrizeType","Amount","amount","ResultText","result_text","RewardStatus","status","addEditRewFlag","addEditPosting","addEditModalOpen","handlePrizeChange","value","_isEmpty","createResultMsg","handleInputChange","e","name","target","AmountMsg","HF","isFloat","addEditReward","URL","addScratchCard","updateScratchCard","Response","ptype","msg","allowScratchWin","MODULE_NOT_ENABLE","this","history","push","Select_Props","is_disabled","is_searchable","is_clearable","menu_is_open","class_name","sel_options","place_holder","selected_value","modalCallback","isOpen","toggle","className","md","SelectProps","maxLength","type","placeholder","onChange","REWARD_AMOUNT_MSG","disabled","htmlFor","checked","onClick","DeleteModalProps","publishModalOpen","publishPosting","modalActionNo","modalActionYes","MainMessage","REWARD_DELETE_MSG","SubMessage","REWARD_DELETE_SUB_MSG","addEditRewadModal","map","idx","key","colSpan","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","Component"],"mappings":"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","file":"static/js/213.dfecb0c9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Button, Input, Table, ModalBody, Modal, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport _ from 'lodash';\r\nimport HF, { _isEmpty } from '../../helper/HelperFunction';\r\nimport { notify } from 'react-notify-toast';\r\nimport Loader from '../../components/Loader';\r\nimport { getScratchCardList, deleteScratchCard, addScratchCard, updateScratchCard } from '../../helper/WSCalling';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport { REWARD_DELETE_MSG, REWARD_DELETE_SUB_MSG, MODULE_NOT_ENABLE, REWARD_AMOUNT_MSG } from \"../../helper/Message\";\r\nimport PromptModal from '../../components/Modals/PromptModal';\r\nimport Pagination from \"react-js-pagination\";\r\nimport SelectDropdown from \"../../components/SelectDropdown\";\r\nclass Reward extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            CURRENT_PAGE: 1,\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            RewardList: [],\r\n            ListPosting: true,\r\n            DeletePosting: false,\r\n            DeleteModalOpen: false,\r\n            addEditModalOpen: false,\r\n            SelectPrizeType: '1',\r\n            Amount: '',\r\n            ResultText: '',\r\n            RewardStatus: '1',\r\n            AmountMsg: false,\r\n            addEditPosting: true,\r\n            prizeOptions: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (HF.allowScratchWin() != '1') {\r\n            notify.show(MODULE_NOT_ENABLE, 'error', 5000)\r\n            this.props.history.push('/dashboard')\r\n        }\r\n        this.getReward()\r\n    }\r\n\r\n    getReward = () => {\r\n        this.setState({ ListPosting: true })\r\n        const { PERPAGE, CURRENT_PAGE } = this.state\r\n        let params = {\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n        }\r\n        getScratchCardList(params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                let res = ResponseJson.data ? ResponseJson.data : []\r\n                this.setState({\r\n                    ListPosting: false,\r\n                    RewardList: res.result ? res.result : [],\r\n                    Total: res.total ? res.total : 0,\r\n                    prizeOptions: res.prize_type ? res.prize_type : [],\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    deleteToggle = (r_id) => {\r\n        this.setState({\r\n            RewardId: r_id,\r\n            DeleteModalOpen: !this.state.DeleteModalOpen\r\n        })\r\n    }\r\n\r\n    deleteReward = () => {\r\n        const { RewardId, RewardList, Total } = this.state\r\n        this.setState({ DeletePosting: true })\r\n        const param = { scratch_card_id: RewardId }\r\n        let tempRewardList = RewardList\r\n        deleteScratchCard(param).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                _.remove(tempRewardList, function (item) {\r\n                    return item.scratch_card_id == RewardId\r\n                })\r\n                \r\n                this.setState({\r\n                    RewardList: tempRewardList,\r\n                    DeleteModalOpen: false,\r\n                    Total: (tempRewardList.length == 0) ? 0 : Total,\r\n                })\r\n                notify.show(responseJson.message, \"success\", 5000);\r\n            }\r\n            this.setState({ DeletePosting: false })\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        if (current_page != this.state.CURRENT_PAGE) {\r\n            this.setState({\r\n                CURRENT_PAGE: current_page\r\n            }, this.getReward);\r\n        }\r\n    }\r\n\r\n    addEditRewadModalToggle = (flag, item) => {\r\n        this.setState({\r\n            SCRATCH_CARD_ID: item.scratch_card_id ? item.scratch_card_id : '1',\r\n            SelectPrizeType: item.prize_type ? item.prize_type : '1',\r\n            Amount: item.amount ? item.amount : '',\r\n            ResultText: item.result_text ? item.result_text : '',\r\n            RewardStatus: item.status ? item.status : '1',\r\n            addEditRewFlag: flag,\r\n            addEditPosting: true,\r\n            addEditModalOpen: !this.state.addEditModalOpen,\r\n        })\r\n    }\r\n\r\n    handlePrizeChange = (value) => {\r\n        if (!_isEmpty(this.state.Amount)) {\r\n            this.setState({ addEditPosting: false })\r\n        }\r\n        this.setState({ SelectPrizeType: value.value }, this.createResultMsg)\r\n    }\r\n\r\n    addEditRewadModal() {\r\n        let { addEditRewFlag, addEditPosting, Amount, addEditModalOpen, prizeOptions, SelectPrizeType, ResultText, RewardStatus, AmountMsg } = this.state\r\n        const Select_Props = {\r\n            is_disabled: (Amount === '0') ? true : false,\r\n            is_searchable: true,\r\n            is_clearable: false,\r\n            menu_is_open: false,\r\n            class_name: \"form-control\",\r\n            sel_options: (Amount === '0') ? [] : prizeOptions,\r\n            place_holder: \"Select Prize\",\r\n            selected_value: SelectPrizeType,\r\n            modalCallback: this.handlePrizeChange\r\n        }\r\n        return (\r\n            <Modal isOpen={addEditModalOpen} toggle={() => this.addEditRewadModalToggle('', '')} className={`add-league-modal modal-xs reward-mod ${addEditRewFlag === 1 ? 'animate-modal-top' : ''}`}>\r\n                <ModalHeader>{addEditRewFlag === 1 ? 'Add' : 'Edit'} Reward</ModalHeader>\r\n                <ModalBody>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <label>Select Prize</label>\r\n                            <SelectDropdown SelectProps={Select_Props} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-3\">\r\n                        <Col md={12}>\r\n                            <label>Amount</label>\r\n                            <Input\r\n                                maxLength={7}\r\n                                type=\"number\"\r\n                                name=\"Amount\"\r\n                                placeholder=\"Amount\"\r\n                                value={Amount}\r\n                                onChange={(e) => this.handleInputChange(e)}\r\n                            />\r\n                            {\r\n                                AmountMsg &&\r\n                                <span className=\"color-red\">{REWARD_AMOUNT_MSG}</span>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-3\">\r\n                        <Col md={12}>\r\n                            <label>Result Text</label>\r\n                            <Input\r\n                                disabled={true}\r\n                                type=\"text\"\r\n                                name=\"ResultText\"\r\n                                placeholder=\"ResultText\"\r\n                                value={ResultText}\r\n                                onChange={(e) => this.handleInputChange(e)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-3\">\r\n                        <Col md={12}>\r\n                            <label htmlFor=\"ProofDesc\">Reward Status</label>\r\n                            <ul className=\"radio-option-list\">\r\n                                <li className=\"radio-option-item\">\r\n                                    <div className=\"custom-radio\">\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"custom-control-input\"\r\n                                            name=\"RewardStatus\"\r\n                                            value=\"1\"\r\n                                            checked={RewardStatus === '1'}\r\n                                            onChange={this.handleInputChange}\r\n                                        />\r\n                                        <label className=\"custom-control-label\">\r\n                                            <span className=\"input-text\">Active</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"radio-option-item\">\r\n                                    <div className=\"custom-radio\">\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"custom-control-input\"\r\n                                            name=\"RewardStatus\"\r\n                                            value=\"0\"\r\n                                            checked={RewardStatus === '0'}\r\n                                            onChange={this.handleInputChange}\r\n                                        />\r\n                                        <label className=\"custom-control-label\">\r\n                                            <span className=\"input-text\">Inactive</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </li>\r\n                            </ul>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        disabled={addEditPosting}\r\n                        className=\"btn-secondary-outline\"\r\n                        onClick={this.addEditReward}>{addEditRewFlag === 2 ? 'Update' : 'Save'}</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n        this.setState({ AmountMsg: false })\r\n        if (name === 'Amount' && HF.isFloat(value)) {\r\n            value = this.state.Amount\r\n            this.setState({ AmountMsg: true })\r\n        }\r\n\r\n        this.setState({ [name]: value }, () => {\r\n            this.createResultMsg()\r\n            if (name === 'Amount' && (value.length <= 0 || value.length > 7)) {\r\n                this.setState({\r\n                    Amount: '',\r\n                    AmountMsg: true,\r\n                    addEditPosting: true,\r\n                    ResultText: '',\r\n                })\r\n            } else {\r\n                this.setState({ addEditPosting: false })\r\n            }\r\n        })\r\n    }\r\n\r\n    addEditReward = () => {\r\n        this.setState({ addEditPosting: true })\r\n        let { addEditRewFlag, SelectPrizeType, Amount, ResultText, RewardStatus, SCRATCH_CARD_ID } = this.state\r\n        let params = {\r\n            prize_type: (Amount === '0') ? '' : SelectPrizeType, \r\n            amount: Amount,\r\n            result_text: ResultText,\r\n            status: RewardStatus\r\n        }\r\n\r\n        let URL = \"\"\r\n        if (addEditRewFlag == 1) {\r\n            URL = addScratchCard(params)\r\n        } else {\r\n            params.scratch_card_id = SCRATCH_CARD_ID\r\n            URL = updateScratchCard(params)\r\n        }\r\n\r\n        URL.then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.getReward()\r\n                this.setState({\r\n                    SelectPrizeType: '1',\r\n                    Amount: '',\r\n                    ResultText: '',\r\n                    RewardStatus: '1',\r\n                    addEditModalOpen: false,\r\n                })\r\n                notify.show(Response.message, 'success', 5000)\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    createResultMsg = () => {\r\n        let { SelectPrizeType, Amount } = this.state\r\n        let ptype = ''\r\n        if (SelectPrizeType == '0') {\r\n            ptype = 'bonus cash'\r\n        }\r\n        else if (SelectPrizeType == '1') {\r\n            ptype = 'real cash'\r\n        }\r\n        else if (SelectPrizeType == '2') {\r\n            let s = (Amount > 1) ? 's' : ''\r\n            ptype = 'coin' + s\r\n        }\r\n\r\n        let msg = 'Better luck next time'\r\n        if (Amount > 0)\r\n            msg = Amount ? 'You won ' + Amount + ' ' + ptype : '';\r\n        this.setState({ ResultText: msg })\r\n    }\r\n\r\n    render() {\r\n        let { RewardList, ListPosting, Total, DeleteModalOpen, DeletePosting, CURRENT_PAGE, PERPAGE, addEditModalOpen } = this.state\r\n        let DeleteModalProps = {\r\n            publishModalOpen: DeleteModalOpen,\r\n            publishPosting: DeletePosting,\r\n            modalActionNo: this.deleteToggle,\r\n            modalActionYes: this.deleteReward,\r\n            MainMessage: REWARD_DELETE_MSG,\r\n            SubMessage: REWARD_DELETE_SUB_MSG,\r\n        }\r\n        return (\r\n            <div className=\"sw_reward\">\r\n                {DeleteModalOpen && <PromptModal {...DeleteModalProps} />}\r\n                {addEditModalOpen && this.addEditRewadModal()}\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <h2 className=\"h2-cls float-left animate-left\">Manage Reward</h2>\r\n                        <Button\r\n                            onClick={() => this.addEditRewadModalToggle(1, '')}\r\n                            className=\"btn-secondary-outline float-right animate-right\">\r\n                            Add Reward\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mt-30\">\r\n                    <Col md={12} className=\"table-responsive common-table\">\r\n                        <Table className=\"animate-top\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Prize</th>\r\n                                    <th>Amount</th>\r\n                                    <th>Result text</th>\r\n                                    <th>Status</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            {\r\n                                Total > 0 ?\r\n                                    _.map(RewardList, (item, idx) => {\r\n                                        return (\r\n                                            <tbody key={idx}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {item.prize_type == '' && '--'}\r\n                                                        {item.prize_type == '0' && 'Bonus'}\r\n                                                        {item.prize_type == '1' && 'Real Cash'}\r\n                                                        {item.prize_type == '2' && 'Coin'}\r\n                                                    </td>\r\n                                                    <td>{item.amount == '0' ? '--' : item.amount}</td>\r\n                                                    <td>{item.result_text}</td>\r\n                                                    <td>\r\n                                                        <span className={`${item.status == '1' ? 'text-green' : 'text-red'}`}>\r\n                                                            {item.status == '1' && 'Active'}\r\n                                                            {item.status == '0' && 'Inactive'}\r\n                                                        </span>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <i\r\n                                                            onClick={() => this.deleteToggle(item.scratch_card_id)}\r\n                                                            className=\"icon-delete\"></i>\r\n                                                        <i\r\n                                                            onClick={() => this.addEditRewadModalToggle(2, item)}\r\n                                                            className=\"icon-edit ml-4\"></i>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td colSpan='22'>\r\n                                                {(Total == 0 && !ListPosting) ?\r\n                                                    <div className=\"no-records\">No Record Found.</div>\r\n                                                    :\r\n                                                    <Loader />\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                            }\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        {\r\n                            Total > PERPAGE &&\r\n                            (<div className=\"custom-pagination float-right mt-5\">\r\n                                <Pagination\r\n                                    activePage={CURRENT_PAGE}\r\n                                    itemsCountPerPage={PERPAGE}\r\n                                    totalItemsCount={Total}\r\n                                    pageRangeDisplayed={5}\r\n                                    onChange={e => this.handlePageChange(e)}\r\n                                />\r\n                            </div>)\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Reward"],"sourceRoot":""}