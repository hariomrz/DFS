{"version":3,"sources":["views/GameCenter/DFS/Seasonschedule.jsx"],"names":["options","value","label","Seasonschedule","props","getSeasonStats","state","InningChange","PERPAGE","CURRENT_PAGE","selected_sport","match","params","leagueid","gameid","items_perpage","current_page","sort_order","sort_field","sports_id","league_id","match_inning","game_unique_id","WSManager","Rest","NC","then","ResponseJson","response_code","setState","Fields","data","fields","SeasonResult","result","SeasonData","season_data","Total","total","notify","show","catch","error","handleTypeChange","name","playPause","matchstatus","match_status","season_game_uid","tempData","message","publishEnsureToggle","reCalculate","PublishModalOpen","editStatsToggle","itemObj","EditModalOpen","editStatsModal","isOpen","toggle","className","md","_","map","item","idx","key","replace","toLowerCase","type","onChange","e","handleInputChange","disabled","updatePosting","color","onClick","updatePlayerMatchScore","event","target","tempObj","player_data","LS","get","BackTab","tab","this","history","push","isSearchable","class","menuIsOpen","match_started","publishEnsureModal","sidx","fieldname","colSpan","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange","Component"],"mappings":"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","file":"static/js/200.ed016dc7.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col, Button, Table, Input, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport _ from 'lodash';\r\nimport * as NC from \"../../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport Select from 'react-select';\r\nimport Pagination from \"react-js-pagination\";\r\nimport LS from 'local-storage';\r\nconst options = [\r\n    { value: '1', label: 'Inning 1' },\r\n    { value: '2', label: 'Inning 2' },\r\n]\r\nexport default class Seasonschedule extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            CURRENT_PAGE: '1',\r\n            InningChange: \"1\",\r\n            Fields: [],\r\n            SeasonData: [],\r\n            PublishModalOpen: false,\r\n            EditModalOpen: false,\r\n            itemObj: {},\r\n            updatePosting: false,\r\n            SeasonResult: [],\r\n            selected_sport: (LS.get('selected_sport')) ? LS.get('selected_sport') : NC.sportsId,\r\n            BackTab: (this.props.match.params.tab) ? this.props.match.params.tab : 1,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getSeasonStats()\r\n    }\r\n\r\n    getSeasonStats = () => {\r\n        let { InningChange, PERPAGE, CURRENT_PAGE, selected_sport } = this.state\r\n        let { leagueid, gameid } = this.props.match.params\r\n        let params = {\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            sort_order: \"DESC\",\r\n            sort_field: \"\",\r\n            sports_id: selected_sport,\r\n            league_id: leagueid ? leagueid : \"0\",\r\n            match_inning: InningChange,\r\n            game_unique_id: gameid ? gameid : \"0\"\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.GET_SEASON_STATS, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                this.setState({\r\n                    Fields: ResponseJson.data.fields,\r\n                    SeasonResult: ResponseJson.data.result,\r\n                    SeasonData: ResponseJson.data.season_data,\r\n                    Total: ResponseJson.data.total\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    handleTypeChange = (value, name) => {\r\n        if (value != null)\r\n            this.setState({ [name]: value.value }, this.getSeasonStats)\r\n    }\r\n\r\n    playPause = (matchstatus) => {\r\n        let { gameid } = this.props.match.params\r\n        let params = {}\r\n        params = {\r\n            match_status: (matchstatus == \"2\") ? \"2\" : matchstatus == \"1\" ? \"0\" : \"1\",\r\n            season_game_uid: gameid ? gameid : \"0\"\r\n        }\r\n\r\n        let tempData = this.state.SeasonData\r\n        WSManager.Rest(NC.baseURL + NC.UPDATE_MATCH_STATUS, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                notify.show(ResponseJson.message, \"success\", 3000)\r\n\r\n                tempData.match_status = (matchstatus == \"2\") ? \"2\" : matchstatus == \"1\" ? \"0\" : \"1\"\r\n\r\n                if (matchstatus == \"2\")\r\n                    this.publishEnsureToggle()\r\n\r\n                this.setState({\r\n                    SeasonData: tempData\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    reCalculate = () => {\r\n        let { selected_sport } = this.state\r\n        let { leagueid, gameid } = this.props.match.params\r\n        let params = {\r\n            sports_id: selected_sport,\r\n            league_id: leagueid ? leagueid : \"0\",\r\n            season_game_uid: gameid ? gameid : \"0\"\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.RECALCULATE_MATCH_SCORE, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                notify.show(\"Success\", \"success\", 3000)\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        this.setState({\r\n            CURRENT_PAGE: current_page\r\n        }, () => {\r\n            this.getSeasonStats();\r\n        });\r\n    }\r\n\r\n    publishEnsureToggle = () => {\r\n        this.setState({\r\n            PublishModalOpen: !this.state.PublishModalOpen\r\n        });\r\n    }\r\n\r\n    publishEnsureModal() {\r\n        return (\r\n            <Modal isOpen={this.state.PublishModalOpen} toggle={this.publishEnsureToggle}>\r\n                <ModalHeader>Publish Stats</ModalHeader>\r\n                <ModalBody className=\"font-16\">Please recalculate point before publish it. Are you sure want to publish match ?</ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={() => this.playPause(\"2\")}>Yes</Button>{' '}\r\n                    <Button color=\"primary\" onClick={this.publishEnsureToggle}>No</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    editStatsToggle = (itemObj) => {\r\n        this.setState({\r\n            itemObj: itemObj,\r\n            EditModalOpen: !this.state.EditModalOpen\r\n        });\r\n    }\r\n\r\n    editStatsModal = () => {\r\n        let { itemObj } = this.state\r\n        return (\r\n            <Modal isOpen={this.state.EditModalOpen} toggle={() => this.editStatsToggle(itemObj)} className=\"modal-lg stats-edit-modal\">\r\n                <ModalHeader>Player Score</ModalHeader>\r\n                <ModalBody>\r\n                    <Row>\r\n                        <Col md={12} className=\"table-responsive common-table\">\r\n                            <Table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        {\r\n                                            _.map(itemObj, (item, idx) => {\r\n                                                return (\r\n                                                    idx != 'player_uid' &&\r\n                                                    <th key={idx}>\r\n                                                        {idx.replace(/_/g, ' ').toLowerCase()}</th>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        {\r\n                                            _.map(itemObj, (item, idx) => {\r\n                                                return (\r\n                                                    idx != 'player_uid' &&\r\n                                                    (\r\n                                                        (idx == 'display_name' || idx == 'player_name' || idx == 'position' || idx == 'team_name' || idx == 'scheduled_date') ?\r\n                                                            <td key={idx}>\r\n                                                                {item.replace(/_/g, ' ').toLowerCase()}\r\n                                                            </td>\r\n\r\n                                                            :\r\n                                                            <td key={idx}>\r\n                                                                <Input type=\"number\" value={item.replace(/_/g, ' ').toLowerCase()} name={idx}\r\n                                                                    onChange={(e) => this.handleInputChange(e)}\r\n                                                                />\r\n                                                            </td>\r\n                                                    )\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col></Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button disabled={this.state.updatePosting} color=\"secondary\" onClick={this.updatePlayerMatchScore}>Update</Button>{' '}\r\n                    <Button color=\"primary\" onClick={() => this.editStatsToggle(itemObj)}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        let name = event.target.name\r\n        let value = event.target.value\r\n        let tempObj = this.state.itemObj\r\n        tempObj[name] = value\r\n        this.setState({ itemObj: tempObj })\r\n    }\r\n\r\n    updatePlayerMatchScore = () => {\r\n        let { leagueid, gameid } = this.props.match.params\r\n        let { InningChange, itemObj, selected_sport } = this.state\r\n\r\n        for (var key in itemObj) {\r\n            if (itemObj[key] == '') {\r\n                notify.show(key.replace(/_/g, ' ').toLowerCase() + ' field can not be empty.', 'error', 3000)\r\n                return false;\r\n            }\r\n            else {\r\n                this.setState({\r\n                    updatePosting: false,\r\n                    itemObj: itemObj,\r\n                })\r\n            }\r\n        }\r\n\r\n        let params = {\r\n            sports_id: selected_sport,\r\n            season_game_uid: gameid ? gameid : \"0\",\r\n            league_id: leagueid ? leagueid : \"0\",\r\n            match_inning: InningChange,\r\n            player_data: itemObj\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.UPDATE_PLAYER_MATCH_SCORE, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                notify.show(ResponseJson.message, \"success\", 3000)\r\n                this.editStatsToggle(itemObj)\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { BackTab, SeasonResult, SeasonData, Fields, InningChange, CURRENT_PAGE, PERPAGE, Total } = this.state\r\n        return (\r\n            <Fragment>\r\n                <div className=\"season-stats\">\r\n                    {this.editStatsModal()}\r\n                    <Row>\r\n                        <Col md={12} className=\"top-heading\">\r\n                            <h1 className=\"h1-cls\">Season Stats</h1>\r\n                            <label className=\"back-btn\"\r\n                                onClick={() => this.props.history.push('/game_center/DFS?tab=' + BackTab)}\r\n\r\n                            > {'< '}Back to Fixtures</label>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"xfilter-userlist mb-4\">\r\n                        <Col md={2}>\r\n                            <div>\r\n                                <label className=\"filter-label\">Select Innings</label>\r\n                                <Select\r\n                                    isSearchable={true}\r\n                                    class=\"form-control\"\r\n                                    options={options}\r\n                                    menuIsOpen={true}\r\n                                    value={InningChange}\r\n                                    onChange={e => this.handleTypeChange(e, 'InningChange')}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={10}>\r\n                            <ul className=\"stats-list\">\r\n                                <li className=\"stats-items\">\r\n                                    {\r\n                                        (SeasonData.match_status == \"0\" && SeasonData.match_started == 1) &&\r\n                                        <Button onClick={() => this.playPause(SeasonData.match_status)}>Pause</Button>\r\n                                    }\r\n                                    {\r\n                                        (SeasonData.match_status == \"1\" && SeasonData.match_started == 1) &&\r\n                                        <Button onClick={() => this.playPause(SeasonData.match_status)}>Play</Button>\r\n                                    }\r\n                                </li>\r\n                                {\r\n                                    (SeasonData.match_status == \"1\" && SeasonData.match_started == 1) &&\r\n                                    <Fragment>\r\n                                        <li className=\"stats-items\">\r\n                                            <Button onClick={this.reCalculate}>Recalculate</Button>\r\n                                        </li>\r\n                                        <li className=\"stats-items\">\r\n                                            {this.publishEnsureModal()}\r\n                                            <Button onClick={this.publishEnsureToggle}>Publish</Button>\r\n                                        </li>\r\n                                    </Fragment>\r\n                                }\r\n                            </ul>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12} className=\"table-responsive common-table\">\r\n                            <div className=\"tableFixHead\">\r\n                                <Table>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            {\r\n                                                _.map(Fields, (item, idx) => {\r\n                                                    return (\r\n                                                        (idx > 0) &&\r\n                                                        <th key={idx}>{item.replace(/_/g, ' ').toLowerCase()}</th>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </tr>\r\n                                    </thead>\r\n                                    {\r\n                                        Total > 0 ?\r\n                                            _.map(SeasonResult, (item, sidx) => {\r\n                                                return (<tbody key={sidx}>\r\n                                                    <tr>\r\n                                                        {\r\n                                                            _.map(Fields, (fieldname, idx) => {\r\n                                                                return (\r\n                                                                    idx > 0 && <td key={idx}>\r\n                                                                        {item[fieldname]}\r\n                                                                        <div className=\"edit-stats-btn\">\r\n                                                                            {\r\n                                                                                (fieldname == 'player_name' && SeasonData.match_status == \"1\" && SeasonData.match_started == 1) &&\r\n                                                                                <Button onClick={() => this.editStatsToggle(item)} className=\"stats-btn xfloat-right\">Edit</Button>\r\n                                                                            }\r\n                                                                        </div>\r\n                                                                    </td>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </tr>\r\n                                                </tbody>)\r\n                                            })\r\n                                            :\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <td colSpan=\"26\">\r\n                                                        <div className=\"no-records\">No Records Found.</div>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                    }\r\n                                </Table>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    {Total > PERPAGE && (\r\n                        <div className=\"custom-pagination lobby-paging\">\r\n                            <Pagination\r\n                                activePage={CURRENT_PAGE}\r\n                                itemsCountPerPage={PERPAGE}\r\n                                totalItemsCount={Total}\r\n                                pageRangeDisplayed={5}\r\n                                onChange={e => this.handlePageChange(e)}\r\n                            />\r\n                        </div>\r\n                    )\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}