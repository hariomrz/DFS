{"version":3,"sources":["components/HighGraph.jsx","views/SystemUserReport/UsersReport.jsx"],"names":["HighGraph","rSelected","this","setState","Dashboard","state","filtertype","getTimelines","HighGraphConfigOption","props","highcharts","Highcharts","options","className","LineData","map","linedata","index","sm","key","title","value","displayType","thousandSeparator","prefix","Component","UsersReport","getSystemUserLeagueList","posting","tempLF","leageListFilter","from_date","moment","format","to_date","params","WSManager","Rest","NC","then","responseJson","response_code","leagueArr","data","result","tempArr","label","lObj","lKey","push","league_id","league_display_name","getUserList","tempFilter","filter","total","renderGraph","userslist","totalBalance","balance","xaxisValue","graphValue","item","temp_val","collection_name","season_scheduled_date","Number","parseInt","net_profit","y","color","HighGraphProgressConfigOption","chart","backgroundColor","type","height","navigator","enabled","text","xAxis","labels","style","fontWeight","categories","yAxis","lineWidth","tooltip","borderColor","borderRadius","borderWidth","textAlign","plotOptions","series","pointWidth","stacking","showInLegend","credits","name","clearFilter","Date","now","StartDate","EndDate","UserStatus","sports_id","LS","get","HF","getFirstDateOfMonth","current_page","items_perpage","userFullName","handleChange","bind","handleChangeEnd","url","location","search","urlParams","queryString","parse","pending","status","date","onClick","history","pathname","md","maxDate","showYearDropdown","selected","onChange","placeholderText","dateFormat","minDate","searchable","clearable","e","handleSelect","parseFloat","margin","length","_","idx","getUtcToLocal","total_user_joined","total_system_user","bonus_loss","real_amount","realuser_winnings","site_rake","systemuser_winnings","colSpan","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange"],"mappings":"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","file":"static/js/176.a5960e0f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport { Col, Row, } from 'reactstrap';\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nexport default class HighGraph extends Component {\t\r\n\tonDepositRadioBtnClick(rSelected) { \r\n\t\tthis.setState({ \r\n\t\t\tDashboard: [...this.state.Dashboard, { filtertype : rSelected}] });\r\n\t}\r\n\tonSiteRakeRadioBtnClick(rSelected) { \r\n\tthis.setState({ filtertype : rSelected },()=>{ this.getTimelines(); });\r\n\t}\r\n\tonSiteFreePaidBtnClick(rSelected) { \r\n\tthis.setState({ filtertype : rSelected },()=>{ this.getTimelines(); });\r\n\t}\r\n\tonSiteFreePaidBtnClick(rSelected) { \r\n\tthis.setState({ filtertype : rSelected },()=>{ this.getTimelines(); });\r\n\t}\r\n    render() \r\n    {  const { HighGraphConfigOption} = this.props;\t\r\n       return (\r\n       \t\t   <div>\r\n       \t\t        <HighchartsReact highcharts={Highcharts}  options={HighGraphConfigOption} />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Row className=\"sh\">\r\n\t\t\t\t\t{HighGraphConfigOption.LineData && HighGraphConfigOption.LineData.map((linedata, index) => (\r\n\t\t\t\t\t\t         \r\n\t\t\t\t\t        <Col sm={6} className=\"legend-col\" key={index}> \r\n\t\t\t\t\t\t\t<div className=\"legend-counts\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"\" >{linedata.title}</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"amount valuecolor\">\r\n\t\t\t\t\t\t\t\t\t\t<NumberFormat value={linedata.value} displayType={'text'} thousandSeparator={true} prefix={''} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t    ))\r\n\t\t\t\t    }\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>  \r\n       \t)\r\n  \t} \r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col, Table, Button } from 'reactstrap';\r\nimport _ from 'lodash';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Select from 'react-select';\r\nimport Pagination from \"react-js-pagination\";\r\nimport moment from 'moment';\r\nimport queryString from 'query-string';\r\nimport Loader from \"../../components/Loader\";\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport HighGraph from \"../../components/HighGraph\";\r\nimport LS from 'local-storage';\r\nimport HF from '../../helper/HelperFunction';\r\nclass UsersReport extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        let filter = {\r\n            sports_id: (LS.get('selected_sport')) ? LS.get('selected_sport') : NC.sportsId,\r\n            league_id: '',\r\n            from_date: HF.getFirstDateOfMonth(),\r\n            to_date: new Date(),\r\n            current_page: 1,\r\n            items_perpage: 10,\r\n        }\r\n        let leageListFilter = {\r\n            sports_id: (LS.get('selected_sport')) ? LS.get('selected_sport') : NC.sportsId,\r\n            from_date: HF.getFirstDateOfMonth(),\r\n            to_date: new Date(),\r\n        }\r\n        this.state = {\r\n            filter: filter,\r\n            options: [],\r\n            leageListFilter: leageListFilter,\r\n            posting: false,\r\n            StartDate: '',\r\n            EndDate: '',\r\n            UserStatus: 1,\r\n            userslist: [],\r\n            userFullName: '',\r\n            totalBalance: '',\r\n            total: 0,\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeEnd = this.handleChangeEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let filter = this.state.filter;\r\n        let url = this.props.location.search;\r\n        let urlParams = queryString.parse(url);\r\n        if (urlParams.pending == 1) {\r\n            filter['pending_pan_approval'] = urlParams.pending;\r\n            this.setState({ filter })\r\n        }\r\n        this.getUserList();\r\n        this.getSystemUserLeagueList();\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n\r\n        let filter = this.state.filter;\r\n\r\n        filter['current_page'] = current_page;\r\n\r\n        this.setState(\r\n            { filter: filter },\r\n            function () {\r\n                this.getUserList();\r\n            });\r\n\r\n    }\r\n\r\n    handleSelect(status) {\r\n        if (status != null) {\r\n            let filter = this.state.filter;\r\n            filter['league_id'] = status.value;\r\n            filter['current_page'] = 1;\r\n            this.setState({\r\n                filter: filter,\r\n                UserStatus: status\r\n            },\r\n                function () {\r\n                    this.getUserList();\r\n                });\r\n        }\r\n    }\r\n\r\n    handleChange(date) {\r\n        let filter = this.state.filter;\r\n        let leageListFilter = this.state.leageListFilter;\r\n\r\n\r\n        filter['from_date'] = date;\r\n        leageListFilter['from_date'] = date;\r\n        filter['current_page'] = 1;\r\n        this.setState(\r\n            {\r\n                filter: filter\r\n            },\r\n            function () {\r\n                this.getUserList();\r\n                this.getSystemUserLeagueList();\r\n            });\r\n\r\n\r\n    }\r\n\r\n    handleChangeEnd(date) {\r\n        let filter = this.state.filter;\r\n        let leageListFilter = this.state.leageListFilter;\r\n        filter['to_date'] = date;\r\n        leageListFilter['to_date'] = date;\r\n        filter['current_page'] = 1;\r\n        this.setState({ filter: filter },\r\n            function () {\r\n                this.getUserList();\r\n                this.getSystemUserLeagueList();\r\n            });\r\n    }\r\n\r\n    getSystemUserLeagueList = () => {\r\n        this.setState({ posting: true })\r\n        let { leageListFilter } = this.state\r\n\r\n        let tempLF = leageListFilter\r\n        tempLF.from_date = moment(tempLF.from_date).format(\"YYYY-MM-DD\")\r\n        tempLF.to_date = moment(tempLF.to_date).format(\"YYYY-MM-DD\")\r\n        let params = tempLF;\r\n\r\n        WSManager.Rest(NC.baseURL + NC.GET_SYSTEM_USER_LEAGUE_LIST, params).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                let leagueArr = responseJson.data.result;\r\n                let tempArr = [{ value: \"\", label: \"All\" }];\r\n\r\n                leagueArr.map(function (lObj, lKey) {\r\n                    tempArr.push({ value: lObj.league_id, label: lObj.league_display_name });\r\n                });\r\n                this.setState({ options: tempArr });\r\n            }\r\n            this.setState({ posting: false })\r\n        })\r\n    }\r\n\r\n    getUserList = () => {\r\n        this.setState({ posting: true })\r\n        let { filter } = this.state\r\n\r\n        let tempFilter = filter\r\n        tempFilter.from_date = moment(tempFilter.from_date).format(\"YYYY-MM-DD\")\r\n        tempFilter.to_date = moment(tempFilter.to_date).format(\"YYYY-MM-DD\")\r\n        let params = tempFilter;\r\n\r\n        WSManager.Rest(NC.baseURL + NC.GET_SYSTEM_USER_REPORTS, params).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                let result = responseJson.data.result;\r\n                let total = responseJson.data.total;\r\n                if (responseJson != null && responseJson.data != null && result != null) {\r\n                    this.renderGraph(result)\r\n                }\r\n                this.setState({\r\n                    posting: false,\r\n                    userslist: result\r\n                }, () => {\r\n                    this.setState({\r\n                        totalBalance: responseJson.data.balance\r\n                    })\r\n                })\r\n                if (total > 0) {\r\n                    this.setState({\r\n                        total: total\r\n                    })\r\n                }\r\n            }\r\n            this.setState({ posting: false })\r\n        })\r\n    }\r\n\r\n    renderGraph = (result) => {\r\n        let xaxisValue = [];\r\n\r\n        let graphValue = [];\r\n\r\n        result.map(function (item, lKey) {\r\n            let temp_val = item.collection_name + ' <br /> ' + moment(item.season_scheduled_date).format(\"DD MMM YYYY\")\r\n            xaxisValue.push(temp_val)\r\n\r\n            if (Number.parseInt(item.net_profit) >= 0) {\r\n                graphValue.push({ y: Number.parseInt(item.net_profit), color: '#5dbe7d' });\r\n            }\r\n            else {\r\n                graphValue.push({ y: Number.parseInt(item.net_profit), color: '#d07f7f' });\r\n\r\n            }\r\n        });\r\n\r\n\r\n        this.setState({\r\n            HighGraphProgressConfigOption: {\r\n                chart: {\r\n                    backgroundColor: '#FFFFFF',\r\n                    type: 'column',\r\n                    height: 350\r\n                },\r\n\r\n                navigator: {\r\n                    enabled: true\r\n                },\r\n                title: {\r\n                    text: ''\r\n                },\r\n                xAxis: {\r\n                    labels: {\r\n                        style: {\r\n                            fontWeight: 'bold',\r\n                        }\r\n                    },\r\n                    title: {\r\n                        text: ''\r\n                    },\r\n                    categories: xaxisValue\r\n                },\r\n                yAxis: {\r\n                    lineWidth: 1,\r\n                    title: {\r\n                        text: ''\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    backgroundColor: '#FFFFFF',\r\n                    borderColor: 'tranparent',\r\n                    borderRadius: 4,\r\n                    borderWidth: 0,\r\n                    textAlign: 'center'\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        pointWidth: 20,\r\n                        stacking: 'normal',\r\n                        borderRadius: 3,\r\n                        showInLegend: false,\r\n                    }\r\n                },\r\n                credits: {\r\n                    enabled: false,\r\n                },\r\n                series: [{\r\n                    // name: 'System User Reports',\r\n                    name: '',\r\n                    type: 'column',\r\n                    data: graphValue,\r\n                }]\r\n\r\n            },\r\n\r\n        })\r\n    }\r\n\r\n    clearFilter = () => {\r\n        let { filter } = this.state\r\n        let { leageListFilter } = this.state\r\n        filter.from_date = new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)\r\n        filter.to_date = new Date()\r\n\r\n        leageListFilter.from_date = new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)\r\n        leageListFilter.to_date = new Date()\r\n\r\n        filter.league_id = \"\"\r\n        this.setState({\r\n            StartDate: '',\r\n            EndDate: '',\r\n            UserStatus: '',\r\n            filter,\r\n            leageListFilter\r\n        }, () => {\r\n            this.getUserList();\r\n            this.getSystemUserLeagueList();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { filter, UserStatus, userslist, total, posting } = this.state\r\n        return (\r\n            <Fragment>\r\n                <div className=\"bot-user-reports\">\r\n                    <div className=\"manage-user-heading clearfix\">\r\n                        <h2 className=\"h2-cls\">\r\n                            System User Reports</h2>\r\n                        <div className=\"search-user\">\r\n\r\n                            <Button\r\n                                className=\"add-bots btn-secondary-outline\"\r\n                                onClick={() => {\r\n                                    this.props.history.push({ pathname: '/system-users/userslist/' })\r\n                                }}>Add system user</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Row className=\"filter-userlist\">\r\n                        <Col md={9}>\r\n                            <div className=\"member-box float-left\">\r\n                                <div className=\"float-left\">\r\n                                    <label className=\"filter-label\">Start Date</label>\r\n                                    <DatePicker\r\n                                        maxDate={new Date(filter.to_date)}\r\n                                        className=\"filter-date\"\r\n                                        showYearDropdown='true'\r\n                                        selected={new Date(filter.from_date)}\r\n                                        onChange={this.handleChange}\r\n                                        placeholderText=\"From\"\r\n                                        dateFormat='dd/MM/yyyy'\r\n                                    />\r\n                                </div>\r\n                                <div className=\"float-left\">\r\n                                    <label className=\"filter-label\">End Date</label>\r\n                                    <DatePicker\r\n                                        minDate={new Date(filter.from_date)}\r\n                                        maxDate={new Date()}\r\n                                        className=\"filter-date\"\r\n                                        showYearDropdown='true'\r\n                                        selected={new Date(filter.to_date)}\r\n                                        onChange={this.handleChangeEnd}\r\n                                        placeholderText=\"To\"\r\n                                        dateFormat='dd/MM/yyyy'\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <Button\r\n                                className=\"add-bots btn-secondary-outline float-right mt-4\"\r\n                                onClick={this.clearFilter}\r\n                            >Clear Filter</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <div>\r\n\r\n                        {this.state.HighGraphProgressConfigOption &&\r\n                            <div className=\"graph-container-user-report\">\r\n                                <div>\r\n                                    <span className=\"balance\">Balance</span>\r\n                                    <div className=\"league-dropdown\">\r\n                                        <Select\r\n                                            searchable={false}\r\n                                            clearable={false}\r\n                                            options={this.state.options}\r\n                                            value={UserStatus}\r\n                                            onChange={e => this.handleSelect(e)}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className={Number.parseFloat(this.state.totalBalance) >= 0 ? ' positive-balance' : ' negative-balance'} >{this.state.totalBalance}</div>\r\n\r\n\r\n                                <HighGraph\r\n                                    {...this.props} HighGraphConfigOption={this.state.HighGraphProgressConfigOption}\r\n                                > </HighGraph>\r\n                            </div>\r\n                        }\r\n\r\n                    </div>\r\n                    <div style={{ margin: '10px', fontWeight: 'bold' }}>\r\n                        Joined system user\r\n                </div>\r\n                    <Row className=\"user-list\">\r\n                        <Col className=\"md-12 table-responsive\">\r\n                            <Table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className=\"left-th pl-4 align-left\">Fixture</th>\r\n                                        <th className=\"align-left\">Date & Time</th>\r\n                                        <th>Total Users</th>\r\n                                        <th>System Users</th>\r\n                                        <th>Real Users</th>\r\n                                        <th>Bonus loss</th>\r\n                                        <th>Real amount collected</th>\r\n                                        <th>Real User Winnings</th>\r\n                                        <th>Site Rake Remaining</th>\r\n                                        <th>Net profit/Loss</th>\r\n                                        <th className=\"right-th\">System user winnings</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {\r\n                                    userslist.length > 0 ?\r\n                                        _.map(userslist, (item, idx) => {\r\n                                            return (\r\n                                                <tbody key={idx}>\r\n                                                    <tr>\r\n                                                        <td className=\"left-th align-left\">\r\n                                                            {item.collection_name ? item.collection_name : '--'}\r\n                                                        </td>\r\n                                                        <td className=\"align-left\">\r\n                                                            {\r\n                                                                <div>\r\n                                                                    <span className=\"mr-2\">{\r\n                                                                        moment(new Date(WSManager.getUtcToLocal(item.season_scheduled_date))).format(\"DD MMM YYYY, h:mm A\")}\r\n                                                                    </span>\r\n                                                                </div>\r\n                                                            }\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {item.total_user_joined ? item.total_user_joined : '--'}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {item.total_system_user ? item.total_system_user : '--'}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {parseInt(item.total_user_joined) - parseInt(item.total_system_user)}\r\n                                                        </td>\r\n                                                        <td>{item.bonus_loss ? item.bonus_loss : '--'}</td>\r\n                                                        <td>{item.real_amount ? item.real_amount : '--'}</td>\r\n                                                        <td>{item.realuser_winnings ? item.realuser_winnings : '--'}</td>\r\n                                                        <td>{item.site_rake}</td>\r\n                                                        <td>\r\n                                                            <div\r\n                                                                className={Number.parseFloat(item.net_profit) >= 0 ? ' positive-value-color' : ' negative-value-color'} >\r\n                                                                {Number.parseFloat(item.net_profit) >= 0 && '+'} {item.net_profit}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td className=\"right-th\">{item.systemuser_winnings}</td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        })\r\n                                        :\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td colSpan=\"11\">\r\n                                                    {(userslist.length == 0 && !posting) ?\r\n                                                        <div className=\"no-records\">\r\n                                                            No Record Found.</div>\r\n                                                        :\r\n                                                        <Loader />\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                }\r\n                            </Table>\r\n                            {\r\n                                userslist.length != 0 &&\r\n                                <div className=\"custom-pagination lobby-paging\">\r\n                                    <Pagination\r\n                                        activePage={filter.current_page}\r\n                                        itemsCountPerPage={filter.items_perpage}\r\n                                        totalItemsCount={total}\r\n                                        pageRangeDisplayed={5}\r\n                                        onChange={e => this.handlePageChange(e)}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Fragment >\r\n        )\r\n    }\r\n}\r\nexport default UsersReport"],"sourceRoot":""}