{"version":3,"sources":["../node_modules/reactstrap/es/Table.js","views/Coins/SpinTheWheel.jsx"],"names":["propTypes","className","PropTypes","string","cssModule","object","size","bordered","bool","borderless","striped","dark","hover","responsive","oneOfType","tag","tagPropType","responsiveTag","innerRef","func","Table","props","Tag","ResponsiveTag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","table","React","createElement","_extends","ref","responsiveClassName","defaultProps","PrizeTypeOpt","label","value","WinTypeOption","activeStatusOption","Spinthewheel","getProbability","items","index","push","setState","ProbabilityoPt","getSliceList","WSManager","Rest","NC","then","Response","response_code","SliceList","data","result","notify","show","catch","error","getMerchandiseList","state","params","sort_field","sort_order","items_perpage","PERPAGE","current_page","CURRENT_PAGE","tempMList","merchandise_list","map","item","lKey","merchandise_id","name","MerchandiseList","getMerchantName","m_id","tempMIdArr","includes","_","isEmpty","find","x","handleInpuChange","e","indx","keyname","tempSlList","target","length","HF","decimalValidate","cashTypeTxt","tCashTyp","apndTxt","sNameArr","sName","amount","res","every","val","formValid","handlePrizeType","cashType","updateSliceList","message","SetPrizeDaily","SetPrizeWeek","SetPrizeMonth","selectSetPrize","selectUnsetPrize","getMasterData","allow_spin","this","history","md","newrow","idx","key","searchable","clearable","placeholder","status","options","onChange","disabled","win","readOnly","cash_type","type","maxLength","probability","slice_name","title","result_text","onClick","Component"],"mappings":"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","file":"static/js/186.a77a94d1.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col, Input, Button, Table } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport _ from 'lodash';\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport { notify } from 'react-notify-toast';\r\nimport WSManager from '../../helper/WSManager';\r\nimport HF from \"../../helper/HelperFunction\";\r\nconst PrizeTypeOpt = [\r\n    { label: 'Bonus Cash', value: '1' },\r\n    { label: 'Real Cash', value: '0' },\r\n    { label: 'Coins', value: '2' },\r\n    { label: 'Merchandise', value: '3' },\r\n]\r\n\r\nconst WinTypeOption = [\r\n    { label: 'Win', value: '1' },\r\n    { label: 'Loss', value: '0' },\r\n]\r\n\r\nconst activeStatusOption = [\r\n    { label: 'Active', value: '1' },\r\n    { label: 'In active', value: '0' },\r\n]\r\n\r\nclass Spinthewheel extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            CURRENT_PAGE: 1,\r\n            PERPAGE: 999999,\r\n            SetPrizeDaily: false,\r\n            SetPrizeWeek: false,\r\n            SetPrizeMonth: false,\r\n            selectSetPrize: false,\r\n            selectUnsetPrize: true,\r\n            ProbabilityoPt: [],\r\n            SliceList: [],\r\n            formValid: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (HF.getMasterData().allow_spin != '1') {\r\n            notify.show(NC.MODULE_NOT_ENABLE, 'error', 5000)\r\n            this.props.history.push('/dashboard')\r\n        }\r\n        this.getProbability()\r\n        this.getMerchandiseList()\r\n        this.getSliceList()\r\n    }\r\n\r\n    getProbability = () => {\r\n        let items = []\r\n        for (var index = 0; index < 100; index++) {\r\n            items.push({ label: index, value: index })\r\n        }\r\n        this.setState({ ProbabilityoPt: items })\r\n    }\r\n\r\n    getSliceList = () => {\r\n        WSManager.Rest(NC.baseURL + NC.WHEEL_SLICES_LIST, {}).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({ SliceList: Response.data.result })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    getMerchandiseList = () => {\r\n        let { PERPAGE, CURRENT_PAGE } = this.state\r\n        let params = {\r\n            sort_field: \"added_date\",\r\n            sort_order: \"DESC\",\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.GET_MERCHANDISE_LIST, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                let tempMList = [];\r\n                Response.data.merchandise_list.map(function (item, lKey) {\r\n                    tempMList.push({ value: item.merchandise_id, label: item.name });\r\n                });\r\n                this.setState({\r\n                    MerchandiseList: tempMList\r\n                })\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    getMerchantName = (m_id) => {\r\n        let MerchandiseList = this.state.MerchandiseList\r\n        let tempMIdArr = []\r\n        MerchandiseList.map(function (item, lKey) {\r\n            tempMIdArr.push(item.value);\r\n        });\r\n\r\n        if (tempMIdArr.includes(m_id)) {\r\n            if (!_.isEmpty(MerchandiseList)) {\r\n                return MerchandiseList.find(x => x.value === m_id).label\r\n            }\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    handleInpuChange = (e, indx, keyname) => {\r\n        let tempSlList = this.state.SliceList\r\n\r\n        if (e) {\r\n            if (e.target.value.length < 7)\r\n            {\r\n                tempSlList[indx][keyname] = HF.decimalValidate(e.target.value, 3);\r\n            }else{\r\n\r\n            }\r\n            let cashTypeTxt = ''\r\n            let tCashTyp = tempSlList[indx]['cash_type']\r\n            cashTypeTxt = tCashTyp == '0' ? ' Real Cash' : tCashTyp == '1' ? ' Bonus Cash' : tCashTyp == '2' ? ' Coins' : tCashTyp == '3' ? ' ' : ' --'\r\n            let apndTxt = tempSlList[indx]['amount'] + cashTypeTxt\r\n            tempSlList[indx]['result_text'] = 'You won ' + apndTxt\r\n\r\n            if (tempSlList[indx]['cash_type'] == \"3\") {\r\n                tempSlList[indx]['slice_name'] = apndTxt\r\n            } else {\r\n                tempSlList[indx]['slice_name'] = apndTxt\r\n            }\r\n\r\n            this.setState({ SliceList: tempSlList }, () => {\r\n\r\n                let sNameArr = []\r\n                _.map(this.state.SliceList, (sName) => {\r\n                    sNameArr.push(sName.amount);\r\n                })\r\n                let res = sNameArr.every(val => {\r\n                    return (!_.isEmpty(val) && val !== '0' && val.length < 7) ? true : false\r\n                });\r\n\r\n                this.setState({ formValid: !res })\r\n            })\r\n        }\r\n    }\r\n\r\n    handlePrizeType = (e, indx, keyname) => {        \r\n        let { SliceList } = this.state\r\n        if (e) {\r\n            SliceList[indx][keyname] = e.value\r\n            let cashType = ''\r\n            if (SliceList[indx]['cash_type'] != '3') {\r\n                cashType = SliceList[indx]['cash_type'] == '0' ? ' Real Cash' : SliceList[indx]['cash_type'] == '1' ? ' Bonus Cash' : SliceList[indx]['cash_type'] == '2' ? ' Coins' : SliceList[indx]['cash_type'] == '3' ? ' ' : ' --'\r\n            }\r\n\r\n            let apndTxt = SliceList[indx]['amount'] + cashType\r\n            if (SliceList[indx]['cash_type'] == '3') {\r\n                apndTxt = this.getMerchantName(SliceList[indx]['amount'])\r\n            }\r\n\r\n            SliceList[indx]['result_text'] = 'You won ' + apndTxt \r\n            \r\n            if (SliceList[indx]['cash_type'] == \"3\") {\r\n                SliceList[indx]['slice_name'] = apndTxt\r\n            }else{\r\n                SliceList[indx]['slice_name'] = apndTxt\r\n            }\r\n\r\n            if (SliceList[indx]['win'] === '0') {\r\n                SliceList[indx]['result_text'] = 'Please try again tomorrow'\r\n                SliceList[indx]['slice_name'] = 'Please try again tomorrow'\r\n            }\r\n            this.setState({ SliceList: SliceList })\r\n            if (e.value == '3' && keyname === \"cash_type\" && _.isEmpty(this.getMerchantName(SliceList[indx]['amount']))) {\r\n                this.setState({ formValid: true })\r\n            }else{\r\n                this.setState({ formValid: false })\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    updateSliceList = () => {\r\n        this.setState({ formValid: true })\r\n        let { SliceList } = this.state\r\n        WSManager.Rest(NC.baseURL + NC.SLICES_UPDATE, SliceList).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                notify.show(Response.message, 'success', 5000)\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n            this.setState({ formValid: false })\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { SliceList, ProbabilityoPt, formValid, MerchandiseList } = this.state\r\n        return (\r\n            <div className=\"spinthewheel\">\r\n                <Row>\r\n                    <Col md={12} className=\"mt-4\">\r\n                        <h2 className=\"h2-cls float-left\">SPIN THE WHEEL</h2>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\" mt-3\">\r\n                    <Col md={12} className=\"table-responsive common-table\">\r\n                        <Table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Status</th>\r\n                                    <th>Prize</th>\r\n                                    <th>Amount</th>\r\n                                    <th>Probability</th>\r\n                                    <th>Win</th>\r\n                                    <th>Wheel conetent</th>\r\n                                    <th>Result text</th>\r\n                                </tr>\r\n                            </thead>\r\n                            {\r\n                                _.map(SliceList, (newrow, idx) => {\r\n                                    return (\r\n                                        <tbody key={idx}>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <Select\r\n                                                        className=\"sw-prize-type\"\r\n                                                        searchable={false}\r\n                                                        clearable={false}\r\n                                                        placeholder=\"Select\"\r\n                                                        name='status'\r\n                                                        value={newrow.status}\r\n                                                        options={activeStatusOption}\r\n                                                        onChange={(e) => this.handlePrizeType(e, idx, 'status')}\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Select\r\n                                                        className=\"sw-prize-type\"\r\n                                                        disabled={newrow.win === '0'}\r\n                                                        readOnly={newrow.win === '0'}\r\n                                                        searchable={false}\r\n                                                        clearable={false}\r\n                                                        placeholder=\"Select\"\r\n                                                        name='cash_type'\r\n                                                        value={newrow.cash_type}\r\n                                                        options={PrizeTypeOpt}\r\n                                                        onChange={(e) => this.handlePrizeType(e, idx, 'cash_type')}\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    {\r\n                                                        newrow.cash_type !== '3' &&\r\n                                                        <Fragment>\r\n                                                            <Input\r\n                                                                className=\"sw-prize-type\"\r\n                                                                disabled={newrow.win === '0'}\r\n                                                                readOnly={newrow.win === '0'}\r\n                                                                type=\"number\"\r\n                                                                name='amount'\r\n                                                                maxLength={6}\r\n                                                                value={newrow.amount}\r\n                                                                onChange={(e) => this.handleInpuChange(e, idx, 'amount')}\r\n                                                            />\r\n                                                            <div className=\"spw-e-hgt\">\r\n                                                                {\r\n                                                                    (_.isEmpty(newrow.amount) || newrow.amount === '0' || newrow.amount.length > 6) &&\r\n                                                                    <span className=\"spw-empty-msg\">Please enter min 1 and max upto 6 digit</span>\r\n                                                                }\r\n                                                            </div>                                                            \r\n                                                        </Fragment>\r\n                                                    }\r\n\r\n                                                    {\r\n                                                        newrow.cash_type === '3' &&\r\n                                                        <Select\r\n                                                            className=\"sw-prize-type\"\r\n                                                            disabled={newrow.win === '0'}\r\n                                                            searchable={false}\r\n                                                            clearable={false}\r\n                                                            placeholder=\"Select\"\r\n                                                            name='amount'\r\n                                                            value={newrow.amount}\r\n                                                            options={MerchandiseList}\r\n                                                            onChange={(e) => this.handlePrizeType(e, idx, 'amount')}\r\n                                                        />\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Select\r\n                                                        searchable={false}\r\n                                                        clearable={false}\r\n                                                        placeholder=\"Select\"\r\n                                                        name='probability'\r\n                                                        value={newrow.probability}\r\n                                                        options={ProbabilityoPt}\r\n                                                        onChange={(e) => this.handlePrizeType(e, idx, 'probability')}\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Select\r\n                                                        searchable={false}\r\n                                                        clearable={false}\r\n                                                        placeholder=\"Select\"\r\n                                                        name='win'\r\n                                                        value={newrow.win}\r\n                                                        options={WinTypeOption}\r\n                                                        onChange={(e) => this.handlePrizeType(e, idx, 'win')}\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Input\r\n                                                        readOnly={true}\r\n                                                        disabled={true}\r\n                                                        type=\"text\"\r\n                                                        name='slice_name'\r\n                                                        maxLength={50}\r\n                                                        value={newrow.slice_name}\r\n                                                        title={newrow.slice_name}\r\n                                                    />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Input\r\n                                                        readOnly={true}\r\n                                                        disabled={true}\r\n                                                        type=\"text\"\r\n                                                        name='result_text'\r\n                                                        value={newrow.result_text}\r\n                                                        title={newrow.result_text}\r\n                                                    />\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"m-5 text-center\">\r\n                    <Col md={12}>\r\n                        <Button\r\n                            disabled={formValid}\r\n                            className=\"btn-secondary-outline\"\r\n                            onClick={() => this.updateSliceList()}\r\n                        >Update</Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Spinthewheel\r\n"],"sourceRoot":""}