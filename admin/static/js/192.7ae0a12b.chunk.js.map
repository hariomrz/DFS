{"version":3,"sources":["views/Cms/BackgroundImage.jsx"],"names":["BackgroundImage","props","onChangeImage","event","setState","NewBgImage","URL","createObjectURL","target","files","fileUplode","name","file","data","FormData","append","size","notify","show","WSManager","multipartPost","NC","then","responseJson","document","getElementById","value","catch","error","getBgImage","ImagePosting","Rest","response_code","image_url","resetBgImage","message","setTimeout","state","fileName","BgImage","this","className","md","accept","type","id","onChange","_","isEmpty","src","onClick","Component"],"mappings":"kXAOqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACVC,WAAYC,IAAIC,gBAAgBJ,EAAMK,OAAOC,MAAM,IACnDC,WAAYP,EAAMK,OAAOC,MAAM,GAAGE,OAGtC,IAAMC,EAAOT,EAAMK,OAAOC,MAAM,GAChC,GAAKG,EAAL,CAGA,IAAIC,EAAO,IAAIC,SACfD,EAAKE,OAAO,WAAYH,GAEnBA,EAAKI,KAAO,OAAW,EACxBC,SAAOC,KAAK,oCAAqC,QAAS,KAE1DC,IAAUC,cAAcC,KAAaA,KAAoBR,GACpDS,MAAK,SAAAC,GACFC,SAASC,eAAe,gBAAgBC,MAAQ,GAChDT,SAAOC,KAAK,8BAA+B,UAAW,QACvDS,OAAM,SAAAC,GACLX,SAAOC,KAAKG,KAAiB,QAAS,UAjCnC,EAsCnBQ,WAAa,WACT,EAAKzB,SAAS,CAAE0B,cAAc,IAC9BX,IAAUY,KAAKV,KAAaA,KAAuB,IAAIC,MAAK,SAACC,GACrDA,EAAaS,gBAAkBX,MAC/B,EAAKjB,SAAS,CACVC,WAAYkB,EAAaV,KAAKoB,UAC9BH,cAAc,OAGvBH,OAAM,SAACC,GACNX,SAAOC,KAAKG,KAAiB,QAAS,SAhD3B,EAoDnBa,aAAe,WACX,EAAK9B,SAAS,CAAE0B,cAAc,IAC9BX,IAAUY,KAAKV,KAAaA,KAAyB,IAAIC,MAAK,SAACC,GACvDA,EAAaS,gBAAkBX,OAC/BJ,SAAOC,KAAKK,EAAaY,QAAS,UAAW,KAC7CC,YAAW,WACP,EAAKhC,SAAS,CACVC,WAAYkB,EAAaV,KAAKoB,UAC9BH,cAAc,MAEnB,SAERH,OAAM,SAACC,GACNX,SAAOC,KAAKG,KAAiB,QAAS,SA/D1C,EAAKgB,MAAQ,CACT3B,WAAY,GACZ4B,SAAU,GACVC,QAAS,GACTT,cAAc,GANH,E,gEAUfU,KAAKX,e,+BA2DC,IAAD,SACgCW,KAAKH,MAAlCP,EADH,EACGA,aAAczB,EADjB,EACiBA,WACtB,OACI,kBAAC,WAAD,KACI,yBAAKoC,UAAU,QACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,IACL,wBAAID,UAAU,UAAd,oBAGR,yBAAKA,UAAU,8BACX,kBAAC,IAAD,CAAKC,GAAI,GAAID,UAAU,aACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,GAAI,EAAGD,UAAU,iBAAtB,gBAAmD,0BAAMA,UAAU,aAAhB,MACnD,kBAAC,IAAD,CAAKC,GAAI,GACL,kBAAC,IAAD,CACIC,OAAO,UACPC,KAAK,OACLjC,KAAK,eACLkC,GAAG,eACHC,SAAUN,KAAKtC,gBAEnB,yBAAKuC,UAAU,YACRM,IAAEC,QAAQ3C,IAAeyB,EACxB,yBAAKW,UAAU,YAAYQ,IAAK5C,IAEhC,kBAAC,IAAD,UAMpB,kBAAC,IAAD,CAAKqC,GAAI,GAAID,UAAU,iBACnB,kBAAC,IAAD,CAAQA,UAAU,qBAAqBS,QAAS,kBAAM,EAAKhB,iBAA3D,0B,GAvGiBiB","file":"static/js/192.7ae0a12b.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col, Input, Button } from 'reactstrap';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport _ from 'lodash';\r\nimport Loader from '../../components/Loader';\r\nexport default class BackgroundImage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            fileUplode: '',\r\n            fileName: '',\r\n            BgImage: '',\r\n            ImagePosting: true,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getBgImage()\r\n    }\r\n    onChangeImage = (event) => {\r\n        this.setState({\r\n            NewBgImage: URL.createObjectURL(event.target.files[0]),\r\n            fileUplode: event.target.files[0].name\r\n        });\r\n\r\n        const file = event.target.files[0];\r\n        if (!file) {\r\n            return;\r\n        }\r\n        var data = new FormData();\r\n        data.append(\"userfile\", file);\r\n\r\n        if ((file.size / 1024000) > 4) {\r\n            notify.show('File size must be less than 4 mb.', \"error\", 5000);\r\n        } else {\r\n            WSManager.multipartPost(NC.baseURL + NC.FRONT_BG_UPLOAD, data)\r\n                .then(responseJson => {\r\n                    document.getElementById(\"banner_image\").value = \"\";\r\n                    notify.show(\"Image uploaded successfully\", \"success\", 3000)\r\n                }).catch(error => {\r\n                    notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n                });\r\n        }\r\n    }\r\n\r\n    getBgImage = () => {\r\n        this.setState({ ImagePosting: false })\r\n        WSManager.Rest(NC.baseURL + NC.GET_FRONT_BG_IMAGE, {}).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                this.setState({\r\n                    NewBgImage: responseJson.data.image_url,\r\n                    ImagePosting: true\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n        })\r\n    }\r\n\r\n    resetBgImage = () => {\r\n        this.setState({ ImagePosting: false })\r\n        WSManager.Rest(NC.baseURL + NC.RESET_FRONT_BG_IMAGE, {}).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                notify.show(responseJson.message, \"success\", 3000)\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        NewBgImage: responseJson.data.image_url,\r\n                        ImagePosting: true\r\n                    })\r\n                }, 200);\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { ImagePosting, NewBgImage } = this.state\r\n        return (\r\n            <Fragment>\r\n                <div className=\"mt-4\">\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h1 className=\"h1-cls\">Front BG Image</h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <div className=\"animated fadeIn new-banner\">\r\n                        <Col md={12} className=\"input-row\">\r\n                            <Row>\r\n                                <Col md={3} className=\"b-input-label\">Select Image <span className=\"asterrisk\">*</span></Col>\r\n                                <Col md={9}>\r\n                                    <Input\r\n                                        accept=\"image/*\"\r\n                                        type=\"file\"\r\n                                        name='banner_image'\r\n                                        id='banner_image'\r\n                                        onChange={this.onChangeImage}\r\n                                    />\r\n                                    <div className=\"set-img\">\r\n                                        {(!_.isEmpty(NewBgImage) && ImagePosting) ? \r\n                                            <img className=\"img-cover\" src={NewBgImage} />\r\n                                            :\r\n                                            <Loader />\r\n                                        }\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col md={12} className=\"banner-action\">\r\n                            <Button className=\"btn-secondary mr-3\" onClick={() => this.resetBgImage()}>Reset BG Image</Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}