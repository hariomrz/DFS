{"version":3,"sources":["views/XPModule/AddRewardsModal.jsx","views/XPModule/RewardsLevel.jsx"],"names":["YesNoOption","value","label","PrizeOption","AddRewardsModal","props","getLevel","state","params","items_perpage","PERPAGE","current_page","CURRENT_PAGE","xpGetLevelList","then","ApiResponse","response_code","NC","res","data","level_list","l_arr","_Map","push","level_number","level_str","setState","LevelOptions","notify","show","catch","error","getBadge","xpGetBadgeList","b_arr","badge_id","badge_name","BadgeOptions","getPercent","tArr","_times","n","PercentOption","handleSelectChange","name","tempArr","RewardArr","_isNull","EditForm","handleInputChange","e","inp_name","target","getAttribute","Number","msg","checkFormValid","ret_flg","_isEmpty","XP_LEVEL","XP_BADGE","XP_REWARD","XP_COIN_DTL","XP_CASHBACK_DTL","XP_CONTEST_DTL","emptyForm","key","addRewards","r_arr","LevelSelect","BadgeSelect","CoinsSelect","CoinPoints","CashbackSelect","CashbackPercentSelect","CashbackPrizeSelect","CashbackMaxCap","ContestSelect","ContestPercentSelect","ContestPrizeSelect","ContestMaxCap","addRewdPosting","api_call","xpAddRewards","reward_id","xpUpdateReward","modalActioCallback","message","handleChildToggle","stopPropagation","modalCallback","this","AddRewardsModalOpen","EditRItem","EditFlag","coins","allow","amt","deposit_cashback","type","cap","joining_cashback","comm_select_props","is_disabled","is_searchable","is_clearable","menu_is_open","class_name","place_holder","level_select","sel_options","selected_value","select_name","badge_select","coin_select","cashback_select","cashback_prize_select","cashback_percent_select","contest_select","contest_prize_select","contest_percent_select","Modal","isOpen","toggle","className","ModalBody","Row","Col","md","SelectDropdown","SelectProps","Input","disabled","placeholder","data-inp","onChange","ModalFooter","Button","onClick","Component","RewardsLevel","getRewardList","listPosting","sort_order","isDescOrder","sort_field","sortField","WSManager","Rest","RewardsList","reward_list","Total","total","toggleActionPopup","flg","edit_itm","deleteToggle","rew_id","idx","prevState","deleteIndex","REW_ID","DeleteModalOpen","deleteReward","DeletePosting","param","tempRewardsList","xpDeleteReward","responseJson","_remove","item","toggleYesActionPopup","StartingPoints","formValid","SubAddRewardsModalOpen","LevelSelected","HF","allowXpPoints","history","sortfiled","Order","Message","AddRewardsModalProps","DeleteModalProps","publishModalOpen","publishPosting","modalActionNo","modalActionYes","MainMessage","XP_DELETE_LEVEL","SubMessage","XP_DELETE_LEVEL_SUB","PromptModal","xs","Table","sortByColumn","rew_str","getCurrencyCode","replace","colSpan","Loader","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange"],"mappings":"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","file":"static/js/217.69e114e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Button, Modal, ModalBody, ModalFooter, Input } from 'reactstrap';\r\nimport { _isEmpty, _isNull, _times, _Map, _isUndefined } from \"../../helper/HelperFunction\";\r\nimport SelectDropdown from \"../../components/SelectDropdown\";\r\nimport { notify } from 'react-notify-toast';\r\nimport { xpGetLevelList, xpGetBadgeList, xpAddRewards, xpUpdateReward } from '../../helper/WSCalling';\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport { XP_LEVEL, XP_BADGE, XP_REWARD, XP_COIN_DTL, XP_CASHBACK_DTL, XP_CONTEST_DTL } from '../../helper/Message';\r\nconst YesNoOption = [\r\n    { value: 1, label: 'Yes' },\r\n    { value: 0, label: 'No' },\r\n]\r\n\r\nconst PrizeOption = [\r\n    { value: 0, label: 'Real Money' },\r\n    { value: 1, label: 'Bonus' },\r\n]\r\nexport default class AddRewardsModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            CURRENT_PAGE: 1,\r\n            PERPAGE: 1000,\r\n            LevelOptions: [],\r\n            BadgeOptions: [],\r\n            PercentOption: [],\r\n            addRewdPosting: false,\r\n            EditForm: true,\r\n            RewardArr: {\r\n                'LevelSelect': '',\r\n                'BadgeSelect': '',\r\n                'CoinsSelect': 0,\r\n                'CoinPoints': '',\r\n                'CashbackSelect': 0,\r\n                'CashbackPrizeSelect': '',\r\n                'CashbackPercentSelect': '',\r\n                'CashbackMaxCap': '',\r\n                'ContestSelect': 0,\r\n                'ContestPrizeSelect': '',\r\n                'ContestPercentSelect': '',\r\n                'ContestMaxCap': '',\r\n            },\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLevel()\r\n        this.getBadge()\r\n        this.getPercent()\r\n    }\r\n\r\n    getLevel = () => {\r\n        const { PERPAGE, CURRENT_PAGE } = this.state\r\n        let params = {\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE\r\n        }\r\n        xpGetLevelList(params).then(ApiResponse => {\r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                let res = ApiResponse.data ? ApiResponse.data.level_list : []\r\n                let l_arr = []\r\n                _Map(res, function (data) {\r\n                    l_arr.push({\r\n                        value: data.level_number,\r\n                        label: data.level_str\r\n                    });\r\n                })\r\n                this.setState({ LevelOptions: l_arr })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    getBadge = () => {\r\n        let params = {}\r\n        xpGetBadgeList(params).then(ApiResponse => {\r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                let res = ApiResponse.data ? ApiResponse.data : []\r\n                let b_arr = []\r\n                _Map(res, function (data) {\r\n                    b_arr.push({\r\n                        value: data.badge_id,\r\n                        label: data.badge_name\r\n                    });\r\n                })\r\n                this.setState({ BadgeOptions: b_arr })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    getPercent = () => {\r\n        let tArr = []\r\n        _times(101, (n) => {\r\n            if (n !== 0)\r\n                tArr.push({ value: n, label: n })\r\n        })\r\n        this.setState({ PercentOption: tArr })\r\n    }\r\n\r\n    handleSelectChange = (value, name) => {\r\n        let tempArr = this.state.RewardArr\r\n        if (name === 'CoinsSelect' && value.value === 0) {\r\n            tempArr['CoinPoints'] = ''\r\n        }\r\n        if (name === 'CashbackSelect' && value.value === 0) {\r\n            tempArr['CashbackPrizeSelect'] = ''\r\n            tempArr['CashbackPercentSelect'] = ''\r\n            tempArr['CashbackMaxCap'] = ''\r\n        }\r\n        if (name === 'ContestSelect' && value.value === 0) {\r\n            tempArr['ContestPrizeSelect'] = ''\r\n            tempArr['ContestPercentSelect'] = ''\r\n            tempArr['ContestMaxCap'] = ''\r\n        }\r\n\r\n        if (!_isNull(value)) {\r\n            tempArr[name] = value.value\r\n            this.setState({ RewardArr: tempArr, EditForm: false })\r\n        }\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        let tempArr = this.state.RewardArr\r\n\r\n        let inp_name = e.target.getAttribute(\"data-inp\");\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n\r\n        tempArr[name] = value\r\n        this.setState({ RewardArr: tempArr, EditForm: false }, () => {\r\n\r\n            if (Number(this.state.RewardArr[name]) < 1 || Number(this.state.RewardArr[name]) > 99999) {\r\n                tempArr[name] = ''\r\n                let msg = inp_name + ' value should be between 1 to 100000'\r\n                notify.show(msg, 'error', 3000)\r\n                this.setState({ RewardArr: tempArr })\r\n                return false\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    checkFormValid = () => {\r\n        let { RewardArr } = this.state\r\n\r\n        let ret_flg = true\r\n        if (_isEmpty(RewardArr['LevelSelect'])) {\r\n            notify.show(XP_LEVEL, 'error', 1500)\r\n            ret_flg = false\r\n        }\r\n\r\n        if (_isEmpty(RewardArr['BadgeSelect'])) {\r\n            notify.show(XP_BADGE, 'error', 1500)\r\n            ret_flg = false\r\n        }\r\n\r\n        if (!RewardArr['CoinsSelect'] && !RewardArr['CashbackSelect'] && !RewardArr['ContestSelect']) {\r\n            notify.show(XP_REWARD, 'error', 1500)\r\n            ret_flg = false\r\n        }\r\n\r\n        if (RewardArr['CoinsSelect'] && _isEmpty(RewardArr['CoinPoints'])) {\r\n            notify.show(XP_COIN_DTL, 'error', 1500)\r\n            ret_flg = false\r\n        }\r\n\r\n        if (RewardArr['CashbackSelect'] && _isEmpty(RewardArr['CashbackPercentSelect']) && _isEmpty(RewardArr['CashbackMaxCap']) && (RewardArr['CashbackPrizeSelect'] !== 0 || RewardArr['CashbackPrizeSelect'] !== 1)) {\r\n            notify.show(XP_CASHBACK_DTL, 'error', 1500)\r\n            ret_flg = false\r\n        }\r\n\r\n        if (RewardArr['ContestSelect'] && _isEmpty(RewardArr['ContestPercentSelect']) && _isEmpty(RewardArr['ContestMaxCap']) && (RewardArr['ContestPrizeSelect'] !== 0 || RewardArr['ContestPrizeSelect'] !== 1)) {\r\n            notify.show(XP_CONTEST_DTL, 'error', 1500)\r\n            ret_flg = false\r\n        }\r\n        return ret_flg\r\n    }\r\n\r\n    emptyForm = () => {\r\n        for (var key in this.state.RewardArr) {\r\n            this.state.RewardArr[key] = \"\"\r\n        }\r\n        this.state.RewardArr['CoinsSelect'] = 0\r\n        this.state.RewardArr['CashbackSelect'] = 0\r\n        this.state.RewardArr['ContestSelect'] = 0\r\n    }\r\n\r\n    addRewards = () => {\r\n        if (!this.checkFormValid())\r\n            return false\r\n\r\n        let r_arr = this.state.RewardArr\r\n        let params = {\r\n            \"level_number\": r_arr.LevelSelect,\r\n            \"badge_id\": r_arr.BadgeSelect,\r\n            \"coins\": {\r\n                \"allow\": r_arr.CoinsSelect,\r\n                \"amt\": r_arr.CoinPoints\r\n            },\r\n            \"deposit_cashback\": {\r\n                \"allow\": r_arr.CashbackSelect,\r\n                \"amt\": r_arr.CashbackPercentSelect,\r\n                \"type\": r_arr.CashbackPrizeSelect,\r\n                \"cap\": r_arr.CashbackMaxCap\r\n            },\r\n            \"joining_cashback\": {\r\n                \"allow\": r_arr.ContestSelect,\r\n                \"amt\": r_arr.ContestPercentSelect,\r\n                \"type\": r_arr.ContestPrizeSelect,\r\n                \"cap\": r_arr.ContestMaxCap\r\n            }\r\n        }\r\n        this.setState({ addRewdPosting: true })\r\n        let api_call = xpAddRewards\r\n\r\n        if (r_arr.reward_id) {\r\n            params.reward_id = r_arr.reward_id\r\n            api_call = xpUpdateReward\r\n        }\r\n\r\n        api_call(params).then(ApiResponse => {\r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                this.props.modalActioCallback()\r\n                notify.show(ApiResponse.message, 'success', 5000)\r\n                this.emptyForm()\r\n                this.setState({ EditForm: true })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n            this.setState({ addRewdPosting: false })\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    handleChildToggle = (e) => {\r\n        e.stopPropagation();\r\n        this.emptyForm()\r\n        this.props.modalCallback()\r\n        this.setState({ EditForm: true })\r\n    }\r\n\r\n    render() {\r\n        let { AddRewardsModalOpen, EditRItem, EditFlag } = this.props\r\n        const { PercentOption, RewardArr, LevelOptions, BadgeOptions, addRewdPosting, EditForm } = this.state\r\n        if (EditFlag && EditForm && !_isEmpty(EditRItem)) {\r\n\r\n            RewardArr['level_str'] = EditRItem.level_str\r\n            RewardArr['reward_id'] = EditRItem.reward_id\r\n\r\n            RewardArr['LevelSelect'] = EditRItem.level_number\r\n            RewardArr['BadgeSelect'] = EditRItem.badge_id\r\n\r\n            RewardArr['CoinsSelect'] = EditRItem.coins.allow ? Number(EditRItem.coins.allow) : ''\r\n            RewardArr['CoinPoints'] = RewardArr['CoinsSelect'] ? EditRItem.coins.amt : ''\r\n\r\n            RewardArr['CashbackSelect'] = Number(EditRItem.deposit_cashback.allow)\r\n            RewardArr['CashbackPrizeSelect'] = RewardArr['CashbackSelect'] ? EditRItem.deposit_cashback.type : ''\r\n\r\n            RewardArr['CashbackPercentSelect'] = Number(EditRItem.deposit_cashback.amt)\r\n            RewardArr['CashbackMaxCap'] = RewardArr['CashbackSelect'] ? EditRItem.deposit_cashback.cap : ''\r\n\r\n            RewardArr['ContestSelect'] = Number(EditRItem.joining_cashback.allow)\r\n            RewardArr['ContestPrizeSelect'] = RewardArr['ContestSelect'] ? EditRItem.joining_cashback.type : ''\r\n            RewardArr['ContestPercentSelect'] = Number(EditRItem.joining_cashback.amt)\r\n            RewardArr['ContestMaxCap'] = RewardArr['ContestSelect'] ? EditRItem.joining_cashback.cap : ''\r\n\r\n        }\r\n\r\n        const comm_select_props = {\r\n            is_disabled: false,\r\n            is_searchable: false,\r\n            is_clearable: false,\r\n            menu_is_open: false,\r\n            class_name: \"custom-form-control\",\r\n            place_holder: \"Select\",\r\n            modalCallback: (e, name) => this.handleSelectChange(e, name)\r\n        }\r\n\r\n        const level_select = {\r\n            ...comm_select_props,\r\n            sel_options: LevelOptions,\r\n            selected_value: RewardArr['LevelSelect'],\r\n            select_name: 'LevelSelect',\r\n        }\r\n\r\n        const badge_select = {\r\n            ...comm_select_props,\r\n            sel_options: BadgeOptions,\r\n            selected_value: RewardArr['BadgeSelect'],\r\n            select_name: 'BadgeSelect',\r\n        }\r\n\r\n        const coin_select = {\r\n            ...comm_select_props,\r\n            sel_options: YesNoOption,\r\n            selected_value: RewardArr['CoinsSelect'],\r\n            select_name: 'CoinsSelect',\r\n        }\r\n\r\n        const cashback_select = {\r\n            ...comm_select_props,\r\n            sel_options: YesNoOption,\r\n            selected_value: RewardArr['CashbackSelect'],\r\n            select_name: 'CashbackSelect',\r\n        }\r\n\r\n        const cashback_prize_select = {\r\n            ...comm_select_props,\r\n            class_name: \"custom-form-control\",\r\n            is_disabled: !RewardArr.CashbackSelect,\r\n            sel_options: PrizeOption,\r\n            selected_value: RewardArr['CashbackPrizeSelect'],\r\n            select_name: 'CashbackPrizeSelect',\r\n        }\r\n\r\n        const cashback_percent_select = {\r\n            ...comm_select_props,\r\n            is_searchable: true,\r\n            is_disabled: !RewardArr.CashbackSelect,\r\n            place_holder: \"Select %\",\r\n            sel_options: PercentOption,\r\n            selected_value: RewardArr['CashbackPercentSelect'],\r\n            select_name: 'CashbackPercentSelect',\r\n        }\r\n\r\n        const contest_select = {\r\n            ...comm_select_props,\r\n            sel_options: YesNoOption,\r\n            selected_value: RewardArr['ContestSelect'],\r\n            select_name: 'ContestSelect',\r\n        }\r\n\r\n        const contest_prize_select = {\r\n            ...comm_select_props,\r\n            is_disabled: !RewardArr.ContestSelect,\r\n            sel_options: PrizeOption,\r\n            selected_value: RewardArr['ContestPrizeSelect'],\r\n            select_name: 'ContestPrizeSelect',\r\n        }\r\n\r\n        const contest_percent_select = {\r\n            ...comm_select_props,\r\n            is_searchable: true,\r\n            is_disabled: !RewardArr.ContestSelect,\r\n            place_holder: \"Select %\",\r\n            class_name: \"custom-form-control r-prct-dd\",\r\n            sel_options: PercentOption,\r\n            selected_value: RewardArr['ContestPercentSelect'],\r\n            select_name: 'ContestPercentSelect',\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                isOpen={AddRewardsModalOpen}\r\n                toggle={this.handleChildToggle}\r\n                className=\"addrewards-modal modal-lg xaddrewards-cat-mod\"\r\n            >\r\n                <ModalBody>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <h3 className=\"h3-cls\">{RewardArr['reward_id'] ? 'Update' : 'Add'} Rewards</h3>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label>Select Level</label>\r\n                                {\r\n                                    RewardArr['reward_id'] ?\r\n                                        <div className=\"xp-sel-title\">\r\n                                            {RewardArr ? RewardArr.level_str : ''}\r\n                                        </div>\r\n                                    :\r\n                                    <SelectDropdown SelectProps={level_select} />\r\n\r\n                                }\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label>Badge</label>\r\n                                <SelectDropdown SelectProps={badge_select} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label>Coins</label>\r\n                                <SelectDropdown SelectProps={coin_select} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label className=\"blank-lbl\"></label>\r\n                                <Input\r\n                                    disabled={!RewardArr.CoinsSelect}\r\n                                    className={!RewardArr.CoinsSelect ? \"disable\" : ''}\r\n                                    type=\"number\"\r\n                                    placeholder=\"Points\"\r\n                                    name='CoinPoints'\r\n                                    data-inp='Coins points'\r\n                                    value={RewardArr.CoinPoints || ''}\r\n                                    onChange={(e) => this.handleInputChange(e)}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label>Cashback</label>\r\n                                <SelectDropdown SelectProps={cashback_select} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label className=\"blank-lbl\">Currency Value</label>\r\n                                <SelectDropdown SelectProps={cashback_prize_select} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label className=\"blank-lbl\">Select Percentage</label>\r\n                                <SelectDropdown SelectProps={cashback_percent_select} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label>Maximum Cap</label>\r\n                                <Input\r\n                                    disabled={!RewardArr.CashbackSelect}\r\n                                    className={!RewardArr.CashbackSelect ? \"disable\" : ''}\r\n                                    type=\"number\"\r\n                                    placeholder=\"Points\"\r\n                                    name='CashbackMaxCap'\r\n                                    data-inp='Cashback maximum cap'\r\n                                    value={RewardArr.CashbackMaxCap}\r\n                                    onChange={(e) => this.handleInputChange(e)}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label>Contest Joining Discount</label>\r\n                                <SelectDropdown SelectProps={contest_select} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label className=\"blank-lbl\">Currency Value</label>\r\n                                <SelectDropdown SelectProps={contest_prize_select} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label className=\"blank-lbl\">Select Percentage</label>\r\n                                <SelectDropdown SelectProps={contest_percent_select} />\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <div className=\"input-box\">\r\n                                <label>Maximum Cap</label>\r\n                                <Input\r\n                                    disabled={!RewardArr.ContestSelect}\r\n                                    className={!RewardArr.ContestSelect ? \"disable\" : ''}\r\n                                    type=\"number\"\r\n                                    placeholder=\"Points\"\r\n                                    name='ContestMaxCap'\r\n                                    data-inp='Contest maximum cap'\r\n                                    value={RewardArr.ContestMaxCap}\r\n                                    onChange={(e) => this.handleInputChange(e)}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        disabled={addRewdPosting || EditForm}\r\n                        className=\"btn-secondary-outline\"\r\n                        onClick={this.addRewards}\r\n                    >{RewardArr['reward_id'] ? 'Update' : 'Add'} Rewards</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from \"react\";\r\nimport { Input, Button, Modal, ModalHeader, ModalBody, ModalFooter, Row, Col, Table } from 'reactstrap';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport Pagination from \"react-js-pagination\";\r\nimport AddRewardsModal from './AddRewardsModal';\r\nimport HF, { _times, _Map, _isEmpty, _isNull, _isUndefined, _remove, _find } from \"../../helper/HelperFunction\";\r\nimport PromptModal from '../../components/Modals/PromptModal';\r\nimport { xpDeleteReward } from '../../helper/WSCalling';\r\nimport { XP_DELETE_LEVEL, XP_DELETE_LEVEL_SUB } from \"../../helper/Message\";\r\nimport Loader from '../../components/Loader';\r\n\r\nclass RewardsLevel extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            CURRENT_PAGE: 1,\r\n            StartingPoints: '',\r\n            RewardsList: [],\r\n            formValid: true,\r\n            sortField: 'level_number',\r\n            isDescOrder: false,\r\n            AddRewardsModalOpen: false,\r\n            SubAddRewardsModalOpen: false,\r\n            LevelSelected: '',\r\n            DeleteModalOpen: false,\r\n            DeletePosting: false,\r\n            listPosting: false,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        if (HF.allowXpPoints() == '0') {\r\n            notify.show(NC.MODULE_NOT_ENABLE, 'error', 5000)\r\n            this.props.history.push('/dashboard')\r\n        }\r\n        this.getRewardList();\r\n    }\r\n\r\n    sortByColumn(sortfiled, isDescOrder) {\r\n        let Order = isDescOrder ? false : true\r\n        this.setState({\r\n            sortField: sortfiled,\r\n            isDescOrder: Order,\r\n            CURRENT_PAGE: 1,\r\n\r\n        }, this.getRewardList)\r\n    }\r\n\r\n    getRewardList = () => {\r\n        this.setState({ listPosting: true })\r\n        const { PERPAGE, CURRENT_PAGE, isDescOrder, sortField } = this.state\r\n        let params = {\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            sort_order: isDescOrder ? 'DESC' : 'ASC',\r\n            sort_field: sortField,\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.XP_GET_XP_REWARD_LIST, params).then(ApiResponse => {\r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                this.setState({\r\n                    RewardsList: ApiResponse.data ? ApiResponse.data.reward_list : [],\r\n                    Total: ApiResponse.data ? ApiResponse.data.total : '',\r\n                    listPosting: false\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        if (current_page !== this.state.CURRENT_PAGE) {\r\n            this.setState({\r\n                CURRENT_PAGE: current_page\r\n            }, () => {\r\n                this.getRewardList();\r\n            });\r\n        }\r\n    }\r\n\r\n    //function to toggle action popup\r\n    toggleActionPopup = (flg, edit_itm) => {\r\n        if (!flg) {\r\n            edit_itm = {}\r\n        }\r\n\r\n        this.setState({\r\n            AddRewardsModalOpen: !this.state.AddRewardsModalOpen,\r\n            EditRItem: edit_itm,\r\n            EditFlag: flg,\r\n        })\r\n    }\r\n\r\n    deleteToggle = (rew_id, idx) => {\r\n        this.setState(prevState => ({\r\n            deleteIndex: idx,\r\n            REW_ID: rew_id,\r\n            DeleteModalOpen: !prevState.DeleteModalOpen\r\n        }));\r\n    }\r\n\r\n    deleteReward = () => {\r\n        this.setState({ DeletePosting: true })\r\n        const { deleteIndex, REW_ID, RewardsList } = this.state\r\n        const param = { reward_id: REW_ID }\r\n        let tempRewardsList = RewardsList\r\n\r\n        xpDeleteReward(param).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                _remove(tempRewardsList, function (item, idx) {\r\n                    return idx == deleteIndex\r\n                })\r\n\r\n                notify.show(responseJson.message, \"success\", 5000);\r\n                this.setState({\r\n                    RewardsList: tempRewardsList,\r\n                    DeletePosting: false,\r\n                    DeleteModalOpen: false,\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    toggleYesActionPopup = () => {        \r\n        this.setState({\r\n            AddRewardsModalOpen: false,\r\n            EditRItem : {}\r\n        }, () => {\r\n            this.getRewardList();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { RewardsList, CURRENT_PAGE, PERPAGE, Total, AddRewardsModalOpen, Message, formValid, isDescOrder, sortField, DeleteModalOpen, DeletePosting, listPosting, EditRItem, EditFlag } = this.state\r\n        const AddRewardsModalProps = {\r\n            Message: Message,\r\n            modalCallback: () => this.toggleActionPopup(false, {}),\r\n            AddRewardsModalOpen: AddRewardsModalOpen,\r\n            modalActioCallback: this.toggleYesActionPopup,\r\n            EditRItem: EditRItem,\r\n            EditFlag: EditFlag,\r\n        }\r\n\r\n        let DeleteModalProps = {\r\n            publishModalOpen: DeleteModalOpen,\r\n            publishPosting: DeletePosting,\r\n            modalActionNo: this.deleteToggle,\r\n            modalActionYes: this.deleteReward,\r\n            MainMessage: XP_DELETE_LEVEL,\r\n            SubMessage: XP_DELETE_LEVEL_SUB,\r\n        }\r\n\r\n        return (\r\n            <div className=\"rewards-level animated fadeIn\">\r\n                <AddRewardsModal {...AddRewardsModalProps} />\r\n                {DeleteModalOpen && <PromptModal {...DeleteModalProps} />}\r\n\r\n                <Row className=\"level-sub-header mb-20\">\r\n                    <Col xs={6}>\r\n                        <h2 className=\"animate-left\">Rewards:</h2>\r\n                    </Col>\r\n                    <Col xs={6} className=\"text-right\">\r\n                        <Button className=\"btn-secondary-outline animate-right\" onClick={() => this.toggleActionPopup(false, {})}>Add Rewards</Button>\r\n                    </Col>\r\n                </Row>\r\n                <div className=\"xwhite-container\">\r\n                    <Row>\r\n                        <Col md={12} className=\"table-responsive common-table\">\r\n                            <Table className=\"animate-top\">\r\n                                <thead className=\"height-40\">\r\n                                    <tr>\r\n                                        <th\r\n                                            onClick={() => this.sortByColumn('level_number', isDescOrder)}\r\n                                        >\r\n                                            Level\r\n                                            <div className={`d-inline-block ${(sortField === 'level_number' && isDescOrder) ? '' : 'rotate-icon'}`}>\r\n                                                <i className=\"icon-Shape ml-1\"></i>\r\n                                            </div>\r\n                                        </th>\r\n                                        <th>Rewards</th>\r\n                                        <th className=\"text-center\">Action</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {\r\n                                    Total > 0 ?\r\n                                        _Map(RewardsList, (item, idx) => {\r\n\r\n                                            let rew_str = item.badge_name + ','\r\n                                            if (Number(item.coins.allow))\r\n                                                rew_str += ' Coins-' + item.coins.amt + ', '\r\n                                            if (Number(item.deposit_cashback.allow))\r\n                                                rew_str += ' Cashback(' + (Number(item.deposit_cashback.type == 1) ? 'B' : HF.getCurrencyCode()) + ') -' + item.deposit_cashback.amt + '%' + ' (' + item.deposit_cashback.cap + '), '\r\n                                            if (Number(item.joining_cashback.allow))\r\n                                                rew_str += ' Contest Discount(' + (Number(item.joining_cashback.type == 1) ? 'B' : HF.getCurrencyCode()) + ') -' + item.joining_cashback.amt + '%' + ' (' + item.joining_cashback.cap + ') '\r\n\r\n                                            rew_str = rew_str.replace(/,\\s*$/, \"\");\r\n\r\n                                            return (\r\n                                                <tbody key={idx}>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            {item.level_str}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {rew_str}\r\n                                                        </td>\r\n                                                        <td className=\"text-center\">\r\n                                                            <a\r\n                                                                className=\"action-icn\"\r\n                                                                onClick={() => this.toggleActionPopup(true, item)}\r\n                                                            >\r\n                                                                <i className=\"icon-edit\"></i>\r\n                                                            </a>\r\n                                                            <a\r\n                                                                className=\"action-icn\"\r\n                                                                onClick={() => this.deleteToggle(item.reward_id, idx)}\r\n                                                            >\r\n                                                                <i className=\"icon-delete\"></i>\r\n                                                            </a>\r\n                                                        </td>\r\n\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        })\r\n                                        :\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td colSpan='22'>\r\n                                                    {(Total == 0 && !listPosting) ?\r\n                                                        <div className=\"no-records\">{NC.NO_RECORDS}</div>\r\n                                                        :\r\n                                                        <Loader />\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                }\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </div>\r\n                {\r\n                    Total > PERPAGE\r\n                    && (\r\n                        <div className=\"custom-pagination lobby-paging\">\r\n                            <Pagination\r\n                                activePage={CURRENT_PAGE}\r\n                                itemsCountPerPage={PERPAGE}\r\n                                totalItemsCount={Total}\r\n                                pageRangeDisplayed={5}\r\n                                onChange={e => this.handlePageChange(e)}\r\n                            />\r\n                        </div>\r\n                    )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default RewardsLevel\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}