{"version":3,"sources":["components/SportsDropdown.jsx","views/PredictionType/PredictionFixture.jsx"],"names":["SportsDropdown","props","handleTypeChange","value","setState","SelectedSports","SportsProps","modalCallback","state","sports_list","HF","getSportsData","searchable","clearable","class","options","this","onChange","e","Component","PredictionFixture","sportsCallback","activeTab","getLiveFixtures","match_type","params","CURRENT_PAGE","PERPAGE","sports_id","items_perpage","current_page","WSManager","Rest","NC","then","Response","response_code","FixtureList","data","fixtures","result","Total","total","notify","show","catch","error","PageRedirection","item","calltype","LS","set","history","push","pathname","season_game_uid","values","queryString","parse","location","search","_","isEmpty","tab","sports_Props","Fragment","className","Row","Col","md","Nav","tabs","NavItem","onClick","toggle","NavLink","TabContent","TabPane","tabId","map","idx","key","src","home_flag","alt","away_flag","home","away","getUtcToLocalFormat","scheduled_date_time","subtitle","question_count","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange"],"mappings":"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","file":"static/js/208.80509c31.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport _ from 'lodash';\r\nimport HF from '../helper/HelperFunction';\r\nclass SportsDropdown extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            SelectedSports: \"7\",\r\n            sports_list: HF.getSportsData() ? HF.getSportsData() : [],\r\n        }\r\n    }\r\n\r\n    handleTypeChange = (value) => {\r\n        this.setState({\r\n            SelectedSports: value.value\r\n        }, () => {\r\n                this.props.SportsProps.modalCallback(this.state.SelectedSports)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <Select\r\n                    searchable={false}\r\n                    clearable={false}\r\n                    class=\"form-control\"\r\n                    options={this.state.sports_list}\r\n                    value={this.state.SelectedSports}\r\n                    onChange={e => this.handleTypeChange(e)}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\nexport default SportsDropdown","import React, { Component } from 'react';\r\nimport { Row, Col, TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport _ from 'lodash';\r\nimport WSManager from '../../helper/WSManager';\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport { notify } from 'react-notify-toast';\r\nimport Pagination from \"react-js-pagination\";\r\nimport SportsDropdown from \"../../components/SportsDropdown\";\r\nimport LS from 'local-storage';\r\nimport queryString from 'query-string';\r\nclass PredictionFixture extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            FixtureList: [],\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            CURRENT_PAGE: 1,\r\n            SelectedSports: \"7\",\r\n            activeTab: \"1\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        let values = queryString.parse(this.props.location.search)\r\n        this.setState({\r\n            activeTab: !_.isEmpty(values) ? (values.tab) ? values.tab : '1' : \"1\",\r\n        },()=>{\r\n                this.getLiveFixtures(this.state.activeTab)\r\n        })        \r\n    }\r\n\r\n    sportsCallback = (SelectedSports) => {\r\n        let { activeTab } = this.state\r\n        this.setState({ SelectedSports: SelectedSports },\r\n            () => {\r\n                this.getLiveFixtures(activeTab)\r\n            })\r\n    }\r\n\r\n    getLiveFixtures = (match_type) => {\r\n        let { CURRENT_PAGE, PERPAGE, SelectedSports } = this.state\r\n        let params = {}\r\n        params = {\r\n            sports_id: SelectedSports,\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            match_type: match_type //live\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.GET_SEASON_LIST, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({\r\n                    FixtureList: Response.data.fixtures.result,\r\n                    Total: Response.data.fixtures.total,\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page, match_type) {\r\n        if (current_page != this.state.CURRENT_PAGE) {\r\n            this.setState({\r\n                CURRENT_PAGE: current_page\r\n            }, () => { this.getLiveFixtures(match_type) });\r\n        }\r\n    }\r\n\r\n    PageRedirection = (item, calltype) => {\r\n        let { SelectedSports } = this.state\r\n        LS.set('selected_fixture', item);\r\n        this.props.history.push({ pathname: '/prediction/set-prediction/' + calltype + '/' + item.season_game_uid + '/' + SelectedSports })\r\n    }\r\n\r\n    toggle(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n            this.setState({\r\n                activeTab: tab,\r\n                CURRENT_PAGE: 1\r\n            }, function () {\r\n                this.getLiveFixtures(tab)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { FixtureList, PERPAGE, Total, activeTab, CURRENT_PAGE } = this.state\r\n        const sports_Props = {\r\n            modalCallback: this.sportsCallback\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"pre-fixture\">\r\n                    <Row>\r\n                        <Col md={12} className=\"mt-4\">\r\n                            <div className=\"pre-sports-select float-left\">\r\n                                <SportsDropdown SportsProps={sports_Props} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"user-navigation\">\r\n                        <div className=\"w-100\">\r\n                            <Nav tabs>\r\n                                <NavItem className={activeTab == \"1\" ? \"active\" : \"\"}\r\n                                    onClick={() => { this.toggle(\"1\"); }}>\r\n                                    <NavLink>\r\n                                        Live\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                {\r\n\r\n                                    <NavItem className={activeTab == \"2\" ? \"active\" : \"\"}\r\n                                        onClick={() => { this.toggle(\"2\"); }}>\r\n                                        <NavLink>\r\n                                            Upcoming\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                }\r\n\r\n                                <NavItem className={activeTab == \"3\" ? \"active\" : \"\"}\r\n                                    onClick={() => { this.toggle(\"3\"); }}>\r\n                                    <NavLink>\r\n                                        Completed\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab} className=\"p-4\">\r\n                                <TabPane tabId=\"1\">\r\n                                    <Row>\r\n                                        {\r\n                                            _.map(FixtureList, (item, idx) => {\r\n                                                return (\r\n                                                    <Col md={4} key={idx}>\r\n                                                        <div className=\"fixture-card\"\r\n                                                            onClick={() => this.PageRedirection(item, 1)}\r\n                                                        >\r\n                                                            <img src={NC.S3 + NC.FLAG + item.home_flag} alt=\"\" className=\"team-img float-left\" />\r\n                                                            <img src={NC.S3 + NC.FLAG + item.away_flag} alt=\"\" className=\"team-img float-right\" />\r\n                                                            <div className=\"fixture-container\">\r\n                                                                <div className=\"fixture-name\">{item.home} vs {item.away}</div>\r\n                                                                <div className=\"fixture-time\">\r\n                                                                    {WSManager.getUtcToLocalFormat(item.scheduled_date_time, 'D-MMM-YYYY hh:mm A')}\r\n                                                                </div>\r\n                                                                <div className=\"fixture-title\">{item.subtitle}</div>\r\n                                                                {\r\n                                                                    item.question_count == 0 ?\r\n                                                                        <div className=\"fixture-question active-color\"> Set Prediction</div>\r\n                                                                        :\r\n                                                                        <div className=\"fixture-question\">{item.question_count} Questions</div>\r\n                                                                }\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Col>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Row>\r\n                                    {Total > PERPAGE &&\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <div className=\"custom-pagination userlistpage-paging float-right\">\r\n                                                    <Pagination\r\n                                                        activePage={CURRENT_PAGE}\r\n                                                        itemsCountPerPage={PERPAGE}\r\n                                                        totalItemsCount={Total}\r\n                                                        pageRangeDisplayed={3}\r\n                                                        onChange={e => this.handlePageChange(e, 1)}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    }\r\n                                </TabPane>\r\n                                {\r\n                                    (activeTab == \"2\") &&\r\n                                    <TabPane tabId=\"2\">\r\n                                        <Row>\r\n                                            {\r\n                                                _.map(FixtureList, (item, idx) => {\r\n                                                    return (\r\n                                                        <Col md={4} key={idx}>\r\n                                                            <div className=\"fixture-card\"\r\n                                                                onClick={() => this.PageRedirection(item, 2)}\r\n                                                            >\r\n\r\n                                                                <img src={NC.S3 + NC.FLAG + item.home_flag} alt=\"\" className=\"team-img float-left\" />\r\n                                                                <img src={NC.S3 + NC.FLAG + item.away_flag} alt=\"\" className=\"team-img float-right\" />\r\n                                                                <div className=\"fixture-container\">\r\n                                                                    <div className=\"fixture-name\">{item.home} vs {item.away}</div>\r\n                                                                    <div className=\"fixture-time\">\r\n                                                                        {WSManager.getUtcToLocalFormat(item.scheduled_date_time, 'D-MMM-YYYY hh:mm A')}\r\n                                                                    </div>\r\n                                                                    <div className=\"fixture-title\">{item.subtitle}</div>\r\n                                                                    {\r\n                                                                        item.question_count == 0 ?\r\n                                                                            <div className=\"fixture-question active-color\"> Set Prediction</div>\r\n                                                                            :\r\n                                                                            <div className=\"fixture-question\">{item.question_count} Questions</div>\r\n                                                                    }\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Col>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Row>\r\n                                        {Total > PERPAGE &&\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <div className=\"custom-pagination userlistpage-paging float-right\">\r\n                                                        <Pagination\r\n                                                            activePage={CURRENT_PAGE}\r\n                                                            itemsCountPerPage={PERPAGE}\r\n                                                            totalItemsCount={Total}\r\n                                                            pageRangeDisplayed={3}\r\n                                                            onChange={e => this.handlePageChange(e, 2)}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        }\r\n                                    </TabPane>\r\n                                }\r\n                                {\r\n                                    activeTab == \"3\" &&\r\n                                    <TabPane tabId=\"3\">\r\n                                        <Row>\r\n                                            {\r\n                                                _.map(FixtureList, (item, idx) => {\r\n                                                    return (\r\n                                                        <Col md={4} key={idx}>\r\n                                                            <div className=\"fixture-card\">\r\n                                                                <img src={NC.S3 + NC.FLAG + item.home_flag} alt=\"\" className=\"team-img float-left\" />\r\n                                                                <img src={NC.S3 + NC.FLAG + item.away_flag} alt=\"\" className=\"team-img float-right\" />\r\n                                                                <div className=\"fixture-container\">\r\n                                                                    <div className=\"fixture-name\">{item.home} vs {item.away}</div>\r\n                                                                    <div className=\"fixture-time\">\r\n                                                                        {WSManager.getUtcToLocalFormat(item.scheduled_date_time, 'D-MMM-YYYY hh:mm A')}\r\n                                                                    </div>\r\n                                                                    <div className=\"fixture-title\">{item.subtitle}</div>\r\n                                                                    <div\r\n                                                                        onClick={() => this.PageRedirection(item, 3)}\r\n                                                                        className=\"fixture-question\">{item.question_count} Questions</div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Col>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Row>\r\n                                        {Total > PERPAGE &&\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <div className=\"custom-pagination userlistpage-paging float-right\">\r\n                                                        <Pagination\r\n                                                            activePage={CURRENT_PAGE}\r\n                                                            itemsCountPerPage={PERPAGE}\r\n                                                            totalItemsCount={Total}\r\n                                                            pageRangeDisplayed={3}\r\n                                                            onChange={e => this.handlePageChange(e, 3)}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        }\r\n                                    </TabPane>\r\n                                }\r\n                            </TabContent>\r\n                        </div>\r\n                    </Row>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nexport default PredictionFixture;\r\n"],"sourceRoot":""}