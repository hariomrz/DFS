{"version":3,"sources":["views/OpenPredictor/PredictionCategory.jsx"],"names":["PredictionCategory","props","getLiveFixtures","match_type","state","CURRENT_PAGE","params","items_perpage","PERPAGE","current_page","status","WSManager","Rest","NC","then","Response","response_code","setState","FixtureList","data","category_list","Total","total","window","scrollTo","top","left","behavior","notify","show","catch","error","PageRedirection","item","type","LS","set","history","push","pathname","category_id","activeTab","values","queryString","parse","this","location","search","_","isEmpty","tab","Fragment","className","md","onClick","tabs","toggle","tabId","map","idx","key","src","image","alt","name","question_count","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","e","handlePageChange","completed_count","Component"],"mappings":"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","file":"static/js/204.4e6bfbef.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Button, TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport _ from 'lodash';\r\nimport WSManager from '../../helper/WSManager';\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport { notify } from 'react-notify-toast';\r\nimport Pagination from \"react-js-pagination\";\r\nimport LS from 'local-storage';\r\nimport queryString from 'query-string';\r\nclass PredictionCategory extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            FixtureList: [],\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            CURRENT_PAGE: 1,\r\n            activeTab: \"1\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        let values = queryString.parse(this.props.location.search)\r\n        this.setState({\r\n            activeTab: !_.isEmpty(values) ? (values.tab) ? values.tab : '1' : \"1\",\r\n        }, () => {\r\n            this.getLiveFixtures(this.state.activeTab)\r\n        }) \r\n    }\r\n\r\n    getLiveFixtures = (match_type) => {\r\n        let { CURRENT_PAGE, PERPAGE } = this.state\r\n        let params = {\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            status: match_type //live\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.OP_GET_CATEGORY_LIST_BY_STATUS, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({\r\n                    FixtureList: Response.data.category_list,\r\n                    Total: Response.data.total,\r\n                })\r\n                window.scrollTo({\r\n                    top: 0,\r\n                    left: 0,\r\n                    behavior: 'smooth'\r\n                });\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page, match_type) {\r\n        if (current_page != this.state.CURRENT_PAGE) {\r\n            this.setState({\r\n                CURRENT_PAGE: current_page\r\n            }, () => { this.getLiveFixtures(match_type) });\r\n        }\r\n    }\r\n    PageRedirection = (item, type) => {\r\n        LS.set('selected_fixture', item);\r\n        this.props.history.push({ pathname: '/open-predictor/set-prediction/' + item.category_id + '/' + type })\r\n    }\r\n\r\n    toggle(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n            this.setState({\r\n                activeTab: tab,\r\n                CURRENT_PAGE: 1\r\n            }, function () {\r\n                this.getLiveFixtures(tab)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { FixtureList, PERPAGE, Total, activeTab, CURRENT_PAGE } = this.state\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"pre-fixture op-categories animated fadeIn\">\r\n                    <Row>\r\n                        <Col md={12} className=\"mt-4\">\r\n                            <div className=\"op-btn-box\">\r\n                                <Button onClick={() => this.props.history.push('/open-predictor/create-category/')} className=\"btn-secondary-outline\">Create Category</Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"user-navigation\">\r\n                        <div className=\"w-100\">\r\n                            <Nav tabs>\r\n                                <NavItem className={activeTab == \"1\" ? \"active\" : \"\"}\r\n                                    onClick={() => { this.toggle(\"1\"); }}>\r\n                                    <NavLink>\r\n                                        Active\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                {\r\n\r\n                                    <NavItem className={activeTab == \"2\" ? \"active\" : \"\"}\r\n                                        onClick={() => { this.toggle(\"2\"); }}>\r\n                                        <NavLink>\r\n                                            Inactive / Completed\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                }\r\n                            </Nav>\r\n                            <TabContent activeTab={activeTab} className=\"p-4\">\r\n                                <TabPane tabId=\"1\">\r\n                                    <Row>\r\n                                        {\r\n                                            _.map(FixtureList, (item, idx) => {\r\n                                                return (\r\n                                                    <Col md={3} key={idx} className=\"pr-0 mb-3\">\r\n                                                        <div className=\"category-card cursor-pointer cursor-pointer\"\r\n                                                            onClick={() => this.PageRedirection(item, 1)}\r\n                                                        >\r\n                                                            <img src={NC.S3 + NC.OP_CATEGORY + item.image} alt=\"\" className=\"cat-img\" />\r\n                                                            <div className=\"cat-info-box\">\r\n                                                                <div className=\"cat-title\">\r\n                                                                    {item.name}\r\n                                                                </div>\r\n                                                                <div className=\"cat-questions\">\r\n                                                                    {item.question_count}{' '}Questions</div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Col>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Row>\r\n                                    {Total > PERPAGE &&\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <div className=\"custom-pagination userlistpage-paging float-right\">\r\n                                                    <Pagination\r\n                                                        activePage={CURRENT_PAGE}\r\n                                                        itemsCountPerPage={PERPAGE}\r\n                                                        totalItemsCount={Total}\r\n                                                        pageRangeDisplayed={3}\r\n                                                        onChange={e => this.handlePageChange(e, 1)}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    }\r\n                                </TabPane>\r\n                                {\r\n                                    (activeTab == \"2\") &&\r\n                                    <TabPane tabId=\"2\">\r\n                                        <Row>\r\n                                            {\r\n                                                _.map(FixtureList, (item, idx) => {\r\n                                                    return (\r\n                                                        <Col md={3} key={idx} className=\"pr-0 mb-3\">\r\n                                                            <div className=\"category-card cursor-pointer cursor-pointer\"\r\n                                                                onClick={() => this.PageRedirection(item, item.completed_count > 0 ? 2 : 1)}\r\n                                                            >\r\n                                                                <img src={NC.S3 + NC.OP_CATEGORY + item.image} alt=\"\" className=\"cat-img\" />\r\n                                                                <div className=\"cat-info-box\">\r\n                                                                    <div className=\"cat-title\">\r\n                                                                        {item.name}\r\n                                                                    </div>\r\n                                                                    <div className=\"cat-questions\">\r\n                                                                        {item.completed_count}{' '}Questions</div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Col>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Row>\r\n                                        {Total > PERPAGE &&\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <div className=\"custom-pagination userlistpage-paging float-right\">\r\n                                                        <Pagination\r\n                                                            activePage={CURRENT_PAGE}\r\n                                                            itemsCountPerPage={PERPAGE}\r\n                                                            totalItemsCount={Total}\r\n                                                            pageRangeDisplayed={3}\r\n                                                            onChange={e => this.handlePageChange(e, 2)}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        }\r\n                                    </TabPane>\r\n                                }\r\n                            </TabContent>\r\n                        </div>\r\n                    </Row>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PredictionCategory;\r\n"],"sourceRoot":""}