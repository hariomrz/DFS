{"version":3,"sources":["views/SetprizeLeaderboard/LeaderboardList.jsx"],"names":["LeaderboardList","props","componentDidMount","getLeaderboardList","setState","ListPosting","state","CURRENT_PAGE","param","items_perpage","ITEMS_PERPAGE","current_page","sort_field","sort_order","LB_getLeaderboardList","then","ApiResponse","response_code","NC","LbList","data","result","Total","total","notify","show","catch","error","deleteUserToggle","d_admin_idx","admin_id","AdminId","ToggleModalOpen","changeStatusToggle","item","idx","msg","status","CatIndex","CATE_ID","category_id","StatusMsg","prize_id","prevState","changeCateStatus","statusPosting","tLbList","LB_toggleLeaderboardById","responseJson","message","addMoreModalOpen","CreatePosting","EditFlag","Username","Date","now","HF","getTodayDate","this","DeleteModalProps","publishModalOpen","publishPosting","modalActionNo","modalActionYes","MainMessage","SubMessage","Fragment","className","md","onClick","history","push","pathname","map","key","category_name","name","style","cursor","type","checked","onChange","colSpan","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","e","handlePageChange","Component"],"mappings":"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","file":"static/js/211.d7861e15.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Table, Button, Modal, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport _ from 'lodash';\r\nimport { LB_getLeaderboardList, LB_toggleLeaderboardById } from \"../../helper/WSCalling\";\r\nimport * as NC from '../../helper/NetworkingConstants';\r\nimport Pagination from \"react-js-pagination\";\r\nimport { notify } from 'react-notify-toast';\r\nimport Loader from '../../components/Loader';\r\nimport HF from \"../../helper/HelperFunction\";\r\nimport { MSG_DELETE_USER } from \"../../helper/Message\";\r\nimport PromptModal from '../../components/Modals/PromptModal';\r\nclass LeaderboardList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            CURRENT_PAGE: 1,\r\n            ITEMS_PERPAGE: NC.ITEMS_PERPAGE,\r\n            addMoreModalOpen: false,\r\n            ToggleModalOpen: false,\r\n            LbList: [],\r\n            ListPosting: false,\r\n            Total: 0,\r\n            CreatePosting: true,\r\n            statusPosting: false,\r\n            EditFlag: false,\r\n            Username: '',\r\n            ToggleModalOpen: false,\r\n            StatusMsg: '',\r\n            FromDate: new Date(Date.now() - ((HF.getTodayDate()) - 1) * 24 * 60 * 60 * 1000),\r\n            ToDate: new Date(),\r\n            prize_id:''\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getLeaderboardList()\r\n    }\r\n\r\n    getLeaderboardList = () => {\r\n        this.setState({ ListPosting: true })\r\n        let {CURRENT_PAGE,ITEMS_PERPAGE} = this.state\r\n        const param = { \r\n            // from_date: FromDate ? HF.getFormatedDateTime(FromDate, 'YYYY-MM-DD') : '',\r\n            // to_date: ToDate ? HF.getFormatedDateTime(ToDate, 'YYYY-MM-DD') : '',\r\n            items_perpage: ITEMS_PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            sort_field: \"prize_id\",\r\n            sort_order: \"DESC\" \r\n    }\r\n\r\n        LB_getLeaderboardList(param).then(ApiResponse => {\r\n        \r\n            if (ApiResponse.response_code == NC.successCode) {\r\n                this.setState({\r\n                    LbList: ApiResponse.data.result ? ApiResponse.data.result : [],\r\n                    Total: ApiResponse.data.total ? ApiResponse.data.total : 0,\r\n                    ListPosting: false\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    deleteUserToggle = (d_admin_idx, admin_id) => {\r\n        this.setState({\r\n            AdminId: admin_id,\r\n            ToggleModalOpen: !this.state.ToggleModalOpen\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        this.setState({\r\n            CURRENT_PAGE: current_page\r\n        }, () => {\r\n            this.getLeaderboardList()\r\n        });\r\n    }\r\n\r\n    changeStatusToggle = (item, idx) => {\r\n        let msg = 'Are you sure you want to ' + (item.status == '1' ? 'in':'') + 'active this?'\r\n        this.setState({\r\n            CatIndex: idx,\r\n            CATE_ID: item.category_id,\r\n            StatusMsg: msg,\r\n            prize_id:item.prize_id,\r\n            status:item.status == '1' ? 0 : 1\r\n        })\r\n\r\n        this.setState(prevState => ({\r\n            ToggleModalOpen: !prevState.ToggleModalOpen\r\n        }));\r\n    }\r\n\r\n    changeCateStatus = () => {\r\n        this.setState({ statusPosting: true })\r\n        const { CatIndex, CATE_ID, LbList,prize_id,status } = this.state\r\n        const param = { 'prize_id': prize_id,status:status }\r\n        let tLbList = LbList\r\n\r\n        LB_toggleLeaderboardById(param).then((responseJson) => {\r\n            if (responseJson.response_code === NC.successCode) {\r\n                tLbList[CatIndex]['status'] = tLbList[CatIndex]['status'] == '0' ? '1' : '0'\r\n                notify.show(responseJson.message, \"success\", 5000);\r\n                this.setState({\r\n                    LbList: tLbList,\r\n                    statusPosting: false,\r\n                    ToggleModalOpen: false,\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 5000);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { LbList, Total, ListPosting, CURRENT_PAGE, ITEMS_PERPAGE, ToggleModalOpen, statusPosting, StatusMsg } = this.state\r\n        let DeleteModalProps = {\r\n            publishModalOpen: ToggleModalOpen,\r\n            publishPosting: statusPosting,\r\n            modalActionNo: this.changeStatusToggle,\r\n            modalActionYes: this.changeCateStatus,\r\n            MainMessage: StatusMsg,\r\n            SubMessage: '',\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"sp-ldrbrd-list\">\r\n                    {ToggleModalOpen && <PromptModal {...DeleteModalProps} />}\r\n                    <Row className=\"prz-lb-head\">\r\n                        <Col md={12}>\r\n                            <div className=\"float-left\">\r\n                                <h2 className=\"h2-cls\">Leaderboard</h2>\r\n                            </div>\r\n                            <div className=\"float-right\">\r\n                                <Button onClick={() => { this.props.history.push({pathname:'/marketing/marketingleaderboard_setprize/' + 0})}} className=\"btn-secondary-outline\">Add New</Button>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col md={12} className=\"table-responsive common-table\">\r\n                            <Table className=\"mb-1\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Category</th>\r\n                                        {/* <th>Type</th> */}\r\n                                        <th>Name</th>\r\n                                        <th>Status</th>\r\n                                        {/* <th>Allow Prize</th> */}\r\n                                        {/* <th>Allow Sponser</th> */}\r\n                                        <th>Action</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {\r\n                                    Total > 0 ?\r\n                                        LbList.map((item, idx) => {\r\n                                            return (\r\n                                                <tbody key={idx}>\r\n                                                    <tr>\r\n                                                        <td>{item.category_name}</td>\r\n                                                        {/* <td>{item.type}</td> */}\r\n                                                        <td>{item.name}</td>\r\n                                                        <td>\r\n                                                            {item.status == '1' && 'Active'}\r\n                                                            {item.status == '0' && 'Inactive'}\r\n                                                        </td>\r\n                                                        {/* <td>\r\n                                                            {item.allow_prize == '1' && 'Yes'}\r\n                                                            {item.allow_prize == '0' && 'No'}\r\n                                                        </td> */}\r\n                                                        {/* <td>\r\n                                                            {item.allow_sponsor == '1' && 'Yes'}\r\n                                                            {item.allow_sponsor == '0' && 'No'}\r\n                                                        </td> */}\r\n                                                        <td>\r\n                                                            <i style={{ cursor: 'pointer' }}\r\n                                                                onClick={() => { this.props.history.push({ pathname: '/marketing/marketingleaderboard_setprize/' + item.prize_id }) }}\r\n                                                                className=\"icon-edit ml-4\"></i>\r\n                                                            <div className=\"activate-module\">\r\n                                                                <label className=\"global-switch\">\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        checked={item.status == \"1\" ? false : true}\r\n                                                                        onChange={() => this.changeStatusToggle(item, idx)}\r\n                                                                    />\r\n                                                                    <span className=\"switch-slide round\">\r\n                                                                        <span className={`switch-on ${item.status == \"1\" ? 'active' : ''}`}>On</span>\r\n                                                                        <span className={`switch-off ${item.status == \"0\" ? 'active' : ''}`}>Off</span>\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <span\r\n                                                                className=\"btn-v-dtl\"\r\n                                                                onClick={() => { this.props.history.push({pathname:'/marketing/marketingleaderboard-details/' + item.prize_id})}}\r\n\r\n                                                            >View Details</span>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        })\r\n                                        :\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td colSpan=\"8\">\r\n                                                    {(Total == 0 && !ListPosting) ?\r\n                                                        <div className=\"no-records\">\r\n                                                            {NC.NO_RECORDS}</div>\r\n                                                        :\r\n                                                        <Loader />\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                }\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            {\r\n                                Total > 5 &&\r\n                                (<div className=\"custom-pagination float-right mt-5\">\r\n                                    <Pagination\r\n                                        activePage={CURRENT_PAGE}\r\n                                        itemsCountPerPage={ITEMS_PERPAGE}\r\n                                        totalItemsCount={Total}\r\n                                        pageRangeDisplayed={5}\r\n                                        onChange={e => this.handlePageChange(e)}\r\n                                    />\r\n                                </div>)\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                    {\r\n\r\n                    }\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default LeaderboardList\r\n"],"sourceRoot":""}