{"version":3,"sources":["components/ActionRequestModal/ActionRequestModal.jsx","views/SelfExclude/SelfExclude.jsx"],"names":["ActionRequestModal","props","this","Message","ActionPopupOpen","Screen","posting","Fragment","isOpen","className","toggle","modalCallback","src","Images","ERROR_ICON","alt","onClick","disabled","modalReportActionCallback","modalUpdatePendingCallback","modalActioCallback","Component","SelfExclude","getUserList","state","PERPAGE","CURRENT_PAGE","isDescOrder","sortField","params","items_perpage","current_page","sort_order","sort_field","WSManager","Rest","NC","then","ResponseJson","response_code","setState","SelfExclusion","data","self_exclusion","_","isEmpty","tempSE","custom_data","cData","JSON","parse","isUndefined","max_limit","MaximumLimit","default_limit","DefaultLimit","UserList","result","Total","total","notify","show","catch","error","toggleActionPopup","user_id","idx","idxVal","UserID","setDefault","setDefPost","Response","message","handleInputChange","e","name","target","value","formValid","parseInt","SaveLimit","toggleSubActionPopup","SubMessage","SubActionPopupOpen","HF","allowSelfExclusion","history","push","sortfiled","Order","ActionCallback","SubmitProps","md","type","placeholder","onChange","sortByColumn","map","item","key","date","getUtcToLocal","modified_date","format","user_name","set_by","colSpan","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","handlePageChange"],"mappings":"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","file":"static/js/174.7cf48e97.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport Images from \"../images\";\r\nclass ActionRequestModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        let { Message, ActionPopupOpen, Screen, posting } = this.props\r\n        return (\r\n            <React.Fragment>\r\n                <Modal\r\n                    isOpen={ActionPopupOpen}\r\n                    className=\"modal-sm action-request\"\r\n                    toggle={() => this.props.modalCallback()}\r\n                >\r\n                    <ModalHeader>\r\n                        <img src={Images.ERROR_ICON} alt=\"\" />\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <span className=\"info-text\">{Message}</span>\r\n                    </ModalBody>\r\n                    <ModalFooter className=\"request-footer\">\r\n                        <Button className=\"btn-secondary-outline ripple no-btn\" onClick={this.props.modalCallback}>No</Button>\r\n                        <Button\r\n                            disabled={posting}\r\n                            className=\"btn-secondary-outline ripple\"\r\n                            onClick={() => Screen == 'Report' ? this.props.modalReportActionCallback()\r\n                                :\r\n                                Screen == 'Approve' ?\r\n                                    this.props.modalUpdatePendingCallback()\r\n                                    :\r\n                                    this.props.modalActioCallback()}>Yes</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default ActionRequestModal","import React, { Component, Fragment } from \"react\";\r\nimport { Input, Button, Modal, ModalHeader, ModalBody, ModalFooter, Row, Col, Table } from 'reactstrap';\r\nimport * as NC from \"../../helper/NetworkingConstants\";\r\nimport WSManager from \"../../helper/WSManager\";\r\nimport { notify } from 'react-notify-toast';\r\nimport Pagination from \"react-js-pagination\";\r\nimport _ from 'lodash';\r\nimport Moment from 'react-moment';\r\nimport ActionRequestModal from '../../components/ActionRequestModal/ActionRequestModal';\r\nimport HF from '../../helper/HelperFunction';\r\nclass SelfExclude extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            PERPAGE: NC.ITEMS_PERPAGE,\r\n            // PERPAGE: 10,\r\n            CURRENT_PAGE: 1,\r\n            DefaultLimit: '',\r\n            MaximumLimit: '',\r\n            UserList: [],\r\n            SelfExclusion: [],\r\n            formValid: true,\r\n            sortField: 'user_name',\r\n            isDescOrder: 'true',\r\n            ActionPopupOpen: false,\r\n            SubActionPopupOpen: false,\r\n            setDefPost : false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        if (HF.allowSelfExclusion() != '1') {\r\n            notify.show(NC.MODULE_NOT_ENABLE, 'error', 5000)\r\n            this.props.history.push('/dashboard')\r\n        }\r\n        this.getUserList();\r\n    }\r\n\r\n    sortByColumn(sortfiled, isDescOrder) {\r\n        let Order = isDescOrder ? false : true\r\n        this.setState({\r\n            sortField: sortfiled,\r\n            isDescOrder: Order,\r\n            CURRENT_PAGE: 1,\r\n\r\n        }, this.getUserList)\r\n    }\r\n\r\n    getUserList = () => {\r\n        const { PERPAGE, CURRENT_PAGE, isDescOrder, sortField } = this.state\r\n        let params = {\r\n            items_perpage: PERPAGE,\r\n            current_page: CURRENT_PAGE,\r\n            sort_order: isDescOrder ? 'DESC' : 'ASC',\r\n            sort_field: sortField,\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.SELF_EXCLUSION, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n\r\n                if (CURRENT_PAGE == 1) {\r\n                    this.setState({\r\n                        SelfExclusion: ResponseJson.data ? ResponseJson.data.self_exclusion : []\r\n                    }, () => {\r\n                        if (!_.isEmpty(this.state.SelfExclusion)) {\r\n                            let tempSE = this.state.SelfExclusion\r\n                            if (tempSE[0].custom_data) {\r\n                                let cData = JSON.parse(tempSE[0].custom_data)\r\n                                if (!_.isUndefined(cData.max_limit)) {\r\n                                    this.setState({ MaximumLimit: cData.max_limit })\r\n                                }\r\n                                if (!_.isUndefined(cData.default_limit)) {\r\n                                    this.setState({ DefaultLimit: cData.default_limit })\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                this.setState({\r\n                    UserList: ResponseJson.data ? ResponseJson.data.result : [],\r\n                    Total: ResponseJson.data.total\r\n                })\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, \"error\", 3000)\r\n        })\r\n    }\r\n\r\n    handlePageChange(current_page) {\r\n        if (current_page !== this.state.CURRENT_PAGE) {\r\n            this.setState({\r\n                CURRENT_PAGE: current_page\r\n            }, () => {\r\n                this.getUserList();\r\n            });\r\n        }\r\n    }\r\n\r\n    //function to toggle action popup\r\n    toggleActionPopup = (user_id, idx) => {\r\n        this.setState({\r\n            Message: NC.MSG_SET_TO_DEF,\r\n            idxVal: idx,\r\n            UserID: user_id,\r\n            ActionPopupOpen: !this.state.ActionPopupOpen\r\n        })\r\n    }\r\n\r\n    setDefault = () => {\r\n        this.setState({ setDefPost: true })\r\n        let { UserID, idxVal } = this.state\r\n        let params = {\r\n            user_id: UserID\r\n        }\r\n        WSManager.Rest(NC.baseURL + NC.SET_DEFAULT_SELF_EXCLUSION, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                this.setState({ setDefPost: false })\r\n                this.toggleActionPopup(UserID, idxVal)\r\n                this.getUserList();\r\n                notify.show(Response.message, 'success', 5000)\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({ [name]: value, formValid: false }, () => {\r\n\r\n            if (_.isEmpty(this.state.DefaultLimit)) {\r\n                let msg = 'Default limit can not be empty.'\r\n                notify.show(msg, 'error', 3000)\r\n                this.setState({ formValid: true })\r\n                return false\r\n            }\r\n\r\n            if (_.isEmpty(this.state.MaximumLimit)) {\r\n                let msg = 'Maximum limit can not be empty.'\r\n                notify.show(msg, 'error', 3000)\r\n                this.setState({ formValid: true })\r\n                return false\r\n            }\r\n\r\n            if (parseInt(this.state.MaximumLimit) < parseInt(this.state.DefaultLimit)) {\r\n                let msg = 'Maximum limit should be greater than equal to default limit.'\r\n                notify.show(msg, 'error', 3000)\r\n                this.setState({ formValid: true })\r\n                return false\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    SaveLimit = () => {\r\n        this.setState({ formValid: true })\r\n        let { DefaultLimit, MaximumLimit } = this.state\r\n\r\n        let params = {\r\n            \"default_limit\": DefaultLimit,\r\n            \"max_limit\": MaximumLimit,\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.UPDATE_SELF_EXCLUSION_LIMIT, params).then(Response => {\r\n            if (Response.response_code == NC.successCode) {\r\n                notify.show(Response.message, 'success', 5000)\r\n                this.toggleSubActionPopup()\r\n            } else {\r\n                notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    //function to toggle action popup\r\n    toggleSubActionPopup = () => {\r\n        this.setState({\r\n            SubMessage: NC.MSG_SUBMIT_LIMIT,\r\n            SubActionPopupOpen: !this.state.SubActionPopupOpen\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { UserList, DefaultLimit, MaximumLimit, CURRENT_PAGE, PERPAGE, Total, ActionPopupOpen, Message, formValid, isDescOrder, sortField, SubMessage, SubActionPopupOpen, setDefPost } = this.state\r\n        const ActionCallback = {\r\n            Message: Message,\r\n            modalCallback: this.toggleActionPopup,\r\n            ActionPopupOpen: ActionPopupOpen,\r\n            modalActioCallback: this.setDefault,\r\n            posting: setDefPost\r\n        }\r\n\r\n        const SubmitProps = {\r\n            Message: SubMessage,\r\n            modalCallback: this.toggleSubActionPopup,\r\n            ActionPopupOpen: SubActionPopupOpen,\r\n            modalActioCallback: this.SaveLimit,\r\n            posting: formValid\r\n        }\r\n        return (\r\n            <div className=\"self-exclusion animated fadeIn\">\r\n                <ActionRequestModal {...ActionCallback} />\r\n                <ActionRequestModal {...SubmitProps} />\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <h1 className=\"h1-class\">Self Exclusion</h1>\r\n                        <div className=\"se-sub-title\">Selecting the loosing limit will be applicable to all the fantasy player. The new limit set will take immidiate effect. </div>\r\n                    </Col>\r\n                </Row>\r\n                <div className=\"se-limit-box\">\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <div className=\"se-input-div\">\r\n                                <label className=\"se-label\">Default Limit</label>\r\n                                <div className=\"se-input-box\">\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        placeholder=\"500\"\r\n                                        name='DefaultLimit'\r\n                                        value={DefaultLimit}\r\n                                        onChange={(e) => this.handleInputChange(e)}\r\n                                    />\r\n                                    <span>(This is the limit which is already set for the user, The Default limit is {DefaultLimit})</span>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <label className=\"se-label\">Maximum Limit</label>\r\n                            <div className=\"se-input-box\">\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    placeholder=\"1000\"\r\n                                    name='MaximumLimit'\r\n                                    value={MaximumLimit}\r\n                                    onChange={(e) => this.handleInputChange(e)}\r\n                                />\r\n                                <span>(This is the max limit that user can set on their own without approval)</span>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"text-center mt-5\">\r\n                        <Col md={12}>\r\n                            <Button\r\n                                disabled={formValid}\r\n                                className=\"btn-secondary mr-3\"\r\n                                // onClick={() => this.SaveLimit()}\r\n                                onClick={() => this.toggleSubActionPopup()}\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <Row className=\"mt-5\">\r\n                    <Col md={12}>\r\n                        <h4>User List</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12} className=\"table-responsive common-table\">\r\n                        <Table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th\r\n                                        className=\"left-th text-center\"\r\n                                        onClick={() => this.sortByColumn('modified_date', isDescOrder)}\r\n                                    >\r\n                                        Updated Date\r\n                                        <div className={`d-inline-block ${(sortField === 'modified_date' && isDescOrder) ? '' : 'rotate-icon'}`}>\r\n                                            <i className=\"icon-Shape ml-1\"></i>\r\n                                        </div>\r\n                                    </th>\r\n                                    <th\r\n                                        onClick={() => this.sortByColumn('user_name', isDescOrder)}>\r\n                                        User Name\r\n                                             <div className={`d-inline-block ${(sortField === 'user_name' && isDescOrder) ? '' : 'rotate-icon'}`}>\r\n                                            <i className=\"icon-Shape ml-1\"></i>\r\n                                        </div>\r\n                                    </th>\r\n                                    <th\r\n                                        onClick={() => this.sortByColumn('max_limit', isDescOrder)}>\r\n                                        New limit\r\n                                             <div className={`d-inline-block ${(sortField === 'max_limit' && isDescOrder) ? '' : 'rotate-icon'}`}>\r\n                                            <i className=\"icon-Shape ml-1\"></i>\r\n                                        </div>\r\n                                    </th>\r\n                                    <th>Changed By</th>\r\n                                    <th className=\"right-th\">Default Limit</th>\r\n                                </tr>\r\n                            </thead>\r\n                            {\r\n                                Total > 0 ?\r\n                                    _.map(UserList, (item, idx) => {\r\n                                        return (\r\n                                            <tbody key={idx}>\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        <Moment\r\n                                                            date={WSManager.getUtcToLocal(item.modified_date)}\r\n                                                            format=\"D-MMM-YYYY hh:mm A\" />\r\n                                                    </td>\r\n                                                    <td>{item.user_name}</td>\r\n                                                    <td>{item.max_limit}</td>\r\n                                                    <td>\r\n                                                        {item.set_by == '1' && 'Set by user'}\r\n                                                        {item.set_by == '2' && 'Set by admin'}\r\n                                                    </td>                                                    \r\n                                                    <td>\r\n                                                        <a\r\n                                                            onClick={() => this.toggleActionPopup(item.user_id, 1)}\r\n                                                            className=\"se-set-default\">Set to default</a>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td colSpan=\"12\">\r\n                                                <div className=\"no-records\">\r\n                                                    {NC.NO_RECORDS}\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                            }\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    Total > PERPAGE\r\n                    && (\r\n                        <div className=\"custom-pagination lobby-paging\">\r\n                            <Pagination\r\n                                activePage={CURRENT_PAGE}\r\n                                itemsCountPerPage={PERPAGE}\r\n                                totalItemsCount={Total}\r\n                                pageRangeDisplayed={5}\r\n                                onChange={e => this.handlePageChange(e)}\r\n                            />\r\n                        </div>\r\n                    )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SelfExclude\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}