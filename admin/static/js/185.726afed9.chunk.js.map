{"version":3,"sources":["views/UserManagement/Profile/Coins/Coins.jsx","views/Coins/CoinsDashboard.jsx"],"names":["Coins","props","coinDistributedGraph","state","FromDate","ToDate","params","from_date","moment","format","to_date","_","isUndefined","user_unique_id","WSManager","Rest","NC","then","ResponseJson","response_code","setState","xAxisSeries","data","series","xAxisCategories","categories","totalCoinsDistributed","total_coins_distributed","closingBalance","closing_balance","CoinDistributedGraph","title","text","plotOptions","marker","symbol","xAxis","min","tickWidth","crosshair","lineWidth","gridLineWidth","lineColor","yAxis","labels","opposite","allowPointSelect","credits","enabled","legend","layout","align","verticalAlign","x","y","useHTML","symbolPadding","symbolWidth","symbolHeight","symbolRadius","labelFormatter","this","color","name","catch","error","notify","show","coinRedeemedGraph","URL","redeemedSeries","series_data","totalCoinRedeem","total_coin_redeem","CoinRedeemedGraph","chart","type","pie","borderWidth","dataLabels","innerSize","cursor","style","fontSize","fontFamily","textAlign","lineHeight","connectorColor","connectorPadding","LineData","GraphHeaderTitle","handleDateFilter","date","dateType","HF","getFirstDateOfMonth","Date","Fragment","className","md","src","Images","REWARD_ICON","alt","getNumberWithCommas","FromDashboard","maxDate","showYearDropdown","selected","onChange","e","placeholderText","dateFormat","popperPlacement","minDate","onClick","history","push","highcharts","Highcharts","options","Component","withRouter","CoinsDashboard","EarnerProps","viewType","RedeemProps"],"mappings":"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","file":"static/js/185.726afed9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport Images from '../../../../components/images';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { withRouter } from 'react-router'\r\n\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport WSManager from '../../../../helper/WSManager';\r\nimport HF from '../../../../helper/HelperFunction';\r\nimport * as NC from '../../../../helper/NetworkingConstants';\r\nimport { notify } from 'react-notify-toast'\r\n\r\nimport _ from 'lodash';\r\nimport moment from \"moment\";\r\nclass Coins extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            FromDate: HF.getFirstDateOfMonth(),\r\n            ToDate: new Date(),\r\n            redeemedSeries: [],\r\n            xAxisCategories: [],\r\n            xAxisSeries: [],\r\n            totalCoinsDistributed: 0,\r\n            totalCoinRedeem: 0,\r\n            closingBalance: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.coinDistributedGraph()\r\n        this.coinRedeemedGraph()\r\n    }\r\n\r\n    //Api call for coin distribution graph\r\n    coinDistributedGraph = () => {\r\n        let { FromDate, ToDate } = this.state\r\n        let params = {\r\n            from_date: FromDate ? moment(FromDate).format(\"YYYY-MM-DD\") : '',\r\n            to_date: ToDate ? moment(ToDate).format(\"YYYY-MM-DD\") : '',\r\n        }\r\n        if (!_.isUndefined(this.props.user_unique_id)) {\r\n            params['user_unique_id'] = this.props.user_unique_id\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + NC.COIN_DISTRIBUTED_GRAPH, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                this.setState({\r\n                    xAxisSeries: ResponseJson.data.series,\r\n                    xAxisCategories: ResponseJson.data.categories,\r\n                    totalCoinsDistributed: ResponseJson.data.total_coins_distributed,\r\n                    closingBalance: ResponseJson.data.closing_balance,\r\n                }, () => {\r\n                    //Start Coin Distributed Graph                    \r\n                    this.setState({\r\n                        CoinDistributedGraph: {\r\n                            title: {\r\n                                text: ''\r\n                            },\r\n                            plotOptions: {\r\n                                series: {\r\n                                    marker: { symbol: 'circle' }\r\n                                }\r\n                            },\r\n                            xAxis: {\r\n                                categories: this.state.xAxisCategories,\r\n                                min: 1,\r\n                                tickWidth: 0,\r\n                                crosshair: false,\r\n                                lineWidth: 2,\r\n                                gridLineWidth: 0,\r\n                                title: '',\r\n                                lineColor: '#D8D8D8',\r\n                                title: {\r\n                                    text: ''\r\n                                }\r\n                            },\r\n                            yAxis: [\r\n                                {\r\n                                    title: {\r\n                                        text: 'Distribution'\r\n                                    },\r\n                                    min: 1,\r\n                                    tickWidth: 0,\r\n                                    crosshair: false,\r\n                                    lineWidth: 1,\r\n                                    gridLineWidth: 1,\r\n                                    lineColor: '#D8D8D8'\r\n                                },\r\n                                {\r\n                                    title: {\r\n                                        text: 'Coins'\r\n                                    },\r\n                                    labels: {\r\n                                        format: '50'\r\n                                    },\r\n                                    opposite: true,\r\n                                    min: 1,\r\n                                    tickWidth: 0,\r\n                                    crosshair: false,\r\n                                    lineWidth: 1,\r\n                                    gridLineWidth: 1,\r\n                                    lineColor: '#D8D8D8'\r\n                                }],\r\n                            allowPointSelect: true,\r\n                            series: this.state.xAxisSeries,\r\n                            credits: {\r\n                                enabled: false,\r\n                            },\r\n                            legend: {\r\n                                enabled: true,\r\n                                layout: 'horizontal',\r\n                                align: 'right',\r\n                                verticalAlign: 'top',\r\n                                x: 0,\r\n                                y: 0,\r\n                                useHTML: true,\r\n                                symbolPadding: 10,\r\n                                symbolWidth: 0,\r\n                                symbolHeight: 0,\r\n                                symbolRadius: 0,\r\n                                labelFormatter: function () {\r\n                                    return '<span style=\"background-color:' + this.color + '\" class=\"dis-indicator\"></span>' + this.name;\r\n                                }\r\n                            },\r\n                        }\r\n                    })\r\n                    //End Coin Distributed Graph\r\n                })\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    //Api call for coin redeemed graph\r\n    coinRedeemedGraph = () => {\r\n        let { FromDate, ToDate } = this.state\r\n        let params = {\r\n            from_date: FromDate ? moment(FromDate).format(\"YYYY-MM-DD\") : '',\r\n            to_date: ToDate ? moment(ToDate).format(\"YYYY-MM-DD\") : '',\r\n        }\r\n\r\n        let URL = NC.COIN_REDEEM_GRAPH\r\n        if (!_.isUndefined(this.props.user_unique_id)) {\r\n            params['user_unique_id'] = this.props.user_unique_id\r\n            URL = NC.USER_COIN_REDEEM_GRAPH\r\n        }\r\n\r\n        WSManager.Rest(NC.baseURL + URL, params).then(ResponseJson => {\r\n            if (ResponseJson.response_code == NC.successCode) {\r\n                this.setState({\r\n                    redeemedSeries: ResponseJson.data.series_data,\r\n                    totalCoinRedeem: ResponseJson.data.total_coin_redeem,\r\n                }, () => {\r\n                    //Start Coin Redeemed Graph\r\n                    this.setState({\r\n                        CoinRedeemedGraph: {\r\n                            title: {\r\n                                text: ''\r\n                            },\r\n                            chart: {\r\n                                type: 'pie'\r\n                            },\r\n                            plotOptions: {\r\n                                pie: {\r\n                                    borderWidth: 7,\r\n                                    dataLabels: false,\r\n                                    innerSize: '74%',\r\n                                    allowPointSelect: true,\r\n                                    cursor: 'pointer',\r\n                                    dataLabels: {\r\n                                        enabled: true,\r\n                                        color: '#9398A0',\r\n                                        useHTML: true,\r\n                                        style: {\r\n                                            fontSize: '14px',\r\n                                            fontFamily: \"MuliBold\",\r\n                                            textAlign: 'right',\r\n                                            lineHeight: '18px'\r\n                                        },\r\n                                        format: '<div><div class=\"clearfix slice-color\"><span style=\"background-color: {point.color}\" class=\"indicator\"></span><span>{point.name}</span></div><div class=\"total-coins\">{point.total_coins} Coins</div><div>{point.coins_user} Users</div><div class=\"graph-percent\">{point.percentage:.1f} %</div></div>',\r\n\r\n                                        connectorColor: 'transparent',\r\n                                        connectorPadding: 10,\r\n\r\n                                        y: -20,\r\n                                        x: 0,\r\n                                    },\r\n                                    stacking: 'normal'\r\n                                }\r\n                            },\r\n                            series: [{\r\n                                data: this.state.redeemedSeries\r\n                            }],\r\n                            LineData: [],\r\n                            GraphHeaderTitle: [],\r\n                            credits: {\r\n                                enabled: false,\r\n                            },\r\n                            legend: {\r\n                                enabled: false\r\n                            }\r\n                        }\r\n                    })\r\n                    //End Coin Redeemed Graph\r\n                })\r\n            }\r\n        }).catch(error => {\r\n            notify.show(NC.SYSTEM_ERROR, 'error', 5000)\r\n        })\r\n    }\r\n\r\n    handleDateFilter = (date, dateType) => {\r\n        this.setState({ [dateType]: date }, () => {\r\n            if (this.state.FromDate || this.state.ToDate) {\r\n                this.coinDistributedGraph()\r\n                this.coinRedeemedGraph()\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { totalCoinRedeem, FromDate, ToDate, CoinDistributedGraph, CoinRedeemedGraph, totalCoinsDistributed, closingBalance } = this.state\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"coins-dashboard mb-30\">\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <div className=\"float-left\">\r\n                                <label className=\"closing-balance\">Closing Balance</label>\r\n                                <div className=\"balance-count\">\r\n                                    <div className=\"img-wrap\">\r\n                                        <img className=\"coin-img\" src={Images.REWARD_ICON} alt=\"\" />\r\n                                    </div>\r\n                                    <span>{HF.getNumberWithCommas(closingBalance)}</span>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            {\r\n                                !this.props.FromDashboard &&\r\n                                (<div className=\"float-right\">\r\n                                    <div className=\"member-box float-left\">\r\n                                        <label className=\"filter-label\">Date</label>\r\n                                        <Row>\r\n                                            <Col md={6} className=\"pr-0\">\r\n                                                <DatePicker\r\n                                                    maxDate={ToDate}\r\n                                                    className=\"filter-date\"\r\n                                                    showYearDropdown='true'\r\n                                                    selected={FromDate}\r\n                                                    onChange={e => this.handleDateFilter(e, \"FromDate\")}\r\n                                                    placeholderText=\"From\"\r\n                                                    dateFormat='dd/MM/yyyy'\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md={6} className=\"pl-2\">\r\n                                                <DatePicker\r\n                                                    popperPlacement=\"top-end\"\r\n                                                    minDate={FromDate}\r\n                                                    maxDate={new Date()}\r\n                                                    className=\"filter-date\"\r\n                                                    showYearDropdown='true'\r\n                                                    selected={ToDate}\r\n                                                    onChange={e => this.handleDateFilter(e, \"ToDate\")}\r\n                                                    placeholderText=\"To\"\r\n                                                    dateFormat='dd/MM/yyyy'\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                </div>)\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <div className=\"graph-box\">\r\n                                <div className=\"distributed-box\">\r\n                                    <div className=\"title-box\">\r\n                                        <Row className=\"total-info-box\">\r\n                                            <Col md={4}>\r\n                                                <span onClick={() => this.props.history.push('/coins/coins-distributed')} className=\"distributed-count\">\r\n                                                    {HF.getNumberWithCommas(totalCoinsDistributed)}\r\n                                                </span>\r\n                                                <div className=\"coins-distributed\">Total Coins Distributed</div>\r\n                                            </Col>\r\n                                            <Col md={8} className=\"align-right\">\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                    <div className=\"graph-p-box\">\r\n                                        <HighchartsReact\r\n                                            highcharts={Highcharts}\r\n                                            options={CoinDistributedGraph}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <div className=\"graph-box\">\r\n                                <div className=\"distributed-box\">\r\n                                    <div className=\"title-box\">\r\n                                        <Row className=\"total-info-box\">\r\n                                            <Col md={4}>\r\n                                                <span onClick={() => this.props.history.push('/coins/coin-redeem')} className=\"distributed-count\">\r\n                                                    {HF.getNumberWithCommas(totalCoinRedeem)}\r\n                                                </span>\r\n                                                <div className=\"coins-distributed\">Total Coins Redeemed</div>\r\n                                            </Col>\r\n                                            <Col md={8} className=\"align-right\">\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                    <div className=\"graph-p-box pie-chart\">\r\n                                        <HighchartsReact\r\n                                            highcharts={Highcharts}\r\n                                            options={CoinRedeemedGraph}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </React.Fragment >\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Coins)","import React, { Component } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport Coins from '../UserManagement/Profile/Coins/Coins';\r\nimport TopEarner from './TopEarner';\r\nclass CoinsDashboard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        let EarnerProps = {\r\n            FromDashboard: false,\r\n            viewType: 'topearner',\r\n        }\r\n        let RedeemProps = {\r\n            FromDashboard: false,\r\n            viewType: 'topredeemer',\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {!this.props.FromDashboard && (\r\n                <Row>\r\n                    <Col md={12} className=\"mt-4\">\r\n                            <h2 className=\"h2-cls float-left\">Coins Dashboard</h2>\r\n                        <div className=\"coins-setting-box float-right\">\r\n                                <i onClick={() => this.props.history.push('/coins/setting')} className=\"icon-setting pointer\"></i>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                )}  \r\n                <Coins FromDashboard={this.props.FromDashboard}/>\r\n                {!this.props.FromDashboard && (<Row>\r\n                    <Col md={6}>\r\n                        <TopEarner {...EarnerProps} />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <TopEarner {...RedeemProps} />\r\n                    </Col>\r\n                </Row>)}              \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default CoinsDashboard"],"sourceRoot":""}